diff --git a/CSSPlugin.js b/CSSPlugin.js
deleted file mode 100644
index 8e198baa383d229f3891b10cf1e552bc92a61323..0000000000000000000000000000000000000000
diff --git a/CSSRulePlugin.js b/CSSRulePlugin.js
deleted file mode 100644
index 4209a968431cd7a4d4facb43aa377b40e2290338..0000000000000000000000000000000000000000
diff --git a/CustomEase.js b/CustomEase.js
deleted file mode 100644
index 6bc29b8fb58e0196c4bcd200e13917fd45a5de92..0000000000000000000000000000000000000000
diff --git a/Draggable.js b/Draggable.js
deleted file mode 100644
index 67e598e0e4248957224a406d4a2b6798152bef1b..0000000000000000000000000000000000000000
diff --git a/EasePack.js b/EasePack.js
deleted file mode 100644
index 157254518241e45518dc481dcd64f9d408695d0f..0000000000000000000000000000000000000000
diff --git a/EaselPlugin.js b/EaselPlugin.js
deleted file mode 100644
index 5b64de0e1cb73737b11b4aa3a5c438b5b4644e14..0000000000000000000000000000000000000000
diff --git a/Flip.js b/Flip.js
deleted file mode 100644
index 712188698ed91ed84df2e4300b2dc61e3890b2bc..0000000000000000000000000000000000000000
diff --git a/MotionPathPlugin.js b/MotionPathPlugin.js
deleted file mode 100644
index f592e20d057e8ff890807a78353f38135a5afae1..0000000000000000000000000000000000000000
diff --git a/Observer.js b/Observer.js
deleted file mode 100644
index 9dd323e412afdf758085008307bb3419d75ffd11..0000000000000000000000000000000000000000
diff --git a/PixiPlugin.js b/PixiPlugin.js
deleted file mode 100644
index 5a8300c9163fbb3bfc7f17697eb72411e803f37f..0000000000000000000000000000000000000000
diff --git a/SECURITY.md b/SECURITY.md
deleted file mode 100644
index 147c41b4ab788a07d5ec71506d1ac489a65e8776..0000000000000000000000000000000000000000
diff --git a/ScrollToPlugin.js b/ScrollToPlugin.js
deleted file mode 100644
index fde281f0c66b052d4ac100d0ad85470f144b048f..0000000000000000000000000000000000000000
diff --git a/ScrollTrigger.js b/ScrollTrigger.js
deleted file mode 100644
index 6b061adb716a5f275b746e07495bd7f6bde93186..0000000000000000000000000000000000000000
diff --git a/TextPlugin.js b/TextPlugin.js
deleted file mode 100644
index b12a33eb5883e6acb446dcabc1947406e4966bc9..0000000000000000000000000000000000000000
diff --git a/all.js b/all.js
deleted file mode 100644
index 137ac7762245c630dc78eee7caa2a48b07b2d9c5..0000000000000000000000000000000000000000
diff --git a/dist/CSSPlugin.cjs b/dist/CSSPlugin.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..bbf51b39de079eb7e9a70ebbe366d6873fd1b7ec
--- /dev/null
+++ b/dist/CSSPlugin.cjs
@@ -0,0 +1,1165 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+const gsapCore = require('./gsap-core.cjs');
+
+/*!
+ * CSSPlugin 3.12.5
+ * https://gsap.com
+ *
+ * Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let _win, _doc, _docElement, _pluginInitted, _tempDiv, _recentSetterPlugin, _reverting,
+	_windowExists = () => typeof(window) !== "undefined",
+	_transformProps = {},
+	_RAD2DEG = 180 / Math.PI,
+	_DEG2RAD = Math.PI / 180,
+	_atan2 = Math.atan2,
+	_bigNum = 1e8,
+	_capsExp = /([A-Z])/g,
+	_horizontalExp = /(left|right|width|margin|padding|x)/i,
+	_complexExp = /[\s,\(]\S/,
+	_propertyAliases = {autoAlpha:"opacity,visibility", scale:"scaleX,scaleY", alpha:"opacity"},
+	_renderCSSProp = (ratio, data) => data.set(data.t, data.p, (Math.round((data.s + data.c * ratio) * 10000) / 10000) + data.u, data),
+	_renderPropWithEnd = (ratio, data) => data.set(data.t, data.p, ratio === 1 ? data.e : (Math.round((data.s + data.c * ratio) * 10000) / 10000) + data.u, data),
+	_renderCSSPropWithBeginning = (ratio, data) => data.set(data.t, data.p, ratio ? (Math.round((data.s + data.c * ratio) * 10000) / 10000) + data.u : data.b, data), //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)
+	_renderRoundedCSSProp = (ratio, data) => {
+		let value = data.s + data.c * ratio;
+		data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
+	},
+	_renderNonTweeningValue = (ratio, data) => data.set(data.t, data.p, ratio ? data.e : data.b, data),
+	_renderNonTweeningValueOnlyAtEnd = (ratio, data) => data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data),
+	_setterCSSStyle = (target, property, value) => target.style[property] = value,
+	_setterCSSProp = (target, property, value) => target.style.setProperty(property, value),
+	_setterTransform = (target, property, value) => target._gsap[property] = value,
+	_setterScale = (target, property, value) => target._gsap.scaleX = target._gsap.scaleY = value,
+	_setterScaleWithRender = (target, property, value, data, ratio) => {
+		let cache = target._gsap;
+		cache.scaleX = cache.scaleY = value;
+		cache.renderTransform(ratio, cache);
+	},
+	_setterTransformWithRender = (target, property, value, data, ratio) => {
+		let cache = target._gsap;
+		cache[property] = value;
+		cache.renderTransform(ratio, cache);
+	},
+	_transformProp = "transform",
+	_transformOriginProp = _transformProp + "Origin",
+	_saveStyle = function(property, isNotCSS) {
+		let target = this.target,
+			style = target.style,
+			cache = target._gsap;
+		if ((property in _transformProps) && style) {
+			this.tfm = this.tfm || {};
+			if (property !== "transform") {
+				property = _propertyAliases[property] || property;
+				~property.indexOf(",") ? property.split(",").forEach(a => this.tfm[a] = _get(target, a)) : (this.tfm[property] = cache.x ? cache[property] : _get(target, property)); // note: scale would map to "scaleX,scaleY", thus we loop and apply them both.
+				property === _transformOriginProp && (this.tfm.zOrigin = cache.zOrigin);
+			} else {
+				return _propertyAliases.transform.split(",").forEach(p => _saveStyle.call(this, p, isNotCSS));
+			}
+			if (this.props.indexOf(_transformProp) >= 0) { return; }
+			if (cache.svg) {
+				this.svgo = target.getAttribute("data-svg-origin");
+				this.props.push(_transformOriginProp, isNotCSS, "");
+			}
+			property = _transformProp;
+		}
+		(style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);
+	},
+	_removeIndependentTransforms = style => {
+		if (style.translate) {
+			style.removeProperty("translate");
+			style.removeProperty("scale");
+			style.removeProperty("rotate");
+		}
+	},
+	_revertStyle = function() {
+		let props = this.props,
+			target = this.target,
+			style = target.style,
+			cache = target._gsap,
+			i, p;
+		for (i = 0; i < props.length; i+=3) { // stored like this: property, isNotCSS, value
+			props[i+1] ? target[props[i]] = props[i+2] : props[i+2] ? (style[props[i]] = props[i+2]) : style.removeProperty(props[i].substr(0,2) === "--" ? props[i] : props[i].replace(_capsExp, "-$1").toLowerCase());
+		}
+		if (this.tfm) {
+			for (p in this.tfm) {
+				cache[p] = this.tfm[p];
+			}
+			if (cache.svg) {
+				cache.renderTransform();
+				target.setAttribute("data-svg-origin", this.svgo || "");
+			}
+			i = _reverting();
+			if ((!i || !i.isStart) && !style[_transformProp]) {
+				_removeIndependentTransforms(style);
+				if (cache.zOrigin && style[_transformOriginProp]) {
+					style[_transformOriginProp] += " " + cache.zOrigin + "px"; // since we're uncaching, we must put the zOrigin back into the transformOrigin so that we can pull it out accurately when we parse again. Otherwise, we'd lose the z portion of the origin since we extract it to protect from Safari bugs.
+					cache.zOrigin = 0;
+					cache.renderTransform();
+				}
+				cache.uncache = 1; // if it's a startAt that's being reverted in the _initTween() of the core, we don't need to uncache transforms. This is purely a performance optimization.
+			}
+		}
+	},
+	_getStyleSaver = (target, properties) => {
+		let saver = {
+			target,
+			props: [],
+			revert: _revertStyle,
+			save: _saveStyle
+		};
+		target._gsap || gsapCore.gsap.core.getCache(target); // just make sure there's a _gsap cache defined because we read from it in _saveStyle() and it's more efficient to just check it here once.
+		properties && properties.split(",").forEach(p => saver.save(p));
+		return saver;
+	},
+	_supports3D,
+	_createElement = (type, ns) => {
+		let e = _doc.createElementNS ? _doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.
+		return e && e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://gsap.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
+	},
+	_getComputedProperty = (target, property, skipPrefixFallback) => {
+		let cs = getComputedStyle(target);
+		return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || (!skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1)) || ""; //css variables may not need caps swapped out for dashes and lowercase.
+	},
+	_prefixes = "O,Moz,ms,Ms,Webkit".split(","),
+	_checkPropPrefix = (property, element, preferPrefix) => {
+		let e = element || _tempDiv,
+			s = e.style,
+			i = 5;
+		if (property in s && !preferPrefix) {
+			return property;
+		}
+		property = property.charAt(0).toUpperCase() + property.substr(1);
+		while (i-- && !((_prefixes[i]+property) in s)) { }
+		return (i < 0) ? null : ((i === 3) ? "ms" : (i >= 0) ? _prefixes[i] : "") + property;
+	},
+	_initCore = () => {
+		if (_windowExists() && window.document) {
+			_win = window;
+			_doc = _win.document;
+			_docElement = _doc.documentElement;
+			_tempDiv = _createElement("div") || {style:{}};
+			_createElement("div");
+			_transformProp = _checkPropPrefix(_transformProp);
+			_transformOriginProp = _transformProp + "Origin";
+			_tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.
+			_supports3D = !!_checkPropPrefix("perspective");
+			_reverting = gsapCore.gsap.core.reverting;
+			_pluginInitted = 1;
+		}
+	},
+	_getBBoxHack = function(swapIfPossible) { //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
+		let svg = _createElement("svg", (this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns")) || "http://www.w3.org/2000/svg"),
+			oldParent = this.parentNode,
+			oldSibling = this.nextSibling,
+			oldCSS = this.style.cssText,
+			bbox;
+		_docElement.appendChild(svg);
+		svg.appendChild(this);
+		this.style.display = "block";
+		if (swapIfPossible) {
+			try {
+				bbox = this.getBBox();
+				this._gsapBBox = this.getBBox; //store the original
+				this.getBBox = _getBBoxHack;
+			} catch (e) { }
+		} else if (this._gsapBBox) {
+			bbox = this._gsapBBox();
+		}
+		if (oldParent) {
+			if (oldSibling) {
+				oldParent.insertBefore(this, oldSibling);
+			} else {
+				oldParent.appendChild(this);
+			}
+		}
+		_docElement.removeChild(svg);
+		this.style.cssText = oldCSS;
+		return bbox;
+	},
+	_getAttributeFallbacks = (target, attributesArray) => {
+		let i = attributesArray.length;
+		while (i--) {
+			if (target.hasAttribute(attributesArray[i])) {
+				return target.getAttribute(attributesArray[i]);
+			}
+		}
+	},
+	_getBBox = target => {
+		let bounds;
+		try {
+			bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
+		} catch (error) {
+			bounds = _getBBoxHack.call(target, true);
+		}
+		(bounds && (bounds.width || bounds.height)) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true));
+		//some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.
+		return (bounds && !bounds.width && !bounds.x && !bounds.y) ? {x: +_getAttributeFallbacks(target, ["x","cx","x1"]) || 0, y:+_getAttributeFallbacks(target, ["y","cy","y1"]) || 0, width:0, height:0} : bounds;
+	},
+	_isSVG = e => !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e)), //reports if the element is an SVG on which getBBox() actually works
+	_removeProperty = (target, property) => {
+		if (property) {
+			let style = target.style,
+				first2Chars;
+			if (property in _transformProps && property !== _transformOriginProp) {
+				property = _transformProp;
+			}
+			if (style.removeProperty) {
+				first2Chars = property.substr(0,2);
+				if (first2Chars === "ms" || property.substr(0,6) === "webkit") { //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
+					property = "-" + property;
+				}
+				style.removeProperty(first2Chars === "--" ? property : property.replace(_capsExp, "-$1").toLowerCase());
+			} else { //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
+				style.removeAttribute(property);
+			}
+		}
+	},
+	_addNonTweeningPT = (plugin, target, property, beginning, end, onlySetAtEnd) => {
+		let pt = new gsapCore.PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
+		plugin._pt = pt;
+		pt.b = beginning;
+		pt.e = end;
+		plugin._props.push(property);
+		return pt;
+	},
+	_nonConvertibleUnits = {deg:1, rad:1, turn:1},
+	_nonStandardLayouts = {grid:1, flex:1},
+	//takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.
+	_convertToUnit = (target, property, value, unit) => {
+		let curValue = parseFloat(value) || 0,
+			curUnit = (value + "").trim().substr((curValue + "").length) || "px", // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()
+			style = _tempDiv.style,
+			horizontal = _horizontalExp.test(property),
+			isRootSVG = target.tagName.toLowerCase() === "svg",
+			measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
+			amount = 100,
+			toPixels = unit === "px",
+			toPercent = unit === "%",
+			px, parent, cache, isSVG;
+		if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
+			return curValue;
+		}
+		(curUnit !== "px" && !toPixels) && (curValue = _convertToUnit(target, property, value, "px"));
+		isSVG = target.getCTM && _isSVG(target);
+		if ((toPercent || curUnit === "%") && (_transformProps[property] || ~property.indexOf("adius"))) {
+			px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];
+			return gsapCore._round(toPercent ? curValue / px * amount : curValue / 100 * px);
+		}
+		style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
+		parent = (~property.indexOf("adius") || (unit === "em" && target.appendChild && !isRootSVG)) ? target : target.parentNode;
+		if (isSVG) {
+			parent = (target.ownerSVGElement || {}).parentNode;
+		}
+		if (!parent || parent === _doc || !parent.appendChild) {
+			parent = _doc.body;
+		}
+		cache = parent._gsap;
+		if (cache && toPercent && cache.width && horizontal && cache.time === gsapCore._ticker.time && !cache.uncache) {
+			return gsapCore._round(curValue / cache.width * amount);
+		} else {
+			if (toPercent && (property === "height" || property === "width")) { // if we're dealing with width/height that's inside a container with padding and/or it's a flexbox/grid container, we must apply it to the target itself rather than the _tempDiv in order to ensure complete accuracy, factoring in the parent's padding.
+				let v = target.style[property];
+				target.style[property] = amount + unit;
+				px = target[measureProperty];
+				v ? (target.style[property] = v) : _removeProperty(target, property);
+			} else {
+				(toPercent || curUnit === "%") && !_nonStandardLayouts[_getComputedProperty(parent, "display")] && (style.position = _getComputedProperty(target, "position"));
+				(parent === target) && (style.position = "static"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.
+				parent.appendChild(_tempDiv);
+				px = _tempDiv[measureProperty];
+				parent.removeChild(_tempDiv);
+				style.position = "absolute";
+			}
+			if (horizontal && toPercent) {
+				cache = gsapCore._getCache(parent);
+				cache.time = gsapCore._ticker.time;
+				cache.width = parent[measureProperty];
+			}
+		}
+		return gsapCore._round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
+	},
+	_get = (target, property, unit, uncache) => {
+		let value;
+		_pluginInitted || _initCore();
+		if ((property in _propertyAliases) && property !== "transform") {
+			property = _propertyAliases[property];
+			if (~property.indexOf(",")) {
+				property = property.split(",")[0];
+			}
+		}
+		if (_transformProps[property] && property !== "transform") {
+			value = _parseTransform(target, uncache);
+			value = (property !== "transformOrigin") ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
+		} else {
+			value = target.style[property];
+			if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
+				value = (_specialProps[property] && _specialProps[property](target, property, unit)) || _getComputedProperty(target, property) || gsapCore._getProperty(target, property) || (property === "opacity" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius
+			}
+		}
+		return unit && !~(value + "").trim().indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
+
+	},
+	_tweenComplexCSSString = function(target, prop, start, end) { // note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
+		if (!start || start === "none") { // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://gsap.com/forums/topic/18310-clippath-doesnt-work-on-ios/
+			let p = _checkPropPrefix(prop, target, 1),
+				s = p && _getComputedProperty(target, p, 1);
+			if (s && s !== start) {
+				prop = p;
+				start = s;
+			} else if (prop === "borderColor") {
+				start = _getComputedProperty(target, "borderTopColor"); // Firefox bug: always reports "borderColor" as "", so we must fall back to borderTopColor. See https://gsap.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/
+			}
+		}
+		let pt = new gsapCore.PropTween(this._pt, target.style, prop, 0, 1, gsapCore._renderComplexString),
+			index = 0,
+			matchIndex = 0,
+			a, result,	startValues, startNum, color, startValue, endValue, endNum, chunk, endUnit, startUnit, endValues;
+		pt.b = start;
+		pt.e = end;
+		start += ""; // ensure values are strings
+		end += "";
+		if (end === "auto") {
+			startValue = target.style[prop];
+			target.style[prop] = end;
+			end = _getComputedProperty(target, prop) || end;
+			startValue ? (target.style[prop] = startValue) : _removeProperty(target, prop);
+		}
+		a = [start, end];
+		gsapCore._colorStringFilter(a); // pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().
+		start = a[0];
+		end = a[1];
+		startValues = start.match(gsapCore._numWithUnitExp) || [];
+		endValues = end.match(gsapCore._numWithUnitExp) || [];
+		if (endValues.length) {
+			while ((result = gsapCore._numWithUnitExp.exec(end))) {
+				endValue = result[0];
+				chunk = end.substring(index, result.index);
+				if (color) {
+					color = (color + 1) % 5;
+				} else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
+					color = 1;
+				}
+				if (endValue !== (startValue = startValues[matchIndex++] || "")) {
+					startNum = parseFloat(startValue) || 0;
+					startUnit = startValue.substr((startNum + "").length);
+					(endValue.charAt(1) === "=") && (endValue = gsapCore._parseRelative(startNum, endValue) + startUnit);
+					endNum = parseFloat(endValue);
+					endUnit = endValue.substr((endNum + "").length);
+					index = gsapCore._numWithUnitExp.lastIndex - endUnit.length;
+					if (!endUnit) { //if something like "perspective:300" is passed in and we must add a unit to the end
+						endUnit = endUnit || gsapCore._config.units[prop] || startUnit;
+						if (index === end.length) {
+							end += endUnit;
+							pt.e += endUnit;
+						}
+					}
+					if (startUnit !== endUnit) {
+						startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
+					}
+					// these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.
+					pt._pt = {
+						_next: pt._pt,
+						p: (chunk || (matchIndex === 1)) ? chunk : ",", //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
+						s: startNum,
+						c: endNum - startNum,
+						m: (color && color < 4) || prop === "zIndex" ? Math.round : 0
+					};
+				}
+			}
+			pt.c = (index < end.length) ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
+		} else {
+			pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
+		}
+		gsapCore._relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
+		this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.
+		return pt;
+	},
+	_keywordToPercent = {top:"0%", bottom:"100%", left:"0%", right:"100%", center:"50%"},
+	_convertKeywordsToPercentages = value => {
+		let split = value.split(" "),
+			x = split[0],
+			y = split[1] || "50%";
+		if (x === "top" || x === "bottom" || y === "left" || y === "right") { //the user provided them in the wrong order, so flip them
+			value = x;
+			x = y;
+			y = value;
+		}
+		split[0] = _keywordToPercent[x] || x;
+		split[1] = _keywordToPercent[y] || y;
+		return split.join(" ");
+	},
+	_renderClearProps = (ratio, data) => {
+		if (data.tween && data.tween._time === data.tween._dur) {
+			let target = data.t,
+				style = target.style,
+				props = data.u,
+				cache = target._gsap,
+				prop, clearTransforms, i;
+			if (props === "all" || props === true) {
+				style.cssText = "";
+				clearTransforms = 1;
+			} else {
+				props = props.split(",");
+				i = props.length;
+				while (--i > -1) {
+					prop = props[i];
+					if (_transformProps[prop]) {
+						clearTransforms = 1;
+						prop = (prop === "transformOrigin") ? _transformOriginProp : _transformProp;
+					}
+					_removeProperty(target, prop);
+				}
+			}
+			if (clearTransforms) {
+				_removeProperty(target, _transformProp);
+				if (cache) {
+					cache.svg && target.removeAttribute("transform");
+					_parseTransform(target, 1); // force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.
+					cache.uncache = 1;
+					_removeIndependentTransforms(style);
+				}
+			}
+		}
+	},
+	// note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.
+	_specialProps = {
+		clearProps(plugin, target, property, endValue, tween) {
+			if (tween.data !== "isFromStart") {
+				let pt = plugin._pt = new gsapCore.PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
+				pt.u = endValue;
+				pt.pr = -10;
+				pt.tween = tween;
+				plugin._props.push(property);
+				return 1;
+			}
+		}
+		/* className feature (about 0.4kb gzipped).
+		, className(plugin, target, property, endValue, tween) {
+			let _renderClassName = (ratio, data) => {
+					data.css.render(ratio, data.css);
+					if (!ratio || ratio === 1) {
+						let inline = data.rmv,
+							target = data.t,
+							p;
+						target.setAttribute("class", ratio ? data.e : data.b);
+						for (p in inline) {
+							_removeProperty(target, p);
+						}
+					}
+				},
+				_getAllStyles = (target) => {
+					let styles = {},
+						computed = getComputedStyle(target),
+						p;
+					for (p in computed) {
+						if (isNaN(p) && p !== "cssText" && p !== "length") {
+							styles[p] = computed[p];
+						}
+					}
+					_setDefaults(styles, _parseTransform(target, 1));
+					return styles;
+				},
+				startClassList = target.getAttribute("class"),
+				style = target.style,
+				cssText = style.cssText,
+				cache = target._gsap,
+				classPT = cache.classPT,
+				inlineToRemoveAtEnd = {},
+				data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
+				changingVars = {},
+				startVars = _getAllStyles(target),
+				transformRelated = /(transform|perspective)/i,
+				endVars, p;
+			if (classPT) {
+				classPT.r(1, classPT.d);
+				_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
+			}
+			target.setAttribute("class", data.e);
+			endVars = _getAllStyles(target, true);
+			target.setAttribute("class", startClassList);
+			for (p in endVars) {
+				if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
+					changingVars[p] = endVars[p];
+					if (!style[p] && style[p] !== "0") {
+						inlineToRemoveAtEnd[p] = 1;
+					}
+				}
+			}
+			cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
+			if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://gsap.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
+				style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
+			}
+			_parseTransform(target, true); //to clear the caching of transforms
+			data.css = new gsap.plugins.css();
+			data.css.init(target, changingVars, tween);
+			plugin._props.push(...data.css._props);
+			return 1;
+		}
+		*/
+	},
+
+
+
+
+
+	/*
+	 * --------------------------------------------------------------------------------------
+	 * TRANSFORMS
+	 * --------------------------------------------------------------------------------------
+	 */
+	_identity2DMatrix = [1,0,0,1,0,0],
+	_rotationalProperties = {},
+	_isNullTransform = value => (value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value),
+	_getComputedTransformMatrixAsArray = target => {
+		let matrixString = _getComputedProperty(target, _transformProp);
+		return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(gsapCore._numExp).map(gsapCore._round);
+	},
+	_getMatrix = (target, force2D) => {
+		let cache = target._gsap || gsapCore._getCache(target),
+			style = target.style,
+			matrix = _getComputedTransformMatrixAsArray(target),
+			parent, nextSibling, temp, addedToDOM;
+		if (cache.svg && target.getAttribute("transform")) {
+			temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.
+			matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
+			return (matrix.join(",") === "1,0,0,1,0,0") ? _identity2DMatrix : matrix;
+		} else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) { //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
+			//browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
+			temp = style.display;
+			style.display = "block";
+			parent = target.parentNode;
+			if (!parent || !target.offsetParent) { // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375
+				addedToDOM = 1; //flag
+				nextSibling = target.nextElementSibling;
+				_docElement.appendChild(target); //we must add it to the DOM in order to get values properly
+			}
+			matrix = _getComputedTransformMatrixAsArray(target);
+			temp ? (style.display = temp) : _removeProperty(target, "display");
+			if (addedToDOM) {
+				nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
+			}
+		}
+		return (force2D && matrix.length > 6) ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
+	},
+	_applySVGOrigin = (target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) => {
+		let cache = target._gsap,
+			matrix = matrixArray || _getMatrix(target, true),
+			xOriginOld = cache.xOrigin || 0,
+			yOriginOld = cache.yOrigin || 0,
+			xOffsetOld = cache.xOffset || 0,
+			yOffsetOld = cache.yOffset || 0,
+			[a, b, c, d, tx, ty] = matrix,
+			originSplit = origin.split(" "),
+			xOrigin = parseFloat(originSplit[0]) || 0,
+			yOrigin = parseFloat(originSplit[1]) || 0,
+			bounds, determinant, x, y;
+		if (!originIsAbsolute) {
+			bounds = _getBBox(target);
+			xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
+			yOrigin = bounds.y + (~((originSplit[1] || originSplit[0]).indexOf("%")) ? yOrigin / 100 * bounds.height : yOrigin);
+			// if (!("xOrigin" in cache) && (xOrigin || yOrigin)) { // added in 3.12.3, reverted in 3.12.4; requires more exploration
+			// 	xOrigin -= bounds.x;
+			// 	yOrigin -= bounds.y;
+			// }
+		} else if (matrix !== _identity2DMatrix && (determinant = (a * d - b * c))) { //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
+			x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + ((c * ty - d * tx) / determinant);
+			y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - ((a * ty - b * tx) / determinant);
+			xOrigin = x;
+			yOrigin = y;
+			// theory: we only had to do this for smoothing and it assumes that the previous one was not originIsAbsolute.
+		}
+		if (smooth || (smooth !== false && cache.smooth)) {
+			tx = xOrigin - xOriginOld;
+			ty = yOrigin - yOriginOld;
+			cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
+			cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
+		} else {
+			cache.xOffset = cache.yOffset = 0;
+		}
+		cache.xOrigin = xOrigin;
+		cache.yOrigin = yOrigin;
+		cache.smooth = !!smooth;
+		cache.origin = origin;
+		cache.originIsAbsolute = !!originIsAbsolute;
+		target.style[_transformOriginProp] = "0px 0px"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).
+		if (pluginToAddPropTweensTo) {
+			_addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);
+			_addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);
+			_addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);
+			_addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
+		}
+		target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
+	},
+	_parseTransform = (target, uncache) => {
+		let cache = target._gsap || new gsapCore.GSCache(target);
+		if ("x" in cache && !uncache && !cache.uncache) {
+			return cache;
+		}
+		let style = target.style,
+			invertedScaleX = cache.scaleX < 0,
+			px = "px",
+			deg = "deg",
+			cs = getComputedStyle(target),
+			origin = _getComputedProperty(target, _transformOriginProp) || "0",
+			x, y, z, scaleX, scaleY, rotation, rotationX, rotationY, skewX, skewY, perspective, xOrigin, yOrigin,
+			matrix, angle, cos, sin, a, b, c, d, a12, a22, t1, t2, t3, a13, a23, a33, a42, a43, a32;
+		x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
+		scaleX = scaleY = 1;
+		cache.svg = !!(target.getCTM && _isSVG(target));
+
+		if (cs.translate) { // accommodate independent transforms by combining them into normal ones.
+			if (cs.translate !== "none" || cs.scale !== "none" || cs.rotate !== "none") {
+				style[_transformProp] = (cs.translate !== "none" ? "translate3d(" + (cs.translate + " 0 0").split(" ").slice(0, 3).join(", ") + ") " : "") + (cs.rotate !== "none" ? "rotate(" + cs.rotate + ") " : "") + (cs.scale !== "none" ? "scale(" + cs.scale.split(" ").join(",") + ") " : "") + (cs[_transformProp] !== "none" ? cs[_transformProp] : "");
+			}
+			style.scale = style.rotate = style.translate = "none";
+		}
+
+		matrix = _getMatrix(target, cache.svg);
+		if (cache.svg) {
+			if (cache.uncache) { // if cache.uncache is true (and maybe if origin is 0,0), we need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + "px " + (cache.yOrigin - bbox.y) + "px". Previously we let the data-svg-origin stay instead, but when introducing revert(), it complicated things.
+				t2 = target.getBBox();
+				origin = (cache.xOrigin - t2.x) + "px " + (cache.yOrigin - t2.y) + "px";
+				t1 = "";
+			} else {
+				t1 = !uncache && target.getAttribute("data-svg-origin"); //  Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.
+			}
+			_applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
+		}
+		xOrigin = cache.xOrigin || 0;
+		yOrigin = cache.yOrigin || 0;
+		if (matrix !== _identity2DMatrix) {
+			a = matrix[0]; //a11
+			b = matrix[1]; //a21
+			c = matrix[2]; //a31
+			d = matrix[3]; //a41
+			x = a12 = matrix[4];
+			y = a22 = matrix[5];
+
+			//2D matrix
+			if (matrix.length === 6) {
+				scaleX = Math.sqrt(a * a + b * b);
+				scaleY = Math.sqrt(d * d + c * c);
+				rotation = (a || b) ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).
+				skewX = (c || d) ? _atan2(c, d) * _RAD2DEG + rotation : 0;
+				skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));
+				if (cache.svg) {
+					x -= xOrigin - (xOrigin * a + yOrigin * c);
+					y -= yOrigin - (xOrigin * b + yOrigin * d);
+				}
+
+			//3D matrix
+			} else {
+				a32 = matrix[6];
+				a42 = matrix[7];
+				a13 = matrix[8];
+				a23 = matrix[9];
+				a33 = matrix[10];
+				a43 = matrix[11];
+				x = matrix[12];
+				y = matrix[13];
+				z = matrix[14];
+
+				angle = _atan2(a32, a33);
+				rotationX = angle * _RAD2DEG;
+				//rotationX
+				if (angle) {
+					cos = Math.cos(-angle);
+					sin = Math.sin(-angle);
+					t1 = a12*cos+a13*sin;
+					t2 = a22*cos+a23*sin;
+					t3 = a32*cos+a33*sin;
+					a13 = a12*-sin+a13*cos;
+					a23 = a22*-sin+a23*cos;
+					a33 = a32*-sin+a33*cos;
+					a43 = a42*-sin+a43*cos;
+					a12 = t1;
+					a22 = t2;
+					a32 = t3;
+				}
+				//rotationY
+				angle = _atan2(-c, a33);
+				rotationY = angle * _RAD2DEG;
+				if (angle) {
+					cos = Math.cos(-angle);
+					sin = Math.sin(-angle);
+					t1 = a*cos-a13*sin;
+					t2 = b*cos-a23*sin;
+					t3 = c*cos-a33*sin;
+					a43 = d*sin+a43*cos;
+					a = t1;
+					b = t2;
+					c = t3;
+				}
+				//rotationZ
+				angle = _atan2(b, a);
+				rotation = angle * _RAD2DEG;
+				if (angle) {
+					cos = Math.cos(angle);
+					sin = Math.sin(angle);
+					t1 = a*cos+b*sin;
+					t2 = a12*cos+a22*sin;
+					b = b*cos-a*sin;
+					a22 = a22*cos-a12*sin;
+					a = t1;
+					a12 = t2;
+				}
+
+				if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) { //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
+					rotationX = rotation = 0;
+					rotationY = 180 - rotationY;
+				}
+				scaleX = gsapCore._round(Math.sqrt(a * a + b * b + c * c));
+				scaleY = gsapCore._round(Math.sqrt(a22 * a22 + a32 * a32));
+				angle = _atan2(a12, a22);
+				skewX = (Math.abs(angle) > 0.0002) ? angle * _RAD2DEG : 0;
+				perspective = a43 ? 1 / ((a43 < 0) ? -a43 : a43) : 0;
+			}
+
+			if (cache.svg) { //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).
+				t1 = target.getAttribute("transform");
+				cache.forceCSS = target.setAttribute("transform", "") || (!_isNullTransform(_getComputedProperty(target, _transformProp)));
+				t1 && target.setAttribute("transform", t1);
+			}
+		}
+
+		if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
+			if (invertedScaleX) {
+				scaleX *= -1;
+				skewX += (rotation <= 0) ? 180 : -180;
+				rotation += (rotation <= 0) ? 180 : -180;
+			} else {
+				scaleY *= -1;
+				skewX += (skewX <= 0) ? 180 : -180;
+			}
+		}
+		uncache = uncache || cache.uncache;
+		cache.x = x - ((cache.xPercent = x && ((!uncache && cache.xPercent) || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;
+		cache.y = y - ((cache.yPercent = y && ((!uncache && cache.yPercent) || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;
+		cache.z = z + px;
+		cache.scaleX = gsapCore._round(scaleX);
+		cache.scaleY = gsapCore._round(scaleY);
+		cache.rotation = gsapCore._round(rotation) + deg;
+		cache.rotationX = gsapCore._round(rotationX) + deg;
+		cache.rotationY = gsapCore._round(rotationY) + deg;
+		cache.skewX = skewX + deg;
+		cache.skewY = skewY + deg;
+		cache.transformPerspective = perspective + px;
+		if ((cache.zOrigin = parseFloat(origin.split(" ")[2]) || (!uncache && cache.zOrigin) || 0)) {
+			style[_transformOriginProp] = _firstTwoOnly(origin);
+		}
+		cache.xOffset = cache.yOffset = 0;
+		cache.force3D = gsapCore._config.force3D;
+		cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
+		cache.uncache = 0;
+		return cache;
+	},
+	_firstTwoOnly = value => (value = value.split(" "))[0] + " " + value[1], //for handling transformOrigin values, stripping out the 3rd dimension
+	_addPxTranslate = (target, start, value) => {
+		let unit = gsapCore.getUnit(start);
+		return gsapCore._round(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
+	},
+	_renderNon3DTransforms = (ratio, cache) => {
+		cache.z = "0px";
+		cache.rotationY = cache.rotationX = "0deg";
+		cache.force3D = 0;
+		_renderCSSTransforms(ratio, cache);
+	},
+	_zeroDeg = "0deg",
+	_zeroPx = "0px",
+	_endParenthesis = ") ",
+	_renderCSSTransforms = function(ratio, cache) {
+		let {xPercent, yPercent, x, y, z, rotation, rotationY, rotationX, skewX, skewY, scaleX, scaleY, transformPerspective, force3D, target, zOrigin} = cache || this,
+			transforms = "",
+			use3D = (force3D === "auto" && ratio && ratio !== 1) || force3D === true;
+
+		// Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)
+		if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
+			let angle = parseFloat(rotationY) * _DEG2RAD,
+				a13 = Math.sin(angle),
+				a33 = Math.cos(angle),
+				cos;
+			angle = parseFloat(rotationX) * _DEG2RAD;
+			cos = Math.cos(angle);
+			x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
+			y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
+			z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
+		}
+
+		if (transformPerspective !== _zeroPx) {
+			transforms += "perspective(" + transformPerspective + _endParenthesis;
+		}
+		if (xPercent || yPercent) {
+			transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
+		}
+		if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
+			transforms += (z !== _zeroPx || use3D) ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
+		}
+		if (rotation !== _zeroDeg) {
+			transforms += "rotate(" + rotation + _endParenthesis;
+		}
+		if (rotationY !== _zeroDeg) {
+			transforms += "rotateY(" + rotationY + _endParenthesis;
+		}
+		if (rotationX !== _zeroDeg) {
+			transforms += "rotateX(" + rotationX + _endParenthesis;
+		}
+		if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
+			transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
+		}
+		if (scaleX !== 1 || scaleY !== 1) {
+			transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
+		}
+		target.style[_transformProp] = transforms || "translate(0, 0)";
+	},
+	_renderSVGTransforms = function(ratio, cache) {
+		let {xPercent, yPercent, x, y, rotation, skewX, skewY, scaleX, scaleY, target, xOrigin, yOrigin, xOffset, yOffset, forceCSS} = cache || this,
+			tx = parseFloat(x),
+			ty = parseFloat(y),
+			a11, a21, a12, a22, temp;
+		rotation = parseFloat(rotation);
+		skewX = parseFloat(skewX);
+		skewY = parseFloat(skewY);
+		if (skewY) { //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
+			skewY = parseFloat(skewY);
+			skewX += skewY;
+			rotation += skewY;
+		}
+		if (rotation || skewX) {
+			rotation *= _DEG2RAD;
+			skewX *= _DEG2RAD;
+			a11 = Math.cos(rotation) * scaleX;
+			a21 = Math.sin(rotation) * scaleX;
+			a12 = Math.sin(rotation - skewX) * -scaleY;
+			a22 = Math.cos(rotation - skewX) * scaleY;
+			if (skewX) {
+				skewY *= _DEG2RAD;
+				temp = Math.tan(skewX - skewY);
+				temp = Math.sqrt(1 + temp * temp);
+				a12 *= temp;
+				a22 *= temp;
+				if (skewY) {
+					temp = Math.tan(skewY);
+					temp = Math.sqrt(1 + temp * temp);
+					a11 *= temp;
+					a21 *= temp;
+				}
+			}
+			a11 = gsapCore._round(a11);
+			a21 = gsapCore._round(a21);
+			a12 = gsapCore._round(a12);
+			a22 = gsapCore._round(a22);
+		} else {
+			a11 = scaleX;
+			a22 = scaleY;
+			a21 = a12 = 0;
+		}
+		if ((tx && !~(x + "").indexOf("px")) || (ty && !~(y + "").indexOf("px"))) {
+			tx = _convertToUnit(target, "x", x, "px");
+			ty = _convertToUnit(target, "y", y, "px");
+		}
+		if (xOrigin || yOrigin || xOffset || yOffset) {
+			tx = gsapCore._round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
+			ty = gsapCore._round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
+		}
+		if (xPercent || yPercent) {
+			//The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.
+			temp = target.getBBox();
+			tx = gsapCore._round(tx + xPercent / 100 * temp.width);
+			ty = gsapCore._round(ty + yPercent / 100 * temp.height);
+		}
+		temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
+		target.setAttribute("transform", temp);
+		forceCSS && (target.style[_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the transform attribute changes!)
+	},
+	_addRotationalPropTween = function(plugin, target, property, startNum, endValue) {
+		let cap = 360,
+			isString = gsapCore._isString(endValue),
+			endNum = parseFloat(endValue) * ((isString && ~endValue.indexOf("rad")) ? _RAD2DEG : 1),
+			change = endNum - startNum,
+			finalValue = (startNum + change) + "deg",
+			direction, pt;
+		if (isString) {
+			direction = endValue.split("_")[1];
+			if (direction === "short") {
+				change %= cap;
+				if (change !== change % (cap / 2)) {
+					change += (change < 0) ? cap : -cap;
+				}
+			}
+			if (direction === "cw" && change < 0) {
+				change = ((change + cap * _bigNum) % cap) - ~~(change / cap) * cap;
+			} else if (direction === "ccw" && change > 0) {
+				change = ((change - cap * _bigNum) % cap) - ~~(change / cap) * cap;
+			}
+		}
+		plugin._pt = pt = new gsapCore.PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
+		pt.e = finalValue;
+		pt.u = "deg";
+		plugin._props.push(property);
+		return pt;
+	},
+	_assign = (target, source) => { // Internet Explorer doesn't have Object.assign(), so we recreate it here.
+		for (let p in source) {
+			target[p] = source[p];
+		}
+		return target;
+	},
+	_addRawTransformPTs = (plugin, transforms, target) => { //for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"
+		let startCache = _assign({}, target._gsap),
+			exclude = "perspective,force3D,transformOrigin,svgOrigin",
+			style = target.style,
+			endCache, p, startValue, endValue, startNum, endNum, startUnit, endUnit;
+		if (startCache.svg) {
+			startValue = target.getAttribute("transform");
+			target.setAttribute("transform", "");
+			style[_transformProp] = transforms;
+			endCache = _parseTransform(target, 1);
+			_removeProperty(target, _transformProp);
+			target.setAttribute("transform", startValue);
+		} else {
+			startValue = getComputedStyle(target)[_transformProp];
+			style[_transformProp] = transforms;
+			endCache = _parseTransform(target, 1);
+			style[_transformProp] = startValue;
+		}
+		for (p in _transformProps) {
+			startValue = startCache[p];
+			endValue = endCache[p];
+			if (startValue !== endValue && exclude.indexOf(p) < 0) { //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
+				startUnit = gsapCore.getUnit(startValue);
+				endUnit = gsapCore.getUnit(endValue);
+				startNum = (startUnit !== endUnit) ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
+				endNum = parseFloat(endValue);
+				plugin._pt = new gsapCore.PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);
+				plugin._pt.u = endUnit || 0;
+				plugin._props.push(p);
+			}
+		}
+		_assign(endCache, startCache);
+	};
+
+// handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.
+gsapCore._forEachName("padding,margin,Width,Radius", (name, index) => {
+	let t = "Top",
+		r = "Right",
+		b = "Bottom",
+		l = "Left",
+		props = (index < 3 ? [t,r,b,l] : [t+l, t+r, b+r, b+l]).map(side => index < 2 ? name + side : "border" + side + name);
+	_specialProps[(index > 1 ? "border" + name : name)] = function(plugin, target, property, endValue, tween) {
+		let a, vars;
+		if (arguments.length < 4) { // getter, passed target, property, and unit (from _get())
+			a = props.map(prop => _get(plugin, prop, property));
+			vars = a.join(" ");
+			return vars.split(a[0]).length === 5 ? a[0] : vars;
+		}
+		a = (endValue + "").split(" ");
+		vars = {};
+		props.forEach((prop, i) => vars[prop] = a[i] = a[i] || a[(((i - 1) / 2) | 0)]);
+		plugin.init(target, vars, tween);
+	};
+});
+
+
+const CSSPlugin = {
+	name: "css",
+	register: _initCore,
+	targetTest(target) {
+		return target.style && target.nodeType;
+	},
+	init(target, vars, tween, index, targets) {
+		let props = this._props,
+			style = target.style,
+			startAt = tween.vars.startAt,
+			startValue, endValue, endNum, startNum, type, specialProp, p, startUnit, endUnit, relative, isTransformRelated, transformPropTween, cache, smooth, hasPriority, inlineProps;
+		_pluginInitted || _initCore();
+		// we may call init() multiple times on the same plugin instance, like when adding special properties, so make sure we don't overwrite the revert data or inlineProps
+		this.styles = this.styles || _getStyleSaver(target);
+		inlineProps = this.styles.props;
+		this.tween = tween;
+		for (p in vars) {
+			if (p === "autoRound") {
+				continue;
+			}
+			endValue = vars[p];
+			if (gsapCore._plugins[p] && gsapCore._checkPlugin(p, vars, tween, index, target, targets)) { // plugins
+				continue;
+			}
+			type = typeof(endValue);
+			specialProp = _specialProps[p];
+			if (type === "function") {
+				endValue = endValue.call(tween, index, target, targets);
+				type = typeof(endValue);
+			}
+			if (type === "string" && ~endValue.indexOf("random(")) {
+				endValue = gsapCore._replaceRandom(endValue);
+			}
+			if (specialProp) {
+				specialProp(this, target, p, endValue, tween) && (hasPriority = 1);
+			} else if (p.substr(0,2) === "--") { //CSS variable
+				startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();
+				endValue += "";
+				gsapCore._colorExp.lastIndex = 0;
+				if (!gsapCore._colorExp.test(startValue)) { // colors don't have units
+					startUnit = gsapCore.getUnit(startValue);
+					endUnit = gsapCore.getUnit(endValue);
+				}
+				endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);
+				this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p);
+				props.push(p);
+				inlineProps.push(p, 0, style[p]);
+			} else if (type !== "undefined") {
+				if (startAt && p in startAt) { // in case someone hard-codes a complex value as the start, like top: "calc(2vh / 2)". Without this, it'd use the computed value (always in px)
+					startValue = typeof(startAt[p]) === "function" ? startAt[p].call(tween, index, target, targets) : startAt[p];
+					gsapCore._isString(startValue) && ~startValue.indexOf("random(") && (startValue = gsapCore._replaceRandom(startValue));
+					gsapCore.getUnit(startValue + "") || startValue === "auto" || (startValue += gsapCore._config.units[p] || gsapCore.getUnit(_get(target, p)) || ""); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.
+					(startValue + "").charAt(1) === "=" && (startValue = _get(target, p)); // can't work with relative values
+				} else {
+					startValue = _get(target, p);
+				}
+				startNum = parseFloat(startValue);
+				relative = (type === "string" && endValue.charAt(1) === "=") && endValue.substr(0, 2);
+				relative && (endValue = endValue.substr(2));
+				endNum = parseFloat(endValue);
+				if (p in _propertyAliases) {
+					if (p === "autoAlpha") { //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.
+						if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) { //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
+							startNum = 0;
+						}
+						inlineProps.push("visibility", 0, style.visibility);
+						_addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
+					}
+					if (p !== "scale" && p !== "transform") {
+						p = _propertyAliases[p];
+						~p.indexOf(",") && (p = p.split(",")[0]);
+					}
+				}
+
+				isTransformRelated = (p in _transformProps);
+
+				//--- TRANSFORM-RELATED ---
+				if (isTransformRelated) {
+					this.styles.save(p);
+					if (!transformPropTween) {
+						cache = target._gsap;
+						(cache.renderTransform && !vars.parseTransform) || _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.
+						smooth = (vars.smoothOrigin !== false && cache.smooth);
+						transformPropTween = this._pt = new gsapCore.PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)
+						transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.
+					}
+					if (p === "scale") {
+						this._pt = new gsapCore.PropTween(this._pt, cache, "scaleY", cache.scaleY, ((relative ? gsapCore._parseRelative(cache.scaleY, relative + endNum) : endNum) - cache.scaleY) || 0, _renderCSSProp);
+						this._pt.u = 0;
+						props.push("scaleY", p);
+						p += "X";
+					} else if (p === "transformOrigin") {
+						inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);
+						endValue = _convertKeywordsToPercentages(endValue); //in case something like "left top" or "bottom right" is passed in. Convert to percentages.
+						if (cache.svg) {
+							_applySVGOrigin(target, endValue, 0, smooth, 0, this);
+						} else {
+							endUnit = parseFloat(endValue.split(" ")[2]) || 0; //handle the zOrigin separately!
+							endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);
+							_addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
+						}
+						continue;
+					} else if (p === "svgOrigin") {
+						_applySVGOrigin(target, endValue, 1, smooth, 0, this);
+						continue;
+					} else if (p in _rotationalProperties) {
+						_addRotationalPropTween(this, cache, p, startNum, relative ? gsapCore._parseRelative(startNum, relative + endValue) : endValue);
+						continue;
+
+					} else if (p === "smoothOrigin") {
+						_addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);
+						continue;
+					} else if (p === "force3D") {
+						cache[p] = endValue;
+						continue;
+					} else if (p === "transform") {
+						_addRawTransformPTs(this, endValue, target);
+						continue;
+					}
+				} else if (!(p in style)) {
+					p = _checkPropPrefix(p) || p;
+				}
+
+				if (isTransformRelated || ((endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && (p in style))) {
+					startUnit = (startValue + "").substr((startNum + "").length);
+					endNum || (endNum = 0); // protect against NaN
+					endUnit = gsapCore.getUnit(endValue) || ((p in gsapCore._config.units) ? gsapCore._config.units[p] : startUnit);
+					startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));
+					this._pt = new gsapCore.PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? gsapCore._parseRelative(startNum, relative + endNum) : endNum) - startNum, (!isTransformRelated && (endUnit === "px" || p === "zIndex") && vars.autoRound !== false) ? _renderRoundedCSSProp : _renderCSSProp);
+					this._pt.u = endUnit || 0;
+					if (startUnit !== endUnit && endUnit !== "%") { //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)
+						this._pt.b = startValue;
+						this._pt.r = _renderCSSPropWithBeginning;
+					}
+				} else if (!(p in style)) {
+					if (p in target) { //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.
+						this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);
+					} else if (p !== "parseTransform") {
+						gsapCore._missingPlugin(p, endValue);
+						continue;
+					}
+				} else {
+					_tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);
+				}
+				isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : inlineProps.push(p, 1, startValue || target[p]));
+				props.push(p);
+			}
+		}
+		hasPriority && gsapCore._sortPropTweensByPriority(this);
+
+	},
+	render(ratio, data) {
+		if (data.tween._time || !_reverting()) {
+			let pt = data._pt;
+			while (pt) {
+				pt.r(ratio, pt.d);
+				pt = pt._next;
+			}
+		} else {
+			data.styles.revert();
+		}
+	},
+	get: _get,
+	aliases: _propertyAliases,
+	getSetter(target, property, plugin) { //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.
+		let p = _propertyAliases[property];
+		(p && p.indexOf(",") < 0) && (property = p);
+		return (property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x"))) ? (plugin && _recentSetterPlugin === plugin ? (property === "scale" ? _setterScale : _setterTransform) : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender)) : target.style && !gsapCore._isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : gsapCore._getSetter(target, property);
+	},
+	core: { _removeProperty, _getMatrix }
+
+};
+
+gsapCore.gsap.utils.checkPrefix = _checkPropPrefix;
+gsapCore.gsap.core.getStyleSaver = _getStyleSaver;
+(function(positionAndScale, rotation, others, aliases) {
+	let all = gsapCore._forEachName(positionAndScale + "," + rotation + "," + others, name => {_transformProps[name] = 1;});
+	gsapCore._forEachName(rotation, name => {gsapCore._config.units[name] = "deg"; _rotationalProperties[name] = 1;});
+	_propertyAliases[all[13]] = positionAndScale + "," + rotation;
+	gsapCore._forEachName(aliases, name => {
+		let split = name.split(":");
+		_propertyAliases[split[1]] = all[split[0]];
+	});
+})("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");
+gsapCore._forEachName("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", name => {gsapCore._config.units[name] = "px";});
+
+gsapCore.gsap.registerPlugin(CSSPlugin);
+
+exports.CSSPlugin = CSSPlugin;
+exports._createElement = _createElement;
+exports._getBBox = _getBBox;
+exports.checkPrefix = _checkPropPrefix;
+exports.default = CSSPlugin;
diff --git a/src/CSSPlugin.js b/dist/CSSPlugin.d.cts
similarity index 98%
rename from src/CSSPlugin.js
rename to dist/CSSPlugin.d.cts
index bd7df25ce35b66b51d37c30917a556c02143f789..80a8af229b04d714f7f9bc5c4cec2ad562cdfbd2 100644
--- a/src/CSSPlugin.js
+++ b/dist/CSSPlugin.d.cts
@@ -1,3 +1,5 @@
+import { _forEachName, gsap, _plugins, _checkPlugin, _replaceRandom, _colorExp, getUnit, _isString, _config, PropTween, _parseRelative, _missingPlugin, _sortPropTweensByPriority, _isUndefined, _getSetter, _round, _ticker, _getCache, _getProperty, _renderComplexString, _colorStringFilter, _numWithUnitExp, _relExp, GSCache, _numExp } from './gsap-core.cjs';
+
 /*!
  * CSSPlugin 3.12.5
  * https://gsap.com
@@ -9,11 +11,8 @@
 */
 /* eslint-disable */
 
-import {gsap, _getProperty, _numExp, _numWithUnitExp, getUnit, _isString, _isUndefined, _renderComplexString, _relExp, _forEachName, _sortPropTweensByPriority, _colorStringFilter, _checkPlugin, _replaceRandom, _plugins, GSCache, PropTween, _config, _ticker, _round, _missingPlugin, _getSetter, _getCache, _colorExp, _parseRelative,
-	_setDefaults, _removeLinkedListItem //for the commented-out className feature.
-} from "./gsap-core.js";
 
-let _win, _doc, _docElement, _pluginInitted, _tempDiv, _tempDivStyler, _recentSetterPlugin, _reverting,
+let _win, _doc, _docElement, _pluginInitted, _tempDiv, _recentSetterPlugin, _reverting,
 	_windowExists = () => typeof(window) !== "undefined",
 	_transformProps = {},
 	_RAD2DEG = 180 / Math.PI,
@@ -145,7 +144,7 @@ let _win, _doc, _docElement, _pluginInitted, _tempDiv, _tempDivStyler, _recentSe
 			_doc = _win.document;
 			_docElement = _doc.documentElement;
 			_tempDiv = _createElement("div") || {style:{}};
-			_tempDivStyler = _createElement("div");
+			_createElement("div");
 			_transformProp = _checkPropPrefix(_transformProp);
 			_transformOriginProp = _transformProp + "Origin";
 			_tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.
@@ -963,11 +962,11 @@ _forEachName("padding,margin,Width,Radius", (name, index) => {
 		vars = {};
 		props.forEach((prop, i) => vars[prop] = a[i] = a[i] || a[(((i - 1) / 2) | 0)]);
 		plugin.init(target, vars, tween);
-	}
+	};
 });
 
 
-export const CSSPlugin = {
+const CSSPlugin = {
 	name: "css",
 	register: _initCore,
 	targetTest(target) {
@@ -1143,16 +1142,16 @@ export const CSSPlugin = {
 gsap.utils.checkPrefix = _checkPropPrefix;
 gsap.core.getStyleSaver = _getStyleSaver;
 (function(positionAndScale, rotation, others, aliases) {
-	let all = _forEachName(positionAndScale + "," + rotation + "," + others, name => {_transformProps[name] = 1});
-	_forEachName(rotation, name => {_config.units[name] = "deg"; _rotationalProperties[name] = 1});
+	let all = _forEachName(positionAndScale + "," + rotation + "," + others, name => {_transformProps[name] = 1;});
+	_forEachName(rotation, name => {_config.units[name] = "deg"; _rotationalProperties[name] = 1;});
 	_propertyAliases[all[13]] = positionAndScale + "," + rotation;
 	_forEachName(aliases, name => {
 		let split = name.split(":");
 		_propertyAliases[split[1]] = all[split[0]];
 	});
 })("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");
-_forEachName("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", name => {_config.units[name] = "px"});
+_forEachName("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", name => {_config.units[name] = "px";});
 
 gsap.registerPlugin(CSSPlugin);
 
-export { CSSPlugin as default, _getBBox, _createElement, _checkPropPrefix as checkPrefix };
\ No newline at end of file
+export { CSSPlugin, _createElement, _getBBox, _checkPropPrefix as checkPrefix, CSSPlugin as default };
diff --git a/dist/CSSPlugin.d.mts b/dist/CSSPlugin.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..77593d359132cf6fd4da58d924370a4ed1f2c65d
--- /dev/null
+++ b/dist/CSSPlugin.d.mts
@@ -0,0 +1,1157 @@
+import { _forEachName, gsap, _plugins, _checkPlugin, _replaceRandom, _colorExp, getUnit, _isString, _config, PropTween, _parseRelative, _missingPlugin, _sortPropTweensByPriority, _isUndefined, _getSetter, _round, _ticker, _getCache, _getProperty, _renderComplexString, _colorStringFilter, _numWithUnitExp, _relExp, GSCache, _numExp } from './gsap-core.mjs';
+
+/*!
+ * CSSPlugin 3.12.5
+ * https://gsap.com
+ *
+ * Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let _win, _doc, _docElement, _pluginInitted, _tempDiv, _recentSetterPlugin, _reverting,
+	_windowExists = () => typeof(window) !== "undefined",
+	_transformProps = {},
+	_RAD2DEG = 180 / Math.PI,
+	_DEG2RAD = Math.PI / 180,
+	_atan2 = Math.atan2,
+	_bigNum = 1e8,
+	_capsExp = /([A-Z])/g,
+	_horizontalExp = /(left|right|width|margin|padding|x)/i,
+	_complexExp = /[\s,\(]\S/,
+	_propertyAliases = {autoAlpha:"opacity,visibility", scale:"scaleX,scaleY", alpha:"opacity"},
+	_renderCSSProp = (ratio, data) => data.set(data.t, data.p, (Math.round((data.s + data.c * ratio) * 10000) / 10000) + data.u, data),
+	_renderPropWithEnd = (ratio, data) => data.set(data.t, data.p, ratio === 1 ? data.e : (Math.round((data.s + data.c * ratio) * 10000) / 10000) + data.u, data),
+	_renderCSSPropWithBeginning = (ratio, data) => data.set(data.t, data.p, ratio ? (Math.round((data.s + data.c * ratio) * 10000) / 10000) + data.u : data.b, data), //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)
+	_renderRoundedCSSProp = (ratio, data) => {
+		let value = data.s + data.c * ratio;
+		data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
+	},
+	_renderNonTweeningValue = (ratio, data) => data.set(data.t, data.p, ratio ? data.e : data.b, data),
+	_renderNonTweeningValueOnlyAtEnd = (ratio, data) => data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data),
+	_setterCSSStyle = (target, property, value) => target.style[property] = value,
+	_setterCSSProp = (target, property, value) => target.style.setProperty(property, value),
+	_setterTransform = (target, property, value) => target._gsap[property] = value,
+	_setterScale = (target, property, value) => target._gsap.scaleX = target._gsap.scaleY = value,
+	_setterScaleWithRender = (target, property, value, data, ratio) => {
+		let cache = target._gsap;
+		cache.scaleX = cache.scaleY = value;
+		cache.renderTransform(ratio, cache);
+	},
+	_setterTransformWithRender = (target, property, value, data, ratio) => {
+		let cache = target._gsap;
+		cache[property] = value;
+		cache.renderTransform(ratio, cache);
+	},
+	_transformProp = "transform",
+	_transformOriginProp = _transformProp + "Origin",
+	_saveStyle = function(property, isNotCSS) {
+		let target = this.target,
+			style = target.style,
+			cache = target._gsap;
+		if ((property in _transformProps) && style) {
+			this.tfm = this.tfm || {};
+			if (property !== "transform") {
+				property = _propertyAliases[property] || property;
+				~property.indexOf(",") ? property.split(",").forEach(a => this.tfm[a] = _get(target, a)) : (this.tfm[property] = cache.x ? cache[property] : _get(target, property)); // note: scale would map to "scaleX,scaleY", thus we loop and apply them both.
+				property === _transformOriginProp && (this.tfm.zOrigin = cache.zOrigin);
+			} else {
+				return _propertyAliases.transform.split(",").forEach(p => _saveStyle.call(this, p, isNotCSS));
+			}
+			if (this.props.indexOf(_transformProp) >= 0) { return; }
+			if (cache.svg) {
+				this.svgo = target.getAttribute("data-svg-origin");
+				this.props.push(_transformOriginProp, isNotCSS, "");
+			}
+			property = _transformProp;
+		}
+		(style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);
+	},
+	_removeIndependentTransforms = style => {
+		if (style.translate) {
+			style.removeProperty("translate");
+			style.removeProperty("scale");
+			style.removeProperty("rotate");
+		}
+	},
+	_revertStyle = function() {
+		let props = this.props,
+			target = this.target,
+			style = target.style,
+			cache = target._gsap,
+			i, p;
+		for (i = 0; i < props.length; i+=3) { // stored like this: property, isNotCSS, value
+			props[i+1] ? target[props[i]] = props[i+2] : props[i+2] ? (style[props[i]] = props[i+2]) : style.removeProperty(props[i].substr(0,2) === "--" ? props[i] : props[i].replace(_capsExp, "-$1").toLowerCase());
+		}
+		if (this.tfm) {
+			for (p in this.tfm) {
+				cache[p] = this.tfm[p];
+			}
+			if (cache.svg) {
+				cache.renderTransform();
+				target.setAttribute("data-svg-origin", this.svgo || "");
+			}
+			i = _reverting();
+			if ((!i || !i.isStart) && !style[_transformProp]) {
+				_removeIndependentTransforms(style);
+				if (cache.zOrigin && style[_transformOriginProp]) {
+					style[_transformOriginProp] += " " + cache.zOrigin + "px"; // since we're uncaching, we must put the zOrigin back into the transformOrigin so that we can pull it out accurately when we parse again. Otherwise, we'd lose the z portion of the origin since we extract it to protect from Safari bugs.
+					cache.zOrigin = 0;
+					cache.renderTransform();
+				}
+				cache.uncache = 1; // if it's a startAt that's being reverted in the _initTween() of the core, we don't need to uncache transforms. This is purely a performance optimization.
+			}
+		}
+	},
+	_getStyleSaver = (target, properties) => {
+		let saver = {
+			target,
+			props: [],
+			revert: _revertStyle,
+			save: _saveStyle
+		};
+		target._gsap || gsap.core.getCache(target); // just make sure there's a _gsap cache defined because we read from it in _saveStyle() and it's more efficient to just check it here once.
+		properties && properties.split(",").forEach(p => saver.save(p));
+		return saver;
+	},
+	_supports3D,
+	_createElement = (type, ns) => {
+		let e = _doc.createElementNS ? _doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.
+		return e && e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://gsap.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
+	},
+	_getComputedProperty = (target, property, skipPrefixFallback) => {
+		let cs = getComputedStyle(target);
+		return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || (!skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1)) || ""; //css variables may not need caps swapped out for dashes and lowercase.
+	},
+	_prefixes = "O,Moz,ms,Ms,Webkit".split(","),
+	_checkPropPrefix = (property, element, preferPrefix) => {
+		let e = element || _tempDiv,
+			s = e.style,
+			i = 5;
+		if (property in s && !preferPrefix) {
+			return property;
+		}
+		property = property.charAt(0).toUpperCase() + property.substr(1);
+		while (i-- && !((_prefixes[i]+property) in s)) { }
+		return (i < 0) ? null : ((i === 3) ? "ms" : (i >= 0) ? _prefixes[i] : "") + property;
+	},
+	_initCore = () => {
+		if (_windowExists() && window.document) {
+			_win = window;
+			_doc = _win.document;
+			_docElement = _doc.documentElement;
+			_tempDiv = _createElement("div") || {style:{}};
+			_createElement("div");
+			_transformProp = _checkPropPrefix(_transformProp);
+			_transformOriginProp = _transformProp + "Origin";
+			_tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.
+			_supports3D = !!_checkPropPrefix("perspective");
+			_reverting = gsap.core.reverting;
+			_pluginInitted = 1;
+		}
+	},
+	_getBBoxHack = function(swapIfPossible) { //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
+		let svg = _createElement("svg", (this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns")) || "http://www.w3.org/2000/svg"),
+			oldParent = this.parentNode,
+			oldSibling = this.nextSibling,
+			oldCSS = this.style.cssText,
+			bbox;
+		_docElement.appendChild(svg);
+		svg.appendChild(this);
+		this.style.display = "block";
+		if (swapIfPossible) {
+			try {
+				bbox = this.getBBox();
+				this._gsapBBox = this.getBBox; //store the original
+				this.getBBox = _getBBoxHack;
+			} catch (e) { }
+		} else if (this._gsapBBox) {
+			bbox = this._gsapBBox();
+		}
+		if (oldParent) {
+			if (oldSibling) {
+				oldParent.insertBefore(this, oldSibling);
+			} else {
+				oldParent.appendChild(this);
+			}
+		}
+		_docElement.removeChild(svg);
+		this.style.cssText = oldCSS;
+		return bbox;
+	},
+	_getAttributeFallbacks = (target, attributesArray) => {
+		let i = attributesArray.length;
+		while (i--) {
+			if (target.hasAttribute(attributesArray[i])) {
+				return target.getAttribute(attributesArray[i]);
+			}
+		}
+	},
+	_getBBox = target => {
+		let bounds;
+		try {
+			bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
+		} catch (error) {
+			bounds = _getBBoxHack.call(target, true);
+		}
+		(bounds && (bounds.width || bounds.height)) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true));
+		//some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.
+		return (bounds && !bounds.width && !bounds.x && !bounds.y) ? {x: +_getAttributeFallbacks(target, ["x","cx","x1"]) || 0, y:+_getAttributeFallbacks(target, ["y","cy","y1"]) || 0, width:0, height:0} : bounds;
+	},
+	_isSVG = e => !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e)), //reports if the element is an SVG on which getBBox() actually works
+	_removeProperty = (target, property) => {
+		if (property) {
+			let style = target.style,
+				first2Chars;
+			if (property in _transformProps && property !== _transformOriginProp) {
+				property = _transformProp;
+			}
+			if (style.removeProperty) {
+				first2Chars = property.substr(0,2);
+				if (first2Chars === "ms" || property.substr(0,6) === "webkit") { //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
+					property = "-" + property;
+				}
+				style.removeProperty(first2Chars === "--" ? property : property.replace(_capsExp, "-$1").toLowerCase());
+			} else { //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
+				style.removeAttribute(property);
+			}
+		}
+	},
+	_addNonTweeningPT = (plugin, target, property, beginning, end, onlySetAtEnd) => {
+		let pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
+		plugin._pt = pt;
+		pt.b = beginning;
+		pt.e = end;
+		plugin._props.push(property);
+		return pt;
+	},
+	_nonConvertibleUnits = {deg:1, rad:1, turn:1},
+	_nonStandardLayouts = {grid:1, flex:1},
+	//takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.
+	_convertToUnit = (target, property, value, unit) => {
+		let curValue = parseFloat(value) || 0,
+			curUnit = (value + "").trim().substr((curValue + "").length) || "px", // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()
+			style = _tempDiv.style,
+			horizontal = _horizontalExp.test(property),
+			isRootSVG = target.tagName.toLowerCase() === "svg",
+			measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
+			amount = 100,
+			toPixels = unit === "px",
+			toPercent = unit === "%",
+			px, parent, cache, isSVG;
+		if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
+			return curValue;
+		}
+		(curUnit !== "px" && !toPixels) && (curValue = _convertToUnit(target, property, value, "px"));
+		isSVG = target.getCTM && _isSVG(target);
+		if ((toPercent || curUnit === "%") && (_transformProps[property] || ~property.indexOf("adius"))) {
+			px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];
+			return _round(toPercent ? curValue / px * amount : curValue / 100 * px);
+		}
+		style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
+		parent = (~property.indexOf("adius") || (unit === "em" && target.appendChild && !isRootSVG)) ? target : target.parentNode;
+		if (isSVG) {
+			parent = (target.ownerSVGElement || {}).parentNode;
+		}
+		if (!parent || parent === _doc || !parent.appendChild) {
+			parent = _doc.body;
+		}
+		cache = parent._gsap;
+		if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time && !cache.uncache) {
+			return _round(curValue / cache.width * amount);
+		} else {
+			if (toPercent && (property === "height" || property === "width")) { // if we're dealing with width/height that's inside a container with padding and/or it's a flexbox/grid container, we must apply it to the target itself rather than the _tempDiv in order to ensure complete accuracy, factoring in the parent's padding.
+				let v = target.style[property];
+				target.style[property] = amount + unit;
+				px = target[measureProperty];
+				v ? (target.style[property] = v) : _removeProperty(target, property);
+			} else {
+				(toPercent || curUnit === "%") && !_nonStandardLayouts[_getComputedProperty(parent, "display")] && (style.position = _getComputedProperty(target, "position"));
+				(parent === target) && (style.position = "static"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.
+				parent.appendChild(_tempDiv);
+				px = _tempDiv[measureProperty];
+				parent.removeChild(_tempDiv);
+				style.position = "absolute";
+			}
+			if (horizontal && toPercent) {
+				cache = _getCache(parent);
+				cache.time = _ticker.time;
+				cache.width = parent[measureProperty];
+			}
+		}
+		return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
+	},
+	_get = (target, property, unit, uncache) => {
+		let value;
+		_pluginInitted || _initCore();
+		if ((property in _propertyAliases) && property !== "transform") {
+			property = _propertyAliases[property];
+			if (~property.indexOf(",")) {
+				property = property.split(",")[0];
+			}
+		}
+		if (_transformProps[property] && property !== "transform") {
+			value = _parseTransform(target, uncache);
+			value = (property !== "transformOrigin") ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
+		} else {
+			value = target.style[property];
+			if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
+				value = (_specialProps[property] && _specialProps[property](target, property, unit)) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === "opacity" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius
+			}
+		}
+		return unit && !~(value + "").trim().indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
+
+	},
+	_tweenComplexCSSString = function(target, prop, start, end) { // note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
+		if (!start || start === "none") { // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://gsap.com/forums/topic/18310-clippath-doesnt-work-on-ios/
+			let p = _checkPropPrefix(prop, target, 1),
+				s = p && _getComputedProperty(target, p, 1);
+			if (s && s !== start) {
+				prop = p;
+				start = s;
+			} else if (prop === "borderColor") {
+				start = _getComputedProperty(target, "borderTopColor"); // Firefox bug: always reports "borderColor" as "", so we must fall back to borderTopColor. See https://gsap.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/
+			}
+		}
+		let pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),
+			index = 0,
+			matchIndex = 0,
+			a, result,	startValues, startNum, color, startValue, endValue, endNum, chunk, endUnit, startUnit, endValues;
+		pt.b = start;
+		pt.e = end;
+		start += ""; // ensure values are strings
+		end += "";
+		if (end === "auto") {
+			startValue = target.style[prop];
+			target.style[prop] = end;
+			end = _getComputedProperty(target, prop) || end;
+			startValue ? (target.style[prop] = startValue) : _removeProperty(target, prop);
+		}
+		a = [start, end];
+		_colorStringFilter(a); // pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().
+		start = a[0];
+		end = a[1];
+		startValues = start.match(_numWithUnitExp) || [];
+		endValues = end.match(_numWithUnitExp) || [];
+		if (endValues.length) {
+			while ((result = _numWithUnitExp.exec(end))) {
+				endValue = result[0];
+				chunk = end.substring(index, result.index);
+				if (color) {
+					color = (color + 1) % 5;
+				} else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
+					color = 1;
+				}
+				if (endValue !== (startValue = startValues[matchIndex++] || "")) {
+					startNum = parseFloat(startValue) || 0;
+					startUnit = startValue.substr((startNum + "").length);
+					(endValue.charAt(1) === "=") && (endValue = _parseRelative(startNum, endValue) + startUnit);
+					endNum = parseFloat(endValue);
+					endUnit = endValue.substr((endNum + "").length);
+					index = _numWithUnitExp.lastIndex - endUnit.length;
+					if (!endUnit) { //if something like "perspective:300" is passed in and we must add a unit to the end
+						endUnit = endUnit || _config.units[prop] || startUnit;
+						if (index === end.length) {
+							end += endUnit;
+							pt.e += endUnit;
+						}
+					}
+					if (startUnit !== endUnit) {
+						startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
+					}
+					// these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.
+					pt._pt = {
+						_next: pt._pt,
+						p: (chunk || (matchIndex === 1)) ? chunk : ",", //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
+						s: startNum,
+						c: endNum - startNum,
+						m: (color && color < 4) || prop === "zIndex" ? Math.round : 0
+					};
+				}
+			}
+			pt.c = (index < end.length) ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
+		} else {
+			pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
+		}
+		_relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
+		this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.
+		return pt;
+	},
+	_keywordToPercent = {top:"0%", bottom:"100%", left:"0%", right:"100%", center:"50%"},
+	_convertKeywordsToPercentages = value => {
+		let split = value.split(" "),
+			x = split[0],
+			y = split[1] || "50%";
+		if (x === "top" || x === "bottom" || y === "left" || y === "right") { //the user provided them in the wrong order, so flip them
+			value = x;
+			x = y;
+			y = value;
+		}
+		split[0] = _keywordToPercent[x] || x;
+		split[1] = _keywordToPercent[y] || y;
+		return split.join(" ");
+	},
+	_renderClearProps = (ratio, data) => {
+		if (data.tween && data.tween._time === data.tween._dur) {
+			let target = data.t,
+				style = target.style,
+				props = data.u,
+				cache = target._gsap,
+				prop, clearTransforms, i;
+			if (props === "all" || props === true) {
+				style.cssText = "";
+				clearTransforms = 1;
+			} else {
+				props = props.split(",");
+				i = props.length;
+				while (--i > -1) {
+					prop = props[i];
+					if (_transformProps[prop]) {
+						clearTransforms = 1;
+						prop = (prop === "transformOrigin") ? _transformOriginProp : _transformProp;
+					}
+					_removeProperty(target, prop);
+				}
+			}
+			if (clearTransforms) {
+				_removeProperty(target, _transformProp);
+				if (cache) {
+					cache.svg && target.removeAttribute("transform");
+					_parseTransform(target, 1); // force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.
+					cache.uncache = 1;
+					_removeIndependentTransforms(style);
+				}
+			}
+		}
+	},
+	// note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.
+	_specialProps = {
+		clearProps(plugin, target, property, endValue, tween) {
+			if (tween.data !== "isFromStart") {
+				let pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
+				pt.u = endValue;
+				pt.pr = -10;
+				pt.tween = tween;
+				plugin._props.push(property);
+				return 1;
+			}
+		}
+		/* className feature (about 0.4kb gzipped).
+		, className(plugin, target, property, endValue, tween) {
+			let _renderClassName = (ratio, data) => {
+					data.css.render(ratio, data.css);
+					if (!ratio || ratio === 1) {
+						let inline = data.rmv,
+							target = data.t,
+							p;
+						target.setAttribute("class", ratio ? data.e : data.b);
+						for (p in inline) {
+							_removeProperty(target, p);
+						}
+					}
+				},
+				_getAllStyles = (target) => {
+					let styles = {},
+						computed = getComputedStyle(target),
+						p;
+					for (p in computed) {
+						if (isNaN(p) && p !== "cssText" && p !== "length") {
+							styles[p] = computed[p];
+						}
+					}
+					_setDefaults(styles, _parseTransform(target, 1));
+					return styles;
+				},
+				startClassList = target.getAttribute("class"),
+				style = target.style,
+				cssText = style.cssText,
+				cache = target._gsap,
+				classPT = cache.classPT,
+				inlineToRemoveAtEnd = {},
+				data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
+				changingVars = {},
+				startVars = _getAllStyles(target),
+				transformRelated = /(transform|perspective)/i,
+				endVars, p;
+			if (classPT) {
+				classPT.r(1, classPT.d);
+				_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
+			}
+			target.setAttribute("class", data.e);
+			endVars = _getAllStyles(target, true);
+			target.setAttribute("class", startClassList);
+			for (p in endVars) {
+				if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
+					changingVars[p] = endVars[p];
+					if (!style[p] && style[p] !== "0") {
+						inlineToRemoveAtEnd[p] = 1;
+					}
+				}
+			}
+			cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
+			if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://gsap.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
+				style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
+			}
+			_parseTransform(target, true); //to clear the caching of transforms
+			data.css = new gsap.plugins.css();
+			data.css.init(target, changingVars, tween);
+			plugin._props.push(...data.css._props);
+			return 1;
+		}
+		*/
+	},
+
+
+
+
+
+	/*
+	 * --------------------------------------------------------------------------------------
+	 * TRANSFORMS
+	 * --------------------------------------------------------------------------------------
+	 */
+	_identity2DMatrix = [1,0,0,1,0,0],
+	_rotationalProperties = {},
+	_isNullTransform = value => (value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value),
+	_getComputedTransformMatrixAsArray = target => {
+		let matrixString = _getComputedProperty(target, _transformProp);
+		return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);
+	},
+	_getMatrix = (target, force2D) => {
+		let cache = target._gsap || _getCache(target),
+			style = target.style,
+			matrix = _getComputedTransformMatrixAsArray(target),
+			parent, nextSibling, temp, addedToDOM;
+		if (cache.svg && target.getAttribute("transform")) {
+			temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.
+			matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
+			return (matrix.join(",") === "1,0,0,1,0,0") ? _identity2DMatrix : matrix;
+		} else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) { //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
+			//browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
+			temp = style.display;
+			style.display = "block";
+			parent = target.parentNode;
+			if (!parent || !target.offsetParent) { // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375
+				addedToDOM = 1; //flag
+				nextSibling = target.nextElementSibling;
+				_docElement.appendChild(target); //we must add it to the DOM in order to get values properly
+			}
+			matrix = _getComputedTransformMatrixAsArray(target);
+			temp ? (style.display = temp) : _removeProperty(target, "display");
+			if (addedToDOM) {
+				nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
+			}
+		}
+		return (force2D && matrix.length > 6) ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
+	},
+	_applySVGOrigin = (target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) => {
+		let cache = target._gsap,
+			matrix = matrixArray || _getMatrix(target, true),
+			xOriginOld = cache.xOrigin || 0,
+			yOriginOld = cache.yOrigin || 0,
+			xOffsetOld = cache.xOffset || 0,
+			yOffsetOld = cache.yOffset || 0,
+			[a, b, c, d, tx, ty] = matrix,
+			originSplit = origin.split(" "),
+			xOrigin = parseFloat(originSplit[0]) || 0,
+			yOrigin = parseFloat(originSplit[1]) || 0,
+			bounds, determinant, x, y;
+		if (!originIsAbsolute) {
+			bounds = _getBBox(target);
+			xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
+			yOrigin = bounds.y + (~((originSplit[1] || originSplit[0]).indexOf("%")) ? yOrigin / 100 * bounds.height : yOrigin);
+			// if (!("xOrigin" in cache) && (xOrigin || yOrigin)) { // added in 3.12.3, reverted in 3.12.4; requires more exploration
+			// 	xOrigin -= bounds.x;
+			// 	yOrigin -= bounds.y;
+			// }
+		} else if (matrix !== _identity2DMatrix && (determinant = (a * d - b * c))) { //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
+			x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + ((c * ty - d * tx) / determinant);
+			y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - ((a * ty - b * tx) / determinant);
+			xOrigin = x;
+			yOrigin = y;
+			// theory: we only had to do this for smoothing and it assumes that the previous one was not originIsAbsolute.
+		}
+		if (smooth || (smooth !== false && cache.smooth)) {
+			tx = xOrigin - xOriginOld;
+			ty = yOrigin - yOriginOld;
+			cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
+			cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
+		} else {
+			cache.xOffset = cache.yOffset = 0;
+		}
+		cache.xOrigin = xOrigin;
+		cache.yOrigin = yOrigin;
+		cache.smooth = !!smooth;
+		cache.origin = origin;
+		cache.originIsAbsolute = !!originIsAbsolute;
+		target.style[_transformOriginProp] = "0px 0px"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).
+		if (pluginToAddPropTweensTo) {
+			_addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);
+			_addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);
+			_addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);
+			_addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
+		}
+		target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
+	},
+	_parseTransform = (target, uncache) => {
+		let cache = target._gsap || new GSCache(target);
+		if ("x" in cache && !uncache && !cache.uncache) {
+			return cache;
+		}
+		let style = target.style,
+			invertedScaleX = cache.scaleX < 0,
+			px = "px",
+			deg = "deg",
+			cs = getComputedStyle(target),
+			origin = _getComputedProperty(target, _transformOriginProp) || "0",
+			x, y, z, scaleX, scaleY, rotation, rotationX, rotationY, skewX, skewY, perspective, xOrigin, yOrigin,
+			matrix, angle, cos, sin, a, b, c, d, a12, a22, t1, t2, t3, a13, a23, a33, a42, a43, a32;
+		x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
+		scaleX = scaleY = 1;
+		cache.svg = !!(target.getCTM && _isSVG(target));
+
+		if (cs.translate) { // accommodate independent transforms by combining them into normal ones.
+			if (cs.translate !== "none" || cs.scale !== "none" || cs.rotate !== "none") {
+				style[_transformProp] = (cs.translate !== "none" ? "translate3d(" + (cs.translate + " 0 0").split(" ").slice(0, 3).join(", ") + ") " : "") + (cs.rotate !== "none" ? "rotate(" + cs.rotate + ") " : "") + (cs.scale !== "none" ? "scale(" + cs.scale.split(" ").join(",") + ") " : "") + (cs[_transformProp] !== "none" ? cs[_transformProp] : "");
+			}
+			style.scale = style.rotate = style.translate = "none";
+		}
+
+		matrix = _getMatrix(target, cache.svg);
+		if (cache.svg) {
+			if (cache.uncache) { // if cache.uncache is true (and maybe if origin is 0,0), we need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + "px " + (cache.yOrigin - bbox.y) + "px". Previously we let the data-svg-origin stay instead, but when introducing revert(), it complicated things.
+				t2 = target.getBBox();
+				origin = (cache.xOrigin - t2.x) + "px " + (cache.yOrigin - t2.y) + "px";
+				t1 = "";
+			} else {
+				t1 = !uncache && target.getAttribute("data-svg-origin"); //  Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.
+			}
+			_applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
+		}
+		xOrigin = cache.xOrigin || 0;
+		yOrigin = cache.yOrigin || 0;
+		if (matrix !== _identity2DMatrix) {
+			a = matrix[0]; //a11
+			b = matrix[1]; //a21
+			c = matrix[2]; //a31
+			d = matrix[3]; //a41
+			x = a12 = matrix[4];
+			y = a22 = matrix[5];
+
+			//2D matrix
+			if (matrix.length === 6) {
+				scaleX = Math.sqrt(a * a + b * b);
+				scaleY = Math.sqrt(d * d + c * c);
+				rotation = (a || b) ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).
+				skewX = (c || d) ? _atan2(c, d) * _RAD2DEG + rotation : 0;
+				skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));
+				if (cache.svg) {
+					x -= xOrigin - (xOrigin * a + yOrigin * c);
+					y -= yOrigin - (xOrigin * b + yOrigin * d);
+				}
+
+			//3D matrix
+			} else {
+				a32 = matrix[6];
+				a42 = matrix[7];
+				a13 = matrix[8];
+				a23 = matrix[9];
+				a33 = matrix[10];
+				a43 = matrix[11];
+				x = matrix[12];
+				y = matrix[13];
+				z = matrix[14];
+
+				angle = _atan2(a32, a33);
+				rotationX = angle * _RAD2DEG;
+				//rotationX
+				if (angle) {
+					cos = Math.cos(-angle);
+					sin = Math.sin(-angle);
+					t1 = a12*cos+a13*sin;
+					t2 = a22*cos+a23*sin;
+					t3 = a32*cos+a33*sin;
+					a13 = a12*-sin+a13*cos;
+					a23 = a22*-sin+a23*cos;
+					a33 = a32*-sin+a33*cos;
+					a43 = a42*-sin+a43*cos;
+					a12 = t1;
+					a22 = t2;
+					a32 = t3;
+				}
+				//rotationY
+				angle = _atan2(-c, a33);
+				rotationY = angle * _RAD2DEG;
+				if (angle) {
+					cos = Math.cos(-angle);
+					sin = Math.sin(-angle);
+					t1 = a*cos-a13*sin;
+					t2 = b*cos-a23*sin;
+					t3 = c*cos-a33*sin;
+					a43 = d*sin+a43*cos;
+					a = t1;
+					b = t2;
+					c = t3;
+				}
+				//rotationZ
+				angle = _atan2(b, a);
+				rotation = angle * _RAD2DEG;
+				if (angle) {
+					cos = Math.cos(angle);
+					sin = Math.sin(angle);
+					t1 = a*cos+b*sin;
+					t2 = a12*cos+a22*sin;
+					b = b*cos-a*sin;
+					a22 = a22*cos-a12*sin;
+					a = t1;
+					a12 = t2;
+				}
+
+				if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) { //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
+					rotationX = rotation = 0;
+					rotationY = 180 - rotationY;
+				}
+				scaleX = _round(Math.sqrt(a * a + b * b + c * c));
+				scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));
+				angle = _atan2(a12, a22);
+				skewX = (Math.abs(angle) > 0.0002) ? angle * _RAD2DEG : 0;
+				perspective = a43 ? 1 / ((a43 < 0) ? -a43 : a43) : 0;
+			}
+
+			if (cache.svg) { //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).
+				t1 = target.getAttribute("transform");
+				cache.forceCSS = target.setAttribute("transform", "") || (!_isNullTransform(_getComputedProperty(target, _transformProp)));
+				t1 && target.setAttribute("transform", t1);
+			}
+		}
+
+		if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
+			if (invertedScaleX) {
+				scaleX *= -1;
+				skewX += (rotation <= 0) ? 180 : -180;
+				rotation += (rotation <= 0) ? 180 : -180;
+			} else {
+				scaleY *= -1;
+				skewX += (skewX <= 0) ? 180 : -180;
+			}
+		}
+		uncache = uncache || cache.uncache;
+		cache.x = x - ((cache.xPercent = x && ((!uncache && cache.xPercent) || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;
+		cache.y = y - ((cache.yPercent = y && ((!uncache && cache.yPercent) || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;
+		cache.z = z + px;
+		cache.scaleX = _round(scaleX);
+		cache.scaleY = _round(scaleY);
+		cache.rotation = _round(rotation) + deg;
+		cache.rotationX = _round(rotationX) + deg;
+		cache.rotationY = _round(rotationY) + deg;
+		cache.skewX = skewX + deg;
+		cache.skewY = skewY + deg;
+		cache.transformPerspective = perspective + px;
+		if ((cache.zOrigin = parseFloat(origin.split(" ")[2]) || (!uncache && cache.zOrigin) || 0)) {
+			style[_transformOriginProp] = _firstTwoOnly(origin);
+		}
+		cache.xOffset = cache.yOffset = 0;
+		cache.force3D = _config.force3D;
+		cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
+		cache.uncache = 0;
+		return cache;
+	},
+	_firstTwoOnly = value => (value = value.split(" "))[0] + " " + value[1], //for handling transformOrigin values, stripping out the 3rd dimension
+	_addPxTranslate = (target, start, value) => {
+		let unit = getUnit(start);
+		return _round(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
+	},
+	_renderNon3DTransforms = (ratio, cache) => {
+		cache.z = "0px";
+		cache.rotationY = cache.rotationX = "0deg";
+		cache.force3D = 0;
+		_renderCSSTransforms(ratio, cache);
+	},
+	_zeroDeg = "0deg",
+	_zeroPx = "0px",
+	_endParenthesis = ") ",
+	_renderCSSTransforms = function(ratio, cache) {
+		let {xPercent, yPercent, x, y, z, rotation, rotationY, rotationX, skewX, skewY, scaleX, scaleY, transformPerspective, force3D, target, zOrigin} = cache || this,
+			transforms = "",
+			use3D = (force3D === "auto" && ratio && ratio !== 1) || force3D === true;
+
+		// Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)
+		if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
+			let angle = parseFloat(rotationY) * _DEG2RAD,
+				a13 = Math.sin(angle),
+				a33 = Math.cos(angle),
+				cos;
+			angle = parseFloat(rotationX) * _DEG2RAD;
+			cos = Math.cos(angle);
+			x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
+			y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
+			z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
+		}
+
+		if (transformPerspective !== _zeroPx) {
+			transforms += "perspective(" + transformPerspective + _endParenthesis;
+		}
+		if (xPercent || yPercent) {
+			transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
+		}
+		if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
+			transforms += (z !== _zeroPx || use3D) ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
+		}
+		if (rotation !== _zeroDeg) {
+			transforms += "rotate(" + rotation + _endParenthesis;
+		}
+		if (rotationY !== _zeroDeg) {
+			transforms += "rotateY(" + rotationY + _endParenthesis;
+		}
+		if (rotationX !== _zeroDeg) {
+			transforms += "rotateX(" + rotationX + _endParenthesis;
+		}
+		if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
+			transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
+		}
+		if (scaleX !== 1 || scaleY !== 1) {
+			transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
+		}
+		target.style[_transformProp] = transforms || "translate(0, 0)";
+	},
+	_renderSVGTransforms = function(ratio, cache) {
+		let {xPercent, yPercent, x, y, rotation, skewX, skewY, scaleX, scaleY, target, xOrigin, yOrigin, xOffset, yOffset, forceCSS} = cache || this,
+			tx = parseFloat(x),
+			ty = parseFloat(y),
+			a11, a21, a12, a22, temp;
+		rotation = parseFloat(rotation);
+		skewX = parseFloat(skewX);
+		skewY = parseFloat(skewY);
+		if (skewY) { //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
+			skewY = parseFloat(skewY);
+			skewX += skewY;
+			rotation += skewY;
+		}
+		if (rotation || skewX) {
+			rotation *= _DEG2RAD;
+			skewX *= _DEG2RAD;
+			a11 = Math.cos(rotation) * scaleX;
+			a21 = Math.sin(rotation) * scaleX;
+			a12 = Math.sin(rotation - skewX) * -scaleY;
+			a22 = Math.cos(rotation - skewX) * scaleY;
+			if (skewX) {
+				skewY *= _DEG2RAD;
+				temp = Math.tan(skewX - skewY);
+				temp = Math.sqrt(1 + temp * temp);
+				a12 *= temp;
+				a22 *= temp;
+				if (skewY) {
+					temp = Math.tan(skewY);
+					temp = Math.sqrt(1 + temp * temp);
+					a11 *= temp;
+					a21 *= temp;
+				}
+			}
+			a11 = _round(a11);
+			a21 = _round(a21);
+			a12 = _round(a12);
+			a22 = _round(a22);
+		} else {
+			a11 = scaleX;
+			a22 = scaleY;
+			a21 = a12 = 0;
+		}
+		if ((tx && !~(x + "").indexOf("px")) || (ty && !~(y + "").indexOf("px"))) {
+			tx = _convertToUnit(target, "x", x, "px");
+			ty = _convertToUnit(target, "y", y, "px");
+		}
+		if (xOrigin || yOrigin || xOffset || yOffset) {
+			tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
+			ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
+		}
+		if (xPercent || yPercent) {
+			//The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.
+			temp = target.getBBox();
+			tx = _round(tx + xPercent / 100 * temp.width);
+			ty = _round(ty + yPercent / 100 * temp.height);
+		}
+		temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
+		target.setAttribute("transform", temp);
+		forceCSS && (target.style[_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the transform attribute changes!)
+	},
+	_addRotationalPropTween = function(plugin, target, property, startNum, endValue) {
+		let cap = 360,
+			isString = _isString(endValue),
+			endNum = parseFloat(endValue) * ((isString && ~endValue.indexOf("rad")) ? _RAD2DEG : 1),
+			change = endNum - startNum,
+			finalValue = (startNum + change) + "deg",
+			direction, pt;
+		if (isString) {
+			direction = endValue.split("_")[1];
+			if (direction === "short") {
+				change %= cap;
+				if (change !== change % (cap / 2)) {
+					change += (change < 0) ? cap : -cap;
+				}
+			}
+			if (direction === "cw" && change < 0) {
+				change = ((change + cap * _bigNum) % cap) - ~~(change / cap) * cap;
+			} else if (direction === "ccw" && change > 0) {
+				change = ((change - cap * _bigNum) % cap) - ~~(change / cap) * cap;
+			}
+		}
+		plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
+		pt.e = finalValue;
+		pt.u = "deg";
+		plugin._props.push(property);
+		return pt;
+	},
+	_assign = (target, source) => { // Internet Explorer doesn't have Object.assign(), so we recreate it here.
+		for (let p in source) {
+			target[p] = source[p];
+		}
+		return target;
+	},
+	_addRawTransformPTs = (plugin, transforms, target) => { //for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"
+		let startCache = _assign({}, target._gsap),
+			exclude = "perspective,force3D,transformOrigin,svgOrigin",
+			style = target.style,
+			endCache, p, startValue, endValue, startNum, endNum, startUnit, endUnit;
+		if (startCache.svg) {
+			startValue = target.getAttribute("transform");
+			target.setAttribute("transform", "");
+			style[_transformProp] = transforms;
+			endCache = _parseTransform(target, 1);
+			_removeProperty(target, _transformProp);
+			target.setAttribute("transform", startValue);
+		} else {
+			startValue = getComputedStyle(target)[_transformProp];
+			style[_transformProp] = transforms;
+			endCache = _parseTransform(target, 1);
+			style[_transformProp] = startValue;
+		}
+		for (p in _transformProps) {
+			startValue = startCache[p];
+			endValue = endCache[p];
+			if (startValue !== endValue && exclude.indexOf(p) < 0) { //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
+				startUnit = getUnit(startValue);
+				endUnit = getUnit(endValue);
+				startNum = (startUnit !== endUnit) ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
+				endNum = parseFloat(endValue);
+				plugin._pt = new PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);
+				plugin._pt.u = endUnit || 0;
+				plugin._props.push(p);
+			}
+		}
+		_assign(endCache, startCache);
+	};
+
+// handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.
+_forEachName("padding,margin,Width,Radius", (name, index) => {
+	let t = "Top",
+		r = "Right",
+		b = "Bottom",
+		l = "Left",
+		props = (index < 3 ? [t,r,b,l] : [t+l, t+r, b+r, b+l]).map(side => index < 2 ? name + side : "border" + side + name);
+	_specialProps[(index > 1 ? "border" + name : name)] = function(plugin, target, property, endValue, tween) {
+		let a, vars;
+		if (arguments.length < 4) { // getter, passed target, property, and unit (from _get())
+			a = props.map(prop => _get(plugin, prop, property));
+			vars = a.join(" ");
+			return vars.split(a[0]).length === 5 ? a[0] : vars;
+		}
+		a = (endValue + "").split(" ");
+		vars = {};
+		props.forEach((prop, i) => vars[prop] = a[i] = a[i] || a[(((i - 1) / 2) | 0)]);
+		plugin.init(target, vars, tween);
+	};
+});
+
+
+const CSSPlugin = {
+	name: "css",
+	register: _initCore,
+	targetTest(target) {
+		return target.style && target.nodeType;
+	},
+	init(target, vars, tween, index, targets) {
+		let props = this._props,
+			style = target.style,
+			startAt = tween.vars.startAt,
+			startValue, endValue, endNum, startNum, type, specialProp, p, startUnit, endUnit, relative, isTransformRelated, transformPropTween, cache, smooth, hasPriority, inlineProps;
+		_pluginInitted || _initCore();
+		// we may call init() multiple times on the same plugin instance, like when adding special properties, so make sure we don't overwrite the revert data or inlineProps
+		this.styles = this.styles || _getStyleSaver(target);
+		inlineProps = this.styles.props;
+		this.tween = tween;
+		for (p in vars) {
+			if (p === "autoRound") {
+				continue;
+			}
+			endValue = vars[p];
+			if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) { // plugins
+				continue;
+			}
+			type = typeof(endValue);
+			specialProp = _specialProps[p];
+			if (type === "function") {
+				endValue = endValue.call(tween, index, target, targets);
+				type = typeof(endValue);
+			}
+			if (type === "string" && ~endValue.indexOf("random(")) {
+				endValue = _replaceRandom(endValue);
+			}
+			if (specialProp) {
+				specialProp(this, target, p, endValue, tween) && (hasPriority = 1);
+			} else if (p.substr(0,2) === "--") { //CSS variable
+				startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();
+				endValue += "";
+				_colorExp.lastIndex = 0;
+				if (!_colorExp.test(startValue)) { // colors don't have units
+					startUnit = getUnit(startValue);
+					endUnit = getUnit(endValue);
+				}
+				endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);
+				this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p);
+				props.push(p);
+				inlineProps.push(p, 0, style[p]);
+			} else if (type !== "undefined") {
+				if (startAt && p in startAt) { // in case someone hard-codes a complex value as the start, like top: "calc(2vh / 2)". Without this, it'd use the computed value (always in px)
+					startValue = typeof(startAt[p]) === "function" ? startAt[p].call(tween, index, target, targets) : startAt[p];
+					_isString(startValue) && ~startValue.indexOf("random(") && (startValue = _replaceRandom(startValue));
+					getUnit(startValue + "") || startValue === "auto" || (startValue += _config.units[p] || getUnit(_get(target, p)) || ""); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.
+					(startValue + "").charAt(1) === "=" && (startValue = _get(target, p)); // can't work with relative values
+				} else {
+					startValue = _get(target, p);
+				}
+				startNum = parseFloat(startValue);
+				relative = (type === "string" && endValue.charAt(1) === "=") && endValue.substr(0, 2);
+				relative && (endValue = endValue.substr(2));
+				endNum = parseFloat(endValue);
+				if (p in _propertyAliases) {
+					if (p === "autoAlpha") { //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.
+						if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) { //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
+							startNum = 0;
+						}
+						inlineProps.push("visibility", 0, style.visibility);
+						_addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
+					}
+					if (p !== "scale" && p !== "transform") {
+						p = _propertyAliases[p];
+						~p.indexOf(",") && (p = p.split(",")[0]);
+					}
+				}
+
+				isTransformRelated = (p in _transformProps);
+
+				//--- TRANSFORM-RELATED ---
+				if (isTransformRelated) {
+					this.styles.save(p);
+					if (!transformPropTween) {
+						cache = target._gsap;
+						(cache.renderTransform && !vars.parseTransform) || _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.
+						smooth = (vars.smoothOrigin !== false && cache.smooth);
+						transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)
+						transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.
+					}
+					if (p === "scale") {
+						this._pt = new PropTween(this._pt, cache, "scaleY", cache.scaleY, ((relative ? _parseRelative(cache.scaleY, relative + endNum) : endNum) - cache.scaleY) || 0, _renderCSSProp);
+						this._pt.u = 0;
+						props.push("scaleY", p);
+						p += "X";
+					} else if (p === "transformOrigin") {
+						inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);
+						endValue = _convertKeywordsToPercentages(endValue); //in case something like "left top" or "bottom right" is passed in. Convert to percentages.
+						if (cache.svg) {
+							_applySVGOrigin(target, endValue, 0, smooth, 0, this);
+						} else {
+							endUnit = parseFloat(endValue.split(" ")[2]) || 0; //handle the zOrigin separately!
+							endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);
+							_addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
+						}
+						continue;
+					} else if (p === "svgOrigin") {
+						_applySVGOrigin(target, endValue, 1, smooth, 0, this);
+						continue;
+					} else if (p in _rotationalProperties) {
+						_addRotationalPropTween(this, cache, p, startNum, relative ? _parseRelative(startNum, relative + endValue) : endValue);
+						continue;
+
+					} else if (p === "smoothOrigin") {
+						_addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);
+						continue;
+					} else if (p === "force3D") {
+						cache[p] = endValue;
+						continue;
+					} else if (p === "transform") {
+						_addRawTransformPTs(this, endValue, target);
+						continue;
+					}
+				} else if (!(p in style)) {
+					p = _checkPropPrefix(p) || p;
+				}
+
+				if (isTransformRelated || ((endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && (p in style))) {
+					startUnit = (startValue + "").substr((startNum + "").length);
+					endNum || (endNum = 0); // protect against NaN
+					endUnit = getUnit(endValue) || ((p in _config.units) ? _config.units[p] : startUnit);
+					startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));
+					this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? _parseRelative(startNum, relative + endNum) : endNum) - startNum, (!isTransformRelated && (endUnit === "px" || p === "zIndex") && vars.autoRound !== false) ? _renderRoundedCSSProp : _renderCSSProp);
+					this._pt.u = endUnit || 0;
+					if (startUnit !== endUnit && endUnit !== "%") { //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)
+						this._pt.b = startValue;
+						this._pt.r = _renderCSSPropWithBeginning;
+					}
+				} else if (!(p in style)) {
+					if (p in target) { //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.
+						this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);
+					} else if (p !== "parseTransform") {
+						_missingPlugin(p, endValue);
+						continue;
+					}
+				} else {
+					_tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);
+				}
+				isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : inlineProps.push(p, 1, startValue || target[p]));
+				props.push(p);
+			}
+		}
+		hasPriority && _sortPropTweensByPriority(this);
+
+	},
+	render(ratio, data) {
+		if (data.tween._time || !_reverting()) {
+			let pt = data._pt;
+			while (pt) {
+				pt.r(ratio, pt.d);
+				pt = pt._next;
+			}
+		} else {
+			data.styles.revert();
+		}
+	},
+	get: _get,
+	aliases: _propertyAliases,
+	getSetter(target, property, plugin) { //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.
+		let p = _propertyAliases[property];
+		(p && p.indexOf(",") < 0) && (property = p);
+		return (property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x"))) ? (plugin && _recentSetterPlugin === plugin ? (property === "scale" ? _setterScale : _setterTransform) : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender)) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : _getSetter(target, property);
+	},
+	core: { _removeProperty, _getMatrix }
+
+};
+
+gsap.utils.checkPrefix = _checkPropPrefix;
+gsap.core.getStyleSaver = _getStyleSaver;
+(function(positionAndScale, rotation, others, aliases) {
+	let all = _forEachName(positionAndScale + "," + rotation + "," + others, name => {_transformProps[name] = 1;});
+	_forEachName(rotation, name => {_config.units[name] = "deg"; _rotationalProperties[name] = 1;});
+	_propertyAliases[all[13]] = positionAndScale + "," + rotation;
+	_forEachName(aliases, name => {
+		let split = name.split(":");
+		_propertyAliases[split[1]] = all[split[0]];
+	});
+})("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");
+_forEachName("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", name => {_config.units[name] = "px";});
+
+gsap.registerPlugin(CSSPlugin);
+
+export { CSSPlugin, _createElement, _getBBox, _checkPropPrefix as checkPrefix, CSSPlugin as default };
diff --git a/dist/CSSPlugin.d.ts b/dist/CSSPlugin.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..100279a763f4aa7775f4de027b34dcac5ba05038
--- /dev/null
+++ b/dist/CSSPlugin.d.ts
@@ -0,0 +1,1157 @@
+import { _forEachName, gsap, _plugins, _checkPlugin, _replaceRandom, _colorExp, getUnit, _isString, _config, PropTween, _parseRelative, _missingPlugin, _sortPropTweensByPriority, _isUndefined, _getSetter, _round, _ticker, _getCache, _getProperty, _renderComplexString, _colorStringFilter, _numWithUnitExp, _relExp, GSCache, _numExp } from './gsap-core.js';
+
+/*!
+ * CSSPlugin 3.12.5
+ * https://gsap.com
+ *
+ * Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let _win, _doc, _docElement, _pluginInitted, _tempDiv, _recentSetterPlugin, _reverting,
+	_windowExists = () => typeof(window) !== "undefined",
+	_transformProps = {},
+	_RAD2DEG = 180 / Math.PI,
+	_DEG2RAD = Math.PI / 180,
+	_atan2 = Math.atan2,
+	_bigNum = 1e8,
+	_capsExp = /([A-Z])/g,
+	_horizontalExp = /(left|right|width|margin|padding|x)/i,
+	_complexExp = /[\s,\(]\S/,
+	_propertyAliases = {autoAlpha:"opacity,visibility", scale:"scaleX,scaleY", alpha:"opacity"},
+	_renderCSSProp = (ratio, data) => data.set(data.t, data.p, (Math.round((data.s + data.c * ratio) * 10000) / 10000) + data.u, data),
+	_renderPropWithEnd = (ratio, data) => data.set(data.t, data.p, ratio === 1 ? data.e : (Math.round((data.s + data.c * ratio) * 10000) / 10000) + data.u, data),
+	_renderCSSPropWithBeginning = (ratio, data) => data.set(data.t, data.p, ratio ? (Math.round((data.s + data.c * ratio) * 10000) / 10000) + data.u : data.b, data), //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)
+	_renderRoundedCSSProp = (ratio, data) => {
+		let value = data.s + data.c * ratio;
+		data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
+	},
+	_renderNonTweeningValue = (ratio, data) => data.set(data.t, data.p, ratio ? data.e : data.b, data),
+	_renderNonTweeningValueOnlyAtEnd = (ratio, data) => data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data),
+	_setterCSSStyle = (target, property, value) => target.style[property] = value,
+	_setterCSSProp = (target, property, value) => target.style.setProperty(property, value),
+	_setterTransform = (target, property, value) => target._gsap[property] = value,
+	_setterScale = (target, property, value) => target._gsap.scaleX = target._gsap.scaleY = value,
+	_setterScaleWithRender = (target, property, value, data, ratio) => {
+		let cache = target._gsap;
+		cache.scaleX = cache.scaleY = value;
+		cache.renderTransform(ratio, cache);
+	},
+	_setterTransformWithRender = (target, property, value, data, ratio) => {
+		let cache = target._gsap;
+		cache[property] = value;
+		cache.renderTransform(ratio, cache);
+	},
+	_transformProp = "transform",
+	_transformOriginProp = _transformProp + "Origin",
+	_saveStyle = function(property, isNotCSS) {
+		let target = this.target,
+			style = target.style,
+			cache = target._gsap;
+		if ((property in _transformProps) && style) {
+			this.tfm = this.tfm || {};
+			if (property !== "transform") {
+				property = _propertyAliases[property] || property;
+				~property.indexOf(",") ? property.split(",").forEach(a => this.tfm[a] = _get(target, a)) : (this.tfm[property] = cache.x ? cache[property] : _get(target, property)); // note: scale would map to "scaleX,scaleY", thus we loop and apply them both.
+				property === _transformOriginProp && (this.tfm.zOrigin = cache.zOrigin);
+			} else {
+				return _propertyAliases.transform.split(",").forEach(p => _saveStyle.call(this, p, isNotCSS));
+			}
+			if (this.props.indexOf(_transformProp) >= 0) { return; }
+			if (cache.svg) {
+				this.svgo = target.getAttribute("data-svg-origin");
+				this.props.push(_transformOriginProp, isNotCSS, "");
+			}
+			property = _transformProp;
+		}
+		(style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);
+	},
+	_removeIndependentTransforms = style => {
+		if (style.translate) {
+			style.removeProperty("translate");
+			style.removeProperty("scale");
+			style.removeProperty("rotate");
+		}
+	},
+	_revertStyle = function() {
+		let props = this.props,
+			target = this.target,
+			style = target.style,
+			cache = target._gsap,
+			i, p;
+		for (i = 0; i < props.length; i+=3) { // stored like this: property, isNotCSS, value
+			props[i+1] ? target[props[i]] = props[i+2] : props[i+2] ? (style[props[i]] = props[i+2]) : style.removeProperty(props[i].substr(0,2) === "--" ? props[i] : props[i].replace(_capsExp, "-$1").toLowerCase());
+		}
+		if (this.tfm) {
+			for (p in this.tfm) {
+				cache[p] = this.tfm[p];
+			}
+			if (cache.svg) {
+				cache.renderTransform();
+				target.setAttribute("data-svg-origin", this.svgo || "");
+			}
+			i = _reverting();
+			if ((!i || !i.isStart) && !style[_transformProp]) {
+				_removeIndependentTransforms(style);
+				if (cache.zOrigin && style[_transformOriginProp]) {
+					style[_transformOriginProp] += " " + cache.zOrigin + "px"; // since we're uncaching, we must put the zOrigin back into the transformOrigin so that we can pull it out accurately when we parse again. Otherwise, we'd lose the z portion of the origin since we extract it to protect from Safari bugs.
+					cache.zOrigin = 0;
+					cache.renderTransform();
+				}
+				cache.uncache = 1; // if it's a startAt that's being reverted in the _initTween() of the core, we don't need to uncache transforms. This is purely a performance optimization.
+			}
+		}
+	},
+	_getStyleSaver = (target, properties) => {
+		let saver = {
+			target,
+			props: [],
+			revert: _revertStyle,
+			save: _saveStyle
+		};
+		target._gsap || gsap.core.getCache(target); // just make sure there's a _gsap cache defined because we read from it in _saveStyle() and it's more efficient to just check it here once.
+		properties && properties.split(",").forEach(p => saver.save(p));
+		return saver;
+	},
+	_supports3D,
+	_createElement = (type, ns) => {
+		let e = _doc.createElementNS ? _doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.
+		return e && e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://gsap.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
+	},
+	_getComputedProperty = (target, property, skipPrefixFallback) => {
+		let cs = getComputedStyle(target);
+		return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || (!skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1)) || ""; //css variables may not need caps swapped out for dashes and lowercase.
+	},
+	_prefixes = "O,Moz,ms,Ms,Webkit".split(","),
+	_checkPropPrefix = (property, element, preferPrefix) => {
+		let e = element || _tempDiv,
+			s = e.style,
+			i = 5;
+		if (property in s && !preferPrefix) {
+			return property;
+		}
+		property = property.charAt(0).toUpperCase() + property.substr(1);
+		while (i-- && !((_prefixes[i]+property) in s)) { }
+		return (i < 0) ? null : ((i === 3) ? "ms" : (i >= 0) ? _prefixes[i] : "") + property;
+	},
+	_initCore = () => {
+		if (_windowExists() && window.document) {
+			_win = window;
+			_doc = _win.document;
+			_docElement = _doc.documentElement;
+			_tempDiv = _createElement("div") || {style:{}};
+			_createElement("div");
+			_transformProp = _checkPropPrefix(_transformProp);
+			_transformOriginProp = _transformProp + "Origin";
+			_tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.
+			_supports3D = !!_checkPropPrefix("perspective");
+			_reverting = gsap.core.reverting;
+			_pluginInitted = 1;
+		}
+	},
+	_getBBoxHack = function(swapIfPossible) { //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
+		let svg = _createElement("svg", (this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns")) || "http://www.w3.org/2000/svg"),
+			oldParent = this.parentNode,
+			oldSibling = this.nextSibling,
+			oldCSS = this.style.cssText,
+			bbox;
+		_docElement.appendChild(svg);
+		svg.appendChild(this);
+		this.style.display = "block";
+		if (swapIfPossible) {
+			try {
+				bbox = this.getBBox();
+				this._gsapBBox = this.getBBox; //store the original
+				this.getBBox = _getBBoxHack;
+			} catch (e) { }
+		} else if (this._gsapBBox) {
+			bbox = this._gsapBBox();
+		}
+		if (oldParent) {
+			if (oldSibling) {
+				oldParent.insertBefore(this, oldSibling);
+			} else {
+				oldParent.appendChild(this);
+			}
+		}
+		_docElement.removeChild(svg);
+		this.style.cssText = oldCSS;
+		return bbox;
+	},
+	_getAttributeFallbacks = (target, attributesArray) => {
+		let i = attributesArray.length;
+		while (i--) {
+			if (target.hasAttribute(attributesArray[i])) {
+				return target.getAttribute(attributesArray[i]);
+			}
+		}
+	},
+	_getBBox = target => {
+		let bounds;
+		try {
+			bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
+		} catch (error) {
+			bounds = _getBBoxHack.call(target, true);
+		}
+		(bounds && (bounds.width || bounds.height)) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true));
+		//some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.
+		return (bounds && !bounds.width && !bounds.x && !bounds.y) ? {x: +_getAttributeFallbacks(target, ["x","cx","x1"]) || 0, y:+_getAttributeFallbacks(target, ["y","cy","y1"]) || 0, width:0, height:0} : bounds;
+	},
+	_isSVG = e => !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e)), //reports if the element is an SVG on which getBBox() actually works
+	_removeProperty = (target, property) => {
+		if (property) {
+			let style = target.style,
+				first2Chars;
+			if (property in _transformProps && property !== _transformOriginProp) {
+				property = _transformProp;
+			}
+			if (style.removeProperty) {
+				first2Chars = property.substr(0,2);
+				if (first2Chars === "ms" || property.substr(0,6) === "webkit") { //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
+					property = "-" + property;
+				}
+				style.removeProperty(first2Chars === "--" ? property : property.replace(_capsExp, "-$1").toLowerCase());
+			} else { //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
+				style.removeAttribute(property);
+			}
+		}
+	},
+	_addNonTweeningPT = (plugin, target, property, beginning, end, onlySetAtEnd) => {
+		let pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
+		plugin._pt = pt;
+		pt.b = beginning;
+		pt.e = end;
+		plugin._props.push(property);
+		return pt;
+	},
+	_nonConvertibleUnits = {deg:1, rad:1, turn:1},
+	_nonStandardLayouts = {grid:1, flex:1},
+	//takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.
+	_convertToUnit = (target, property, value, unit) => {
+		let curValue = parseFloat(value) || 0,
+			curUnit = (value + "").trim().substr((curValue + "").length) || "px", // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()
+			style = _tempDiv.style,
+			horizontal = _horizontalExp.test(property),
+			isRootSVG = target.tagName.toLowerCase() === "svg",
+			measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
+			amount = 100,
+			toPixels = unit === "px",
+			toPercent = unit === "%",
+			px, parent, cache, isSVG;
+		if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
+			return curValue;
+		}
+		(curUnit !== "px" && !toPixels) && (curValue = _convertToUnit(target, property, value, "px"));
+		isSVG = target.getCTM && _isSVG(target);
+		if ((toPercent || curUnit === "%") && (_transformProps[property] || ~property.indexOf("adius"))) {
+			px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];
+			return _round(toPercent ? curValue / px * amount : curValue / 100 * px);
+		}
+		style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
+		parent = (~property.indexOf("adius") || (unit === "em" && target.appendChild && !isRootSVG)) ? target : target.parentNode;
+		if (isSVG) {
+			parent = (target.ownerSVGElement || {}).parentNode;
+		}
+		if (!parent || parent === _doc || !parent.appendChild) {
+			parent = _doc.body;
+		}
+		cache = parent._gsap;
+		if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time && !cache.uncache) {
+			return _round(curValue / cache.width * amount);
+		} else {
+			if (toPercent && (property === "height" || property === "width")) { // if we're dealing with width/height that's inside a container with padding and/or it's a flexbox/grid container, we must apply it to the target itself rather than the _tempDiv in order to ensure complete accuracy, factoring in the parent's padding.
+				let v = target.style[property];
+				target.style[property] = amount + unit;
+				px = target[measureProperty];
+				v ? (target.style[property] = v) : _removeProperty(target, property);
+			} else {
+				(toPercent || curUnit === "%") && !_nonStandardLayouts[_getComputedProperty(parent, "display")] && (style.position = _getComputedProperty(target, "position"));
+				(parent === target) && (style.position = "static"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.
+				parent.appendChild(_tempDiv);
+				px = _tempDiv[measureProperty];
+				parent.removeChild(_tempDiv);
+				style.position = "absolute";
+			}
+			if (horizontal && toPercent) {
+				cache = _getCache(parent);
+				cache.time = _ticker.time;
+				cache.width = parent[measureProperty];
+			}
+		}
+		return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
+	},
+	_get = (target, property, unit, uncache) => {
+		let value;
+		_pluginInitted || _initCore();
+		if ((property in _propertyAliases) && property !== "transform") {
+			property = _propertyAliases[property];
+			if (~property.indexOf(",")) {
+				property = property.split(",")[0];
+			}
+		}
+		if (_transformProps[property] && property !== "transform") {
+			value = _parseTransform(target, uncache);
+			value = (property !== "transformOrigin") ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
+		} else {
+			value = target.style[property];
+			if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
+				value = (_specialProps[property] && _specialProps[property](target, property, unit)) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === "opacity" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius
+			}
+		}
+		return unit && !~(value + "").trim().indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
+
+	},
+	_tweenComplexCSSString = function(target, prop, start, end) { // note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
+		if (!start || start === "none") { // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://gsap.com/forums/topic/18310-clippath-doesnt-work-on-ios/
+			let p = _checkPropPrefix(prop, target, 1),
+				s = p && _getComputedProperty(target, p, 1);
+			if (s && s !== start) {
+				prop = p;
+				start = s;
+			} else if (prop === "borderColor") {
+				start = _getComputedProperty(target, "borderTopColor"); // Firefox bug: always reports "borderColor" as "", so we must fall back to borderTopColor. See https://gsap.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/
+			}
+		}
+		let pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),
+			index = 0,
+			matchIndex = 0,
+			a, result,	startValues, startNum, color, startValue, endValue, endNum, chunk, endUnit, startUnit, endValues;
+		pt.b = start;
+		pt.e = end;
+		start += ""; // ensure values are strings
+		end += "";
+		if (end === "auto") {
+			startValue = target.style[prop];
+			target.style[prop] = end;
+			end = _getComputedProperty(target, prop) || end;
+			startValue ? (target.style[prop] = startValue) : _removeProperty(target, prop);
+		}
+		a = [start, end];
+		_colorStringFilter(a); // pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().
+		start = a[0];
+		end = a[1];
+		startValues = start.match(_numWithUnitExp) || [];
+		endValues = end.match(_numWithUnitExp) || [];
+		if (endValues.length) {
+			while ((result = _numWithUnitExp.exec(end))) {
+				endValue = result[0];
+				chunk = end.substring(index, result.index);
+				if (color) {
+					color = (color + 1) % 5;
+				} else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
+					color = 1;
+				}
+				if (endValue !== (startValue = startValues[matchIndex++] || "")) {
+					startNum = parseFloat(startValue) || 0;
+					startUnit = startValue.substr((startNum + "").length);
+					(endValue.charAt(1) === "=") && (endValue = _parseRelative(startNum, endValue) + startUnit);
+					endNum = parseFloat(endValue);
+					endUnit = endValue.substr((endNum + "").length);
+					index = _numWithUnitExp.lastIndex - endUnit.length;
+					if (!endUnit) { //if something like "perspective:300" is passed in and we must add a unit to the end
+						endUnit = endUnit || _config.units[prop] || startUnit;
+						if (index === end.length) {
+							end += endUnit;
+							pt.e += endUnit;
+						}
+					}
+					if (startUnit !== endUnit) {
+						startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
+					}
+					// these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.
+					pt._pt = {
+						_next: pt._pt,
+						p: (chunk || (matchIndex === 1)) ? chunk : ",", //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
+						s: startNum,
+						c: endNum - startNum,
+						m: (color && color < 4) || prop === "zIndex" ? Math.round : 0
+					};
+				}
+			}
+			pt.c = (index < end.length) ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
+		} else {
+			pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
+		}
+		_relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
+		this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.
+		return pt;
+	},
+	_keywordToPercent = {top:"0%", bottom:"100%", left:"0%", right:"100%", center:"50%"},
+	_convertKeywordsToPercentages = value => {
+		let split = value.split(" "),
+			x = split[0],
+			y = split[1] || "50%";
+		if (x === "top" || x === "bottom" || y === "left" || y === "right") { //the user provided them in the wrong order, so flip them
+			value = x;
+			x = y;
+			y = value;
+		}
+		split[0] = _keywordToPercent[x] || x;
+		split[1] = _keywordToPercent[y] || y;
+		return split.join(" ");
+	},
+	_renderClearProps = (ratio, data) => {
+		if (data.tween && data.tween._time === data.tween._dur) {
+			let target = data.t,
+				style = target.style,
+				props = data.u,
+				cache = target._gsap,
+				prop, clearTransforms, i;
+			if (props === "all" || props === true) {
+				style.cssText = "";
+				clearTransforms = 1;
+			} else {
+				props = props.split(",");
+				i = props.length;
+				while (--i > -1) {
+					prop = props[i];
+					if (_transformProps[prop]) {
+						clearTransforms = 1;
+						prop = (prop === "transformOrigin") ? _transformOriginProp : _transformProp;
+					}
+					_removeProperty(target, prop);
+				}
+			}
+			if (clearTransforms) {
+				_removeProperty(target, _transformProp);
+				if (cache) {
+					cache.svg && target.removeAttribute("transform");
+					_parseTransform(target, 1); // force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.
+					cache.uncache = 1;
+					_removeIndependentTransforms(style);
+				}
+			}
+		}
+	},
+	// note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.
+	_specialProps = {
+		clearProps(plugin, target, property, endValue, tween) {
+			if (tween.data !== "isFromStart") {
+				let pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
+				pt.u = endValue;
+				pt.pr = -10;
+				pt.tween = tween;
+				plugin._props.push(property);
+				return 1;
+			}
+		}
+		/* className feature (about 0.4kb gzipped).
+		, className(plugin, target, property, endValue, tween) {
+			let _renderClassName = (ratio, data) => {
+					data.css.render(ratio, data.css);
+					if (!ratio || ratio === 1) {
+						let inline = data.rmv,
+							target = data.t,
+							p;
+						target.setAttribute("class", ratio ? data.e : data.b);
+						for (p in inline) {
+							_removeProperty(target, p);
+						}
+					}
+				},
+				_getAllStyles = (target) => {
+					let styles = {},
+						computed = getComputedStyle(target),
+						p;
+					for (p in computed) {
+						if (isNaN(p) && p !== "cssText" && p !== "length") {
+							styles[p] = computed[p];
+						}
+					}
+					_setDefaults(styles, _parseTransform(target, 1));
+					return styles;
+				},
+				startClassList = target.getAttribute("class"),
+				style = target.style,
+				cssText = style.cssText,
+				cache = target._gsap,
+				classPT = cache.classPT,
+				inlineToRemoveAtEnd = {},
+				data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
+				changingVars = {},
+				startVars = _getAllStyles(target),
+				transformRelated = /(transform|perspective)/i,
+				endVars, p;
+			if (classPT) {
+				classPT.r(1, classPT.d);
+				_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
+			}
+			target.setAttribute("class", data.e);
+			endVars = _getAllStyles(target, true);
+			target.setAttribute("class", startClassList);
+			for (p in endVars) {
+				if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
+					changingVars[p] = endVars[p];
+					if (!style[p] && style[p] !== "0") {
+						inlineToRemoveAtEnd[p] = 1;
+					}
+				}
+			}
+			cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
+			if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://gsap.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
+				style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
+			}
+			_parseTransform(target, true); //to clear the caching of transforms
+			data.css = new gsap.plugins.css();
+			data.css.init(target, changingVars, tween);
+			plugin._props.push(...data.css._props);
+			return 1;
+		}
+		*/
+	},
+
+
+
+
+
+	/*
+	 * --------------------------------------------------------------------------------------
+	 * TRANSFORMS
+	 * --------------------------------------------------------------------------------------
+	 */
+	_identity2DMatrix = [1,0,0,1,0,0],
+	_rotationalProperties = {},
+	_isNullTransform = value => (value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value),
+	_getComputedTransformMatrixAsArray = target => {
+		let matrixString = _getComputedProperty(target, _transformProp);
+		return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);
+	},
+	_getMatrix = (target, force2D) => {
+		let cache = target._gsap || _getCache(target),
+			style = target.style,
+			matrix = _getComputedTransformMatrixAsArray(target),
+			parent, nextSibling, temp, addedToDOM;
+		if (cache.svg && target.getAttribute("transform")) {
+			temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.
+			matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
+			return (matrix.join(",") === "1,0,0,1,0,0") ? _identity2DMatrix : matrix;
+		} else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) { //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
+			//browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
+			temp = style.display;
+			style.display = "block";
+			parent = target.parentNode;
+			if (!parent || !target.offsetParent) { // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375
+				addedToDOM = 1; //flag
+				nextSibling = target.nextElementSibling;
+				_docElement.appendChild(target); //we must add it to the DOM in order to get values properly
+			}
+			matrix = _getComputedTransformMatrixAsArray(target);
+			temp ? (style.display = temp) : _removeProperty(target, "display");
+			if (addedToDOM) {
+				nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
+			}
+		}
+		return (force2D && matrix.length > 6) ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
+	},
+	_applySVGOrigin = (target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) => {
+		let cache = target._gsap,
+			matrix = matrixArray || _getMatrix(target, true),
+			xOriginOld = cache.xOrigin || 0,
+			yOriginOld = cache.yOrigin || 0,
+			xOffsetOld = cache.xOffset || 0,
+			yOffsetOld = cache.yOffset || 0,
+			[a, b, c, d, tx, ty] = matrix,
+			originSplit = origin.split(" "),
+			xOrigin = parseFloat(originSplit[0]) || 0,
+			yOrigin = parseFloat(originSplit[1]) || 0,
+			bounds, determinant, x, y;
+		if (!originIsAbsolute) {
+			bounds = _getBBox(target);
+			xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
+			yOrigin = bounds.y + (~((originSplit[1] || originSplit[0]).indexOf("%")) ? yOrigin / 100 * bounds.height : yOrigin);
+			// if (!("xOrigin" in cache) && (xOrigin || yOrigin)) { // added in 3.12.3, reverted in 3.12.4; requires more exploration
+			// 	xOrigin -= bounds.x;
+			// 	yOrigin -= bounds.y;
+			// }
+		} else if (matrix !== _identity2DMatrix && (determinant = (a * d - b * c))) { //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
+			x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + ((c * ty - d * tx) / determinant);
+			y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - ((a * ty - b * tx) / determinant);
+			xOrigin = x;
+			yOrigin = y;
+			// theory: we only had to do this for smoothing and it assumes that the previous one was not originIsAbsolute.
+		}
+		if (smooth || (smooth !== false && cache.smooth)) {
+			tx = xOrigin - xOriginOld;
+			ty = yOrigin - yOriginOld;
+			cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
+			cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
+		} else {
+			cache.xOffset = cache.yOffset = 0;
+		}
+		cache.xOrigin = xOrigin;
+		cache.yOrigin = yOrigin;
+		cache.smooth = !!smooth;
+		cache.origin = origin;
+		cache.originIsAbsolute = !!originIsAbsolute;
+		target.style[_transformOriginProp] = "0px 0px"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).
+		if (pluginToAddPropTweensTo) {
+			_addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);
+			_addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);
+			_addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);
+			_addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
+		}
+		target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
+	},
+	_parseTransform = (target, uncache) => {
+		let cache = target._gsap || new GSCache(target);
+		if ("x" in cache && !uncache && !cache.uncache) {
+			return cache;
+		}
+		let style = target.style,
+			invertedScaleX = cache.scaleX < 0,
+			px = "px",
+			deg = "deg",
+			cs = getComputedStyle(target),
+			origin = _getComputedProperty(target, _transformOriginProp) || "0",
+			x, y, z, scaleX, scaleY, rotation, rotationX, rotationY, skewX, skewY, perspective, xOrigin, yOrigin,
+			matrix, angle, cos, sin, a, b, c, d, a12, a22, t1, t2, t3, a13, a23, a33, a42, a43, a32;
+		x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
+		scaleX = scaleY = 1;
+		cache.svg = !!(target.getCTM && _isSVG(target));
+
+		if (cs.translate) { // accommodate independent transforms by combining them into normal ones.
+			if (cs.translate !== "none" || cs.scale !== "none" || cs.rotate !== "none") {
+				style[_transformProp] = (cs.translate !== "none" ? "translate3d(" + (cs.translate + " 0 0").split(" ").slice(0, 3).join(", ") + ") " : "") + (cs.rotate !== "none" ? "rotate(" + cs.rotate + ") " : "") + (cs.scale !== "none" ? "scale(" + cs.scale.split(" ").join(",") + ") " : "") + (cs[_transformProp] !== "none" ? cs[_transformProp] : "");
+			}
+			style.scale = style.rotate = style.translate = "none";
+		}
+
+		matrix = _getMatrix(target, cache.svg);
+		if (cache.svg) {
+			if (cache.uncache) { // if cache.uncache is true (and maybe if origin is 0,0), we need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + "px " + (cache.yOrigin - bbox.y) + "px". Previously we let the data-svg-origin stay instead, but when introducing revert(), it complicated things.
+				t2 = target.getBBox();
+				origin = (cache.xOrigin - t2.x) + "px " + (cache.yOrigin - t2.y) + "px";
+				t1 = "";
+			} else {
+				t1 = !uncache && target.getAttribute("data-svg-origin"); //  Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.
+			}
+			_applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
+		}
+		xOrigin = cache.xOrigin || 0;
+		yOrigin = cache.yOrigin || 0;
+		if (matrix !== _identity2DMatrix) {
+			a = matrix[0]; //a11
+			b = matrix[1]; //a21
+			c = matrix[2]; //a31
+			d = matrix[3]; //a41
+			x = a12 = matrix[4];
+			y = a22 = matrix[5];
+
+			//2D matrix
+			if (matrix.length === 6) {
+				scaleX = Math.sqrt(a * a + b * b);
+				scaleY = Math.sqrt(d * d + c * c);
+				rotation = (a || b) ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).
+				skewX = (c || d) ? _atan2(c, d) * _RAD2DEG + rotation : 0;
+				skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));
+				if (cache.svg) {
+					x -= xOrigin - (xOrigin * a + yOrigin * c);
+					y -= yOrigin - (xOrigin * b + yOrigin * d);
+				}
+
+			//3D matrix
+			} else {
+				a32 = matrix[6];
+				a42 = matrix[7];
+				a13 = matrix[8];
+				a23 = matrix[9];
+				a33 = matrix[10];
+				a43 = matrix[11];
+				x = matrix[12];
+				y = matrix[13];
+				z = matrix[14];
+
+				angle = _atan2(a32, a33);
+				rotationX = angle * _RAD2DEG;
+				//rotationX
+				if (angle) {
+					cos = Math.cos(-angle);
+					sin = Math.sin(-angle);
+					t1 = a12*cos+a13*sin;
+					t2 = a22*cos+a23*sin;
+					t3 = a32*cos+a33*sin;
+					a13 = a12*-sin+a13*cos;
+					a23 = a22*-sin+a23*cos;
+					a33 = a32*-sin+a33*cos;
+					a43 = a42*-sin+a43*cos;
+					a12 = t1;
+					a22 = t2;
+					a32 = t3;
+				}
+				//rotationY
+				angle = _atan2(-c, a33);
+				rotationY = angle * _RAD2DEG;
+				if (angle) {
+					cos = Math.cos(-angle);
+					sin = Math.sin(-angle);
+					t1 = a*cos-a13*sin;
+					t2 = b*cos-a23*sin;
+					t3 = c*cos-a33*sin;
+					a43 = d*sin+a43*cos;
+					a = t1;
+					b = t2;
+					c = t3;
+				}
+				//rotationZ
+				angle = _atan2(b, a);
+				rotation = angle * _RAD2DEG;
+				if (angle) {
+					cos = Math.cos(angle);
+					sin = Math.sin(angle);
+					t1 = a*cos+b*sin;
+					t2 = a12*cos+a22*sin;
+					b = b*cos-a*sin;
+					a22 = a22*cos-a12*sin;
+					a = t1;
+					a12 = t2;
+				}
+
+				if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) { //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
+					rotationX = rotation = 0;
+					rotationY = 180 - rotationY;
+				}
+				scaleX = _round(Math.sqrt(a * a + b * b + c * c));
+				scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));
+				angle = _atan2(a12, a22);
+				skewX = (Math.abs(angle) > 0.0002) ? angle * _RAD2DEG : 0;
+				perspective = a43 ? 1 / ((a43 < 0) ? -a43 : a43) : 0;
+			}
+
+			if (cache.svg) { //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).
+				t1 = target.getAttribute("transform");
+				cache.forceCSS = target.setAttribute("transform", "") || (!_isNullTransform(_getComputedProperty(target, _transformProp)));
+				t1 && target.setAttribute("transform", t1);
+			}
+		}
+
+		if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
+			if (invertedScaleX) {
+				scaleX *= -1;
+				skewX += (rotation <= 0) ? 180 : -180;
+				rotation += (rotation <= 0) ? 180 : -180;
+			} else {
+				scaleY *= -1;
+				skewX += (skewX <= 0) ? 180 : -180;
+			}
+		}
+		uncache = uncache || cache.uncache;
+		cache.x = x - ((cache.xPercent = x && ((!uncache && cache.xPercent) || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;
+		cache.y = y - ((cache.yPercent = y && ((!uncache && cache.yPercent) || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;
+		cache.z = z + px;
+		cache.scaleX = _round(scaleX);
+		cache.scaleY = _round(scaleY);
+		cache.rotation = _round(rotation) + deg;
+		cache.rotationX = _round(rotationX) + deg;
+		cache.rotationY = _round(rotationY) + deg;
+		cache.skewX = skewX + deg;
+		cache.skewY = skewY + deg;
+		cache.transformPerspective = perspective + px;
+		if ((cache.zOrigin = parseFloat(origin.split(" ")[2]) || (!uncache && cache.zOrigin) || 0)) {
+			style[_transformOriginProp] = _firstTwoOnly(origin);
+		}
+		cache.xOffset = cache.yOffset = 0;
+		cache.force3D = _config.force3D;
+		cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
+		cache.uncache = 0;
+		return cache;
+	},
+	_firstTwoOnly = value => (value = value.split(" "))[0] + " " + value[1], //for handling transformOrigin values, stripping out the 3rd dimension
+	_addPxTranslate = (target, start, value) => {
+		let unit = getUnit(start);
+		return _round(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
+	},
+	_renderNon3DTransforms = (ratio, cache) => {
+		cache.z = "0px";
+		cache.rotationY = cache.rotationX = "0deg";
+		cache.force3D = 0;
+		_renderCSSTransforms(ratio, cache);
+	},
+	_zeroDeg = "0deg",
+	_zeroPx = "0px",
+	_endParenthesis = ") ",
+	_renderCSSTransforms = function(ratio, cache) {
+		let {xPercent, yPercent, x, y, z, rotation, rotationY, rotationX, skewX, skewY, scaleX, scaleY, transformPerspective, force3D, target, zOrigin} = cache || this,
+			transforms = "",
+			use3D = (force3D === "auto" && ratio && ratio !== 1) || force3D === true;
+
+		// Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)
+		if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
+			let angle = parseFloat(rotationY) * _DEG2RAD,
+				a13 = Math.sin(angle),
+				a33 = Math.cos(angle),
+				cos;
+			angle = parseFloat(rotationX) * _DEG2RAD;
+			cos = Math.cos(angle);
+			x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
+			y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
+			z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
+		}
+
+		if (transformPerspective !== _zeroPx) {
+			transforms += "perspective(" + transformPerspective + _endParenthesis;
+		}
+		if (xPercent || yPercent) {
+			transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
+		}
+		if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
+			transforms += (z !== _zeroPx || use3D) ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
+		}
+		if (rotation !== _zeroDeg) {
+			transforms += "rotate(" + rotation + _endParenthesis;
+		}
+		if (rotationY !== _zeroDeg) {
+			transforms += "rotateY(" + rotationY + _endParenthesis;
+		}
+		if (rotationX !== _zeroDeg) {
+			transforms += "rotateX(" + rotationX + _endParenthesis;
+		}
+		if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
+			transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
+		}
+		if (scaleX !== 1 || scaleY !== 1) {
+			transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
+		}
+		target.style[_transformProp] = transforms || "translate(0, 0)";
+	},
+	_renderSVGTransforms = function(ratio, cache) {
+		let {xPercent, yPercent, x, y, rotation, skewX, skewY, scaleX, scaleY, target, xOrigin, yOrigin, xOffset, yOffset, forceCSS} = cache || this,
+			tx = parseFloat(x),
+			ty = parseFloat(y),
+			a11, a21, a12, a22, temp;
+		rotation = parseFloat(rotation);
+		skewX = parseFloat(skewX);
+		skewY = parseFloat(skewY);
+		if (skewY) { //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
+			skewY = parseFloat(skewY);
+			skewX += skewY;
+			rotation += skewY;
+		}
+		if (rotation || skewX) {
+			rotation *= _DEG2RAD;
+			skewX *= _DEG2RAD;
+			a11 = Math.cos(rotation) * scaleX;
+			a21 = Math.sin(rotation) * scaleX;
+			a12 = Math.sin(rotation - skewX) * -scaleY;
+			a22 = Math.cos(rotation - skewX) * scaleY;
+			if (skewX) {
+				skewY *= _DEG2RAD;
+				temp = Math.tan(skewX - skewY);
+				temp = Math.sqrt(1 + temp * temp);
+				a12 *= temp;
+				a22 *= temp;
+				if (skewY) {
+					temp = Math.tan(skewY);
+					temp = Math.sqrt(1 + temp * temp);
+					a11 *= temp;
+					a21 *= temp;
+				}
+			}
+			a11 = _round(a11);
+			a21 = _round(a21);
+			a12 = _round(a12);
+			a22 = _round(a22);
+		} else {
+			a11 = scaleX;
+			a22 = scaleY;
+			a21 = a12 = 0;
+		}
+		if ((tx && !~(x + "").indexOf("px")) || (ty && !~(y + "").indexOf("px"))) {
+			tx = _convertToUnit(target, "x", x, "px");
+			ty = _convertToUnit(target, "y", y, "px");
+		}
+		if (xOrigin || yOrigin || xOffset || yOffset) {
+			tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
+			ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
+		}
+		if (xPercent || yPercent) {
+			//The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.
+			temp = target.getBBox();
+			tx = _round(tx + xPercent / 100 * temp.width);
+			ty = _round(ty + yPercent / 100 * temp.height);
+		}
+		temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
+		target.setAttribute("transform", temp);
+		forceCSS && (target.style[_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the transform attribute changes!)
+	},
+	_addRotationalPropTween = function(plugin, target, property, startNum, endValue) {
+		let cap = 360,
+			isString = _isString(endValue),
+			endNum = parseFloat(endValue) * ((isString && ~endValue.indexOf("rad")) ? _RAD2DEG : 1),
+			change = endNum - startNum,
+			finalValue = (startNum + change) + "deg",
+			direction, pt;
+		if (isString) {
+			direction = endValue.split("_")[1];
+			if (direction === "short") {
+				change %= cap;
+				if (change !== change % (cap / 2)) {
+					change += (change < 0) ? cap : -cap;
+				}
+			}
+			if (direction === "cw" && change < 0) {
+				change = ((change + cap * _bigNum) % cap) - ~~(change / cap) * cap;
+			} else if (direction === "ccw" && change > 0) {
+				change = ((change - cap * _bigNum) % cap) - ~~(change / cap) * cap;
+			}
+		}
+		plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
+		pt.e = finalValue;
+		pt.u = "deg";
+		plugin._props.push(property);
+		return pt;
+	},
+	_assign = (target, source) => { // Internet Explorer doesn't have Object.assign(), so we recreate it here.
+		for (let p in source) {
+			target[p] = source[p];
+		}
+		return target;
+	},
+	_addRawTransformPTs = (plugin, transforms, target) => { //for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"
+		let startCache = _assign({}, target._gsap),
+			exclude = "perspective,force3D,transformOrigin,svgOrigin",
+			style = target.style,
+			endCache, p, startValue, endValue, startNum, endNum, startUnit, endUnit;
+		if (startCache.svg) {
+			startValue = target.getAttribute("transform");
+			target.setAttribute("transform", "");
+			style[_transformProp] = transforms;
+			endCache = _parseTransform(target, 1);
+			_removeProperty(target, _transformProp);
+			target.setAttribute("transform", startValue);
+		} else {
+			startValue = getComputedStyle(target)[_transformProp];
+			style[_transformProp] = transforms;
+			endCache = _parseTransform(target, 1);
+			style[_transformProp] = startValue;
+		}
+		for (p in _transformProps) {
+			startValue = startCache[p];
+			endValue = endCache[p];
+			if (startValue !== endValue && exclude.indexOf(p) < 0) { //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
+				startUnit = getUnit(startValue);
+				endUnit = getUnit(endValue);
+				startNum = (startUnit !== endUnit) ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
+				endNum = parseFloat(endValue);
+				plugin._pt = new PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);
+				plugin._pt.u = endUnit || 0;
+				plugin._props.push(p);
+			}
+		}
+		_assign(endCache, startCache);
+	};
+
+// handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.
+_forEachName("padding,margin,Width,Radius", (name, index) => {
+	let t = "Top",
+		r = "Right",
+		b = "Bottom",
+		l = "Left",
+		props = (index < 3 ? [t,r,b,l] : [t+l, t+r, b+r, b+l]).map(side => index < 2 ? name + side : "border" + side + name);
+	_specialProps[(index > 1 ? "border" + name : name)] = function(plugin, target, property, endValue, tween) {
+		let a, vars;
+		if (arguments.length < 4) { // getter, passed target, property, and unit (from _get())
+			a = props.map(prop => _get(plugin, prop, property));
+			vars = a.join(" ");
+			return vars.split(a[0]).length === 5 ? a[0] : vars;
+		}
+		a = (endValue + "").split(" ");
+		vars = {};
+		props.forEach((prop, i) => vars[prop] = a[i] = a[i] || a[(((i - 1) / 2) | 0)]);
+		plugin.init(target, vars, tween);
+	};
+});
+
+
+const CSSPlugin = {
+	name: "css",
+	register: _initCore,
+	targetTest(target) {
+		return target.style && target.nodeType;
+	},
+	init(target, vars, tween, index, targets) {
+		let props = this._props,
+			style = target.style,
+			startAt = tween.vars.startAt,
+			startValue, endValue, endNum, startNum, type, specialProp, p, startUnit, endUnit, relative, isTransformRelated, transformPropTween, cache, smooth, hasPriority, inlineProps;
+		_pluginInitted || _initCore();
+		// we may call init() multiple times on the same plugin instance, like when adding special properties, so make sure we don't overwrite the revert data or inlineProps
+		this.styles = this.styles || _getStyleSaver(target);
+		inlineProps = this.styles.props;
+		this.tween = tween;
+		for (p in vars) {
+			if (p === "autoRound") {
+				continue;
+			}
+			endValue = vars[p];
+			if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) { // plugins
+				continue;
+			}
+			type = typeof(endValue);
+			specialProp = _specialProps[p];
+			if (type === "function") {
+				endValue = endValue.call(tween, index, target, targets);
+				type = typeof(endValue);
+			}
+			if (type === "string" && ~endValue.indexOf("random(")) {
+				endValue = _replaceRandom(endValue);
+			}
+			if (specialProp) {
+				specialProp(this, target, p, endValue, tween) && (hasPriority = 1);
+			} else if (p.substr(0,2) === "--") { //CSS variable
+				startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();
+				endValue += "";
+				_colorExp.lastIndex = 0;
+				if (!_colorExp.test(startValue)) { // colors don't have units
+					startUnit = getUnit(startValue);
+					endUnit = getUnit(endValue);
+				}
+				endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);
+				this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p);
+				props.push(p);
+				inlineProps.push(p, 0, style[p]);
+			} else if (type !== "undefined") {
+				if (startAt && p in startAt) { // in case someone hard-codes a complex value as the start, like top: "calc(2vh / 2)". Without this, it'd use the computed value (always in px)
+					startValue = typeof(startAt[p]) === "function" ? startAt[p].call(tween, index, target, targets) : startAt[p];
+					_isString(startValue) && ~startValue.indexOf("random(") && (startValue = _replaceRandom(startValue));
+					getUnit(startValue + "") || startValue === "auto" || (startValue += _config.units[p] || getUnit(_get(target, p)) || ""); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.
+					(startValue + "").charAt(1) === "=" && (startValue = _get(target, p)); // can't work with relative values
+				} else {
+					startValue = _get(target, p);
+				}
+				startNum = parseFloat(startValue);
+				relative = (type === "string" && endValue.charAt(1) === "=") && endValue.substr(0, 2);
+				relative && (endValue = endValue.substr(2));
+				endNum = parseFloat(endValue);
+				if (p in _propertyAliases) {
+					if (p === "autoAlpha") { //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.
+						if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) { //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
+							startNum = 0;
+						}
+						inlineProps.push("visibility", 0, style.visibility);
+						_addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
+					}
+					if (p !== "scale" && p !== "transform") {
+						p = _propertyAliases[p];
+						~p.indexOf(",") && (p = p.split(",")[0]);
+					}
+				}
+
+				isTransformRelated = (p in _transformProps);
+
+				//--- TRANSFORM-RELATED ---
+				if (isTransformRelated) {
+					this.styles.save(p);
+					if (!transformPropTween) {
+						cache = target._gsap;
+						(cache.renderTransform && !vars.parseTransform) || _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.
+						smooth = (vars.smoothOrigin !== false && cache.smooth);
+						transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)
+						transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.
+					}
+					if (p === "scale") {
+						this._pt = new PropTween(this._pt, cache, "scaleY", cache.scaleY, ((relative ? _parseRelative(cache.scaleY, relative + endNum) : endNum) - cache.scaleY) || 0, _renderCSSProp);
+						this._pt.u = 0;
+						props.push("scaleY", p);
+						p += "X";
+					} else if (p === "transformOrigin") {
+						inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);
+						endValue = _convertKeywordsToPercentages(endValue); //in case something like "left top" or "bottom right" is passed in. Convert to percentages.
+						if (cache.svg) {
+							_applySVGOrigin(target, endValue, 0, smooth, 0, this);
+						} else {
+							endUnit = parseFloat(endValue.split(" ")[2]) || 0; //handle the zOrigin separately!
+							endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);
+							_addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
+						}
+						continue;
+					} else if (p === "svgOrigin") {
+						_applySVGOrigin(target, endValue, 1, smooth, 0, this);
+						continue;
+					} else if (p in _rotationalProperties) {
+						_addRotationalPropTween(this, cache, p, startNum, relative ? _parseRelative(startNum, relative + endValue) : endValue);
+						continue;
+
+					} else if (p === "smoothOrigin") {
+						_addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);
+						continue;
+					} else if (p === "force3D") {
+						cache[p] = endValue;
+						continue;
+					} else if (p === "transform") {
+						_addRawTransformPTs(this, endValue, target);
+						continue;
+					}
+				} else if (!(p in style)) {
+					p = _checkPropPrefix(p) || p;
+				}
+
+				if (isTransformRelated || ((endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && (p in style))) {
+					startUnit = (startValue + "").substr((startNum + "").length);
+					endNum || (endNum = 0); // protect against NaN
+					endUnit = getUnit(endValue) || ((p in _config.units) ? _config.units[p] : startUnit);
+					startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));
+					this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? _parseRelative(startNum, relative + endNum) : endNum) - startNum, (!isTransformRelated && (endUnit === "px" || p === "zIndex") && vars.autoRound !== false) ? _renderRoundedCSSProp : _renderCSSProp);
+					this._pt.u = endUnit || 0;
+					if (startUnit !== endUnit && endUnit !== "%") { //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)
+						this._pt.b = startValue;
+						this._pt.r = _renderCSSPropWithBeginning;
+					}
+				} else if (!(p in style)) {
+					if (p in target) { //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.
+						this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);
+					} else if (p !== "parseTransform") {
+						_missingPlugin(p, endValue);
+						continue;
+					}
+				} else {
+					_tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);
+				}
+				isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : inlineProps.push(p, 1, startValue || target[p]));
+				props.push(p);
+			}
+		}
+		hasPriority && _sortPropTweensByPriority(this);
+
+	},
+	render(ratio, data) {
+		if (data.tween._time || !_reverting()) {
+			let pt = data._pt;
+			while (pt) {
+				pt.r(ratio, pt.d);
+				pt = pt._next;
+			}
+		} else {
+			data.styles.revert();
+		}
+	},
+	get: _get,
+	aliases: _propertyAliases,
+	getSetter(target, property, plugin) { //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.
+		let p = _propertyAliases[property];
+		(p && p.indexOf(",") < 0) && (property = p);
+		return (property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x"))) ? (plugin && _recentSetterPlugin === plugin ? (property === "scale" ? _setterScale : _setterTransform) : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender)) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : _getSetter(target, property);
+	},
+	core: { _removeProperty, _getMatrix }
+
+};
+
+gsap.utils.checkPrefix = _checkPropPrefix;
+gsap.core.getStyleSaver = _getStyleSaver;
+(function(positionAndScale, rotation, others, aliases) {
+	let all = _forEachName(positionAndScale + "," + rotation + "," + others, name => {_transformProps[name] = 1;});
+	_forEachName(rotation, name => {_config.units[name] = "deg"; _rotationalProperties[name] = 1;});
+	_propertyAliases[all[13]] = positionAndScale + "," + rotation;
+	_forEachName(aliases, name => {
+		let split = name.split(":");
+		_propertyAliases[split[1]] = all[split[0]];
+	});
+})("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");
+_forEachName("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", name => {_config.units[name] = "px";});
+
+gsap.registerPlugin(CSSPlugin);
+
+export { CSSPlugin, _createElement, _getBBox, _checkPropPrefix as checkPrefix, CSSPlugin as default };
diff --git a/dist/CSSPlugin.mjs b/dist/CSSPlugin.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..77593d359132cf6fd4da58d924370a4ed1f2c65d
--- /dev/null
+++ b/dist/CSSPlugin.mjs
@@ -0,0 +1,1157 @@
+import { _forEachName, gsap, _plugins, _checkPlugin, _replaceRandom, _colorExp, getUnit, _isString, _config, PropTween, _parseRelative, _missingPlugin, _sortPropTweensByPriority, _isUndefined, _getSetter, _round, _ticker, _getCache, _getProperty, _renderComplexString, _colorStringFilter, _numWithUnitExp, _relExp, GSCache, _numExp } from './gsap-core.mjs';
+
+/*!
+ * CSSPlugin 3.12.5
+ * https://gsap.com
+ *
+ * Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let _win, _doc, _docElement, _pluginInitted, _tempDiv, _recentSetterPlugin, _reverting,
+	_windowExists = () => typeof(window) !== "undefined",
+	_transformProps = {},
+	_RAD2DEG = 180 / Math.PI,
+	_DEG2RAD = Math.PI / 180,
+	_atan2 = Math.atan2,
+	_bigNum = 1e8,
+	_capsExp = /([A-Z])/g,
+	_horizontalExp = /(left|right|width|margin|padding|x)/i,
+	_complexExp = /[\s,\(]\S/,
+	_propertyAliases = {autoAlpha:"opacity,visibility", scale:"scaleX,scaleY", alpha:"opacity"},
+	_renderCSSProp = (ratio, data) => data.set(data.t, data.p, (Math.round((data.s + data.c * ratio) * 10000) / 10000) + data.u, data),
+	_renderPropWithEnd = (ratio, data) => data.set(data.t, data.p, ratio === 1 ? data.e : (Math.round((data.s + data.c * ratio) * 10000) / 10000) + data.u, data),
+	_renderCSSPropWithBeginning = (ratio, data) => data.set(data.t, data.p, ratio ? (Math.round((data.s + data.c * ratio) * 10000) / 10000) + data.u : data.b, data), //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)
+	_renderRoundedCSSProp = (ratio, data) => {
+		let value = data.s + data.c * ratio;
+		data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
+	},
+	_renderNonTweeningValue = (ratio, data) => data.set(data.t, data.p, ratio ? data.e : data.b, data),
+	_renderNonTweeningValueOnlyAtEnd = (ratio, data) => data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data),
+	_setterCSSStyle = (target, property, value) => target.style[property] = value,
+	_setterCSSProp = (target, property, value) => target.style.setProperty(property, value),
+	_setterTransform = (target, property, value) => target._gsap[property] = value,
+	_setterScale = (target, property, value) => target._gsap.scaleX = target._gsap.scaleY = value,
+	_setterScaleWithRender = (target, property, value, data, ratio) => {
+		let cache = target._gsap;
+		cache.scaleX = cache.scaleY = value;
+		cache.renderTransform(ratio, cache);
+	},
+	_setterTransformWithRender = (target, property, value, data, ratio) => {
+		let cache = target._gsap;
+		cache[property] = value;
+		cache.renderTransform(ratio, cache);
+	},
+	_transformProp = "transform",
+	_transformOriginProp = _transformProp + "Origin",
+	_saveStyle = function(property, isNotCSS) {
+		let target = this.target,
+			style = target.style,
+			cache = target._gsap;
+		if ((property in _transformProps) && style) {
+			this.tfm = this.tfm || {};
+			if (property !== "transform") {
+				property = _propertyAliases[property] || property;
+				~property.indexOf(",") ? property.split(",").forEach(a => this.tfm[a] = _get(target, a)) : (this.tfm[property] = cache.x ? cache[property] : _get(target, property)); // note: scale would map to "scaleX,scaleY", thus we loop and apply them both.
+				property === _transformOriginProp && (this.tfm.zOrigin = cache.zOrigin);
+			} else {
+				return _propertyAliases.transform.split(",").forEach(p => _saveStyle.call(this, p, isNotCSS));
+			}
+			if (this.props.indexOf(_transformProp) >= 0) { return; }
+			if (cache.svg) {
+				this.svgo = target.getAttribute("data-svg-origin");
+				this.props.push(_transformOriginProp, isNotCSS, "");
+			}
+			property = _transformProp;
+		}
+		(style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);
+	},
+	_removeIndependentTransforms = style => {
+		if (style.translate) {
+			style.removeProperty("translate");
+			style.removeProperty("scale");
+			style.removeProperty("rotate");
+		}
+	},
+	_revertStyle = function() {
+		let props = this.props,
+			target = this.target,
+			style = target.style,
+			cache = target._gsap,
+			i, p;
+		for (i = 0; i < props.length; i+=3) { // stored like this: property, isNotCSS, value
+			props[i+1] ? target[props[i]] = props[i+2] : props[i+2] ? (style[props[i]] = props[i+2]) : style.removeProperty(props[i].substr(0,2) === "--" ? props[i] : props[i].replace(_capsExp, "-$1").toLowerCase());
+		}
+		if (this.tfm) {
+			for (p in this.tfm) {
+				cache[p] = this.tfm[p];
+			}
+			if (cache.svg) {
+				cache.renderTransform();
+				target.setAttribute("data-svg-origin", this.svgo || "");
+			}
+			i = _reverting();
+			if ((!i || !i.isStart) && !style[_transformProp]) {
+				_removeIndependentTransforms(style);
+				if (cache.zOrigin && style[_transformOriginProp]) {
+					style[_transformOriginProp] += " " + cache.zOrigin + "px"; // since we're uncaching, we must put the zOrigin back into the transformOrigin so that we can pull it out accurately when we parse again. Otherwise, we'd lose the z portion of the origin since we extract it to protect from Safari bugs.
+					cache.zOrigin = 0;
+					cache.renderTransform();
+				}
+				cache.uncache = 1; // if it's a startAt that's being reverted in the _initTween() of the core, we don't need to uncache transforms. This is purely a performance optimization.
+			}
+		}
+	},
+	_getStyleSaver = (target, properties) => {
+		let saver = {
+			target,
+			props: [],
+			revert: _revertStyle,
+			save: _saveStyle
+		};
+		target._gsap || gsap.core.getCache(target); // just make sure there's a _gsap cache defined because we read from it in _saveStyle() and it's more efficient to just check it here once.
+		properties && properties.split(",").forEach(p => saver.save(p));
+		return saver;
+	},
+	_supports3D,
+	_createElement = (type, ns) => {
+		let e = _doc.createElementNS ? _doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.
+		return e && e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://gsap.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
+	},
+	_getComputedProperty = (target, property, skipPrefixFallback) => {
+		let cs = getComputedStyle(target);
+		return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || (!skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1)) || ""; //css variables may not need caps swapped out for dashes and lowercase.
+	},
+	_prefixes = "O,Moz,ms,Ms,Webkit".split(","),
+	_checkPropPrefix = (property, element, preferPrefix) => {
+		let e = element || _tempDiv,
+			s = e.style,
+			i = 5;
+		if (property in s && !preferPrefix) {
+			return property;
+		}
+		property = property.charAt(0).toUpperCase() + property.substr(1);
+		while (i-- && !((_prefixes[i]+property) in s)) { }
+		return (i < 0) ? null : ((i === 3) ? "ms" : (i >= 0) ? _prefixes[i] : "") + property;
+	},
+	_initCore = () => {
+		if (_windowExists() && window.document) {
+			_win = window;
+			_doc = _win.document;
+			_docElement = _doc.documentElement;
+			_tempDiv = _createElement("div") || {style:{}};
+			_createElement("div");
+			_transformProp = _checkPropPrefix(_transformProp);
+			_transformOriginProp = _transformProp + "Origin";
+			_tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.
+			_supports3D = !!_checkPropPrefix("perspective");
+			_reverting = gsap.core.reverting;
+			_pluginInitted = 1;
+		}
+	},
+	_getBBoxHack = function(swapIfPossible) { //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
+		let svg = _createElement("svg", (this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns")) || "http://www.w3.org/2000/svg"),
+			oldParent = this.parentNode,
+			oldSibling = this.nextSibling,
+			oldCSS = this.style.cssText,
+			bbox;
+		_docElement.appendChild(svg);
+		svg.appendChild(this);
+		this.style.display = "block";
+		if (swapIfPossible) {
+			try {
+				bbox = this.getBBox();
+				this._gsapBBox = this.getBBox; //store the original
+				this.getBBox = _getBBoxHack;
+			} catch (e) { }
+		} else if (this._gsapBBox) {
+			bbox = this._gsapBBox();
+		}
+		if (oldParent) {
+			if (oldSibling) {
+				oldParent.insertBefore(this, oldSibling);
+			} else {
+				oldParent.appendChild(this);
+			}
+		}
+		_docElement.removeChild(svg);
+		this.style.cssText = oldCSS;
+		return bbox;
+	},
+	_getAttributeFallbacks = (target, attributesArray) => {
+		let i = attributesArray.length;
+		while (i--) {
+			if (target.hasAttribute(attributesArray[i])) {
+				return target.getAttribute(attributesArray[i]);
+			}
+		}
+	},
+	_getBBox = target => {
+		let bounds;
+		try {
+			bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
+		} catch (error) {
+			bounds = _getBBoxHack.call(target, true);
+		}
+		(bounds && (bounds.width || bounds.height)) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true));
+		//some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.
+		return (bounds && !bounds.width && !bounds.x && !bounds.y) ? {x: +_getAttributeFallbacks(target, ["x","cx","x1"]) || 0, y:+_getAttributeFallbacks(target, ["y","cy","y1"]) || 0, width:0, height:0} : bounds;
+	},
+	_isSVG = e => !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e)), //reports if the element is an SVG on which getBBox() actually works
+	_removeProperty = (target, property) => {
+		if (property) {
+			let style = target.style,
+				first2Chars;
+			if (property in _transformProps && property !== _transformOriginProp) {
+				property = _transformProp;
+			}
+			if (style.removeProperty) {
+				first2Chars = property.substr(0,2);
+				if (first2Chars === "ms" || property.substr(0,6) === "webkit") { //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
+					property = "-" + property;
+				}
+				style.removeProperty(first2Chars === "--" ? property : property.replace(_capsExp, "-$1").toLowerCase());
+			} else { //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
+				style.removeAttribute(property);
+			}
+		}
+	},
+	_addNonTweeningPT = (plugin, target, property, beginning, end, onlySetAtEnd) => {
+		let pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
+		plugin._pt = pt;
+		pt.b = beginning;
+		pt.e = end;
+		plugin._props.push(property);
+		return pt;
+	},
+	_nonConvertibleUnits = {deg:1, rad:1, turn:1},
+	_nonStandardLayouts = {grid:1, flex:1},
+	//takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.
+	_convertToUnit = (target, property, value, unit) => {
+		let curValue = parseFloat(value) || 0,
+			curUnit = (value + "").trim().substr((curValue + "").length) || "px", // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()
+			style = _tempDiv.style,
+			horizontal = _horizontalExp.test(property),
+			isRootSVG = target.tagName.toLowerCase() === "svg",
+			measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
+			amount = 100,
+			toPixels = unit === "px",
+			toPercent = unit === "%",
+			px, parent, cache, isSVG;
+		if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
+			return curValue;
+		}
+		(curUnit !== "px" && !toPixels) && (curValue = _convertToUnit(target, property, value, "px"));
+		isSVG = target.getCTM && _isSVG(target);
+		if ((toPercent || curUnit === "%") && (_transformProps[property] || ~property.indexOf("adius"))) {
+			px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];
+			return _round(toPercent ? curValue / px * amount : curValue / 100 * px);
+		}
+		style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
+		parent = (~property.indexOf("adius") || (unit === "em" && target.appendChild && !isRootSVG)) ? target : target.parentNode;
+		if (isSVG) {
+			parent = (target.ownerSVGElement || {}).parentNode;
+		}
+		if (!parent || parent === _doc || !parent.appendChild) {
+			parent = _doc.body;
+		}
+		cache = parent._gsap;
+		if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time && !cache.uncache) {
+			return _round(curValue / cache.width * amount);
+		} else {
+			if (toPercent && (property === "height" || property === "width")) { // if we're dealing with width/height that's inside a container with padding and/or it's a flexbox/grid container, we must apply it to the target itself rather than the _tempDiv in order to ensure complete accuracy, factoring in the parent's padding.
+				let v = target.style[property];
+				target.style[property] = amount + unit;
+				px = target[measureProperty];
+				v ? (target.style[property] = v) : _removeProperty(target, property);
+			} else {
+				(toPercent || curUnit === "%") && !_nonStandardLayouts[_getComputedProperty(parent, "display")] && (style.position = _getComputedProperty(target, "position"));
+				(parent === target) && (style.position = "static"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.
+				parent.appendChild(_tempDiv);
+				px = _tempDiv[measureProperty];
+				parent.removeChild(_tempDiv);
+				style.position = "absolute";
+			}
+			if (horizontal && toPercent) {
+				cache = _getCache(parent);
+				cache.time = _ticker.time;
+				cache.width = parent[measureProperty];
+			}
+		}
+		return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
+	},
+	_get = (target, property, unit, uncache) => {
+		let value;
+		_pluginInitted || _initCore();
+		if ((property in _propertyAliases) && property !== "transform") {
+			property = _propertyAliases[property];
+			if (~property.indexOf(",")) {
+				property = property.split(",")[0];
+			}
+		}
+		if (_transformProps[property] && property !== "transform") {
+			value = _parseTransform(target, uncache);
+			value = (property !== "transformOrigin") ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
+		} else {
+			value = target.style[property];
+			if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
+				value = (_specialProps[property] && _specialProps[property](target, property, unit)) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === "opacity" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius
+			}
+		}
+		return unit && !~(value + "").trim().indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
+
+	},
+	_tweenComplexCSSString = function(target, prop, start, end) { // note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
+		if (!start || start === "none") { // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://gsap.com/forums/topic/18310-clippath-doesnt-work-on-ios/
+			let p = _checkPropPrefix(prop, target, 1),
+				s = p && _getComputedProperty(target, p, 1);
+			if (s && s !== start) {
+				prop = p;
+				start = s;
+			} else if (prop === "borderColor") {
+				start = _getComputedProperty(target, "borderTopColor"); // Firefox bug: always reports "borderColor" as "", so we must fall back to borderTopColor. See https://gsap.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/
+			}
+		}
+		let pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),
+			index = 0,
+			matchIndex = 0,
+			a, result,	startValues, startNum, color, startValue, endValue, endNum, chunk, endUnit, startUnit, endValues;
+		pt.b = start;
+		pt.e = end;
+		start += ""; // ensure values are strings
+		end += "";
+		if (end === "auto") {
+			startValue = target.style[prop];
+			target.style[prop] = end;
+			end = _getComputedProperty(target, prop) || end;
+			startValue ? (target.style[prop] = startValue) : _removeProperty(target, prop);
+		}
+		a = [start, end];
+		_colorStringFilter(a); // pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().
+		start = a[0];
+		end = a[1];
+		startValues = start.match(_numWithUnitExp) || [];
+		endValues = end.match(_numWithUnitExp) || [];
+		if (endValues.length) {
+			while ((result = _numWithUnitExp.exec(end))) {
+				endValue = result[0];
+				chunk = end.substring(index, result.index);
+				if (color) {
+					color = (color + 1) % 5;
+				} else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
+					color = 1;
+				}
+				if (endValue !== (startValue = startValues[matchIndex++] || "")) {
+					startNum = parseFloat(startValue) || 0;
+					startUnit = startValue.substr((startNum + "").length);
+					(endValue.charAt(1) === "=") && (endValue = _parseRelative(startNum, endValue) + startUnit);
+					endNum = parseFloat(endValue);
+					endUnit = endValue.substr((endNum + "").length);
+					index = _numWithUnitExp.lastIndex - endUnit.length;
+					if (!endUnit) { //if something like "perspective:300" is passed in and we must add a unit to the end
+						endUnit = endUnit || _config.units[prop] || startUnit;
+						if (index === end.length) {
+							end += endUnit;
+							pt.e += endUnit;
+						}
+					}
+					if (startUnit !== endUnit) {
+						startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
+					}
+					// these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.
+					pt._pt = {
+						_next: pt._pt,
+						p: (chunk || (matchIndex === 1)) ? chunk : ",", //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
+						s: startNum,
+						c: endNum - startNum,
+						m: (color && color < 4) || prop === "zIndex" ? Math.round : 0
+					};
+				}
+			}
+			pt.c = (index < end.length) ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
+		} else {
+			pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
+		}
+		_relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
+		this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.
+		return pt;
+	},
+	_keywordToPercent = {top:"0%", bottom:"100%", left:"0%", right:"100%", center:"50%"},
+	_convertKeywordsToPercentages = value => {
+		let split = value.split(" "),
+			x = split[0],
+			y = split[1] || "50%";
+		if (x === "top" || x === "bottom" || y === "left" || y === "right") { //the user provided them in the wrong order, so flip them
+			value = x;
+			x = y;
+			y = value;
+		}
+		split[0] = _keywordToPercent[x] || x;
+		split[1] = _keywordToPercent[y] || y;
+		return split.join(" ");
+	},
+	_renderClearProps = (ratio, data) => {
+		if (data.tween && data.tween._time === data.tween._dur) {
+			let target = data.t,
+				style = target.style,
+				props = data.u,
+				cache = target._gsap,
+				prop, clearTransforms, i;
+			if (props === "all" || props === true) {
+				style.cssText = "";
+				clearTransforms = 1;
+			} else {
+				props = props.split(",");
+				i = props.length;
+				while (--i > -1) {
+					prop = props[i];
+					if (_transformProps[prop]) {
+						clearTransforms = 1;
+						prop = (prop === "transformOrigin") ? _transformOriginProp : _transformProp;
+					}
+					_removeProperty(target, prop);
+				}
+			}
+			if (clearTransforms) {
+				_removeProperty(target, _transformProp);
+				if (cache) {
+					cache.svg && target.removeAttribute("transform");
+					_parseTransform(target, 1); // force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.
+					cache.uncache = 1;
+					_removeIndependentTransforms(style);
+				}
+			}
+		}
+	},
+	// note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.
+	_specialProps = {
+		clearProps(plugin, target, property, endValue, tween) {
+			if (tween.data !== "isFromStart") {
+				let pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
+				pt.u = endValue;
+				pt.pr = -10;
+				pt.tween = tween;
+				plugin._props.push(property);
+				return 1;
+			}
+		}
+		/* className feature (about 0.4kb gzipped).
+		, className(plugin, target, property, endValue, tween) {
+			let _renderClassName = (ratio, data) => {
+					data.css.render(ratio, data.css);
+					if (!ratio || ratio === 1) {
+						let inline = data.rmv,
+							target = data.t,
+							p;
+						target.setAttribute("class", ratio ? data.e : data.b);
+						for (p in inline) {
+							_removeProperty(target, p);
+						}
+					}
+				},
+				_getAllStyles = (target) => {
+					let styles = {},
+						computed = getComputedStyle(target),
+						p;
+					for (p in computed) {
+						if (isNaN(p) && p !== "cssText" && p !== "length") {
+							styles[p] = computed[p];
+						}
+					}
+					_setDefaults(styles, _parseTransform(target, 1));
+					return styles;
+				},
+				startClassList = target.getAttribute("class"),
+				style = target.style,
+				cssText = style.cssText,
+				cache = target._gsap,
+				classPT = cache.classPT,
+				inlineToRemoveAtEnd = {},
+				data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
+				changingVars = {},
+				startVars = _getAllStyles(target),
+				transformRelated = /(transform|perspective)/i,
+				endVars, p;
+			if (classPT) {
+				classPT.r(1, classPT.d);
+				_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
+			}
+			target.setAttribute("class", data.e);
+			endVars = _getAllStyles(target, true);
+			target.setAttribute("class", startClassList);
+			for (p in endVars) {
+				if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
+					changingVars[p] = endVars[p];
+					if (!style[p] && style[p] !== "0") {
+						inlineToRemoveAtEnd[p] = 1;
+					}
+				}
+			}
+			cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
+			if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://gsap.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
+				style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
+			}
+			_parseTransform(target, true); //to clear the caching of transforms
+			data.css = new gsap.plugins.css();
+			data.css.init(target, changingVars, tween);
+			plugin._props.push(...data.css._props);
+			return 1;
+		}
+		*/
+	},
+
+
+
+
+
+	/*
+	 * --------------------------------------------------------------------------------------
+	 * TRANSFORMS
+	 * --------------------------------------------------------------------------------------
+	 */
+	_identity2DMatrix = [1,0,0,1,0,0],
+	_rotationalProperties = {},
+	_isNullTransform = value => (value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value),
+	_getComputedTransformMatrixAsArray = target => {
+		let matrixString = _getComputedProperty(target, _transformProp);
+		return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);
+	},
+	_getMatrix = (target, force2D) => {
+		let cache = target._gsap || _getCache(target),
+			style = target.style,
+			matrix = _getComputedTransformMatrixAsArray(target),
+			parent, nextSibling, temp, addedToDOM;
+		if (cache.svg && target.getAttribute("transform")) {
+			temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.
+			matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
+			return (matrix.join(",") === "1,0,0,1,0,0") ? _identity2DMatrix : matrix;
+		} else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) { //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
+			//browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
+			temp = style.display;
+			style.display = "block";
+			parent = target.parentNode;
+			if (!parent || !target.offsetParent) { // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375
+				addedToDOM = 1; //flag
+				nextSibling = target.nextElementSibling;
+				_docElement.appendChild(target); //we must add it to the DOM in order to get values properly
+			}
+			matrix = _getComputedTransformMatrixAsArray(target);
+			temp ? (style.display = temp) : _removeProperty(target, "display");
+			if (addedToDOM) {
+				nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
+			}
+		}
+		return (force2D && matrix.length > 6) ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
+	},
+	_applySVGOrigin = (target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) => {
+		let cache = target._gsap,
+			matrix = matrixArray || _getMatrix(target, true),
+			xOriginOld = cache.xOrigin || 0,
+			yOriginOld = cache.yOrigin || 0,
+			xOffsetOld = cache.xOffset || 0,
+			yOffsetOld = cache.yOffset || 0,
+			[a, b, c, d, tx, ty] = matrix,
+			originSplit = origin.split(" "),
+			xOrigin = parseFloat(originSplit[0]) || 0,
+			yOrigin = parseFloat(originSplit[1]) || 0,
+			bounds, determinant, x, y;
+		if (!originIsAbsolute) {
+			bounds = _getBBox(target);
+			xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
+			yOrigin = bounds.y + (~((originSplit[1] || originSplit[0]).indexOf("%")) ? yOrigin / 100 * bounds.height : yOrigin);
+			// if (!("xOrigin" in cache) && (xOrigin || yOrigin)) { // added in 3.12.3, reverted in 3.12.4; requires more exploration
+			// 	xOrigin -= bounds.x;
+			// 	yOrigin -= bounds.y;
+			// }
+		} else if (matrix !== _identity2DMatrix && (determinant = (a * d - b * c))) { //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
+			x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + ((c * ty - d * tx) / determinant);
+			y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - ((a * ty - b * tx) / determinant);
+			xOrigin = x;
+			yOrigin = y;
+			// theory: we only had to do this for smoothing and it assumes that the previous one was not originIsAbsolute.
+		}
+		if (smooth || (smooth !== false && cache.smooth)) {
+			tx = xOrigin - xOriginOld;
+			ty = yOrigin - yOriginOld;
+			cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
+			cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
+		} else {
+			cache.xOffset = cache.yOffset = 0;
+		}
+		cache.xOrigin = xOrigin;
+		cache.yOrigin = yOrigin;
+		cache.smooth = !!smooth;
+		cache.origin = origin;
+		cache.originIsAbsolute = !!originIsAbsolute;
+		target.style[_transformOriginProp] = "0px 0px"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).
+		if (pluginToAddPropTweensTo) {
+			_addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);
+			_addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);
+			_addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);
+			_addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
+		}
+		target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
+	},
+	_parseTransform = (target, uncache) => {
+		let cache = target._gsap || new GSCache(target);
+		if ("x" in cache && !uncache && !cache.uncache) {
+			return cache;
+		}
+		let style = target.style,
+			invertedScaleX = cache.scaleX < 0,
+			px = "px",
+			deg = "deg",
+			cs = getComputedStyle(target),
+			origin = _getComputedProperty(target, _transformOriginProp) || "0",
+			x, y, z, scaleX, scaleY, rotation, rotationX, rotationY, skewX, skewY, perspective, xOrigin, yOrigin,
+			matrix, angle, cos, sin, a, b, c, d, a12, a22, t1, t2, t3, a13, a23, a33, a42, a43, a32;
+		x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
+		scaleX = scaleY = 1;
+		cache.svg = !!(target.getCTM && _isSVG(target));
+
+		if (cs.translate) { // accommodate independent transforms by combining them into normal ones.
+			if (cs.translate !== "none" || cs.scale !== "none" || cs.rotate !== "none") {
+				style[_transformProp] = (cs.translate !== "none" ? "translate3d(" + (cs.translate + " 0 0").split(" ").slice(0, 3).join(", ") + ") " : "") + (cs.rotate !== "none" ? "rotate(" + cs.rotate + ") " : "") + (cs.scale !== "none" ? "scale(" + cs.scale.split(" ").join(",") + ") " : "") + (cs[_transformProp] !== "none" ? cs[_transformProp] : "");
+			}
+			style.scale = style.rotate = style.translate = "none";
+		}
+
+		matrix = _getMatrix(target, cache.svg);
+		if (cache.svg) {
+			if (cache.uncache) { // if cache.uncache is true (and maybe if origin is 0,0), we need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + "px " + (cache.yOrigin - bbox.y) + "px". Previously we let the data-svg-origin stay instead, but when introducing revert(), it complicated things.
+				t2 = target.getBBox();
+				origin = (cache.xOrigin - t2.x) + "px " + (cache.yOrigin - t2.y) + "px";
+				t1 = "";
+			} else {
+				t1 = !uncache && target.getAttribute("data-svg-origin"); //  Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.
+			}
+			_applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
+		}
+		xOrigin = cache.xOrigin || 0;
+		yOrigin = cache.yOrigin || 0;
+		if (matrix !== _identity2DMatrix) {
+			a = matrix[0]; //a11
+			b = matrix[1]; //a21
+			c = matrix[2]; //a31
+			d = matrix[3]; //a41
+			x = a12 = matrix[4];
+			y = a22 = matrix[5];
+
+			//2D matrix
+			if (matrix.length === 6) {
+				scaleX = Math.sqrt(a * a + b * b);
+				scaleY = Math.sqrt(d * d + c * c);
+				rotation = (a || b) ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).
+				skewX = (c || d) ? _atan2(c, d) * _RAD2DEG + rotation : 0;
+				skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));
+				if (cache.svg) {
+					x -= xOrigin - (xOrigin * a + yOrigin * c);
+					y -= yOrigin - (xOrigin * b + yOrigin * d);
+				}
+
+			//3D matrix
+			} else {
+				a32 = matrix[6];
+				a42 = matrix[7];
+				a13 = matrix[8];
+				a23 = matrix[9];
+				a33 = matrix[10];
+				a43 = matrix[11];
+				x = matrix[12];
+				y = matrix[13];
+				z = matrix[14];
+
+				angle = _atan2(a32, a33);
+				rotationX = angle * _RAD2DEG;
+				//rotationX
+				if (angle) {
+					cos = Math.cos(-angle);
+					sin = Math.sin(-angle);
+					t1 = a12*cos+a13*sin;
+					t2 = a22*cos+a23*sin;
+					t3 = a32*cos+a33*sin;
+					a13 = a12*-sin+a13*cos;
+					a23 = a22*-sin+a23*cos;
+					a33 = a32*-sin+a33*cos;
+					a43 = a42*-sin+a43*cos;
+					a12 = t1;
+					a22 = t2;
+					a32 = t3;
+				}
+				//rotationY
+				angle = _atan2(-c, a33);
+				rotationY = angle * _RAD2DEG;
+				if (angle) {
+					cos = Math.cos(-angle);
+					sin = Math.sin(-angle);
+					t1 = a*cos-a13*sin;
+					t2 = b*cos-a23*sin;
+					t3 = c*cos-a33*sin;
+					a43 = d*sin+a43*cos;
+					a = t1;
+					b = t2;
+					c = t3;
+				}
+				//rotationZ
+				angle = _atan2(b, a);
+				rotation = angle * _RAD2DEG;
+				if (angle) {
+					cos = Math.cos(angle);
+					sin = Math.sin(angle);
+					t1 = a*cos+b*sin;
+					t2 = a12*cos+a22*sin;
+					b = b*cos-a*sin;
+					a22 = a22*cos-a12*sin;
+					a = t1;
+					a12 = t2;
+				}
+
+				if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) { //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
+					rotationX = rotation = 0;
+					rotationY = 180 - rotationY;
+				}
+				scaleX = _round(Math.sqrt(a * a + b * b + c * c));
+				scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));
+				angle = _atan2(a12, a22);
+				skewX = (Math.abs(angle) > 0.0002) ? angle * _RAD2DEG : 0;
+				perspective = a43 ? 1 / ((a43 < 0) ? -a43 : a43) : 0;
+			}
+
+			if (cache.svg) { //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).
+				t1 = target.getAttribute("transform");
+				cache.forceCSS = target.setAttribute("transform", "") || (!_isNullTransform(_getComputedProperty(target, _transformProp)));
+				t1 && target.setAttribute("transform", t1);
+			}
+		}
+
+		if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
+			if (invertedScaleX) {
+				scaleX *= -1;
+				skewX += (rotation <= 0) ? 180 : -180;
+				rotation += (rotation <= 0) ? 180 : -180;
+			} else {
+				scaleY *= -1;
+				skewX += (skewX <= 0) ? 180 : -180;
+			}
+		}
+		uncache = uncache || cache.uncache;
+		cache.x = x - ((cache.xPercent = x && ((!uncache && cache.xPercent) || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;
+		cache.y = y - ((cache.yPercent = y && ((!uncache && cache.yPercent) || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;
+		cache.z = z + px;
+		cache.scaleX = _round(scaleX);
+		cache.scaleY = _round(scaleY);
+		cache.rotation = _round(rotation) + deg;
+		cache.rotationX = _round(rotationX) + deg;
+		cache.rotationY = _round(rotationY) + deg;
+		cache.skewX = skewX + deg;
+		cache.skewY = skewY + deg;
+		cache.transformPerspective = perspective + px;
+		if ((cache.zOrigin = parseFloat(origin.split(" ")[2]) || (!uncache && cache.zOrigin) || 0)) {
+			style[_transformOriginProp] = _firstTwoOnly(origin);
+		}
+		cache.xOffset = cache.yOffset = 0;
+		cache.force3D = _config.force3D;
+		cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
+		cache.uncache = 0;
+		return cache;
+	},
+	_firstTwoOnly = value => (value = value.split(" "))[0] + " " + value[1], //for handling transformOrigin values, stripping out the 3rd dimension
+	_addPxTranslate = (target, start, value) => {
+		let unit = getUnit(start);
+		return _round(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
+	},
+	_renderNon3DTransforms = (ratio, cache) => {
+		cache.z = "0px";
+		cache.rotationY = cache.rotationX = "0deg";
+		cache.force3D = 0;
+		_renderCSSTransforms(ratio, cache);
+	},
+	_zeroDeg = "0deg",
+	_zeroPx = "0px",
+	_endParenthesis = ") ",
+	_renderCSSTransforms = function(ratio, cache) {
+		let {xPercent, yPercent, x, y, z, rotation, rotationY, rotationX, skewX, skewY, scaleX, scaleY, transformPerspective, force3D, target, zOrigin} = cache || this,
+			transforms = "",
+			use3D = (force3D === "auto" && ratio && ratio !== 1) || force3D === true;
+
+		// Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)
+		if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
+			let angle = parseFloat(rotationY) * _DEG2RAD,
+				a13 = Math.sin(angle),
+				a33 = Math.cos(angle),
+				cos;
+			angle = parseFloat(rotationX) * _DEG2RAD;
+			cos = Math.cos(angle);
+			x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
+			y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
+			z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
+		}
+
+		if (transformPerspective !== _zeroPx) {
+			transforms += "perspective(" + transformPerspective + _endParenthesis;
+		}
+		if (xPercent || yPercent) {
+			transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
+		}
+		if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
+			transforms += (z !== _zeroPx || use3D) ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
+		}
+		if (rotation !== _zeroDeg) {
+			transforms += "rotate(" + rotation + _endParenthesis;
+		}
+		if (rotationY !== _zeroDeg) {
+			transforms += "rotateY(" + rotationY + _endParenthesis;
+		}
+		if (rotationX !== _zeroDeg) {
+			transforms += "rotateX(" + rotationX + _endParenthesis;
+		}
+		if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
+			transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
+		}
+		if (scaleX !== 1 || scaleY !== 1) {
+			transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
+		}
+		target.style[_transformProp] = transforms || "translate(0, 0)";
+	},
+	_renderSVGTransforms = function(ratio, cache) {
+		let {xPercent, yPercent, x, y, rotation, skewX, skewY, scaleX, scaleY, target, xOrigin, yOrigin, xOffset, yOffset, forceCSS} = cache || this,
+			tx = parseFloat(x),
+			ty = parseFloat(y),
+			a11, a21, a12, a22, temp;
+		rotation = parseFloat(rotation);
+		skewX = parseFloat(skewX);
+		skewY = parseFloat(skewY);
+		if (skewY) { //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
+			skewY = parseFloat(skewY);
+			skewX += skewY;
+			rotation += skewY;
+		}
+		if (rotation || skewX) {
+			rotation *= _DEG2RAD;
+			skewX *= _DEG2RAD;
+			a11 = Math.cos(rotation) * scaleX;
+			a21 = Math.sin(rotation) * scaleX;
+			a12 = Math.sin(rotation - skewX) * -scaleY;
+			a22 = Math.cos(rotation - skewX) * scaleY;
+			if (skewX) {
+				skewY *= _DEG2RAD;
+				temp = Math.tan(skewX - skewY);
+				temp = Math.sqrt(1 + temp * temp);
+				a12 *= temp;
+				a22 *= temp;
+				if (skewY) {
+					temp = Math.tan(skewY);
+					temp = Math.sqrt(1 + temp * temp);
+					a11 *= temp;
+					a21 *= temp;
+				}
+			}
+			a11 = _round(a11);
+			a21 = _round(a21);
+			a12 = _round(a12);
+			a22 = _round(a22);
+		} else {
+			a11 = scaleX;
+			a22 = scaleY;
+			a21 = a12 = 0;
+		}
+		if ((tx && !~(x + "").indexOf("px")) || (ty && !~(y + "").indexOf("px"))) {
+			tx = _convertToUnit(target, "x", x, "px");
+			ty = _convertToUnit(target, "y", y, "px");
+		}
+		if (xOrigin || yOrigin || xOffset || yOffset) {
+			tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
+			ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
+		}
+		if (xPercent || yPercent) {
+			//The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.
+			temp = target.getBBox();
+			tx = _round(tx + xPercent / 100 * temp.width);
+			ty = _round(ty + yPercent / 100 * temp.height);
+		}
+		temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
+		target.setAttribute("transform", temp);
+		forceCSS && (target.style[_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the transform attribute changes!)
+	},
+	_addRotationalPropTween = function(plugin, target, property, startNum, endValue) {
+		let cap = 360,
+			isString = _isString(endValue),
+			endNum = parseFloat(endValue) * ((isString && ~endValue.indexOf("rad")) ? _RAD2DEG : 1),
+			change = endNum - startNum,
+			finalValue = (startNum + change) + "deg",
+			direction, pt;
+		if (isString) {
+			direction = endValue.split("_")[1];
+			if (direction === "short") {
+				change %= cap;
+				if (change !== change % (cap / 2)) {
+					change += (change < 0) ? cap : -cap;
+				}
+			}
+			if (direction === "cw" && change < 0) {
+				change = ((change + cap * _bigNum) % cap) - ~~(change / cap) * cap;
+			} else if (direction === "ccw" && change > 0) {
+				change = ((change - cap * _bigNum) % cap) - ~~(change / cap) * cap;
+			}
+		}
+		plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
+		pt.e = finalValue;
+		pt.u = "deg";
+		plugin._props.push(property);
+		return pt;
+	},
+	_assign = (target, source) => { // Internet Explorer doesn't have Object.assign(), so we recreate it here.
+		for (let p in source) {
+			target[p] = source[p];
+		}
+		return target;
+	},
+	_addRawTransformPTs = (plugin, transforms, target) => { //for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"
+		let startCache = _assign({}, target._gsap),
+			exclude = "perspective,force3D,transformOrigin,svgOrigin",
+			style = target.style,
+			endCache, p, startValue, endValue, startNum, endNum, startUnit, endUnit;
+		if (startCache.svg) {
+			startValue = target.getAttribute("transform");
+			target.setAttribute("transform", "");
+			style[_transformProp] = transforms;
+			endCache = _parseTransform(target, 1);
+			_removeProperty(target, _transformProp);
+			target.setAttribute("transform", startValue);
+		} else {
+			startValue = getComputedStyle(target)[_transformProp];
+			style[_transformProp] = transforms;
+			endCache = _parseTransform(target, 1);
+			style[_transformProp] = startValue;
+		}
+		for (p in _transformProps) {
+			startValue = startCache[p];
+			endValue = endCache[p];
+			if (startValue !== endValue && exclude.indexOf(p) < 0) { //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
+				startUnit = getUnit(startValue);
+				endUnit = getUnit(endValue);
+				startNum = (startUnit !== endUnit) ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
+				endNum = parseFloat(endValue);
+				plugin._pt = new PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);
+				plugin._pt.u = endUnit || 0;
+				plugin._props.push(p);
+			}
+		}
+		_assign(endCache, startCache);
+	};
+
+// handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.
+_forEachName("padding,margin,Width,Radius", (name, index) => {
+	let t = "Top",
+		r = "Right",
+		b = "Bottom",
+		l = "Left",
+		props = (index < 3 ? [t,r,b,l] : [t+l, t+r, b+r, b+l]).map(side => index < 2 ? name + side : "border" + side + name);
+	_specialProps[(index > 1 ? "border" + name : name)] = function(plugin, target, property, endValue, tween) {
+		let a, vars;
+		if (arguments.length < 4) { // getter, passed target, property, and unit (from _get())
+			a = props.map(prop => _get(plugin, prop, property));
+			vars = a.join(" ");
+			return vars.split(a[0]).length === 5 ? a[0] : vars;
+		}
+		a = (endValue + "").split(" ");
+		vars = {};
+		props.forEach((prop, i) => vars[prop] = a[i] = a[i] || a[(((i - 1) / 2) | 0)]);
+		plugin.init(target, vars, tween);
+	};
+});
+
+
+const CSSPlugin = {
+	name: "css",
+	register: _initCore,
+	targetTest(target) {
+		return target.style && target.nodeType;
+	},
+	init(target, vars, tween, index, targets) {
+		let props = this._props,
+			style = target.style,
+			startAt = tween.vars.startAt,
+			startValue, endValue, endNum, startNum, type, specialProp, p, startUnit, endUnit, relative, isTransformRelated, transformPropTween, cache, smooth, hasPriority, inlineProps;
+		_pluginInitted || _initCore();
+		// we may call init() multiple times on the same plugin instance, like when adding special properties, so make sure we don't overwrite the revert data or inlineProps
+		this.styles = this.styles || _getStyleSaver(target);
+		inlineProps = this.styles.props;
+		this.tween = tween;
+		for (p in vars) {
+			if (p === "autoRound") {
+				continue;
+			}
+			endValue = vars[p];
+			if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) { // plugins
+				continue;
+			}
+			type = typeof(endValue);
+			specialProp = _specialProps[p];
+			if (type === "function") {
+				endValue = endValue.call(tween, index, target, targets);
+				type = typeof(endValue);
+			}
+			if (type === "string" && ~endValue.indexOf("random(")) {
+				endValue = _replaceRandom(endValue);
+			}
+			if (specialProp) {
+				specialProp(this, target, p, endValue, tween) && (hasPriority = 1);
+			} else if (p.substr(0,2) === "--") { //CSS variable
+				startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();
+				endValue += "";
+				_colorExp.lastIndex = 0;
+				if (!_colorExp.test(startValue)) { // colors don't have units
+					startUnit = getUnit(startValue);
+					endUnit = getUnit(endValue);
+				}
+				endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);
+				this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p);
+				props.push(p);
+				inlineProps.push(p, 0, style[p]);
+			} else if (type !== "undefined") {
+				if (startAt && p in startAt) { // in case someone hard-codes a complex value as the start, like top: "calc(2vh / 2)". Without this, it'd use the computed value (always in px)
+					startValue = typeof(startAt[p]) === "function" ? startAt[p].call(tween, index, target, targets) : startAt[p];
+					_isString(startValue) && ~startValue.indexOf("random(") && (startValue = _replaceRandom(startValue));
+					getUnit(startValue + "") || startValue === "auto" || (startValue += _config.units[p] || getUnit(_get(target, p)) || ""); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.
+					(startValue + "").charAt(1) === "=" && (startValue = _get(target, p)); // can't work with relative values
+				} else {
+					startValue = _get(target, p);
+				}
+				startNum = parseFloat(startValue);
+				relative = (type === "string" && endValue.charAt(1) === "=") && endValue.substr(0, 2);
+				relative && (endValue = endValue.substr(2));
+				endNum = parseFloat(endValue);
+				if (p in _propertyAliases) {
+					if (p === "autoAlpha") { //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.
+						if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) { //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
+							startNum = 0;
+						}
+						inlineProps.push("visibility", 0, style.visibility);
+						_addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
+					}
+					if (p !== "scale" && p !== "transform") {
+						p = _propertyAliases[p];
+						~p.indexOf(",") && (p = p.split(",")[0]);
+					}
+				}
+
+				isTransformRelated = (p in _transformProps);
+
+				//--- TRANSFORM-RELATED ---
+				if (isTransformRelated) {
+					this.styles.save(p);
+					if (!transformPropTween) {
+						cache = target._gsap;
+						(cache.renderTransform && !vars.parseTransform) || _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.
+						smooth = (vars.smoothOrigin !== false && cache.smooth);
+						transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)
+						transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.
+					}
+					if (p === "scale") {
+						this._pt = new PropTween(this._pt, cache, "scaleY", cache.scaleY, ((relative ? _parseRelative(cache.scaleY, relative + endNum) : endNum) - cache.scaleY) || 0, _renderCSSProp);
+						this._pt.u = 0;
+						props.push("scaleY", p);
+						p += "X";
+					} else if (p === "transformOrigin") {
+						inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);
+						endValue = _convertKeywordsToPercentages(endValue); //in case something like "left top" or "bottom right" is passed in. Convert to percentages.
+						if (cache.svg) {
+							_applySVGOrigin(target, endValue, 0, smooth, 0, this);
+						} else {
+							endUnit = parseFloat(endValue.split(" ")[2]) || 0; //handle the zOrigin separately!
+							endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);
+							_addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
+						}
+						continue;
+					} else if (p === "svgOrigin") {
+						_applySVGOrigin(target, endValue, 1, smooth, 0, this);
+						continue;
+					} else if (p in _rotationalProperties) {
+						_addRotationalPropTween(this, cache, p, startNum, relative ? _parseRelative(startNum, relative + endValue) : endValue);
+						continue;
+
+					} else if (p === "smoothOrigin") {
+						_addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);
+						continue;
+					} else if (p === "force3D") {
+						cache[p] = endValue;
+						continue;
+					} else if (p === "transform") {
+						_addRawTransformPTs(this, endValue, target);
+						continue;
+					}
+				} else if (!(p in style)) {
+					p = _checkPropPrefix(p) || p;
+				}
+
+				if (isTransformRelated || ((endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && (p in style))) {
+					startUnit = (startValue + "").substr((startNum + "").length);
+					endNum || (endNum = 0); // protect against NaN
+					endUnit = getUnit(endValue) || ((p in _config.units) ? _config.units[p] : startUnit);
+					startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));
+					this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? _parseRelative(startNum, relative + endNum) : endNum) - startNum, (!isTransformRelated && (endUnit === "px" || p === "zIndex") && vars.autoRound !== false) ? _renderRoundedCSSProp : _renderCSSProp);
+					this._pt.u = endUnit || 0;
+					if (startUnit !== endUnit && endUnit !== "%") { //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)
+						this._pt.b = startValue;
+						this._pt.r = _renderCSSPropWithBeginning;
+					}
+				} else if (!(p in style)) {
+					if (p in target) { //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.
+						this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);
+					} else if (p !== "parseTransform") {
+						_missingPlugin(p, endValue);
+						continue;
+					}
+				} else {
+					_tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);
+				}
+				isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : inlineProps.push(p, 1, startValue || target[p]));
+				props.push(p);
+			}
+		}
+		hasPriority && _sortPropTweensByPriority(this);
+
+	},
+	render(ratio, data) {
+		if (data.tween._time || !_reverting()) {
+			let pt = data._pt;
+			while (pt) {
+				pt.r(ratio, pt.d);
+				pt = pt._next;
+			}
+		} else {
+			data.styles.revert();
+		}
+	},
+	get: _get,
+	aliases: _propertyAliases,
+	getSetter(target, property, plugin) { //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.
+		let p = _propertyAliases[property];
+		(p && p.indexOf(",") < 0) && (property = p);
+		return (property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x"))) ? (plugin && _recentSetterPlugin === plugin ? (property === "scale" ? _setterScale : _setterTransform) : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender)) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : _getSetter(target, property);
+	},
+	core: { _removeProperty, _getMatrix }
+
+};
+
+gsap.utils.checkPrefix = _checkPropPrefix;
+gsap.core.getStyleSaver = _getStyleSaver;
+(function(positionAndScale, rotation, others, aliases) {
+	let all = _forEachName(positionAndScale + "," + rotation + "," + others, name => {_transformProps[name] = 1;});
+	_forEachName(rotation, name => {_config.units[name] = "deg"; _rotationalProperties[name] = 1;});
+	_propertyAliases[all[13]] = positionAndScale + "," + rotation;
+	_forEachName(aliases, name => {
+		let split = name.split(":");
+		_propertyAliases[split[1]] = all[split[0]];
+	});
+})("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");
+_forEachName("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", name => {_config.units[name] = "px";});
+
+gsap.registerPlugin(CSSPlugin);
+
+export { CSSPlugin, _createElement, _getBBox, _checkPropPrefix as checkPrefix, CSSPlugin as default };
diff --git a/dist/CSSRulePlugin.js b/dist/CSSRulePlugin.js
deleted file mode 100644
index de18aa5fb6e7d9c6e6c632f19030793ebd278ee5..0000000000000000000000000000000000000000
diff --git a/dist/CSSRulePlugin.min.js b/dist/CSSRulePlugin.min.js
deleted file mode 100644
index ae4ef80ad0053799f6579647f69d4a8ad23e62fb..0000000000000000000000000000000000000000
diff --git a/dist/CSSRulePlugin.min.js.map b/dist/CSSRulePlugin.min.js.map
deleted file mode 100644
index 640c6eb8da2f0bafa26a50e78fac069899ebfaed..0000000000000000000000000000000000000000
diff --git a/dist/CustomEase.cjs b/dist/CustomEase.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..d7a70b095c93845fc27985e9dfa99fef913a005c
--- /dev/null
+++ b/dist/CustomEase.cjs
@@ -0,0 +1,280 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+const paths = require('./shared/gsap.82b47a43.cjs');
+
+/*!
+ * CustomEase 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let gsap, _coreInitted,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_initCore = () => {
+		gsap = _getGSAP();
+		if (gsap) {
+			gsap.registerEase("_CE", CustomEase.create);
+			_coreInitted = 1;
+		} else {
+			console.warn("Please gsap.registerPlugin(CustomEase)");
+		}
+	},
+	_bigNum = 1e20,
+	_round = value => ~~(value * 1000 + (value < 0 ? -.5 : .5)) / 1000,
+	_numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/gi, //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
+	_needsParsingExp = /[cLlsSaAhHvVtTqQ]/g,
+	_findMinimum = values => {
+		let l = values.length,
+			min = _bigNum,
+			i;
+		for (i = 1; i < l; i += 6) {
+			+values[i] < min && (min = +values[i]);
+		}
+		return min;
+	},
+	//takes all the points and translates/scales them so that the x starts at 0 and ends at 1.
+	_normalize = (values, height, originY) => {
+		if (!originY && originY !== 0) {
+			originY = Math.max(+values[values.length-1], +values[1]);
+		}
+		let tx = +values[0] * -1,
+			ty = -originY,
+			l = values.length,
+			sx = 1 / (+values[l - 2] + tx),
+			sy = -height || ((Math.abs(+values[l - 1] - +values[1]) < 0.01 * (+values[l - 2] - +values[0])) ? _findMinimum(values) + ty : +values[l - 1] + ty),
+			i;
+		if (sy) { //typically y ends at 1 (so that the end values are reached)
+			sy = 1 / sy;
+		} else { //in case the ease returns to its beginning value, scale everything proportionally
+			sy = -sx;
+		}
+		for (i = 0; i < l; i += 2) {
+			values[i] = (+values[i] + tx) * sx;
+			values[i + 1] = (+values[i + 1] + ty) * sy;
+		}
+	},
+	//note that this function returns point objects like {x, y} rather than working with segments which are arrays with alternating x, y values as in the similar function in paths.js
+	_bezierToPoints = function (x1, y1, x2, y2, x3, y3, x4, y4, threshold, points, index) {
+		let x12 = (x1 + x2) / 2,
+			y12 = (y1 + y2) / 2,
+			x23 = (x2 + x3) / 2,
+			y23 = (y2 + y3) / 2,
+			x34 = (x3 + x4) / 2,
+			y34 = (y3 + y4) / 2,
+			x123 = (x12 + x23) / 2,
+			y123 = (y12 + y23) / 2,
+			x234 = (x23 + x34) / 2,
+			y234 = (y23 + y34) / 2,
+			x1234 = (x123 + x234) / 2,
+			y1234 = (y123 + y234) / 2,
+			dx = x4 - x1,
+			dy = y4 - y1,
+			d2 = Math.abs((x2 - x4) * dy - (y2 - y4) * dx),
+			d3 = Math.abs((x3 - x4) * dy - (y3 - y4) * dx),
+			length;
+		if (!points) {
+			points = [{x: x1, y: y1}, {x: x4, y: y4}];
+			index = 1;
+		}
+		points.splice(index || points.length - 1, 0, {x: x1234, y: y1234});
+		if ((d2 + d3) * (d2 + d3) > threshold * (dx * dx + dy * dy)) {
+			length = points.length;
+			_bezierToPoints(x1, y1, x12, y12, x123, y123, x1234, y1234, threshold, points, index);
+			_bezierToPoints(x1234, y1234, x234, y234, x34, y34, x4, y4, threshold, points, index + 1 + (points.length - length));
+		}
+		return points;
+	};
+
+class CustomEase {
+
+	constructor(id, data, config) {
+		_coreInitted || _initCore();
+		this.id = id;
+		this.setData(data, config);
+	}
+
+	setData(data, config) {
+		config = config || {};
+		data = data || "0,0,1,1";
+		let values = data.match(_numExp),
+			closest = 1,
+			points = [],
+			lookup = [],
+			precision = config.precision || 1,
+			fast = (precision <= 1),
+			l, a1, a2, i, inc, j, point, prevPoint, p;
+		this.data = data;
+		if (_needsParsingExp.test(data) || (~data.indexOf("M") && data.indexOf("C") < 0)) {
+			values = paths.stringToRawPath(data)[0];
+		}
+		l = values.length;
+		if (l === 4) {
+			values.unshift(0, 0);
+			values.push(1, 1);
+			l = 8;
+		} else if ((l - 2) % 6) {
+			throw "Invalid CustomEase";
+		}
+		if (+values[0] !== 0 || +values[l - 2] !== 1) {
+			_normalize(values, config.height, config.originY);
+		}
+		this.segment = values;
+		for (i = 2; i < l; i += 6) {
+			a1 = {x: +values[i - 2], y: +values[i - 1]};
+			a2 = {x: +values[i + 4], y: +values[i + 5]};
+			points.push(a1, a2);
+			_bezierToPoints(a1.x, a1.y, +values[i], +values[i + 1], +values[i + 2], +values[i + 3], a2.x, a2.y, 1 / (precision * 200000), points, points.length - 1);
+		}
+		l = points.length;
+		for (i = 0; i < l; i++) {
+			point = points[i];
+			prevPoint = points[i - 1] || point;
+			if ((point.x > prevPoint.x || (prevPoint.y !== point.y && prevPoint.x === point.x) || point === prevPoint) && point.x <= 1) { //if a point goes BACKWARD in time or is a duplicate, just drop it. Also it shouldn't go past 1 on the x axis, as could happen in a string like "M0,0 C0,0 0.12,0.68 0.18,0.788 0.195,0.845 0.308,1 0.32,1 0.403,1.005 0.398,1 0.5,1 0.602,1 0.816,1.005 0.9,1 0.91,1 0.948,0.69 0.962,0.615 1.003,0.376 1,0 1,0".
+				prevPoint.cx = point.x - prevPoint.x; //change in x between this point and the next point (performance optimization)
+				prevPoint.cy = point.y - prevPoint.y;
+				prevPoint.n = point;
+				prevPoint.nx = point.x; //next point's x value (performance optimization, making lookups faster in getRatio()). Remember, the lookup will always land on a spot where it's either this point or the very next one (never beyond that)
+				if (fast && i > 1 && Math.abs(prevPoint.cy / prevPoint.cx - points[i - 2].cy / points[i - 2].cx) > 2) { //if there's a sudden change in direction, prioritize accuracy over speed. Like a bounce ease - you don't want to risk the sampling chunks landing on each side of the bounce anchor and having it clipped off.
+					fast = 0;
+				}
+				if (prevPoint.cx < closest) {
+					if (!prevPoint.cx) {
+						prevPoint.cx = 0.001; //avoids math problems in getRatio() (dividing by zero)
+						if (i === l - 1) { //in case the final segment goes vertical RIGHT at the end, make sure we end at the end.
+							prevPoint.x -= 0.001;
+							closest = Math.min(closest, 0.001);
+							fast = 0;
+						}
+					} else {
+						closest = prevPoint.cx;
+					}
+				}
+			} else {
+				points.splice(i--, 1);
+				l--;
+			}
+		}
+		l = (1 / closest + 1) | 0;
+		inc = 1 / l;
+		j = 0;
+		point = points[0];
+		if (fast) {
+			for (i = 0; i < l; i++) { //for fastest lookups, we just sample along the path at equal x (time) distance. Uses more memory and is slightly less accurate for anchors that don't land on the sampling points, but for the vast majority of eases it's excellent (and fast).
+				p = i * inc;
+				if (point.nx < p) {
+					point = points[++j];
+				}
+				a1 = point.y + ((p - point.x) / point.cx) * point.cy;
+				lookup[i] = {x: p, cx: inc, y: a1, cy: 0, nx: 9};
+				if (i) {
+					lookup[i - 1].cy = a1 - lookup[i - 1].y;
+				}
+			}
+			lookup[l - 1].cy = points[points.length - 1].y - a1;
+		} else { //this option is more accurate, ensuring that EVERY anchor is hit perfectly. Clipping across a bounce, for example, would never happen.
+			for (i = 0; i < l; i++) { //build a lookup table based on the smallest distance so that we can instantly find the appropriate point (well, it'll either be that point or the very next one). We'll look up based on the linear progress. So it's it's 0.5 and the lookup table has 100 elements, it'd be like lookup[Math.floor(0.5 * 100)]
+				if (point.nx < i * inc) {
+					point = points[++j];
+				}
+				lookup[i] = point;
+			}
+
+			if (j < points.length - 1) {
+				lookup[i-1] = points[points.length-2];
+			}
+		}
+		//this._calcEnd = (points[points.length-1].y !== 1 || points[0].y !== 0); //ensures that we don't run into floating point errors. As long as we're starting at 0 and ending at 1, tell GSAP to skip the final calculation and use 0/1 as the factor.
+
+		this.ease = p => {
+			let point = lookup[(p * l) | 0] || lookup[l - 1];
+			if (point.nx < p) {
+				point = point.n;
+			}
+			return point.y + ((p - point.x) / point.cx) * point.cy;
+		};
+
+		this.ease.custom = this;
+
+		this.id && gsap && gsap.registerEase(this.id, this.ease);
+
+		return this;
+	}
+
+	getSVGData(config) {
+		return CustomEase.getSVGData(this, config);
+	}
+
+	static create(id, data, config) {
+		return (new CustomEase(id, data, config)).ease;
+	}
+
+	static register(core) {
+		gsap = core;
+		_initCore();
+	}
+
+	static get(id) {
+		return gsap.parseEase(id);
+	}
+
+	static getSVGData(ease, config) {
+		config = config || {};
+		let width = config.width || 100,
+			height = config.height || 100,
+			x = config.x || 0,
+			y = (config.y || 0) + height,
+			e = gsap.utils.toArray(config.path)[0],
+			a, slope, i, inc, tx, ty, precision, threshold, prevX, prevY;
+		if (config.invert) {
+			height = -height;
+			y = 0;
+		}
+		if (typeof(ease) === "string") {
+			ease = gsap.parseEase(ease);
+		}
+		if (ease.custom) {
+			ease = ease.custom;
+		}
+		if (ease instanceof CustomEase) {
+			a = paths.rawPathToString(paths.transformRawPath([ease.segment], width, 0, 0, -height, x, y));
+		} else {
+			a = [x, y];
+			precision = Math.max(5, (config.precision || 1) * 200);
+			inc = 1 / precision;
+			precision += 2;
+			threshold = 5 / precision;
+			prevX = _round(x + inc * width);
+			prevY = _round(y + ease(inc) * -height);
+			slope = (prevY - y) / (prevX - x);
+			for (i = 2; i < precision; i++) {
+				tx = _round(x + i * inc * width);
+				ty = _round(y + ease(i * inc) * -height);
+				if (Math.abs((ty - prevY) / (tx - prevX) - slope) > threshold || i === precision - 1) { //only add points when the slope changes beyond the threshold
+					a.push(prevX, prevY);
+					slope = (ty - prevY) / (tx - prevX);
+				}
+				prevX = tx;
+				prevY = ty;
+			}
+			a = "M" + a.join(",");
+		}
+		e && e.setAttribute("d", a);
+		return a;
+	}
+
+}
+
+_getGSAP() && gsap.registerPlugin(CustomEase);
+
+CustomEase.version = "3.12.5";
+
+exports.CustomEase = CustomEase;
+exports.default = CustomEase;
diff --git a/src/CustomEase.js b/dist/CustomEase.d.cts
similarity index 97%
rename from src/CustomEase.js
rename to dist/CustomEase.d.cts
index beafac3225d132f0352aef6414bce766875336bd..47a23a43e73f12d345b653626ecedaf5fb67025e 100644
--- a/src/CustomEase.js
+++ b/dist/CustomEase.d.cts
@@ -1,3 +1,5 @@
+import { s as stringToRawPath, r as rawPathToString, t as transformRawPath } from './shared/gsap.41b79ecf.cjs';
+
 /*!
  * CustomEase 3.12.5
  * https://gsap.com
@@ -9,7 +11,6 @@
 */
 /* eslint-disable */
 
-import { stringToRawPath, rawPathToString, transformRawPath } from "./utils/paths.js";
 
 let gsap, _coreInitted,
 	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap),
@@ -24,7 +25,6 @@ let gsap, _coreInitted,
 	},
 	_bigNum = 1e20,
 	_round = value => ~~(value * 1000 + (value < 0 ? -.5 : .5)) / 1000,
-	_bonusValidated = 1, //<name>CustomEase</name>
 	_numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/gi, //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
 	_needsParsingExp = /[cLlsSaAhHvVtTqQ]/g,
 	_findMinimum = values => {
@@ -89,12 +89,12 @@ let gsap, _coreInitted,
 		return points;
 	};
 
-export class CustomEase {
+class CustomEase {
 
 	constructor(id, data, config) {
 		_coreInitted || _initCore();
 		this.id = id;
-		_bonusValidated && this.setData(data, config);
+		this.setData(data, config);
 	}
 
 	setData(data, config) {
@@ -272,4 +272,4 @@ _getGSAP() && gsap.registerPlugin(CustomEase);
 
 CustomEase.version = "3.12.5";
 
-export { CustomEase as default };
\ No newline at end of file
+export { CustomEase, CustomEase as default };
diff --git a/dist/CustomEase.d.mts b/dist/CustomEase.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..caf869f2b843578cedfac0b0a74e60ee502501b4
--- /dev/null
+++ b/dist/CustomEase.d.mts
@@ -0,0 +1,275 @@
+import { s as stringToRawPath, r as rawPathToString, t as transformRawPath } from './shared/gsap.41b79ecf.mjs';
+
+/*!
+ * CustomEase 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let gsap, _coreInitted,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_initCore = () => {
+		gsap = _getGSAP();
+		if (gsap) {
+			gsap.registerEase("_CE", CustomEase.create);
+			_coreInitted = 1;
+		} else {
+			console.warn("Please gsap.registerPlugin(CustomEase)");
+		}
+	},
+	_bigNum = 1e20,
+	_round = value => ~~(value * 1000 + (value < 0 ? -.5 : .5)) / 1000,
+	_numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/gi, //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
+	_needsParsingExp = /[cLlsSaAhHvVtTqQ]/g,
+	_findMinimum = values => {
+		let l = values.length,
+			min = _bigNum,
+			i;
+		for (i = 1; i < l; i += 6) {
+			+values[i] < min && (min = +values[i]);
+		}
+		return min;
+	},
+	//takes all the points and translates/scales them so that the x starts at 0 and ends at 1.
+	_normalize = (values, height, originY) => {
+		if (!originY && originY !== 0) {
+			originY = Math.max(+values[values.length-1], +values[1]);
+		}
+		let tx = +values[0] * -1,
+			ty = -originY,
+			l = values.length,
+			sx = 1 / (+values[l - 2] + tx),
+			sy = -height || ((Math.abs(+values[l - 1] - +values[1]) < 0.01 * (+values[l - 2] - +values[0])) ? _findMinimum(values) + ty : +values[l - 1] + ty),
+			i;
+		if (sy) { //typically y ends at 1 (so that the end values are reached)
+			sy = 1 / sy;
+		} else { //in case the ease returns to its beginning value, scale everything proportionally
+			sy = -sx;
+		}
+		for (i = 0; i < l; i += 2) {
+			values[i] = (+values[i] + tx) * sx;
+			values[i + 1] = (+values[i + 1] + ty) * sy;
+		}
+	},
+	//note that this function returns point objects like {x, y} rather than working with segments which are arrays with alternating x, y values as in the similar function in paths.js
+	_bezierToPoints = function (x1, y1, x2, y2, x3, y3, x4, y4, threshold, points, index) {
+		let x12 = (x1 + x2) / 2,
+			y12 = (y1 + y2) / 2,
+			x23 = (x2 + x3) / 2,
+			y23 = (y2 + y3) / 2,
+			x34 = (x3 + x4) / 2,
+			y34 = (y3 + y4) / 2,
+			x123 = (x12 + x23) / 2,
+			y123 = (y12 + y23) / 2,
+			x234 = (x23 + x34) / 2,
+			y234 = (y23 + y34) / 2,
+			x1234 = (x123 + x234) / 2,
+			y1234 = (y123 + y234) / 2,
+			dx = x4 - x1,
+			dy = y4 - y1,
+			d2 = Math.abs((x2 - x4) * dy - (y2 - y4) * dx),
+			d3 = Math.abs((x3 - x4) * dy - (y3 - y4) * dx),
+			length;
+		if (!points) {
+			points = [{x: x1, y: y1}, {x: x4, y: y4}];
+			index = 1;
+		}
+		points.splice(index || points.length - 1, 0, {x: x1234, y: y1234});
+		if ((d2 + d3) * (d2 + d3) > threshold * (dx * dx + dy * dy)) {
+			length = points.length;
+			_bezierToPoints(x1, y1, x12, y12, x123, y123, x1234, y1234, threshold, points, index);
+			_bezierToPoints(x1234, y1234, x234, y234, x34, y34, x4, y4, threshold, points, index + 1 + (points.length - length));
+		}
+		return points;
+	};
+
+class CustomEase {
+
+	constructor(id, data, config) {
+		_coreInitted || _initCore();
+		this.id = id;
+		this.setData(data, config);
+	}
+
+	setData(data, config) {
+		config = config || {};
+		data = data || "0,0,1,1";
+		let values = data.match(_numExp),
+			closest = 1,
+			points = [],
+			lookup = [],
+			precision = config.precision || 1,
+			fast = (precision <= 1),
+			l, a1, a2, i, inc, j, point, prevPoint, p;
+		this.data = data;
+		if (_needsParsingExp.test(data) || (~data.indexOf("M") && data.indexOf("C") < 0)) {
+			values = stringToRawPath(data)[0];
+		}
+		l = values.length;
+		if (l === 4) {
+			values.unshift(0, 0);
+			values.push(1, 1);
+			l = 8;
+		} else if ((l - 2) % 6) {
+			throw "Invalid CustomEase";
+		}
+		if (+values[0] !== 0 || +values[l - 2] !== 1) {
+			_normalize(values, config.height, config.originY);
+		}
+		this.segment = values;
+		for (i = 2; i < l; i += 6) {
+			a1 = {x: +values[i - 2], y: +values[i - 1]};
+			a2 = {x: +values[i + 4], y: +values[i + 5]};
+			points.push(a1, a2);
+			_bezierToPoints(a1.x, a1.y, +values[i], +values[i + 1], +values[i + 2], +values[i + 3], a2.x, a2.y, 1 / (precision * 200000), points, points.length - 1);
+		}
+		l = points.length;
+		for (i = 0; i < l; i++) {
+			point = points[i];
+			prevPoint = points[i - 1] || point;
+			if ((point.x > prevPoint.x || (prevPoint.y !== point.y && prevPoint.x === point.x) || point === prevPoint) && point.x <= 1) { //if a point goes BACKWARD in time or is a duplicate, just drop it. Also it shouldn't go past 1 on the x axis, as could happen in a string like "M0,0 C0,0 0.12,0.68 0.18,0.788 0.195,0.845 0.308,1 0.32,1 0.403,1.005 0.398,1 0.5,1 0.602,1 0.816,1.005 0.9,1 0.91,1 0.948,0.69 0.962,0.615 1.003,0.376 1,0 1,0".
+				prevPoint.cx = point.x - prevPoint.x; //change in x between this point and the next point (performance optimization)
+				prevPoint.cy = point.y - prevPoint.y;
+				prevPoint.n = point;
+				prevPoint.nx = point.x; //next point's x value (performance optimization, making lookups faster in getRatio()). Remember, the lookup will always land on a spot where it's either this point or the very next one (never beyond that)
+				if (fast && i > 1 && Math.abs(prevPoint.cy / prevPoint.cx - points[i - 2].cy / points[i - 2].cx) > 2) { //if there's a sudden change in direction, prioritize accuracy over speed. Like a bounce ease - you don't want to risk the sampling chunks landing on each side of the bounce anchor and having it clipped off.
+					fast = 0;
+				}
+				if (prevPoint.cx < closest) {
+					if (!prevPoint.cx) {
+						prevPoint.cx = 0.001; //avoids math problems in getRatio() (dividing by zero)
+						if (i === l - 1) { //in case the final segment goes vertical RIGHT at the end, make sure we end at the end.
+							prevPoint.x -= 0.001;
+							closest = Math.min(closest, 0.001);
+							fast = 0;
+						}
+					} else {
+						closest = prevPoint.cx;
+					}
+				}
+			} else {
+				points.splice(i--, 1);
+				l--;
+			}
+		}
+		l = (1 / closest + 1) | 0;
+		inc = 1 / l;
+		j = 0;
+		point = points[0];
+		if (fast) {
+			for (i = 0; i < l; i++) { //for fastest lookups, we just sample along the path at equal x (time) distance. Uses more memory and is slightly less accurate for anchors that don't land on the sampling points, but for the vast majority of eases it's excellent (and fast).
+				p = i * inc;
+				if (point.nx < p) {
+					point = points[++j];
+				}
+				a1 = point.y + ((p - point.x) / point.cx) * point.cy;
+				lookup[i] = {x: p, cx: inc, y: a1, cy: 0, nx: 9};
+				if (i) {
+					lookup[i - 1].cy = a1 - lookup[i - 1].y;
+				}
+			}
+			lookup[l - 1].cy = points[points.length - 1].y - a1;
+		} else { //this option is more accurate, ensuring that EVERY anchor is hit perfectly. Clipping across a bounce, for example, would never happen.
+			for (i = 0; i < l; i++) { //build a lookup table based on the smallest distance so that we can instantly find the appropriate point (well, it'll either be that point or the very next one). We'll look up based on the linear progress. So it's it's 0.5 and the lookup table has 100 elements, it'd be like lookup[Math.floor(0.5 * 100)]
+				if (point.nx < i * inc) {
+					point = points[++j];
+				}
+				lookup[i] = point;
+			}
+
+			if (j < points.length - 1) {
+				lookup[i-1] = points[points.length-2];
+			}
+		}
+		//this._calcEnd = (points[points.length-1].y !== 1 || points[0].y !== 0); //ensures that we don't run into floating point errors. As long as we're starting at 0 and ending at 1, tell GSAP to skip the final calculation and use 0/1 as the factor.
+
+		this.ease = p => {
+			let point = lookup[(p * l) | 0] || lookup[l - 1];
+			if (point.nx < p) {
+				point = point.n;
+			}
+			return point.y + ((p - point.x) / point.cx) * point.cy;
+		};
+
+		this.ease.custom = this;
+
+		this.id && gsap && gsap.registerEase(this.id, this.ease);
+
+		return this;
+	}
+
+	getSVGData(config) {
+		return CustomEase.getSVGData(this, config);
+	}
+
+	static create(id, data, config) {
+		return (new CustomEase(id, data, config)).ease;
+	}
+
+	static register(core) {
+		gsap = core;
+		_initCore();
+	}
+
+	static get(id) {
+		return gsap.parseEase(id);
+	}
+
+	static getSVGData(ease, config) {
+		config = config || {};
+		let width = config.width || 100,
+			height = config.height || 100,
+			x = config.x || 0,
+			y = (config.y || 0) + height,
+			e = gsap.utils.toArray(config.path)[0],
+			a, slope, i, inc, tx, ty, precision, threshold, prevX, prevY;
+		if (config.invert) {
+			height = -height;
+			y = 0;
+		}
+		if (typeof(ease) === "string") {
+			ease = gsap.parseEase(ease);
+		}
+		if (ease.custom) {
+			ease = ease.custom;
+		}
+		if (ease instanceof CustomEase) {
+			a = rawPathToString(transformRawPath([ease.segment], width, 0, 0, -height, x, y));
+		} else {
+			a = [x, y];
+			precision = Math.max(5, (config.precision || 1) * 200);
+			inc = 1 / precision;
+			precision += 2;
+			threshold = 5 / precision;
+			prevX = _round(x + inc * width);
+			prevY = _round(y + ease(inc) * -height);
+			slope = (prevY - y) / (prevX - x);
+			for (i = 2; i < precision; i++) {
+				tx = _round(x + i * inc * width);
+				ty = _round(y + ease(i * inc) * -height);
+				if (Math.abs((ty - prevY) / (tx - prevX) - slope) > threshold || i === precision - 1) { //only add points when the slope changes beyond the threshold
+					a.push(prevX, prevY);
+					slope = (ty - prevY) / (tx - prevX);
+				}
+				prevX = tx;
+				prevY = ty;
+			}
+			a = "M" + a.join(",");
+		}
+		e && e.setAttribute("d", a);
+		return a;
+	}
+
+}
+
+_getGSAP() && gsap.registerPlugin(CustomEase);
+
+CustomEase.version = "3.12.5";
+
+export { CustomEase, CustomEase as default };
diff --git a/dist/CustomEase.d.ts b/dist/CustomEase.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..dfbb3c4fcbd06414b7120f5044949ed01971dab3
--- /dev/null
+++ b/dist/CustomEase.d.ts
@@ -0,0 +1,275 @@
+import { s as stringToRawPath, r as rawPathToString, t as transformRawPath } from './shared/gsap.41b79ecf.js';
+
+/*!
+ * CustomEase 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let gsap, _coreInitted,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_initCore = () => {
+		gsap = _getGSAP();
+		if (gsap) {
+			gsap.registerEase("_CE", CustomEase.create);
+			_coreInitted = 1;
+		} else {
+			console.warn("Please gsap.registerPlugin(CustomEase)");
+		}
+	},
+	_bigNum = 1e20,
+	_round = value => ~~(value * 1000 + (value < 0 ? -.5 : .5)) / 1000,
+	_numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/gi, //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
+	_needsParsingExp = /[cLlsSaAhHvVtTqQ]/g,
+	_findMinimum = values => {
+		let l = values.length,
+			min = _bigNum,
+			i;
+		for (i = 1; i < l; i += 6) {
+			+values[i] < min && (min = +values[i]);
+		}
+		return min;
+	},
+	//takes all the points and translates/scales them so that the x starts at 0 and ends at 1.
+	_normalize = (values, height, originY) => {
+		if (!originY && originY !== 0) {
+			originY = Math.max(+values[values.length-1], +values[1]);
+		}
+		let tx = +values[0] * -1,
+			ty = -originY,
+			l = values.length,
+			sx = 1 / (+values[l - 2] + tx),
+			sy = -height || ((Math.abs(+values[l - 1] - +values[1]) < 0.01 * (+values[l - 2] - +values[0])) ? _findMinimum(values) + ty : +values[l - 1] + ty),
+			i;
+		if (sy) { //typically y ends at 1 (so that the end values are reached)
+			sy = 1 / sy;
+		} else { //in case the ease returns to its beginning value, scale everything proportionally
+			sy = -sx;
+		}
+		for (i = 0; i < l; i += 2) {
+			values[i] = (+values[i] + tx) * sx;
+			values[i + 1] = (+values[i + 1] + ty) * sy;
+		}
+	},
+	//note that this function returns point objects like {x, y} rather than working with segments which are arrays with alternating x, y values as in the similar function in paths.js
+	_bezierToPoints = function (x1, y1, x2, y2, x3, y3, x4, y4, threshold, points, index) {
+		let x12 = (x1 + x2) / 2,
+			y12 = (y1 + y2) / 2,
+			x23 = (x2 + x3) / 2,
+			y23 = (y2 + y3) / 2,
+			x34 = (x3 + x4) / 2,
+			y34 = (y3 + y4) / 2,
+			x123 = (x12 + x23) / 2,
+			y123 = (y12 + y23) / 2,
+			x234 = (x23 + x34) / 2,
+			y234 = (y23 + y34) / 2,
+			x1234 = (x123 + x234) / 2,
+			y1234 = (y123 + y234) / 2,
+			dx = x4 - x1,
+			dy = y4 - y1,
+			d2 = Math.abs((x2 - x4) * dy - (y2 - y4) * dx),
+			d3 = Math.abs((x3 - x4) * dy - (y3 - y4) * dx),
+			length;
+		if (!points) {
+			points = [{x: x1, y: y1}, {x: x4, y: y4}];
+			index = 1;
+		}
+		points.splice(index || points.length - 1, 0, {x: x1234, y: y1234});
+		if ((d2 + d3) * (d2 + d3) > threshold * (dx * dx + dy * dy)) {
+			length = points.length;
+			_bezierToPoints(x1, y1, x12, y12, x123, y123, x1234, y1234, threshold, points, index);
+			_bezierToPoints(x1234, y1234, x234, y234, x34, y34, x4, y4, threshold, points, index + 1 + (points.length - length));
+		}
+		return points;
+	};
+
+class CustomEase {
+
+	constructor(id, data, config) {
+		_coreInitted || _initCore();
+		this.id = id;
+		this.setData(data, config);
+	}
+
+	setData(data, config) {
+		config = config || {};
+		data = data || "0,0,1,1";
+		let values = data.match(_numExp),
+			closest = 1,
+			points = [],
+			lookup = [],
+			precision = config.precision || 1,
+			fast = (precision <= 1),
+			l, a1, a2, i, inc, j, point, prevPoint, p;
+		this.data = data;
+		if (_needsParsingExp.test(data) || (~data.indexOf("M") && data.indexOf("C") < 0)) {
+			values = stringToRawPath(data)[0];
+		}
+		l = values.length;
+		if (l === 4) {
+			values.unshift(0, 0);
+			values.push(1, 1);
+			l = 8;
+		} else if ((l - 2) % 6) {
+			throw "Invalid CustomEase";
+		}
+		if (+values[0] !== 0 || +values[l - 2] !== 1) {
+			_normalize(values, config.height, config.originY);
+		}
+		this.segment = values;
+		for (i = 2; i < l; i += 6) {
+			a1 = {x: +values[i - 2], y: +values[i - 1]};
+			a2 = {x: +values[i + 4], y: +values[i + 5]};
+			points.push(a1, a2);
+			_bezierToPoints(a1.x, a1.y, +values[i], +values[i + 1], +values[i + 2], +values[i + 3], a2.x, a2.y, 1 / (precision * 200000), points, points.length - 1);
+		}
+		l = points.length;
+		for (i = 0; i < l; i++) {
+			point = points[i];
+			prevPoint = points[i - 1] || point;
+			if ((point.x > prevPoint.x || (prevPoint.y !== point.y && prevPoint.x === point.x) || point === prevPoint) && point.x <= 1) { //if a point goes BACKWARD in time or is a duplicate, just drop it. Also it shouldn't go past 1 on the x axis, as could happen in a string like "M0,0 C0,0 0.12,0.68 0.18,0.788 0.195,0.845 0.308,1 0.32,1 0.403,1.005 0.398,1 0.5,1 0.602,1 0.816,1.005 0.9,1 0.91,1 0.948,0.69 0.962,0.615 1.003,0.376 1,0 1,0".
+				prevPoint.cx = point.x - prevPoint.x; //change in x between this point and the next point (performance optimization)
+				prevPoint.cy = point.y - prevPoint.y;
+				prevPoint.n = point;
+				prevPoint.nx = point.x; //next point's x value (performance optimization, making lookups faster in getRatio()). Remember, the lookup will always land on a spot where it's either this point or the very next one (never beyond that)
+				if (fast && i > 1 && Math.abs(prevPoint.cy / prevPoint.cx - points[i - 2].cy / points[i - 2].cx) > 2) { //if there's a sudden change in direction, prioritize accuracy over speed. Like a bounce ease - you don't want to risk the sampling chunks landing on each side of the bounce anchor and having it clipped off.
+					fast = 0;
+				}
+				if (prevPoint.cx < closest) {
+					if (!prevPoint.cx) {
+						prevPoint.cx = 0.001; //avoids math problems in getRatio() (dividing by zero)
+						if (i === l - 1) { //in case the final segment goes vertical RIGHT at the end, make sure we end at the end.
+							prevPoint.x -= 0.001;
+							closest = Math.min(closest, 0.001);
+							fast = 0;
+						}
+					} else {
+						closest = prevPoint.cx;
+					}
+				}
+			} else {
+				points.splice(i--, 1);
+				l--;
+			}
+		}
+		l = (1 / closest + 1) | 0;
+		inc = 1 / l;
+		j = 0;
+		point = points[0];
+		if (fast) {
+			for (i = 0; i < l; i++) { //for fastest lookups, we just sample along the path at equal x (time) distance. Uses more memory and is slightly less accurate for anchors that don't land on the sampling points, but for the vast majority of eases it's excellent (and fast).
+				p = i * inc;
+				if (point.nx < p) {
+					point = points[++j];
+				}
+				a1 = point.y + ((p - point.x) / point.cx) * point.cy;
+				lookup[i] = {x: p, cx: inc, y: a1, cy: 0, nx: 9};
+				if (i) {
+					lookup[i - 1].cy = a1 - lookup[i - 1].y;
+				}
+			}
+			lookup[l - 1].cy = points[points.length - 1].y - a1;
+		} else { //this option is more accurate, ensuring that EVERY anchor is hit perfectly. Clipping across a bounce, for example, would never happen.
+			for (i = 0; i < l; i++) { //build a lookup table based on the smallest distance so that we can instantly find the appropriate point (well, it'll either be that point or the very next one). We'll look up based on the linear progress. So it's it's 0.5 and the lookup table has 100 elements, it'd be like lookup[Math.floor(0.5 * 100)]
+				if (point.nx < i * inc) {
+					point = points[++j];
+				}
+				lookup[i] = point;
+			}
+
+			if (j < points.length - 1) {
+				lookup[i-1] = points[points.length-2];
+			}
+		}
+		//this._calcEnd = (points[points.length-1].y !== 1 || points[0].y !== 0); //ensures that we don't run into floating point errors. As long as we're starting at 0 and ending at 1, tell GSAP to skip the final calculation and use 0/1 as the factor.
+
+		this.ease = p => {
+			let point = lookup[(p * l) | 0] || lookup[l - 1];
+			if (point.nx < p) {
+				point = point.n;
+			}
+			return point.y + ((p - point.x) / point.cx) * point.cy;
+		};
+
+		this.ease.custom = this;
+
+		this.id && gsap && gsap.registerEase(this.id, this.ease);
+
+		return this;
+	}
+
+	getSVGData(config) {
+		return CustomEase.getSVGData(this, config);
+	}
+
+	static create(id, data, config) {
+		return (new CustomEase(id, data, config)).ease;
+	}
+
+	static register(core) {
+		gsap = core;
+		_initCore();
+	}
+
+	static get(id) {
+		return gsap.parseEase(id);
+	}
+
+	static getSVGData(ease, config) {
+		config = config || {};
+		let width = config.width || 100,
+			height = config.height || 100,
+			x = config.x || 0,
+			y = (config.y || 0) + height,
+			e = gsap.utils.toArray(config.path)[0],
+			a, slope, i, inc, tx, ty, precision, threshold, prevX, prevY;
+		if (config.invert) {
+			height = -height;
+			y = 0;
+		}
+		if (typeof(ease) === "string") {
+			ease = gsap.parseEase(ease);
+		}
+		if (ease.custom) {
+			ease = ease.custom;
+		}
+		if (ease instanceof CustomEase) {
+			a = rawPathToString(transformRawPath([ease.segment], width, 0, 0, -height, x, y));
+		} else {
+			a = [x, y];
+			precision = Math.max(5, (config.precision || 1) * 200);
+			inc = 1 / precision;
+			precision += 2;
+			threshold = 5 / precision;
+			prevX = _round(x + inc * width);
+			prevY = _round(y + ease(inc) * -height);
+			slope = (prevY - y) / (prevX - x);
+			for (i = 2; i < precision; i++) {
+				tx = _round(x + i * inc * width);
+				ty = _round(y + ease(i * inc) * -height);
+				if (Math.abs((ty - prevY) / (tx - prevX) - slope) > threshold || i === precision - 1) { //only add points when the slope changes beyond the threshold
+					a.push(prevX, prevY);
+					slope = (ty - prevY) / (tx - prevX);
+				}
+				prevX = tx;
+				prevY = ty;
+			}
+			a = "M" + a.join(",");
+		}
+		e && e.setAttribute("d", a);
+		return a;
+	}
+
+}
+
+_getGSAP() && gsap.registerPlugin(CustomEase);
+
+CustomEase.version = "3.12.5";
+
+export { CustomEase, CustomEase as default };
diff --git a/dist/CustomEase.js b/dist/CustomEase.js
deleted file mode 100644
index db8bfc172bc9dd0c827785b55cccc9bd643a6d04..0000000000000000000000000000000000000000
diff --git a/dist/CustomEase.min.js b/dist/CustomEase.min.js
deleted file mode 100644
index b5e835394b2e88dbc27bd8e03f82d34402446d37..0000000000000000000000000000000000000000
diff --git a/dist/CustomEase.min.js.map b/dist/CustomEase.min.js.map
deleted file mode 100644
index 2d1309a7ad87a187372992bfd20b2eb2abc1580c..0000000000000000000000000000000000000000
diff --git a/dist/CustomEase.mjs b/dist/CustomEase.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..caf869f2b843578cedfac0b0a74e60ee502501b4
--- /dev/null
+++ b/dist/CustomEase.mjs
@@ -0,0 +1,275 @@
+import { s as stringToRawPath, r as rawPathToString, t as transformRawPath } from './shared/gsap.41b79ecf.mjs';
+
+/*!
+ * CustomEase 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let gsap, _coreInitted,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_initCore = () => {
+		gsap = _getGSAP();
+		if (gsap) {
+			gsap.registerEase("_CE", CustomEase.create);
+			_coreInitted = 1;
+		} else {
+			console.warn("Please gsap.registerPlugin(CustomEase)");
+		}
+	},
+	_bigNum = 1e20,
+	_round = value => ~~(value * 1000 + (value < 0 ? -.5 : .5)) / 1000,
+	_numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/gi, //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
+	_needsParsingExp = /[cLlsSaAhHvVtTqQ]/g,
+	_findMinimum = values => {
+		let l = values.length,
+			min = _bigNum,
+			i;
+		for (i = 1; i < l; i += 6) {
+			+values[i] < min && (min = +values[i]);
+		}
+		return min;
+	},
+	//takes all the points and translates/scales them so that the x starts at 0 and ends at 1.
+	_normalize = (values, height, originY) => {
+		if (!originY && originY !== 0) {
+			originY = Math.max(+values[values.length-1], +values[1]);
+		}
+		let tx = +values[0] * -1,
+			ty = -originY,
+			l = values.length,
+			sx = 1 / (+values[l - 2] + tx),
+			sy = -height || ((Math.abs(+values[l - 1] - +values[1]) < 0.01 * (+values[l - 2] - +values[0])) ? _findMinimum(values) + ty : +values[l - 1] + ty),
+			i;
+		if (sy) { //typically y ends at 1 (so that the end values are reached)
+			sy = 1 / sy;
+		} else { //in case the ease returns to its beginning value, scale everything proportionally
+			sy = -sx;
+		}
+		for (i = 0; i < l; i += 2) {
+			values[i] = (+values[i] + tx) * sx;
+			values[i + 1] = (+values[i + 1] + ty) * sy;
+		}
+	},
+	//note that this function returns point objects like {x, y} rather than working with segments which are arrays with alternating x, y values as in the similar function in paths.js
+	_bezierToPoints = function (x1, y1, x2, y2, x3, y3, x4, y4, threshold, points, index) {
+		let x12 = (x1 + x2) / 2,
+			y12 = (y1 + y2) / 2,
+			x23 = (x2 + x3) / 2,
+			y23 = (y2 + y3) / 2,
+			x34 = (x3 + x4) / 2,
+			y34 = (y3 + y4) / 2,
+			x123 = (x12 + x23) / 2,
+			y123 = (y12 + y23) / 2,
+			x234 = (x23 + x34) / 2,
+			y234 = (y23 + y34) / 2,
+			x1234 = (x123 + x234) / 2,
+			y1234 = (y123 + y234) / 2,
+			dx = x4 - x1,
+			dy = y4 - y1,
+			d2 = Math.abs((x2 - x4) * dy - (y2 - y4) * dx),
+			d3 = Math.abs((x3 - x4) * dy - (y3 - y4) * dx),
+			length;
+		if (!points) {
+			points = [{x: x1, y: y1}, {x: x4, y: y4}];
+			index = 1;
+		}
+		points.splice(index || points.length - 1, 0, {x: x1234, y: y1234});
+		if ((d2 + d3) * (d2 + d3) > threshold * (dx * dx + dy * dy)) {
+			length = points.length;
+			_bezierToPoints(x1, y1, x12, y12, x123, y123, x1234, y1234, threshold, points, index);
+			_bezierToPoints(x1234, y1234, x234, y234, x34, y34, x4, y4, threshold, points, index + 1 + (points.length - length));
+		}
+		return points;
+	};
+
+class CustomEase {
+
+	constructor(id, data, config) {
+		_coreInitted || _initCore();
+		this.id = id;
+		this.setData(data, config);
+	}
+
+	setData(data, config) {
+		config = config || {};
+		data = data || "0,0,1,1";
+		let values = data.match(_numExp),
+			closest = 1,
+			points = [],
+			lookup = [],
+			precision = config.precision || 1,
+			fast = (precision <= 1),
+			l, a1, a2, i, inc, j, point, prevPoint, p;
+		this.data = data;
+		if (_needsParsingExp.test(data) || (~data.indexOf("M") && data.indexOf("C") < 0)) {
+			values = stringToRawPath(data)[0];
+		}
+		l = values.length;
+		if (l === 4) {
+			values.unshift(0, 0);
+			values.push(1, 1);
+			l = 8;
+		} else if ((l - 2) % 6) {
+			throw "Invalid CustomEase";
+		}
+		if (+values[0] !== 0 || +values[l - 2] !== 1) {
+			_normalize(values, config.height, config.originY);
+		}
+		this.segment = values;
+		for (i = 2; i < l; i += 6) {
+			a1 = {x: +values[i - 2], y: +values[i - 1]};
+			a2 = {x: +values[i + 4], y: +values[i + 5]};
+			points.push(a1, a2);
+			_bezierToPoints(a1.x, a1.y, +values[i], +values[i + 1], +values[i + 2], +values[i + 3], a2.x, a2.y, 1 / (precision * 200000), points, points.length - 1);
+		}
+		l = points.length;
+		for (i = 0; i < l; i++) {
+			point = points[i];
+			prevPoint = points[i - 1] || point;
+			if ((point.x > prevPoint.x || (prevPoint.y !== point.y && prevPoint.x === point.x) || point === prevPoint) && point.x <= 1) { //if a point goes BACKWARD in time or is a duplicate, just drop it. Also it shouldn't go past 1 on the x axis, as could happen in a string like "M0,0 C0,0 0.12,0.68 0.18,0.788 0.195,0.845 0.308,1 0.32,1 0.403,1.005 0.398,1 0.5,1 0.602,1 0.816,1.005 0.9,1 0.91,1 0.948,0.69 0.962,0.615 1.003,0.376 1,0 1,0".
+				prevPoint.cx = point.x - prevPoint.x; //change in x between this point and the next point (performance optimization)
+				prevPoint.cy = point.y - prevPoint.y;
+				prevPoint.n = point;
+				prevPoint.nx = point.x; //next point's x value (performance optimization, making lookups faster in getRatio()). Remember, the lookup will always land on a spot where it's either this point or the very next one (never beyond that)
+				if (fast && i > 1 && Math.abs(prevPoint.cy / prevPoint.cx - points[i - 2].cy / points[i - 2].cx) > 2) { //if there's a sudden change in direction, prioritize accuracy over speed. Like a bounce ease - you don't want to risk the sampling chunks landing on each side of the bounce anchor and having it clipped off.
+					fast = 0;
+				}
+				if (prevPoint.cx < closest) {
+					if (!prevPoint.cx) {
+						prevPoint.cx = 0.001; //avoids math problems in getRatio() (dividing by zero)
+						if (i === l - 1) { //in case the final segment goes vertical RIGHT at the end, make sure we end at the end.
+							prevPoint.x -= 0.001;
+							closest = Math.min(closest, 0.001);
+							fast = 0;
+						}
+					} else {
+						closest = prevPoint.cx;
+					}
+				}
+			} else {
+				points.splice(i--, 1);
+				l--;
+			}
+		}
+		l = (1 / closest + 1) | 0;
+		inc = 1 / l;
+		j = 0;
+		point = points[0];
+		if (fast) {
+			for (i = 0; i < l; i++) { //for fastest lookups, we just sample along the path at equal x (time) distance. Uses more memory and is slightly less accurate for anchors that don't land on the sampling points, but for the vast majority of eases it's excellent (and fast).
+				p = i * inc;
+				if (point.nx < p) {
+					point = points[++j];
+				}
+				a1 = point.y + ((p - point.x) / point.cx) * point.cy;
+				lookup[i] = {x: p, cx: inc, y: a1, cy: 0, nx: 9};
+				if (i) {
+					lookup[i - 1].cy = a1 - lookup[i - 1].y;
+				}
+			}
+			lookup[l - 1].cy = points[points.length - 1].y - a1;
+		} else { //this option is more accurate, ensuring that EVERY anchor is hit perfectly. Clipping across a bounce, for example, would never happen.
+			for (i = 0; i < l; i++) { //build a lookup table based on the smallest distance so that we can instantly find the appropriate point (well, it'll either be that point or the very next one). We'll look up based on the linear progress. So it's it's 0.5 and the lookup table has 100 elements, it'd be like lookup[Math.floor(0.5 * 100)]
+				if (point.nx < i * inc) {
+					point = points[++j];
+				}
+				lookup[i] = point;
+			}
+
+			if (j < points.length - 1) {
+				lookup[i-1] = points[points.length-2];
+			}
+		}
+		//this._calcEnd = (points[points.length-1].y !== 1 || points[0].y !== 0); //ensures that we don't run into floating point errors. As long as we're starting at 0 and ending at 1, tell GSAP to skip the final calculation and use 0/1 as the factor.
+
+		this.ease = p => {
+			let point = lookup[(p * l) | 0] || lookup[l - 1];
+			if (point.nx < p) {
+				point = point.n;
+			}
+			return point.y + ((p - point.x) / point.cx) * point.cy;
+		};
+
+		this.ease.custom = this;
+
+		this.id && gsap && gsap.registerEase(this.id, this.ease);
+
+		return this;
+	}
+
+	getSVGData(config) {
+		return CustomEase.getSVGData(this, config);
+	}
+
+	static create(id, data, config) {
+		return (new CustomEase(id, data, config)).ease;
+	}
+
+	static register(core) {
+		gsap = core;
+		_initCore();
+	}
+
+	static get(id) {
+		return gsap.parseEase(id);
+	}
+
+	static getSVGData(ease, config) {
+		config = config || {};
+		let width = config.width || 100,
+			height = config.height || 100,
+			x = config.x || 0,
+			y = (config.y || 0) + height,
+			e = gsap.utils.toArray(config.path)[0],
+			a, slope, i, inc, tx, ty, precision, threshold, prevX, prevY;
+		if (config.invert) {
+			height = -height;
+			y = 0;
+		}
+		if (typeof(ease) === "string") {
+			ease = gsap.parseEase(ease);
+		}
+		if (ease.custom) {
+			ease = ease.custom;
+		}
+		if (ease instanceof CustomEase) {
+			a = rawPathToString(transformRawPath([ease.segment], width, 0, 0, -height, x, y));
+		} else {
+			a = [x, y];
+			precision = Math.max(5, (config.precision || 1) * 200);
+			inc = 1 / precision;
+			precision += 2;
+			threshold = 5 / precision;
+			prevX = _round(x + inc * width);
+			prevY = _round(y + ease(inc) * -height);
+			slope = (prevY - y) / (prevX - x);
+			for (i = 2; i < precision; i++) {
+				tx = _round(x + i * inc * width);
+				ty = _round(y + ease(i * inc) * -height);
+				if (Math.abs((ty - prevY) / (tx - prevX) - slope) > threshold || i === precision - 1) { //only add points when the slope changes beyond the threshold
+					a.push(prevX, prevY);
+					slope = (ty - prevY) / (tx - prevX);
+				}
+				prevX = tx;
+				prevY = ty;
+			}
+			a = "M" + a.join(",");
+		}
+		e && e.setAttribute("d", a);
+		return a;
+	}
+
+}
+
+_getGSAP() && gsap.registerPlugin(CustomEase);
+
+CustomEase.version = "3.12.5";
+
+export { CustomEase, CustomEase as default };
diff --git a/dist/Draggable.cjs b/dist/Draggable.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..41b98fb4369264b2df0eb194d9c38ee6225a8e84
--- /dev/null
+++ b/dist/Draggable.cjs
@@ -0,0 +1,1947 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+const matrix = require('./shared/gsap.b4b61722.cjs');
+
+/*!
+ * Draggable 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+ */
+/* eslint-disable */
+
+
+let gsap, _win, _doc, _docElement, _body, _tempDiv, _placeholderDiv, _coreInitted, _checkPrefix, _toArray, _supportsPassive, _isTouchDevice, _touchEventLookup, _isMultiTouching, _isAndroid, InertiaPlugin, _defaultCursor, _supportsPointer, _context, _getStyleSaver,
+	_dragCount = 0,
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_isFunction = value => typeof(value) === "function",
+	_isObject = value => typeof(value) === "object",
+	_isUndefined = value => typeof(value) === "undefined",
+	_emptyFunc = () => false,
+	_transformProp = "transform",
+	_transformOriginProp = "transformOrigin",
+	_round = value => Math.round(value * 10000) / 10000,
+	_isArray = Array.isArray,
+	_createElement = (type, ns) => {
+		let e = _doc.createElementNS ? _doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.
+		return e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://gsap.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
+	},
+	_RAD2DEG = 180 / Math.PI,
+	_bigNum = 1e20,
+	_identityMatrix = new matrix.Matrix2D(),
+	_getTime = Date.now || (() => new Date().getTime()),
+	_renderQueue = [],
+	_lookup = {}, //when a Draggable is created, the target gets a unique _gsDragID property that allows gets associated with the Draggable instance for quick lookups in Draggable.get(). This avoids circular references that could cause gc problems.
+	_lookupCount = 0,
+	_clickableTagExp = /^(?:a|input|textarea|button|select)$/i,
+	_lastDragTime = 0,
+	_temp1 = {}, // a simple object we reuse and populate (usually x/y properties) to conserve memory and improve performance.
+	_windowProxy = {}, //memory/performance optimization - we reuse this object during autoScroll to store window-related bounds/offsets.
+	_copy = (obj, factor) => {
+		let copy = {}, p;
+		for (p in obj) {
+			copy[p] = factor ? obj[p] * factor : obj[p];
+		}
+		return copy;
+	},
+	_extend = (obj, defaults) => {
+		for (let p in defaults) {
+			if (!(p in obj)) {
+				obj[p] = defaults[p];
+			}
+		}
+		return obj;
+	},
+	_setTouchActionForAllDescendants = (elements, value) => {
+		let i = elements.length,
+			children;
+		while (i--) {
+			value ? (elements[i].style.touchAction = value) : elements[i].style.removeProperty("touch-action");
+			children = elements[i].children;
+			children && children.length && _setTouchActionForAllDescendants(children, value);
+		}
+	},
+	_renderQueueTick = () => _renderQueue.forEach(func => func()),
+	_addToRenderQueue = func => {
+		_renderQueue.push(func);
+		if (_renderQueue.length === 1) {
+			gsap.ticker.add(_renderQueueTick);
+		}
+	},
+	_renderQueueTimeout = () => !_renderQueue.length && gsap.ticker.remove(_renderQueueTick),
+	_removeFromRenderQueue = func => {
+		let i = _renderQueue.length;
+		while (i--) {
+			if (_renderQueue[i] === func) {
+				_renderQueue.splice(i, 1);
+			}
+		}
+		gsap.to(_renderQueueTimeout, {overwrite:true, delay:15, duration:0, onComplete:_renderQueueTimeout, data:"_draggable"}); //remove the "tick" listener only after the render queue is empty for 15 seconds (to improve performance). Adding/removing it constantly for every click/touch wouldn't deliver optimal speed, and we also don't want the ticker to keep calling the render method when things are idle for long periods of time (we want to improve battery life on mobile devices).
+	},
+	_setDefaults = (obj, defaults) => {
+		for (let p in defaults) {
+			if (!(p in obj)) {
+				obj[p] = defaults[p];
+			}
+		}
+		return obj;
+	},
+	_addListener = (element, type, func, capture) => {
+		if (element.addEventListener) {
+			let touchType = _touchEventLookup[type];
+			capture = capture || (_supportsPassive ? {passive: false} : null);
+			element.addEventListener(touchType || type, func, capture);
+			(touchType && type !== touchType) && element.addEventListener(type, func, capture);//some browsers actually support both, so must we. But pointer events cover all.
+		}
+	},
+	_removeListener = (element, type, func, capture) => {
+		if (element.removeEventListener) {
+			let touchType = _touchEventLookup[type];
+			element.removeEventListener(touchType || type, func, capture);
+			(touchType && type !== touchType) && element.removeEventListener(type, func, capture);
+		}
+	},
+	_preventDefault = event => {
+		event.preventDefault && event.preventDefault();
+		event.preventManipulation && event.preventManipulation();  //for some Microsoft browsers
+	},
+	_hasTouchID = (list, ID) => {
+		let i = list.length;
+		while (i--) {
+			if (list[i].identifier === ID) {
+				return true;
+			}
+		}
+	},
+	_onMultiTouchDocumentEnd = event => {
+		_isMultiTouching = (event.touches && _dragCount < event.touches.length);
+		_removeListener(event.target, "touchend", _onMultiTouchDocumentEnd);
+	},
+
+	_onMultiTouchDocument = event => {
+		_isMultiTouching = (event.touches && _dragCount < event.touches.length);
+		_addListener(event.target, "touchend", _onMultiTouchDocumentEnd);
+	},
+	_getDocScrollTop = doc => _win.pageYOffset  || doc.scrollTop || doc.documentElement.scrollTop || doc.body.scrollTop || 0,
+	_getDocScrollLeft = doc => _win.pageXOffset || doc.scrollLeft || doc.documentElement.scrollLeft || doc.body.scrollLeft || 0,
+	_addScrollListener = (e, callback) => {
+		_addListener(e, "scroll", callback);
+		if (!_isRoot(e.parentNode)) {
+			_addScrollListener(e.parentNode, callback);
+		}
+	},
+	_removeScrollListener = (e, callback) => {
+		_removeListener(e, "scroll", callback);
+		if (!_isRoot(e.parentNode)) {
+			_removeScrollListener(e.parentNode, callback);
+		}
+	},
+	_isRoot = e => !!(!e || e === _docElement || e.nodeType === 9 || e === _doc.body || e === _win || !e.nodeType || !e.parentNode),
+	_getMaxScroll = (element, axis) => {
+		let dim = (axis === "x") ? "Width" : "Height",
+			scroll = "scroll" + dim,
+			client = "client" + dim;
+		return Math.max(0, _isRoot(element) ? Math.max(_docElement[scroll], _body[scroll]) - (_win["inner" + dim] || _docElement[client] || _body[client]) : element[scroll] - element[client]);
+	},
+	_recordMaxScrolls = (e, skipCurrent) => { //records _gsMaxScrollX and _gsMaxScrollY properties for the element and all ancestors up the chain so that we can cap it, otherwise dragging beyond the edges with autoScroll on can endlessly scroll.
+		let x = _getMaxScroll(e, "x"),
+			y = _getMaxScroll(e, "y");
+		if (_isRoot(e)) {
+			e = _windowProxy;
+		} else {
+			_recordMaxScrolls(e.parentNode, skipCurrent);
+		}
+		e._gsMaxScrollX = x;
+		e._gsMaxScrollY = y;
+		if (!skipCurrent) {
+			e._gsScrollX = e.scrollLeft || 0;
+			e._gsScrollY = e.scrollTop || 0;
+		}
+	},
+	_setStyle = (element, property, value) => {
+		let style = element.style;
+		if (!style) {
+			return;
+		}
+		if (_isUndefined(style[property])) {
+			property = _checkPrefix(property, element) || property;
+		}
+		if (value == null) {
+			style.removeProperty && style.removeProperty(property.replace(/([A-Z])/g, "-$1").toLowerCase());
+		} else {
+			style[property] = value;
+		}
+	},
+	_getComputedStyle = element => _win.getComputedStyle((element instanceof Element) ? element : element.host || (element.parentNode || {}).host || element), //the "host" stuff helps to accommodate ShadowDom objects.
+
+	_tempRect = {}, //reuse to reduce garbage collection tasks
+	_parseRect = e => { //accepts a DOM element, a mouse event, or a rectangle object and returns the corresponding rectangle with left, right, width, height, top, and bottom properties
+		if (e === _win) {
+			_tempRect.left = _tempRect.top = 0;
+			_tempRect.width = _tempRect.right = _docElement.clientWidth || e.innerWidth || _body.clientWidth || 0;
+			_tempRect.height = _tempRect.bottom = ((e.innerHeight || 0) - 20 < _docElement.clientHeight) ? _docElement.clientHeight : e.innerHeight || _body.clientHeight || 0;
+			return _tempRect;
+		}
+		let doc = e.ownerDocument || _doc,
+			r = !_isUndefined(e.pageX) ? {left: e.pageX - _getDocScrollLeft(doc), top: e.pageY - _getDocScrollTop(doc), right: e.pageX - _getDocScrollLeft(doc) + 1, bottom: e.pageY - _getDocScrollTop(doc) + 1} : (!e.nodeType && !_isUndefined(e.left) && !_isUndefined(e.top)) ? e : _toArray(e)[0].getBoundingClientRect();
+		if (_isUndefined(r.right) && !_isUndefined(r.width)) {
+			r.right = r.left + r.width;
+			r.bottom = r.top + r.height;
+		} else if (_isUndefined(r.width)) { //some browsers don't include width and height properties. We can't just set them directly on r because some browsers throw errors, so create a new generic object.
+			r = {width: r.right - r.left, height: r.bottom - r.top, right: r.right, left: r.left, bottom: r.bottom, top: r.top};
+		}
+		return r;
+	},
+
+	_dispatchEvent = (target, type, callbackName) => {
+		let vars = target.vars,
+			callback = vars[callbackName],
+			listeners = target._listeners[type],
+			result;
+		if (_isFunction(callback)) {
+			result = callback.apply(vars.callbackScope || target, vars[callbackName + "Params"] || [target.pointerEvent]);
+		}
+		if (listeners && target.dispatchEvent(type) === false) {
+			result = false;
+		}
+		return result;
+	},
+	_getBounds = (target, context) => { //accepts any of the following: a DOM element, jQuery object, selector text, or an object defining bounds as {top, left, width, height} or {minX, maxX, minY, maxY}. Returns an object with left, top, width, and height properties.
+		let e = _toArray(target)[0],
+			top, left, offset;
+		if (!e.nodeType && e !== _win) {
+			if (!_isUndefined(target.left)) {
+				offset = {x:0, y:0}; //_getOffsetTransformOrigin(context); //the bounds should be relative to the origin
+				return {left: target.left - offset.x, top: target.top - offset.y, width: target.width, height: target.height};
+			}
+			left = target.min || target.minX || target.minRotation || 0;
+			top = target.min || target.minY || 0;
+			return {left:left, top:top, width:(target.max || target.maxX || target.maxRotation || 0) - left, height:(target.max || target.maxY || 0) - top};
+		}
+		return _getElementBounds(e, context);
+	},
+	_point1 = {}, //we reuse to minimize garbage collection tasks.
+	_getElementBounds = (element, context) => {
+		context = _toArray(context)[0];
+		let isSVG = (element.getBBox && element.ownerSVGElement),
+			doc = element.ownerDocument || _doc,
+			left, right, top, bottom, matrix$1, p1, p2, p3, p4, bbox, width, height, cs;
+		if (element === _win) {
+			top = _getDocScrollTop(doc);
+			left = _getDocScrollLeft(doc);
+			right = left + (doc.documentElement.clientWidth || element.innerWidth || doc.body.clientWidth || 0);
+			bottom = top + (((element.innerHeight || 0) - 20 < doc.documentElement.clientHeight) ? doc.documentElement.clientHeight : element.innerHeight || doc.body.clientHeight || 0); //some browsers (like Firefox) ignore absolutely positioned elements, and collapse the height of the documentElement, so it could be 8px, for example, if you have just an absolutely positioned div. In that case, we use the innerHeight to resolve this.
+		} else if (context === _win || _isUndefined(context)) {
+			return element.getBoundingClientRect();
+		} else {
+			left = top =  0;
+			if (isSVG) {
+				bbox = element.getBBox();
+				width = bbox.width;
+				height = bbox.height;
+			} else {
+				if (element.viewBox && (bbox = element.viewBox.baseVal)) {
+					left = bbox.x || 0;
+					top = bbox.y || 0;
+					width = bbox.width;
+					height = bbox.height;
+				}
+				if (!width) {
+					cs = _getComputedStyle(element);
+					bbox = cs.boxSizing === "border-box";
+					width = (parseFloat(cs.width) || element.clientWidth || 0) + (bbox ? 0 : parseFloat(cs.borderLeftWidth) + parseFloat(cs.borderRightWidth));
+					height = (parseFloat(cs.height) || element.clientHeight || 0) + (bbox ? 0 : parseFloat(cs.borderTopWidth) + parseFloat(cs.borderBottomWidth));
+				}
+			}
+			right = width;
+			bottom = height;
+		}
+		if (element === context) {
+			return {left:left, top:top, width: right - left, height: bottom - top};
+		}
+		matrix$1 = matrix.getGlobalMatrix(context, true).multiply(matrix.getGlobalMatrix(element));
+		p1 = matrix$1.apply({x:left, y:top});
+		p2 = matrix$1.apply({x:right, y:top});
+		p3 = matrix$1.apply({x:right, y:bottom});
+		p4 = matrix$1.apply({x:left, y:bottom});
+		left = Math.min(p1.x, p2.x, p3.x, p4.x);
+		top = Math.min(p1.y, p2.y, p3.y, p4.y);
+		return {left: left, top: top, width: Math.max(p1.x, p2.x, p3.x, p4.x) - left, height: Math.max(p1.y, p2.y, p3.y, p4.y) - top};
+	},
+	_parseInertia = (draggable, snap, max, min, factor, forceZeroVelocity) => {
+		let vars = {},
+			a, i, l;
+		if (snap) {
+			if (factor !== 1 && snap instanceof Array) { //some data must be altered to make sense, like if the user passes in an array of rotational values in degrees, we must convert it to radians. Or for scrollLeft and scrollTop, we invert the values.
+				vars.end = a = [];
+				l = snap.length;
+				if (_isObject(snap[0])) { //if the array is populated with objects, like points ({x:100, y:200}), make copies before multiplying by the factor, otherwise we'll mess up the originals and the user may reuse it elsewhere.
+					for (i = 0; i < l; i++) {
+						a[i] = _copy(snap[i], factor);
+					}
+				} else {
+					for (i = 0; i < l; i++) {
+						a[i] = snap[i] * factor;
+					}
+				}
+				max += 1.1; //allow 1.1 pixels of wiggle room when snapping in order to work around some browser inconsistencies in the way bounds are reported which can make them roughly a pixel off. For example, if "snap:[-$('#menu').width(), 0]" was defined and #menu had a wrapper that was used as the bounds, some browsers would be one pixel off, making the minimum -752 for example when snap was [-753,0], thus instead of snapping to -753, it would snap to 0 since -753 was below the minimum.
+				min -= 1.1;
+			} else if (_isFunction(snap)) {
+				vars.end = value => {
+					let result = snap.call(draggable, value),
+						copy, p;
+					if (factor !== 1) {
+						if (_isObject(result)) {
+							copy = {};
+							for (p in result) {
+								copy[p] = result[p] * factor;
+							}
+							result = copy;
+						} else {
+							result *= factor;
+						}
+					}
+					return result; //we need to ensure that we can scope the function call to the Draggable instance itself so that users can access important values like maxX, minX, maxY, minY, x, and y from within that function.
+				};
+			} else {
+				vars.end = snap;
+			}
+		}
+		if (max || max === 0) {
+			vars.max = max;
+		}
+		if (min || min === 0) {
+			vars.min = min;
+		}
+		if (forceZeroVelocity) {
+			vars.velocity = 0;
+		}
+		return vars;
+	},
+	_isClickable = element => { //sometimes it's convenient to mark an element as clickable by adding a data-clickable="true" attribute (in which case we won't preventDefault() the mouse/touch event). This method checks if the element is an <a>, <input>, or <button> or has the data-clickable or contentEditable attribute set to true (or any of its parent elements).
+		let data;
+		return (!element || !element.getAttribute || element === _body) ? false : ((data = element.getAttribute("data-clickable")) === "true" || (data !== "false" && (_clickableTagExp.test(element.nodeName + "") || element.getAttribute("contentEditable") === "true"))) ? true : _isClickable(element.parentNode);
+	},
+	_setSelectable = (elements, selectable) => {
+		let i = elements.length,
+			e;
+		while (i--) {
+			e = elements[i];
+			e.ondragstart = e.onselectstart = selectable ? null : _emptyFunc;
+			gsap.set(e, {lazy:true, userSelect: (selectable ? "text" : "none")});
+		}
+	},
+	_isFixed = element => {
+		if (_getComputedStyle(element).position === "fixed") {
+			return true;
+		}
+		element = element.parentNode;
+		if (element && element.nodeType === 1) { // avoid document fragments which will throw an error.
+			return _isFixed(element);
+		}
+	},
+	_supports3D, _addPaddingBR,
+
+	//The ScrollProxy class wraps an element's contents into another div (we call it "content") that we either add padding when necessary or apply a translate3d() transform in order to overscroll (scroll past the boundaries). This allows us to simply set the scrollTop/scrollLeft (or top/left for easier reverse-axis orientation, which is what we do in Draggable) and it'll do all the work for us. For example, if we tried setting scrollTop to -100 on a normal DOM element, it wouldn't work - it'd look the same as setting it to 0, but if we set scrollTop of a ScrollProxy to -100, it'll give the correct appearance by either setting paddingTop of the wrapper to 100 or applying a 100-pixel translateY.
+	ScrollProxy = function(element, vars) {
+		element = gsap.utils.toArray(element)[0];
+		vars = vars || {};
+		let content = document.createElement("div"),
+			style = content.style,
+			node = element.firstChild,
+			offsetTop = 0,
+			offsetLeft = 0,
+			prevTop = element.scrollTop,
+			prevLeft = element.scrollLeft,
+			scrollWidth = element.scrollWidth,
+			scrollHeight = element.scrollHeight,
+			extraPadRight = 0,
+			maxLeft = 0,
+			maxTop = 0,
+			elementWidth, elementHeight, contentHeight, nextNode, transformStart, transformEnd;
+		if (_supports3D && vars.force3D !== false) {
+			transformStart = "translate3d(";
+			transformEnd = "px,0px)";
+		} else if (_transformProp) {
+			transformStart = "translate(";
+			transformEnd = "px)";
+		}
+		this.scrollTop = function(value, force) {
+			if (!arguments.length) {
+				return -this.top();
+			}
+			this.top(-value, force);
+		};
+		this.scrollLeft = function(value, force) {
+			if (!arguments.length) {
+				return -this.left();
+			}
+			this.left(-value, force);
+		};
+		this.left = function(value, force) {
+			if (!arguments.length) {
+				return -(element.scrollLeft + offsetLeft);
+			}
+			let dif = element.scrollLeft - prevLeft,
+				oldOffset = offsetLeft;
+			if ((dif > 2 || dif < -2) && !force) { //if the user interacts with the scrollbar (or something else scrolls it, like the mouse wheel), we should kill any tweens of the ScrollProxy.
+				prevLeft = element.scrollLeft;
+				gsap.killTweensOf(this, {left:1, scrollLeft:1});
+				this.left(-prevLeft);
+				if (vars.onKill) {
+					vars.onKill();
+				}
+				return;
+			}
+			value = -value; //invert because scrolling works in the opposite direction
+			if (value < 0) {
+				offsetLeft = (value - 0.5) | 0;
+				value = 0;
+			} else if (value > maxLeft) {
+				offsetLeft = (value - maxLeft) | 0;
+				value = maxLeft;
+			} else {
+				offsetLeft = 0;
+			}
+			if (offsetLeft || oldOffset) {
+				if (!this._skip) {
+					style[_transformProp] = transformStart + -offsetLeft + "px," + -offsetTop + transformEnd;
+				}
+				if (offsetLeft + extraPadRight >= 0) {
+					style.paddingRight =  offsetLeft + extraPadRight + "px";
+				}
+			}
+			element.scrollLeft = value | 0;
+			prevLeft = element.scrollLeft; //don't merge this with the line above because some browsers adjust the scrollLeft after it's set, so in order to be 100% accurate in tracking it, we need to ask the browser to report it.
+		};
+		this.top = function(value, force) {
+			if (!arguments.length) {
+				return -(element.scrollTop + offsetTop);
+			}
+			let dif = element.scrollTop - prevTop,
+				oldOffset = offsetTop;
+			if ((dif > 2 || dif < -2) && !force) { //if the user interacts with the scrollbar (or something else scrolls it, like the mouse wheel), we should kill any tweens of the ScrollProxy.
+				prevTop = element.scrollTop;
+				gsap.killTweensOf(this, {top:1, scrollTop:1});
+				this.top(-prevTop);
+				if (vars.onKill) {
+					vars.onKill();
+				}
+				return;
+			}
+			value = -value; //invert because scrolling works in the opposite direction
+			if (value < 0) {
+				offsetTop = (value - 0.5) | 0;
+				value = 0;
+			} else if (value > maxTop) {
+				offsetTop = (value - maxTop) | 0;
+				value = maxTop;
+			} else {
+				offsetTop = 0;
+			}
+			if (offsetTop || oldOffset) {
+				if (!this._skip) {
+					style[_transformProp] = transformStart + -offsetLeft + "px," + -offsetTop + transformEnd;
+				}
+			}
+			element.scrollTop = value | 0;
+			prevTop = element.scrollTop;
+		};
+
+		this.maxScrollTop = () => maxTop;
+		this.maxScrollLeft = () => maxLeft;
+
+		this.disable = function() {
+			node = content.firstChild;
+			while (node) {
+				nextNode = node.nextSibling;
+				element.appendChild(node);
+				node = nextNode;
+			}
+			if (element === content.parentNode) { //in case disable() is called when it's already disabled.
+				element.removeChild(content);
+			}
+		};
+		this.enable = function() {
+			node = element.firstChild;
+			if (node === content) {
+				return;
+			}
+			while (node) {
+				nextNode = node.nextSibling;
+				content.appendChild(node);
+				node = nextNode;
+			}
+			element.appendChild(content);
+			this.calibrate();
+		};
+		this.calibrate = function(force) {
+			let widthMatches = (element.clientWidth === elementWidth),
+				cs, x, y;
+			prevTop = element.scrollTop;
+			prevLeft = element.scrollLeft;
+			if (widthMatches && element.clientHeight === elementHeight && content.offsetHeight === contentHeight && scrollWidth === element.scrollWidth && scrollHeight === element.scrollHeight && !force) {
+				return; //no need to recalculate things if the width and height haven't changed.
+			}
+			if (offsetTop || offsetLeft) {
+				x = this.left();
+				y = this.top();
+				this.left(-element.scrollLeft);
+				this.top(-element.scrollTop);
+			}
+			cs = _getComputedStyle(element);
+			//first, we need to remove any width constraints to see how the content naturally flows so that we can see if it's wider than the containing element. If so, we've got to record the amount of overage so that we can apply that as padding in order for browsers to correctly handle things. Then we switch back to a width of 100% (without that, some browsers don't flow the content correctly)
+			if (!widthMatches || force) {
+				style.display = "block";
+				style.width = "auto";
+				style.paddingRight = "0px";
+				extraPadRight = Math.max(0, element.scrollWidth - element.clientWidth);
+				//if the content is wider than the container, we need to add the paddingLeft and paddingRight in order for things to behave correctly.
+				if (extraPadRight) {
+					extraPadRight += parseFloat(cs.paddingLeft) + (_addPaddingBR ? parseFloat(cs.paddingRight) : 0);
+				}
+			}
+			style.display = "inline-block";
+			style.position = "relative";
+			style.overflow = "visible";
+			style.verticalAlign = "top";
+			style.boxSizing = "content-box";
+			style.width = "100%";
+			style.paddingRight = extraPadRight + "px";
+			//some browsers neglect to factor in the bottom padding when calculating the scrollHeight, so we need to add that padding to the content when that happens. Allow a 2px margin for error
+			if (_addPaddingBR) {
+				style.paddingBottom = cs.paddingBottom;
+			}
+			elementWidth = element.clientWidth;
+			elementHeight = element.clientHeight;
+			scrollWidth = element.scrollWidth;
+			scrollHeight = element.scrollHeight;
+			maxLeft = element.scrollWidth - elementWidth;
+			maxTop = element.scrollHeight - elementHeight;
+			contentHeight = content.offsetHeight;
+			style.display = "block";
+			if (x || y) {
+				this.left(x);
+				this.top(y);
+			}
+		};
+		this.content = content;
+		this.element = element;
+		this._skip = false;
+		this.enable();
+	},
+	_initCore = required => {
+		if (_windowExists() && document.body) {
+			let nav = window && window.navigator;
+			_win = window;
+			_doc = document;
+			_docElement = _doc.documentElement;
+			_body = _doc.body;
+			_tempDiv = _createElement("div");
+			_supportsPointer = !!window.PointerEvent;
+			_placeholderDiv = _createElement("div");
+			_placeholderDiv.style.cssText = "visibility:hidden;height:1px;top:-1px;pointer-events:none;position:relative;clear:both;cursor:grab";
+			_defaultCursor = _placeholderDiv.style.cursor === "grab" ? "grab" : "move";
+			_isAndroid = (nav && nav.userAgent.toLowerCase().indexOf("android") !== -1); //Android handles touch events in an odd way and it's virtually impossible to "feature test" so we resort to UA sniffing
+			_isTouchDevice = (("ontouchstart" in _docElement) && ("orientation" in _win)) || (nav && (nav.MaxTouchPoints > 0 || nav.msMaxTouchPoints > 0));
+			_addPaddingBR = (function() { //this function is in charge of analyzing browser behavior related to padding. It sets the _addPaddingBR to true if the browser doesn't normally factor in the bottom or right padding on the element inside the scrolling area, and it sets _addPaddingLeft to true if it's a browser that requires the extra offset (offsetLeft) to be added to the paddingRight (like Opera).
+				let div = _createElement("div"),
+					child = _createElement("div"),
+					childStyle = child.style,
+					parent = _body,
+					val;
+				childStyle.display = "inline-block";
+				childStyle.position = "relative";
+				div.style.cssText = "width:90px;height:40px;padding:10px;overflow:auto;visibility:hidden";
+				div.appendChild(child);
+				parent.appendChild(div);
+				val = (child.offsetHeight + 18 > div.scrollHeight); //div.scrollHeight should be child.offsetHeight + 20 because of the 10px of padding on each side, but some browsers ignore one side. We allow a 2px margin of error.
+				parent.removeChild(div);
+				return val;
+			}());
+			_touchEventLookup = (function(types) { //we create an object that makes it easy to translate touch event types into their "pointer" counterparts if we're in a browser that uses those instead. Like IE10 uses "MSPointerDown" instead of "touchstart", for example.
+				let standard = types.split(","),
+					converted = ("onpointerdown" in _tempDiv ? "pointerdown,pointermove,pointerup,pointercancel" : "onmspointerdown" in _tempDiv ? "MSPointerDown,MSPointerMove,MSPointerUp,MSPointerCancel" : types).split(","),
+					obj = {},
+					i = 4;
+				while (--i > -1) {
+					obj[standard[i]] = converted[i];
+					obj[converted[i]] = standard[i];
+				}
+				//to avoid problems in iOS 9, test to see if the browser supports the "passive" option on addEventListener().
+				try {
+					_docElement.addEventListener("test", null, Object.defineProperty({}, "passive", {
+						get: function () {
+							_supportsPassive = 1;
+						}
+					}));
+				} catch (e) {}
+				return obj;
+			}("touchstart,touchmove,touchend,touchcancel"));
+			_addListener(_doc, "touchcancel", _emptyFunc); //some older Android devices intermittently stop dispatching "touchmove" events if we don't listen for "touchcancel" on the document. Very strange indeed.
+			_addListener(_win, "touchmove", _emptyFunc); //works around Safari bugs that still allow the page to scroll even when we preventDefault() on the touchmove event.
+			_body && _body.addEventListener("touchstart", _emptyFunc); //works around Safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/
+			_addListener(_doc, "contextmenu", function() {
+				for (let p in _lookup) {
+					if (_lookup[p].isPressed) {
+						_lookup[p].endDrag();
+					}
+				}
+			});
+			gsap = _coreInitted = _getGSAP();
+		}
+		if (gsap) {
+			InertiaPlugin = gsap.plugins.inertia;
+			_context = gsap.core.context || function() {};
+			_checkPrefix = gsap.utils.checkPrefix;
+			_transformProp = _checkPrefix(_transformProp);
+			_transformOriginProp = _checkPrefix(_transformOriginProp);
+			_toArray = gsap.utils.toArray;
+			_getStyleSaver = gsap.core.getStyleSaver;
+			_supports3D = !!_checkPrefix("perspective");
+		} else if (required) {
+			console.warn("Please gsap.registerPlugin(Draggable)");
+		}
+	};
+
+
+
+
+
+
+class EventDispatcher {
+
+	constructor(target) {
+		this._listeners = {};
+		this.target = target || this;
+	}
+
+	addEventListener(type, callback) {
+		let list = this._listeners[type] || (this._listeners[type] = []);
+		if (!~list.indexOf(callback)) {
+			list.push(callback);
+		}
+	}
+
+	removeEventListener(type, callback) {
+		let list = this._listeners[type],
+			i = (list && list.indexOf(callback));
+		(i >= 0) && list.splice(i, 1);
+	}
+
+	dispatchEvent(type) {
+		let result;
+		(this._listeners[type] || []).forEach(callback => (callback.call(this, {type: type, target: this.target}) === false) && (result = false));
+		return result; //if any of the callbacks return false, pass that along.
+	}
+}
+
+
+
+
+
+
+
+
+
+class Draggable extends EventDispatcher {
+
+	constructor(target, vars) {
+		super();
+		_coreInitted || _initCore(1);
+		target = _toArray(target)[0]; //in case the target is a selector object or selector text
+		this.styles = _getStyleSaver && _getStyleSaver(target, "transform,left,top");
+		if (!InertiaPlugin) {
+			InertiaPlugin = gsap.plugins.inertia;
+		}
+		this.vars = vars = _copy(vars || {});
+		this.target = target;
+		this.x = this.y = this.rotation = 0;
+		this.dragResistance = parseFloat(vars.dragResistance) || 0;
+		this.edgeResistance = isNaN(vars.edgeResistance) ? 1 : parseFloat(vars.edgeResistance) || 0;
+		this.lockAxis = vars.lockAxis;
+		this.autoScroll = vars.autoScroll || 0;
+		this.lockedAxis = null;
+		this.allowEventDefault = !!vars.allowEventDefault;
+
+		gsap.getProperty(target, "x"); // to ensure that transforms are instantiated.
+
+		let type = (vars.type || "x,y").toLowerCase(),
+			xyMode = (~type.indexOf("x") || ~type.indexOf("y")),
+			rotationMode = (type.indexOf("rotation") !== -1),
+			xProp = rotationMode ? "rotation" : xyMode ? "x" : "left",
+			yProp = xyMode ? "y" : "top",
+			allowX = !!(~type.indexOf("x") || ~type.indexOf("left") || type === "scroll"),
+			allowY = !!(~type.indexOf("y") || ~type.indexOf("top") || type === "scroll"),
+			minimumMovement = vars.minimumMovement || 2,
+			self = this,
+			triggers = _toArray(vars.trigger || vars.handle || target),
+			killProps = {},
+			dragEndTime = 0,
+			checkAutoScrollBounds = false,
+			autoScrollMarginTop = vars.autoScrollMarginTop || 40,
+			autoScrollMarginRight = vars.autoScrollMarginRight || 40,
+			autoScrollMarginBottom = vars.autoScrollMarginBottom || 40,
+			autoScrollMarginLeft = vars.autoScrollMarginLeft || 40,
+			isClickable = vars.clickableTest || _isClickable,
+			clickTime = 0,
+			gsCache = target._gsap || gsap.core.getCache(target),
+			isFixed = _isFixed(target),
+			getPropAsNum = (property, unit) => parseFloat(gsCache.get(target, property, unit)),
+			ownerDoc = target.ownerDocument || _doc,
+			enabled, scrollProxy, startPointerX, startPointerY, startElementX, startElementY, hasBounds, hasDragCallback, hasMoveCallback, maxX, minX, maxY, minY, touch, touchID, rotationOrigin, dirty, old, snapX, snapY, snapXY, isClicking, touchEventTarget, matrix$1, interrupted, allowNativeTouchScrolling, touchDragAxis, isDispatching, clickDispatch, trustedClickDispatch, isPreventingDefault, innerMatrix, dragged,
+
+			onContextMenu = e => { //used to prevent long-touch from triggering a context menu.
+				// (self.isPressed && e.which < 2) && self.endDrag() // previously ended drag when context menu was triggered, but instead we should just stop propagation and prevent the default event behavior.
+				_preventDefault(e);
+				e.stopImmediatePropagation && e.stopImmediatePropagation();
+				return false;
+			},
+
+			//this method gets called on every tick of TweenLite.ticker which allows us to synchronize the renders to the core engine (which is typically synchronized with the display refresh via requestAnimationFrame). This is an optimization - it's better than applying the values inside the "mousemove" or "touchmove" event handler which may get called many times inbetween refreshes.
+			render = suppressEvents => {
+				if (self.autoScroll && self.isDragging && (checkAutoScrollBounds || dirty)) {
+					let e = target,
+						autoScrollFactor = self.autoScroll * 15, //multiplying by 15 just gives us a better "feel" speed-wise.
+						parent, isRoot, rect, pointerX, pointerY, changeX, changeY, gap;
+					checkAutoScrollBounds = false;
+					_windowProxy.scrollTop = ((_win.pageYOffset != null) ? _win.pageYOffset : (ownerDoc.documentElement.scrollTop != null) ? ownerDoc.documentElement.scrollTop : ownerDoc.body.scrollTop);
+					_windowProxy.scrollLeft = ((_win.pageXOffset != null) ? _win.pageXOffset : (ownerDoc.documentElement.scrollLeft != null) ? ownerDoc.documentElement.scrollLeft : ownerDoc.body.scrollLeft);
+					pointerX = self.pointerX - _windowProxy.scrollLeft;
+					pointerY = self.pointerY - _windowProxy.scrollTop;
+					while (e && !isRoot) { //walk up the chain and sense wherever the pointer is within 40px of an edge that's scrollable.
+						isRoot = _isRoot(e.parentNode);
+						parent = isRoot ? _windowProxy : e.parentNode;
+						rect = isRoot ? {bottom:Math.max(_docElement.clientHeight, _win.innerHeight || 0), right: Math.max(_docElement.clientWidth, _win.innerWidth || 0), left:0, top:0} : parent.getBoundingClientRect();
+						changeX = changeY = 0;
+						if (allowY) {
+							gap = parent._gsMaxScrollY - parent.scrollTop;
+							if (gap < 0) {
+								changeY = gap;
+							} else if (pointerY > rect.bottom - autoScrollMarginBottom && gap) {
+								checkAutoScrollBounds = true;
+								changeY = Math.min(gap, (autoScrollFactor * (1 - Math.max(0, (rect.bottom - pointerY)) / autoScrollMarginBottom)) | 0);
+							} else if (pointerY < rect.top + autoScrollMarginTop && parent.scrollTop) {
+								checkAutoScrollBounds = true;
+								changeY = -Math.min(parent.scrollTop, (autoScrollFactor * (1 - Math.max(0, (pointerY - rect.top)) / autoScrollMarginTop)) | 0);
+							}
+							if (changeY) {
+								parent.scrollTop += changeY;
+							}
+						}
+						if (allowX) {
+							gap = parent._gsMaxScrollX - parent.scrollLeft;
+							if (gap < 0) {
+								changeX = gap;
+							} else if (pointerX > rect.right - autoScrollMarginRight && gap) {
+								checkAutoScrollBounds = true;
+								changeX = Math.min(gap, (autoScrollFactor * (1 - Math.max(0, (rect.right - pointerX)) / autoScrollMarginRight)) | 0);
+							} else if (pointerX < rect.left + autoScrollMarginLeft && parent.scrollLeft) {
+								checkAutoScrollBounds = true;
+								changeX = -Math.min(parent.scrollLeft, (autoScrollFactor * (1 - Math.max(0, (pointerX - rect.left)) / autoScrollMarginLeft)) | 0);
+							}
+							if (changeX) {
+								parent.scrollLeft += changeX;
+							}
+						}
+
+						if (isRoot && (changeX || changeY)) {
+							_win.scrollTo(parent.scrollLeft, parent.scrollTop);
+							setPointerPosition(self.pointerX + changeX, self.pointerY + changeY);
+						}
+						e = parent;
+					}
+				}
+				if (dirty) {
+					let {x, y} = self;
+					if (rotationMode) {
+						self.deltaX = x - parseFloat(gsCache.rotation);
+						self.rotation = x;
+						gsCache.rotation = x + "deg";
+						gsCache.renderTransform(1, gsCache);
+					} else {
+						if (scrollProxy) {
+							if (allowY) {
+								self.deltaY = y - scrollProxy.top();
+								scrollProxy.top(y);
+							}
+							if (allowX) {
+								self.deltaX = x - scrollProxy.left();
+								scrollProxy.left(x);
+							}
+						} else if (xyMode) {
+							if (allowY) {
+								self.deltaY = y - parseFloat(gsCache.y);
+								gsCache.y = y + "px";
+							}
+							if (allowX) {
+								self.deltaX = x - parseFloat(gsCache.x);
+								gsCache.x = x + "px";
+							}
+							gsCache.renderTransform(1, gsCache);
+						} else {
+							if (allowY) {
+								self.deltaY = y - parseFloat(target.style.top || 0);
+								target.style.top = y + "px";
+							}
+							if (allowX) {
+								self.deltaX = x - parseFloat(target.style.left || 0);
+								target.style.left = x + "px";
+							}
+						}
+					}
+					if (hasDragCallback && !suppressEvents && !isDispatching) {
+						isDispatching = true; //in case onDrag has an update() call (avoid endless loop)
+						if (_dispatchEvent(self, "drag", "onDrag") === false) {
+							if (allowX) {
+								self.x -= self.deltaX;
+							}
+							if (allowY) {
+								self.y -= self.deltaY;
+							}
+							render(true);
+						}
+						isDispatching = false;
+					}
+				}
+				dirty = false;
+			},
+
+			//copies the x/y from the element (whether that be transforms, top/left, or ScrollProxy's top/left) to the Draggable's x and y (and rotation if necessary) properties so that they reflect reality and it also (optionally) applies any snapping necessary. This is used by the InertiaPlugin tween in an onUpdate to ensure things are synced and snapped.
+			syncXY = (skipOnUpdate, skipSnap) => {
+				let { x, y } = self,
+					snappedValue, cs;
+				if (!target._gsap) { //just in case the _gsap cache got wiped, like if the user called clearProps on the transform or something (very rare).
+					gsCache = gsap.core.getCache(target);
+				}
+				gsCache.uncache && gsap.getProperty(target, "x"); // trigger a re-cache
+				if (xyMode) {
+					self.x = parseFloat(gsCache.x);
+					self.y = parseFloat(gsCache.y);
+				} else if (rotationMode) {
+					self.x = self.rotation = parseFloat(gsCache.rotation);
+				} else if (scrollProxy) {
+					self.y = scrollProxy.top();
+					self.x = scrollProxy.left();
+				} else {
+					self.y = parseFloat(target.style.top || ((cs = _getComputedStyle(target)) && cs.top)) || 0;
+					self.x = parseFloat(target.style.left || (cs || {}).left) || 0;
+				}
+				if ((snapX || snapY || snapXY) && !skipSnap && (self.isDragging || self.isThrowing)) {
+					if (snapXY) {
+						_temp1.x = self.x;
+						_temp1.y = self.y;
+						snappedValue = snapXY(_temp1);
+						if (snappedValue.x !== self.x) {
+							self.x = snappedValue.x;
+							dirty = true;
+						}
+						if (snappedValue.y !== self.y) {
+							self.y = snappedValue.y;
+							dirty = true;
+						}
+					}
+					if (snapX) {
+						snappedValue = snapX(self.x);
+						if (snappedValue !== self.x) {
+							self.x = snappedValue;
+							if (rotationMode) {
+								self.rotation = snappedValue;
+							}
+							dirty = true;
+						}
+					}
+					if (snapY) {
+						snappedValue = snapY(self.y);
+						if (snappedValue !== self.y) {
+							self.y = snappedValue;
+						}
+						dirty = true;
+					}
+				}
+				dirty && render(true);
+				if (!skipOnUpdate) {
+					self.deltaX = self.x - x;
+					self.deltaY = self.y - y;
+					_dispatchEvent(self, "throwupdate", "onThrowUpdate");
+				}
+			},
+
+			buildSnapFunc = (snap, min, max, factor) => {
+				if (min == null) {
+					min = -_bigNum;
+				}
+				if (max == null) {
+					max = _bigNum;
+				}
+				if (_isFunction(snap)) {
+					return n => {
+						let edgeTolerance = !self.isPressed ? 1 : 1 - self.edgeResistance; //if we're tweening, disable the edgeTolerance because it's already factored into the tweening values (we don't want to apply it multiple times)
+						return snap.call(self, (n > max ? max + (n - max) * edgeTolerance : (n < min) ? min + (n - min) * edgeTolerance : n) * factor) * factor;
+					};
+				}
+				if (_isArray(snap)) {
+					return n => {
+						let i = snap.length,
+							closest = 0,
+							absDif = _bigNum,
+							val, dif;
+						while (--i > -1) {
+							val = snap[i];
+							dif = val - n;
+							if (dif < 0) {
+								dif = -dif;
+							}
+							if (dif < absDif && val >= min && val <= max) {
+								closest = i;
+								absDif = dif;
+							}
+						}
+						return snap[closest];
+					};
+				}
+				return isNaN(snap) ? n => n : () => snap * factor;
+			},
+
+			buildPointSnapFunc = (snap, minX, maxX, minY, maxY, radius, factor) => {
+				radius = (radius && radius < _bigNum) ? radius * radius : _bigNum; //so we don't have to Math.sqrt() in the functions. Performance optimization.
+				if (_isFunction(snap)) {
+					return point => {
+						let edgeTolerance = !self.isPressed ? 1 : 1 - self.edgeResistance,
+							x = point.x,
+							y = point.y,
+							result, dx, dy; //if we're tweening, disable the edgeTolerance because it's already factored into the tweening values (we don't want to apply it multiple times)
+						point.x = x = (x > maxX ? maxX + (x - maxX) * edgeTolerance : (x < minX) ? minX + (x - minX) * edgeTolerance : x);
+						point.y = y = (y > maxY ? maxY + (y - maxY) * edgeTolerance : (y < minY) ? minY + (y - minY) * edgeTolerance : y);
+						result = snap.call(self, point);
+						if (result !== point) {
+							point.x = result.x;
+							point.y = result.y;
+						}
+						if (factor !== 1) {
+							point.x *= factor;
+							point.y *= factor;
+						}
+						if (radius < _bigNum) {
+							dx = point.x - x;
+							dy = point.y - y;
+							if (dx * dx + dy * dy > radius) {
+								point.x = x;
+								point.y = y;
+							}
+						}
+						return point;
+					};
+				}
+				if (_isArray(snap)) {
+					return p => {
+						let i = snap.length,
+							closest = 0,
+							minDist = _bigNum,
+							x, y, point, dist;
+						while (--i > -1) {
+							point = snap[i];
+							x = point.x - p.x;
+							y = point.y - p.y;
+							dist = x * x + y * y;
+							if (dist < minDist) {
+								closest = i;
+								minDist = dist;
+							}
+						}
+						return (minDist <= radius) ? snap[closest] : p;
+					};
+				}
+				return n => n;
+			},
+
+			calculateBounds = () => {
+				let bounds, targetBounds, snap, snapIsRaw;
+				hasBounds = false;
+				if (scrollProxy) {
+					scrollProxy.calibrate();
+					self.minX = minX = -scrollProxy.maxScrollLeft();
+					self.minY = minY = -scrollProxy.maxScrollTop();
+					self.maxX = maxX = self.maxY = maxY = 0;
+					hasBounds = true;
+				} else if (!!vars.bounds) {
+					bounds = _getBounds(vars.bounds, target.parentNode); //could be a selector/jQuery object or a DOM element or a generic object like {top:0, left:100, width:1000, height:800} or {minX:100, maxX:1100, minY:0, maxY:800}
+					if (rotationMode) {
+						self.minX = minX = bounds.left;
+						self.maxX = maxX = bounds.left + bounds.width;
+						self.minY = minY = self.maxY = maxY = 0;
+					} else if (!_isUndefined(vars.bounds.maxX) || !_isUndefined(vars.bounds.maxY)) {
+						bounds = vars.bounds;
+						self.minX = minX = bounds.minX;
+						self.minY = minY = bounds.minY;
+						self.maxX = maxX = bounds.maxX;
+						self.maxY = maxY = bounds.maxY;
+					} else {
+						targetBounds = _getBounds(target, target.parentNode);
+						self.minX = minX = Math.round(getPropAsNum(xProp, "px") + bounds.left - targetBounds.left);
+						self.minY = minY = Math.round(getPropAsNum(yProp, "px") + bounds.top - targetBounds.top);
+						self.maxX = maxX = Math.round(minX + (bounds.width - targetBounds.width));
+						self.maxY = maxY = Math.round(minY + (bounds.height - targetBounds.height));
+					}
+					if (minX > maxX) {
+						self.minX = maxX;
+						self.maxX = maxX = minX;
+						minX = self.minX;
+					}
+					if (minY > maxY) {
+						self.minY = maxY;
+						self.maxY = maxY = minY;
+						minY = self.minY;
+					}
+					if (rotationMode) {
+						self.minRotation = minX;
+						self.maxRotation = maxX;
+					}
+					hasBounds = true;
+				}
+				if (vars.liveSnap) {
+					snap = (vars.liveSnap === true) ? (vars.snap || {}) : vars.liveSnap;
+					snapIsRaw = (_isArray(snap) || _isFunction(snap));
+					if (rotationMode) {
+						snapX = buildSnapFunc((snapIsRaw ? snap : snap.rotation), minX, maxX, 1);
+						snapY = null;
+					} else {
+						if (snap.points) {
+							snapXY = buildPointSnapFunc((snapIsRaw ? snap : snap.points), minX, maxX, minY, maxY, snap.radius, scrollProxy ? -1 : 1);
+						} else {
+							if (allowX) {
+								snapX = buildSnapFunc((snapIsRaw ? snap : snap.x || snap.left || snap.scrollLeft), minX, maxX, scrollProxy ? -1 : 1);
+							}
+							if (allowY) {
+								snapY = buildSnapFunc((snapIsRaw ? snap : snap.y || snap.top || snap.scrollTop), minY, maxY, scrollProxy ? -1 : 1);
+							}
+						}
+					}
+				}
+			},
+
+			onThrowComplete = () => {
+				self.isThrowing = false;
+				_dispatchEvent(self, "throwcomplete", "onThrowComplete");
+			},
+			onThrowInterrupt = () => {
+				self.isThrowing = false;
+			},
+
+			animate = (inertia, forceZeroVelocity) => {
+				let snap, snapIsRaw, tween, overshootTolerance;
+				if (inertia && InertiaPlugin) {
+					if (inertia === true) {
+						snap = vars.snap || vars.liveSnap || {};
+						snapIsRaw = (_isArray(snap) || _isFunction(snap));
+						inertia = {resistance:(vars.throwResistance || vars.resistance || 1000) / (rotationMode ? 10 : 1)};
+						if (rotationMode) {
+							inertia.rotation = _parseInertia(self, snapIsRaw ? snap : snap.rotation, maxX, minX, 1, forceZeroVelocity);
+						} else {
+							if (allowX) {
+								inertia[xProp] = _parseInertia(self, snapIsRaw ? snap : snap.points || snap.x || snap.left, maxX, minX, scrollProxy ? -1 : 1, forceZeroVelocity || (self.lockedAxis === "x"));
+							}
+							if (allowY) {
+								inertia[yProp] = _parseInertia(self, snapIsRaw ? snap : snap.points || snap.y || snap.top, maxY, minY, scrollProxy ? -1 : 1, forceZeroVelocity || (self.lockedAxis === "y"));
+							}
+							if (snap.points || (_isArray(snap) && _isObject(snap[0]))) {
+								inertia.linkedProps = xProp + "," + yProp;
+								inertia.radius = snap.radius; //note: we also disable liveSnapping while throwing if there's a "radius" defined, otherwise it looks weird to have the item thrown past a snapping point but live-snapping mid-tween. We do this by altering the onUpdateParams so that "skipSnap" parameter is true for syncXY.
+							}
+						}
+					}
+					self.isThrowing = true;
+					overshootTolerance = (!isNaN(vars.overshootTolerance)) ? vars.overshootTolerance : (vars.edgeResistance === 1) ? 0 : (1 - self.edgeResistance) + 0.2;
+					if (!inertia.duration) {
+						inertia.duration = {max: Math.max(vars.minDuration || 0, ("maxDuration" in vars) ? vars.maxDuration : 2), min: (!isNaN(vars.minDuration) ? vars.minDuration : (overshootTolerance === 0 || (_isObject(inertia) && inertia.resistance > 1000)) ? 0 : 0.5), overshoot: overshootTolerance};
+					}
+					self.tween = tween = gsap.to(scrollProxy || target, {
+						inertia: inertia,
+						data: "_draggable",
+						inherit: false,
+						onComplete: onThrowComplete,
+						onInterrupt: onThrowInterrupt,
+						onUpdate: (vars.fastMode ? _dispatchEvent : syncXY),
+						onUpdateParams: (vars.fastMode ? [self, "onthrowupdate", "onThrowUpdate"] : (snap && snap.radius) ? [false, true] : [])
+					});
+					if (!vars.fastMode) {
+						if (scrollProxy) {
+							scrollProxy._skip = true; // Microsoft browsers have a bug that causes them to briefly render the position incorrectly (it flashes to the end state when we seek() the tween even though we jump right back to the current position, and this only seems to happen when we're affecting both top and left), so we set a _suspendTransforms flag to prevent it from actually applying the values in the ScrollProxy.
+						}
+						tween.render(1e9, true, true); // force to the end. Remember, the duration will likely change upon initting because that's when InertiaPlugin calculates it.
+						syncXY(true, true);
+						self.endX = self.x;
+						self.endY = self.y;
+						if (rotationMode) {
+							self.endRotation = self.x;
+						}
+						tween.play(0);
+						syncXY(true, true);
+						if (scrollProxy) {
+							scrollProxy._skip = false; //Microsoft browsers have a bug that causes them to briefly render the position incorrectly (it flashes to the end state when we seek() the tween even though we jump right back to the current position, and this only seems to happen when we're affecting both top and left), so we set a _suspendTransforms flag to prevent it from actually applying the values in the ScrollProxy.
+						}
+					}
+				} else if (hasBounds) {
+					self.applyBounds();
+				}
+			},
+
+			updateMatrix = shiftStart => {
+				let start = matrix$1,
+					p;
+				matrix$1 = matrix.getGlobalMatrix(target.parentNode, true);
+				if (shiftStart && self.isPressed && !matrix$1.equals(start || new matrix.Matrix2D())) { //if the matrix changes WHILE the element is pressed, we must adjust the startPointerX and startPointerY accordingly, so we invert the original matrix and figure out where the pointerX and pointerY were in the global space, then apply the new matrix to get the updated coordinates.
+					p = start.inverse().apply({x:startPointerX, y:startPointerY});
+					matrix$1.apply(p, p);
+					startPointerX = p.x;
+					startPointerY = p.y;
+				}
+				if (matrix$1.equals(_identityMatrix)) { //if there are no transforms, we can optimize performance by not factoring in the matrix
+					matrix$1 = null;
+				}
+			},
+
+			recordStartPositions = () => {
+				let edgeTolerance = 1 - self.edgeResistance,
+					offsetX = isFixed ? _getDocScrollLeft(ownerDoc) : 0,
+					offsetY = isFixed ? _getDocScrollTop(ownerDoc) : 0,
+					parsedOrigin, x, y;
+				if (xyMode) { // in case the user set it as a different unit, like animating the x to "100%". We must convert it back to px!
+					gsCache.x = getPropAsNum(xProp, "px") + "px";
+					gsCache.y = getPropAsNum(yProp, "px") + "px";
+					gsCache.renderTransform();
+				}
+				updateMatrix(false);
+				_point1.x = self.pointerX - offsetX;
+				_point1.y = self.pointerY - offsetY;
+				matrix$1 && matrix$1.apply(_point1, _point1);
+				startPointerX = _point1.x; //translate to local coordinate system
+				startPointerY = _point1.y;
+				if (dirty) {
+					setPointerPosition(self.pointerX, self.pointerY);
+					render(true);
+				}
+				innerMatrix = matrix.getGlobalMatrix(target);
+				if (scrollProxy) {
+					calculateBounds();
+					startElementY = scrollProxy.top();
+					startElementX = scrollProxy.left();
+				} else {
+					//if the element is in the process of tweening, don't force snapping to occur because it could make it jump. Imagine the user throwing, then before it's done, clicking on the element in its inbetween state.
+					if (isTweening()) {
+						syncXY(true, true);
+						calculateBounds();
+					} else {
+						self.applyBounds();
+					}
+					if (rotationMode) {
+						parsedOrigin = target.ownerSVGElement ? [gsCache.xOrigin - target.getBBox().x, gsCache.yOrigin - target.getBBox().y] : (_getComputedStyle(target)[_transformOriginProp] || "0 0").split(" ");
+						rotationOrigin = self.rotationOrigin = matrix.getGlobalMatrix(target).apply({x: parseFloat(parsedOrigin[0]) || 0, y: parseFloat(parsedOrigin[1]) || 0});
+						syncXY(true, true);
+						x = self.pointerX - rotationOrigin.x - offsetX;
+						y = rotationOrigin.y - self.pointerY + offsetY;
+						startElementX = self.x; //starting rotation (x always refers to rotation in type:"rotation", measured in degrees)
+						startElementY = self.y = Math.atan2(y, x) * _RAD2DEG;
+					} else {
+						//parent = !isFixed && target.parentNode;
+						//startScrollTop = parent ? parent.scrollTop || 0 : 0;
+						//startScrollLeft = parent ? parent.scrollLeft || 0 : 0;
+						startElementY = getPropAsNum(yProp, "px"); //record the starting top and left values so that we can just add the mouse's movement to them later.
+						startElementX = getPropAsNum(xProp, "px");
+					}
+				}
+
+				if (hasBounds && edgeTolerance) {
+					if (startElementX > maxX) {
+						startElementX = maxX + (startElementX - maxX) / edgeTolerance;
+					} else if (startElementX < minX) {
+						startElementX = minX - (minX - startElementX) / edgeTolerance;
+					}
+					if (!rotationMode) {
+						if (startElementY > maxY) {
+							startElementY = maxY + (startElementY - maxY) / edgeTolerance;
+						} else if (startElementY < minY) {
+							startElementY = minY - (minY - startElementY) / edgeTolerance;
+						}
+					}
+				}
+				self.startX = startElementX = _round(startElementX);
+				self.startY = startElementY = _round(startElementY);
+			},
+
+			isTweening = () => self.tween && self.tween.isActive(),
+
+			removePlaceholder = () => {
+				if (_placeholderDiv.parentNode && !isTweening() && !self.isDragging) { //_placeholderDiv just props open auto-scrolling containers so they don't collapse as the user drags left/up. We remove it after dragging (and throwing, if necessary) finishes.
+					_placeholderDiv.parentNode.removeChild(_placeholderDiv);
+				}
+			},
+
+			//called when the mouse is pressed (or touch starts)
+			onPress = (e, force) => {
+				let i;
+				if (!enabled || self.isPressed || !e || ((e.type === "mousedown" || e.type === "pointerdown") && !force && _getTime() - clickTime < 30 && _touchEventLookup[self.pointerEvent.type])) { //when we DON'T preventDefault() in order to accommodate touch-scrolling and the user just taps, many browsers also fire a mousedown/mouseup sequence AFTER the touchstart/touchend sequence, thus it'd result in two quick "click" events being dispatched. This line senses that condition and halts it on the subsequent mousedown.
+					isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchstart, pointerdown, mousedown. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.
+					return;
+				}
+				interrupted = isTweening();
+				dragged = false; // we need to track whether or not it was dragged in this interaction so that if, for example, the user calls .endDrag() to FORCE it to stop and then they keep the mouse pressed down and eventually release, that would normally cause an onClick but we have to skip it in that case if there was dragging that occurred.
+				self.pointerEvent = e;
+				if (_touchEventLookup[e.type]) { //note: on iOS, BOTH touchmove and mousemove are dispatched, but the mousemove has pageY and pageX of 0 which would mess up the calculations and needlessly hurt performance.
+					touchEventTarget = ~e.type.indexOf("touch") ? (e.currentTarget || e.target) : ownerDoc; //pointer-based touches (for Microsoft browsers) don't remain locked to the original target like other browsers, so we must use the document instead. The event type would be "MSPointerDown" or "pointerdown".
+					_addListener(touchEventTarget, "touchend", onRelease);
+					_addListener(touchEventTarget, "touchmove", onMove); // possible future change if PointerEvents are more standardized: https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture
+					_addListener(touchEventTarget, "touchcancel", onRelease);
+					_addListener(ownerDoc, "touchstart", _onMultiTouchDocument);
+				} else {
+					touchEventTarget = null;
+					_addListener(ownerDoc, "mousemove", onMove); //attach these to the document instead of the box itself so that if the user's mouse moves too quickly (and off of the box), things still work.
+				}
+				touchDragAxis = null;
+				if (!_supportsPointer  || !touchEventTarget) {
+					_addListener(ownerDoc, "mouseup", onRelease);
+					e && e.target && _addListener(e.target, "mouseup", onRelease); //we also have to listen directly on the element because some browsers don't bubble up the event to the _doc on elements with contentEditable="true"
+				}
+				isClicking = (isClickable.call(self, e.target) && vars.dragClickables === false && !force);
+				if (isClicking) {
+					_addListener(e.target, "change", onRelease); //in some browsers, when you mousedown on a <select> element, no mouseup gets dispatched! So we listen for a "change" event instead.
+					_dispatchEvent(self, "pressInit", "onPressInit");
+					_dispatchEvent(self, "press", "onPress");
+					_setSelectable(triggers, true); //accommodates things like inputs and elements with contentEditable="true" (otherwise user couldn't drag to select text)
+					isPreventingDefault = false;
+					return;
+				}
+				allowNativeTouchScrolling = (!touchEventTarget || allowX === allowY || self.vars.allowNativeTouchScrolling === false || (self.vars.allowContextMenu && e && (e.ctrlKey || e.which > 2))) ? false : allowX ? "y" : "x"; //note: in Chrome, right-clicking (for a context menu) fires onPress and it doesn't have the event.which set properly, so we must look for event.ctrlKey. If the user wants to allow context menus we should of course sense it here and not allow native touch scrolling.
+				isPreventingDefault = !allowNativeTouchScrolling && !self.allowEventDefault;
+				if (isPreventingDefault) {
+					_preventDefault(e);
+					_addListener(_win, "touchforcechange", _preventDefault); //works around safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/
+				}
+				if (e.changedTouches) { //touch events store the data slightly differently
+					e = touch = e.changedTouches[0];
+					touchID = e.identifier;
+				} else if (e.pointerId) {
+					touchID = e.pointerId; //for some Microsoft browsers
+				} else {
+					touch = touchID = null;
+				}
+				_dragCount++;
+				_addToRenderQueue(render); //causes the Draggable to render on each "tick" of gsap.ticker (performance optimization - updating values in a mousemove can cause them to happen too frequently, like multiple times between frame redraws which is wasteful, and it also prevents values from updating properly in IE8)
+				startPointerY = self.pointerY = e.pageY; //record the starting x and y so that we can calculate the movement from the original in _onMouseMove
+				startPointerX = self.pointerX = e.pageX;
+				_dispatchEvent(self, "pressInit", "onPressInit");
+				if (allowNativeTouchScrolling || self.autoScroll) {
+					_recordMaxScrolls(target.parentNode);
+				}
+				if (target.parentNode && self.autoScroll && !scrollProxy && !rotationMode && target.parentNode._gsMaxScrollX && !_placeholderDiv.parentNode && !target.getBBox) { //add a placeholder div to prevent the parent container from collapsing when the user drags the element left.
+					_placeholderDiv.style.width = target.parentNode.scrollWidth + "px";
+					target.parentNode.appendChild(_placeholderDiv);
+				}
+				recordStartPositions();
+				self.tween && self.tween.kill();
+				self.isThrowing = false;
+				gsap.killTweensOf(scrollProxy || target, killProps, true); //in case the user tries to drag it before the last tween is done.
+				scrollProxy && gsap.killTweensOf(target, {scrollTo:1}, true); //just in case the original target's scroll position is being tweened somewhere else.
+				self.tween = self.lockedAxis = null;
+				if (vars.zIndexBoost || (!rotationMode && !scrollProxy && vars.zIndexBoost !== false)) {
+					target.style.zIndex = Draggable.zIndex++;
+				}
+				self.isPressed = true;
+				hasDragCallback = !!(vars.onDrag || self._listeners.drag);
+				hasMoveCallback = !!(vars.onMove || self._listeners.move);
+				if (vars.cursor !== false || vars.activeCursor) {
+					i = triggers.length;
+					while (--i > -1) {
+						gsap.set(triggers[i], {cursor: vars.activeCursor || vars.cursor || (_defaultCursor === "grab" ? "grabbing" : _defaultCursor)});
+					}
+				}
+				_dispatchEvent(self, "press", "onPress");
+			},
+
+			//called every time the mouse/touch moves
+			onMove = e => {
+				let originalEvent = e,
+					touches, pointerX, pointerY, i, dx, dy;
+				if (!enabled || _isMultiTouching || !self.isPressed || !e) {
+					isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchmove, pointermove, mousemove. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.
+					return;
+				}
+				self.pointerEvent = e;
+				touches = e.changedTouches;
+				if (touches) { //touch events store the data slightly differently
+					e = touches[0];
+					if (e !== touch && e.identifier !== touchID) { //Usually changedTouches[0] will be what we're looking for, but in case it's not, look through the rest of the array...(and Android browsers don't reuse the event like iOS)
+						i = touches.length;
+						while (--i > -1 && (e = touches[i]).identifier !== touchID && e.target !== target) {} // Some Android devices dispatch a touchstart AND pointerdown initially, and then only pointermove thus the touchID may not match because it was grabbed from the touchstart event whereas the pointer event is the one that the browser dispatches for move, so if the event target matches this Draggable's target, let it through.
+						if (i < 0) {
+							return;
+						}
+					}
+				} else if (e.pointerId && touchID && e.pointerId !== touchID) { //for some Microsoft browsers, we must attach the listener to the doc rather than the trigger so that when the finger moves outside the bounds of the trigger, things still work. So if the event we're receiving has a pointerId that doesn't match the touchID, ignore it (for multi-touch)
+					return;
+				}
+
+				if (touchEventTarget && allowNativeTouchScrolling && !touchDragAxis) { //Android browsers force us to decide on the first "touchmove" event if we should allow the default (scrolling) behavior or preventDefault(). Otherwise, a "touchcancel" will be fired and then no "touchmove" or "touchend" will fire during the scrolling (no good).
+					_point1.x = e.pageX - (isFixed ? _getDocScrollLeft(ownerDoc) : 0);
+					_point1.y = e.pageY - (isFixed ? _getDocScrollTop(ownerDoc) : 0);
+					matrix$1 && matrix$1.apply(_point1, _point1);
+					pointerX = _point1.x;
+					pointerY = _point1.y;
+					dx = Math.abs(pointerX - startPointerX);
+					dy = Math.abs(pointerY - startPointerY);
+					if ((dx !== dy && (dx > minimumMovement || dy > minimumMovement)) || (_isAndroid && allowNativeTouchScrolling === touchDragAxis)) {
+						touchDragAxis = (dx > dy && allowX) ? "x" : "y";
+						if (allowNativeTouchScrolling && touchDragAxis !== allowNativeTouchScrolling) {
+							_addListener(_win, "touchforcechange", _preventDefault); // prevents native touch scrolling from taking over if the user started dragging in the other direction in iOS Safari
+						}
+						if (self.vars.lockAxisOnTouchScroll !== false && allowX && allowY) {
+							self.lockedAxis = (touchDragAxis === "x") ? "y" : "x";
+							_isFunction(self.vars.onLockAxis) && self.vars.onLockAxis.call(self, originalEvent);
+						}
+						if (_isAndroid && allowNativeTouchScrolling === touchDragAxis) {
+							onRelease(originalEvent);
+							return;
+						}
+					}
+				}
+				if (!self.allowEventDefault && (!allowNativeTouchScrolling || (touchDragAxis && allowNativeTouchScrolling !== touchDragAxis)) && originalEvent.cancelable !== false) {
+					_preventDefault(originalEvent);
+					isPreventingDefault = true;
+				} else if (isPreventingDefault) {
+					isPreventingDefault = false;
+				}
+
+				if (self.autoScroll) {
+					checkAutoScrollBounds = true;
+				}
+				setPointerPosition(e.pageX, e.pageY, hasMoveCallback);
+			},
+
+			setPointerPosition = (pointerX, pointerY, invokeOnMove) => {
+				let dragTolerance = 1 - self.dragResistance,
+					edgeTolerance = 1 - self.edgeResistance,
+					prevPointerX = self.pointerX,
+					prevPointerY = self.pointerY,
+					prevStartElementY = startElementY,
+					prevX = self.x,
+					prevY = self.y,
+					prevEndX = self.endX,
+					prevEndY = self.endY,
+					prevEndRotation = self.endRotation,
+					prevDirty = dirty,
+					xChange, yChange, x, y, dif, temp;
+				self.pointerX = pointerX;
+				self.pointerY = pointerY;
+				if (isFixed) {
+					pointerX -= _getDocScrollLeft(ownerDoc);
+					pointerY -= _getDocScrollTop(ownerDoc);
+				}
+				if (rotationMode) {
+					y = Math.atan2(rotationOrigin.y - pointerY, pointerX - rotationOrigin.x) * _RAD2DEG;
+					dif = self.y - y;
+					if (dif > 180) {
+						startElementY -= 360;
+						self.y = y;
+					} else if (dif < -180) {
+						startElementY += 360;
+						self.y = y;
+					}
+					if (self.x !== startElementX || Math.abs(startElementY - y) > minimumMovement) {
+						self.y = y;
+						x = startElementX + (startElementY - y) * dragTolerance;
+					} else {
+						x = startElementX;
+					}
+
+				} else {
+					if (matrix$1) {
+						temp = pointerX * matrix$1.a + pointerY * matrix$1.c + matrix$1.e;
+						pointerY = pointerX * matrix$1.b + pointerY * matrix$1.d + matrix$1.f;
+						pointerX = temp;
+					}
+					yChange = (pointerY - startPointerY);
+					xChange = (pointerX - startPointerX);
+					if (yChange < minimumMovement && yChange > -minimumMovement) {
+						yChange = 0;
+					}
+					if (xChange < minimumMovement && xChange > -minimumMovement) {
+						xChange = 0;
+					}
+					if ((self.lockAxis || self.lockedAxis) && (xChange || yChange)) {
+						temp = self.lockedAxis;
+						if (!temp) {
+							self.lockedAxis = temp = (allowX && Math.abs(xChange) > Math.abs(yChange)) ? "y" : allowY ? "x" : null;
+							if (temp && _isFunction(self.vars.onLockAxis)) {
+								self.vars.onLockAxis.call(self, self.pointerEvent);
+							}
+						}
+						if (temp === "y") {
+							yChange = 0;
+						} else if (temp === "x") {
+							xChange = 0;
+						}
+					}
+					x = _round(startElementX + xChange * dragTolerance);
+					y = _round(startElementY + yChange * dragTolerance);
+				}
+
+				if ((snapX || snapY || snapXY) && (self.x !== x || (self.y !== y && !rotationMode))) {
+					if (snapXY) {
+						_temp1.x = x;
+						_temp1.y = y;
+						temp = snapXY(_temp1);
+						x = _round(temp.x);
+						y = _round(temp.y);
+					}
+					if (snapX) {
+						x = _round(snapX(x));
+					}
+					if (snapY) {
+						y = _round(snapY(y));
+					}
+				}
+				if (hasBounds) {
+					if (x > maxX) {
+						x = maxX + Math.round((x - maxX) * edgeTolerance);
+					} else if (x < minX) {
+						x = minX + Math.round((x - minX) * edgeTolerance);
+					}
+					if (!rotationMode) {
+						if (y > maxY) {
+							y = Math.round(maxY + (y - maxY) * edgeTolerance);
+						} else if (y < minY) {
+							y = Math.round(minY + (y - minY) * edgeTolerance);
+						}
+					}
+				}
+				if (self.x !== x || (self.y !== y && !rotationMode)) {
+					if (rotationMode) {
+						self.endRotation = self.x = self.endX = x;
+						dirty = true;
+					} else {
+						if (allowY) {
+							self.y = self.endY = y;
+							dirty = true; //a flag that indicates we need to render the target next time the TweenLite.ticker dispatches a "tick" event (typically on a requestAnimationFrame) - this is a performance optimization (we shouldn't render on every move because sometimes many move events can get dispatched between screen refreshes, and that'd be wasteful to render every time)
+						}
+						if (allowX) {
+							self.x = self.endX = x;
+							dirty = true;
+						}
+					}
+					if (!invokeOnMove || _dispatchEvent(self, "move", "onMove") !== false) {
+						if (!self.isDragging && self.isPressed) {
+							self.isDragging = dragged = true;
+							_dispatchEvent(self, "dragstart", "onDragStart");
+						}
+					} else { //revert because the onMove returned false!
+						self.pointerX = prevPointerX;
+						self.pointerY = prevPointerY;
+						startElementY = prevStartElementY;
+						self.x = prevX;
+						self.y = prevY;
+						self.endX = prevEndX;
+						self.endY = prevEndY;
+						self.endRotation = prevEndRotation;
+						dirty = prevDirty;
+					}
+				}
+			},
+
+			//called when the mouse/touch is released
+			onRelease = (e, force) => {
+				if (!enabled || !self.isPressed || (e && touchID != null && !force && ((e.pointerId && e.pointerId !== touchID && e.target !== target) || (e.changedTouches && !_hasTouchID(e.changedTouches, touchID))))) {  //for some Microsoft browsers, we must attach the listener to the doc rather than the trigger so that when the finger moves outside the bounds of the trigger, things still work. So if the event we're receiving has a pointerId that doesn't match the touchID, ignore it (for multi-touch)
+					isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchend, pointerup, mouseup. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.
+					return;
+				}
+				self.isPressed = false;
+				let originalEvent = e,
+					wasDragging = self.isDragging,
+					isContextMenuRelease = (self.vars.allowContextMenu && e && (e.ctrlKey || e.which > 2)),
+					placeholderDelayedCall = gsap.delayedCall(0.001, removePlaceholder),
+					touches, i, syntheticEvent, eventTarget, syntheticClick;
+				if (touchEventTarget) {
+					_removeListener(touchEventTarget, "touchend", onRelease);
+					_removeListener(touchEventTarget, "touchmove", onMove);
+					_removeListener(touchEventTarget, "touchcancel", onRelease);
+					_removeListener(ownerDoc, "touchstart", _onMultiTouchDocument);
+				} else {
+					_removeListener(ownerDoc, "mousemove", onMove);
+				}
+				_removeListener(_win, "touchforcechange", _preventDefault);
+				if (!_supportsPointer || !touchEventTarget) {
+					_removeListener(ownerDoc, "mouseup", onRelease);
+					e && e.target && _removeListener(e.target, "mouseup", onRelease);
+				}
+				dirty = false;
+				if (wasDragging) {
+					dragEndTime = _lastDragTime = _getTime();
+					self.isDragging = false;
+				}
+				_removeFromRenderQueue(render);
+				if (isClicking && !isContextMenuRelease) {
+					if (e) {
+						_removeListener(e.target, "change", onRelease);
+						self.pointerEvent = originalEvent;
+					}
+					_setSelectable(triggers, false);
+					_dispatchEvent(self, "release", "onRelease");
+					_dispatchEvent(self, "click", "onClick");
+					isClicking = false;
+					return;
+				}
+				i = triggers.length;
+				while (--i > -1) {
+					_setStyle(triggers[i], "cursor", vars.cursor || (vars.cursor !== false ? _defaultCursor : null));
+				}
+				_dragCount--;
+				if (e) {
+					touches = e.changedTouches;
+					if (touches) { //touch events store the data slightly differently
+						e = touches[0];
+						if (e !== touch && e.identifier !== touchID) { //Usually changedTouches[0] will be what we're looking for, but in case it's not, look through the rest of the array...(and Android browsers don't reuse the event like iOS)
+							i = touches.length;
+							while (--i > -1 && (e = touches[i]).identifier !== touchID && e.target !== target) {}
+							if (i < 0 && !force) {
+								return;
+							}
+						}
+					}
+					self.pointerEvent = originalEvent;
+					self.pointerX = e.pageX;
+					self.pointerY = e.pageY;
+				}
+				if (isContextMenuRelease && originalEvent) {
+					_preventDefault(originalEvent);
+					isPreventingDefault = true;
+					_dispatchEvent(self, "release", "onRelease");
+				} else if (originalEvent && !wasDragging) {
+					isPreventingDefault = false;
+					if (interrupted && (vars.snap || vars.bounds)) { //otherwise, if the user clicks on the object while it's animating to a snapped position, and then releases without moving 3 pixels, it will just stay there (it should animate/snap)
+						animate(vars.inertia || vars.throwProps);
+					}
+					_dispatchEvent(self, "release", "onRelease");
+					if ((!_isAndroid || originalEvent.type !== "touchmove") && originalEvent.type.indexOf("cancel") === -1) { //to accommodate native scrolling on Android devices, we have to immediately call onRelease() on the first touchmove event, but that shouldn't trigger a "click".
+						_dispatchEvent(self, "click", "onClick");
+						if (_getTime() - clickTime < 300) {
+							_dispatchEvent(self, "doubleclick", "onDoubleClick");
+						}
+						eventTarget = originalEvent.target || target; //old IE uses srcElement
+						clickTime = _getTime();
+						syntheticClick = () => { // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular "click" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the "real"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the "real" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.
+							if (clickTime !== clickDispatch && self.enabled() && !self.isPressed && !originalEvent.defaultPrevented) {
+								if (eventTarget.click) { //some browsers (like mobile Safari) don't properly trigger the click event
+									eventTarget.click();
+								} else if (ownerDoc.createEvent) {
+									syntheticEvent = ownerDoc.createEvent("MouseEvents");
+									syntheticEvent.initMouseEvent("click", true, true, _win, 1, self.pointerEvent.screenX, self.pointerEvent.screenY, self.pointerX, self.pointerY, false, false, false, false, 0, null);
+									eventTarget.dispatchEvent(syntheticEvent);
+								}
+							}
+						};
+						if (!_isAndroid && !originalEvent.defaultPrevented) { //iOS Safari requires the synthetic click to happen immediately or else it simply won't work, but Android doesn't play nice.
+							gsap.delayedCall(0.05, syntheticClick); //in addition to the iOS bug workaround, there's a Firefox issue with clicking on things like a video to play, so we must fake a click event in a slightly delayed fashion. Previously, we listened for the "click" event with "capture" false which solved the video-click-to-play issue, but it would allow the "click" event to be dispatched twice like if you were using a jQuery.click() because that was handled in the capture phase, thus we had to switch to the capture phase to avoid the double-dispatching, but do the delayed synthetic click. Don't fire it too fast (like 0.00001) because we want to give the native event a chance to fire first as it's "trusted".
+						}
+					}
+				} else {
+					animate(vars.inertia || vars.throwProps); //will skip if inertia/throwProps isn't defined or InertiaPlugin isn't loaded.
+					if (!self.allowEventDefault && originalEvent && (vars.dragClickables !== false || !isClickable.call(self, originalEvent.target)) && wasDragging && (!allowNativeTouchScrolling || (touchDragAxis && allowNativeTouchScrolling === touchDragAxis)) && originalEvent.cancelable !== false) {
+						isPreventingDefault = true;
+						_preventDefault(originalEvent);
+					} else {
+						isPreventingDefault = false;
+					}
+					_dispatchEvent(self, "release", "onRelease");
+				}
+				isTweening() && placeholderDelayedCall.duration( self.tween.duration() ); //sync the timing so that the placeholder DIV gets
+				wasDragging && _dispatchEvent(self, "dragend", "onDragEnd");
+				return true;
+			},
+
+			updateScroll = e => {
+				if (e && self.isDragging && !scrollProxy) {
+					let parent = e.target || target.parentNode,
+						deltaX = parent.scrollLeft - parent._gsScrollX,
+						deltaY = parent.scrollTop - parent._gsScrollY;
+					if (deltaX || deltaY) {
+						if (matrix$1) {
+							startPointerX -= deltaX * matrix$1.a + deltaY * matrix$1.c;
+							startPointerY -= deltaY * matrix$1.d + deltaX * matrix$1.b;
+						} else {
+							startPointerX -= deltaX;
+							startPointerY -= deltaY;
+						}
+						parent._gsScrollX += deltaX;
+						parent._gsScrollY += deltaY;
+						setPointerPosition(self.pointerX, self.pointerY);
+					}
+				}
+			},
+
+			onClick = e => { //this was a huge pain in the neck to align all the various browsers and their behaviors. Chrome, Firefox, Safari, Opera, Android, and Microsoft Edge all handle events differently! Some will only trigger native behavior (like checkbox toggling) from trusted events. Others don't even support isTrusted, but require 2 events to flow through before triggering native behavior. Edge treats everything as trusted but also mandates that 2 flow through to trigger the correct native behavior.
+				let time = _getTime(),
+					recentlyClicked = (time - clickTime < 100),
+					recentlyDragged = (time - dragEndTime < 50),
+					alreadyDispatched = (recentlyClicked && clickDispatch === clickTime),
+					defaultPrevented = (self.pointerEvent && self.pointerEvent.defaultPrevented),
+					alreadyDispatchedTrusted = (recentlyClicked && trustedClickDispatch === clickTime),
+					trusted = e.isTrusted || (e.isTrusted == null && recentlyClicked && alreadyDispatched); //note: Safari doesn't support isTrusted, and it won't properly execute native behavior (like toggling checkboxes) on the first synthetic "click" event - we must wait for the 2nd and treat it as trusted (but stop propagation at that point). Confusing, I know. Don't you love cross-browser compatibility challenges?
+				if ((alreadyDispatched || (recentlyDragged && self.vars.suppressClickOnDrag !== false) ) && e.stopImmediatePropagation) {
+					e.stopImmediatePropagation();
+				}
+				if (recentlyClicked && !(self.pointerEvent && self.pointerEvent.defaultPrevented) && (!alreadyDispatched || (trusted && !alreadyDispatchedTrusted))) { //let the first click pass through unhindered. Let the next one only if it's trusted, then no more (stop quick-succession ones)
+					if (trusted && alreadyDispatched) {
+						trustedClickDispatch = clickTime;
+					}
+					clickDispatch = clickTime;
+					return;
+				}
+				if (self.isPressed || recentlyDragged || recentlyClicked) {
+					if (!trusted || !e.detail || !recentlyClicked || defaultPrevented) {
+						_preventDefault(e);
+					}
+				}
+				if (!recentlyClicked && !recentlyDragged && !dragged) { // for script-triggered event dispatches, like element.click()
+					e && e.target && (self.pointerEvent = e);
+					_dispatchEvent(self, "click", "onClick");
+				}
+			},
+
+			localizePoint = p => matrix$1 ? {x:p.x * matrix$1.a + p.y * matrix$1.c + matrix$1.e, y:p.x * matrix$1.b + p.y * matrix$1.d + matrix$1.f} : {x:p.x, y:p.y};
+
+		old = Draggable.get(target);
+		old && old.kill(); // avoids duplicates (an element can only be controlled by one Draggable)
+
+		//give the user access to start/stop dragging...
+		this.startDrag = (event, align) => {
+			let r1, r2, p1, p2;
+			onPress(event || self.pointerEvent, true);
+			//if the pointer isn't on top of the element, adjust things accordingly
+			if (align && !self.hitTest(event || self.pointerEvent)) {
+				r1 = _parseRect(event || self.pointerEvent);
+				r2 = _parseRect(target);
+				p1 = localizePoint({x:r1.left + r1.width / 2, y:r1.top + r1.height / 2});
+				p2 = localizePoint({x:r2.left + r2.width / 2, y:r2.top + r2.height / 2});
+				startPointerX -= p1.x - p2.x;
+				startPointerY -= p1.y - p2.y;
+			}
+			if (!self.isDragging) {
+				self.isDragging = dragged = true;
+				_dispatchEvent(self, "dragstart", "onDragStart");
+			}
+		};
+		this.drag = onMove;
+		this.endDrag = e =>	onRelease(e || self.pointerEvent, true);
+		this.timeSinceDrag = () => self.isDragging ? 0 : (_getTime() - dragEndTime) / 1000;
+		this.timeSinceClick = () => (_getTime() - clickTime) / 1000;
+		this.hitTest = (target, threshold) => Draggable.hitTest(self.target, target, threshold);
+
+		this.getDirection = (from, diagonalThreshold) => { //from can be "start" (default), "velocity", or an element
+			let mode = (from === "velocity" && InertiaPlugin) ? from : (_isObject(from) && !rotationMode) ? "element" : "start",
+				xChange, yChange, ratio, direction, r1, r2;
+			if (mode === "element") {
+				r1 = _parseRect(self.target);
+				r2 = _parseRect(from);
+			}
+			xChange = (mode === "start") ? self.x - startElementX : (mode === "velocity") ? InertiaPlugin.getVelocity(target, xProp) : (r1.left + r1.width / 2) - (r2.left + r2.width / 2);
+			if (rotationMode) {
+				return xChange < 0 ? "counter-clockwise" : "clockwise";
+			} else {
+				diagonalThreshold = diagonalThreshold || 2;
+				yChange = (mode === "start") ? self.y - startElementY : (mode === "velocity") ? InertiaPlugin.getVelocity(target, yProp) : (r1.top + r1.height / 2) - (r2.top + r2.height / 2);
+				ratio = Math.abs(xChange / yChange);
+				direction = (ratio < 1 / diagonalThreshold) ? "" : (xChange < 0) ? "left" : "right";
+				if (ratio < diagonalThreshold) {
+					if (direction !== "") {
+						direction += "-";
+					}
+					direction += (yChange < 0) ? "up" : "down";
+				}
+			}
+			return direction;
+		};
+
+		this.applyBounds = (newBounds, sticky) => {
+			let x, y, forceZeroVelocity, e, parent, isRoot;
+			if (newBounds && vars.bounds !== newBounds) {
+				vars.bounds = newBounds;
+				return self.update(true, sticky);
+			}
+			syncXY(true);
+			calculateBounds();
+			if (hasBounds && !isTweening()) {
+				x = self.x;
+				y = self.y;
+				if (x > maxX) {
+					x = maxX;
+				} else if (x < minX) {
+					x = minX;
+				}
+				if (y > maxY) {
+					y = maxY;
+				} else if (y < minY) {
+					y = minY;
+				}
+				if (self.x !== x || self.y !== y) {
+					forceZeroVelocity = true;
+					self.x = self.endX = x;
+					if (rotationMode) {
+						self.endRotation = x;
+					} else {
+						self.y = self.endY = y;
+					}
+					dirty = true;
+					render(true);
+					if (self.autoScroll && !self.isDragging) {
+						_recordMaxScrolls(target.parentNode);
+						e = target;
+						_windowProxy.scrollTop = ((_win.pageYOffset != null) ? _win.pageYOffset : (ownerDoc.documentElement.scrollTop != null) ? ownerDoc.documentElement.scrollTop : ownerDoc.body.scrollTop);
+						_windowProxy.scrollLeft = ((_win.pageXOffset != null) ? _win.pageXOffset : (ownerDoc.documentElement.scrollLeft != null) ? ownerDoc.documentElement.scrollLeft : ownerDoc.body.scrollLeft);
+						while (e && !isRoot) { //walk up the chain and sense wherever the scrollTop/scrollLeft exceeds the maximum.
+							isRoot = _isRoot(e.parentNode);
+							parent = isRoot ? _windowProxy : e.parentNode;
+							if (allowY && parent.scrollTop > parent._gsMaxScrollY) {
+								parent.scrollTop = parent._gsMaxScrollY;
+							}
+							if (allowX && parent.scrollLeft > parent._gsMaxScrollX) {
+								parent.scrollLeft = parent._gsMaxScrollX;
+							}
+							e = parent;
+						}
+					}
+				}
+				if (self.isThrowing && (forceZeroVelocity || self.endX > maxX || self.endX < minX || self.endY > maxY || self.endY < minY)) {
+					animate(vars.inertia || vars.throwProps, forceZeroVelocity);
+				}
+			}
+			return self;
+		};
+
+		this.update = (applyBounds, sticky, ignoreExternalChanges) => {
+			if (sticky && self.isPressed) { // in case the element was repositioned in the document flow, thus its x/y may be identical but its position is actually quite different.
+				let m = matrix.getGlobalMatrix(target),
+					p = innerMatrix.apply({x: self.x - startElementX, y: self.y - startElementY}),
+					m2 = matrix.getGlobalMatrix(target.parentNode, true);
+				m2.apply({x: m.e - p.x, y: m.f - p.y}, p);
+				self.x -= p.x - m2.e;
+				self.y -= p.y - m2.f;
+				render(true);
+				recordStartPositions();
+			}
+			let { x, y } = self;
+			updateMatrix(!sticky);
+			if (applyBounds) {
+				self.applyBounds();
+			} else {
+				dirty && ignoreExternalChanges && render(true);
+				syncXY(true);
+			}
+			if (sticky) {
+				setPointerPosition(self.pointerX, self.pointerY);
+				dirty && render(true);
+			}
+			if (self.isPressed && !sticky && ((allowX && Math.abs(x - self.x) > 0.01) || (allowY && (Math.abs(y - self.y) > 0.01 && !rotationMode)))) {
+				recordStartPositions();
+			}
+			if (self.autoScroll) {
+				_recordMaxScrolls(target.parentNode, self.isDragging);
+				checkAutoScrollBounds = self.isDragging;
+				render(true);
+				//in case reparenting occurred.
+				_removeScrollListener(target, updateScroll);
+				_addScrollListener(target, updateScroll);
+			}
+			return self;
+		};
+
+		this.enable = type => {
+			let setVars = {lazy: true},
+				id, i, trigger;
+			if (vars.cursor !== false) {
+				setVars.cursor = vars.cursor || _defaultCursor;
+			}
+			if (gsap.utils.checkPrefix("touchCallout")) {
+				setVars.touchCallout = "none";
+			}
+			if (type !== "soft") {
+				_setTouchActionForAllDescendants(triggers, (allowX === allowY) ? "none" : (vars.allowNativeTouchScrolling && (target.scrollHeight === target.clientHeight) === (target.scrollWidth === target.clientHeight)) || vars.allowEventDefault ? "manipulation" : allowX ? "pan-y" : "pan-x"); // Some browsers like Internet Explorer will fire a pointercancel event when the user attempts to drag when touchAction is "manipulate" because it's perceived as a pan. If the element has scrollable content in only one direction, we should use pan-x or pan-y accordingly so that the pointercancel doesn't prevent dragging.
+				i = triggers.length;
+				while (--i > -1) {
+					trigger = triggers[i];
+					_supportsPointer || _addListener(trigger, "mousedown", onPress);
+					_addListener(trigger, "touchstart", onPress);
+					_addListener(trigger, "click", onClick, true); // note: used to pass true for capture but it prevented click-to-play-video functionality in Firefox.
+					gsap.set(trigger, setVars);
+					if (trigger.getBBox && trigger.ownerSVGElement && allowX !== allowY) { // a bug in chrome doesn't respect touch-action on SVG elements - it only works if we set it on the parent SVG.
+						gsap.set(trigger.ownerSVGElement, {touchAction: vars.allowNativeTouchScrolling || vars.allowEventDefault ? "manipulation" : allowX ? "pan-y" : "pan-x"});
+					}
+					vars.allowContextMenu || _addListener(trigger, "contextmenu", onContextMenu);
+				}
+				_setSelectable(triggers, false);
+			}
+			_addScrollListener(target, updateScroll);
+			enabled = true;
+			if (InertiaPlugin && type !== "soft") {
+				InertiaPlugin.track(scrollProxy || target, (xyMode ? "x,y" : rotationMode ? "rotation" : "top,left"));
+			}
+			target._gsDragID = id = "d" + (_lookupCount++);
+			_lookup[id] = self;
+			if (scrollProxy) {
+				scrollProxy.enable();
+				scrollProxy.element._gsDragID = id;
+			}
+			(vars.bounds || rotationMode) && recordStartPositions();
+			vars.bounds && self.applyBounds();
+			return self;
+		};
+
+		this.disable = type => {
+			let dragging = self.isDragging,
+				i = triggers.length,
+				trigger;
+			while (--i > -1) {
+				_setStyle(triggers[i], "cursor", null);
+			}
+			if (type !== "soft") {
+				_setTouchActionForAllDescendants(triggers, null);
+				i = triggers.length;
+				while (--i > -1) {
+					trigger = triggers[i];
+					_setStyle(trigger, "touchCallout", null);
+					_removeListener(trigger, "mousedown", onPress);
+					_removeListener(trigger, "touchstart", onPress);
+					_removeListener(trigger, "click", onClick, true);
+					_removeListener(trigger, "contextmenu", onContextMenu);
+				}
+				_setSelectable(triggers, true);
+				if (touchEventTarget) {
+					_removeListener(touchEventTarget, "touchcancel", onRelease);
+					_removeListener(touchEventTarget, "touchend", onRelease);
+					_removeListener(touchEventTarget, "touchmove", onMove);
+				}
+				_removeListener(ownerDoc, "mouseup", onRelease);
+				_removeListener(ownerDoc, "mousemove", onMove);
+			}
+			_removeScrollListener(target, updateScroll);
+			enabled = false;
+			if (InertiaPlugin && type !== "soft") {
+				InertiaPlugin.untrack(scrollProxy || target, (xyMode ? "x,y" : rotationMode ? "rotation" : "top,left"));
+				self.tween && self.tween.kill();
+			}
+			scrollProxy && scrollProxy.disable();
+			_removeFromRenderQueue(render);
+			self.isDragging = self.isPressed = isClicking = false;
+			dragging && _dispatchEvent(self, "dragend", "onDragEnd");
+			return self;
+		};
+
+		this.enabled = function(value, type) {
+			return arguments.length ? (value ? self.enable(type) : self.disable(type)) : enabled;
+		};
+
+		this.kill = function() {
+			self.isThrowing = false;
+			self.tween && self.tween.kill();
+			self.disable();
+			gsap.set(triggers, {clearProps:"userSelect"});
+			delete _lookup[target._gsDragID];
+			return self;
+		};
+
+		this.revert = function() {
+			this.kill();
+			this.styles && this.styles.revert();
+		};
+
+		if (~type.indexOf("scroll")) {
+			scrollProxy = this.scrollProxy = new ScrollProxy(target, _extend({onKill:function() { //ScrollProxy's onKill() gets called if/when the ScrollProxy senses that the user interacted with the scroll position manually (like using the scrollbar). IE9 doesn't fire the "mouseup" properly when users drag the scrollbar of an element, so this works around that issue.
+					self.isPressed && onRelease(null);
+			}}, vars));
+			//a bug in many Android devices' stock browser causes scrollTop to get forced back to 0 after it is altered via JS, so we set overflow to "hidden" on mobile/touch devices (they hide the scroll bar anyway). That works around the bug. (This bug is discussed at https://code.google.com/p/android/issues/detail?id=19625)
+			target.style.overflowY = (allowY && !_isTouchDevice) ? "auto" : "hidden";
+			target.style.overflowX = (allowX && !_isTouchDevice) ? "auto" : "hidden";
+			target = scrollProxy.content;
+		}
+
+		if (rotationMode) {
+			killProps.rotation = 1;
+		} else {
+			if (allowX) {
+				killProps[xProp] = 1;
+			}
+			if (allowY) {
+				killProps[yProp] = 1;
+			}
+		}
+
+		gsCache.force3D = ("force3D" in vars) ? vars.force3D : true; //otherwise, normal dragging would be in 2D and then as soon as it's released and there's an inertia tween, it'd jump to 3D which can create an initial jump due to the work the browser must to do layerize it.
+
+		_context(this);
+		this.enable();
+	}
+
+
+
+
+	static register(core) {
+		gsap = core;
+		_initCore();
+	}
+
+	static create(targets, vars) {
+		_coreInitted || _initCore(true);
+		return _toArray(targets).map(target => new Draggable(target, vars));
+	}
+
+	static get(target) {
+		return _lookup[(_toArray(target)[0] || {})._gsDragID];
+	}
+
+	static timeSinceDrag() {
+		return (_getTime() - _lastDragTime) / 1000;
+	}
+
+	static hitTest(obj1, obj2, threshold) {
+		if (obj1 === obj2) {
+			return false;
+		}
+		let r1 = _parseRect(obj1),
+			r2 = _parseRect(obj2),
+			{ top, left, right, bottom, width, height } = r1,
+			isOutside = (r2.left > right || r2.right < left || r2.top > bottom || r2.bottom < top),
+			overlap, area, isRatio;
+		if (isOutside || !threshold) {
+			return !isOutside;
+		}
+		isRatio = ((threshold + "").indexOf("%") !== -1);
+		threshold = parseFloat(threshold) || 0;
+		overlap = {left: Math.max(left, r2.left), top: Math.max(top, r2.top)};
+		overlap.width = Math.min(right, r2.right) - overlap.left;
+		overlap.height = Math.min(bottom, r2.bottom) - overlap.top;
+		if (overlap.width < 0 || overlap.height < 0) {
+			return false;
+		}
+		if (isRatio) {
+			threshold *= 0.01;
+			area = overlap.width * overlap.height;
+			return (area >= width * height * threshold || area >= r2.width * r2.height * threshold);
+		}
+		return (overlap.width > threshold && overlap.height > threshold);
+	}
+
+}
+
+_setDefaults(Draggable.prototype, {pointerX:0, pointerY: 0, startX: 0, startY: 0, deltaX: 0, deltaY: 0, isDragging: false, isPressed: false});
+
+Draggable.zIndex = 1000;
+Draggable.version = "3.12.5";
+
+_getGSAP() && gsap.registerPlugin(Draggable);
+
+exports.Draggable = Draggable;
+exports.default = Draggable;
diff --git a/src/Draggable.js b/dist/Draggable.d.cts
similarity index 99%
rename from src/Draggable.js
rename to dist/Draggable.d.cts
index f3f84d78f9ff68e4df55e9823feb3a0ded388163..5569605fbd267e0d789e0edaa9724e9c8c7ac1ee 100644
--- a/src/Draggable.js
+++ b/dist/Draggable.d.cts
@@ -1,3 +1,5 @@
+import { M as Matrix2D, g as getGlobalMatrix } from './shared/gsap.7b0323e5.cjs';
+
 /*!
  * Draggable 3.12.5
  * https://gsap.com
@@ -9,7 +11,6 @@
  */
 /* eslint-disable */
 
-import { getGlobalMatrix, Matrix2D } from "./utils/matrix.js";
 
 let gsap, _win, _doc, _docElement, _body, _tempDiv, _placeholderDiv, _coreInitted, _checkPrefix, _toArray, _supportsPassive, _isTouchDevice, _touchEventLookup, _isMultiTouching, _isAndroid, InertiaPlugin, _defaultCursor, _supportsPointer, _context, _getStyleSaver,
 	_dragCount = 0,
@@ -645,7 +646,7 @@ class EventDispatcher {
 
 
 
-export class Draggable extends EventDispatcher {
+class Draggable extends EventDispatcher {
 
 	constructor(target, vars) {
 		super();
@@ -1938,4 +1939,4 @@ Draggable.version = "3.12.5";
 
 _getGSAP() && gsap.registerPlugin(Draggable);
 
-export { Draggable as default };
\ No newline at end of file
+export { Draggable, Draggable as default };
diff --git a/dist/Draggable.d.mts b/dist/Draggable.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..4d8de0068253d4b26a5860490685f1bbcbbe8b48
--- /dev/null
+++ b/dist/Draggable.d.mts
@@ -0,0 +1,1942 @@
+import { M as Matrix2D, g as getGlobalMatrix } from './shared/gsap.7b0323e5.mjs';
+
+/*!
+ * Draggable 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+ */
+/* eslint-disable */
+
+
+let gsap, _win, _doc, _docElement, _body, _tempDiv, _placeholderDiv, _coreInitted, _checkPrefix, _toArray, _supportsPassive, _isTouchDevice, _touchEventLookup, _isMultiTouching, _isAndroid, InertiaPlugin, _defaultCursor, _supportsPointer, _context, _getStyleSaver,
+	_dragCount = 0,
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_isFunction = value => typeof(value) === "function",
+	_isObject = value => typeof(value) === "object",
+	_isUndefined = value => typeof(value) === "undefined",
+	_emptyFunc = () => false,
+	_transformProp = "transform",
+	_transformOriginProp = "transformOrigin",
+	_round = value => Math.round(value * 10000) / 10000,
+	_isArray = Array.isArray,
+	_createElement = (type, ns) => {
+		let e = _doc.createElementNS ? _doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.
+		return e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://gsap.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
+	},
+	_RAD2DEG = 180 / Math.PI,
+	_bigNum = 1e20,
+	_identityMatrix = new Matrix2D(),
+	_getTime = Date.now || (() => new Date().getTime()),
+	_renderQueue = [],
+	_lookup = {}, //when a Draggable is created, the target gets a unique _gsDragID property that allows gets associated with the Draggable instance for quick lookups in Draggable.get(). This avoids circular references that could cause gc problems.
+	_lookupCount = 0,
+	_clickableTagExp = /^(?:a|input|textarea|button|select)$/i,
+	_lastDragTime = 0,
+	_temp1 = {}, // a simple object we reuse and populate (usually x/y properties) to conserve memory and improve performance.
+	_windowProxy = {}, //memory/performance optimization - we reuse this object during autoScroll to store window-related bounds/offsets.
+	_copy = (obj, factor) => {
+		let copy = {}, p;
+		for (p in obj) {
+			copy[p] = factor ? obj[p] * factor : obj[p];
+		}
+		return copy;
+	},
+	_extend = (obj, defaults) => {
+		for (let p in defaults) {
+			if (!(p in obj)) {
+				obj[p] = defaults[p];
+			}
+		}
+		return obj;
+	},
+	_setTouchActionForAllDescendants = (elements, value) => {
+		let i = elements.length,
+			children;
+		while (i--) {
+			value ? (elements[i].style.touchAction = value) : elements[i].style.removeProperty("touch-action");
+			children = elements[i].children;
+			children && children.length && _setTouchActionForAllDescendants(children, value);
+		}
+	},
+	_renderQueueTick = () => _renderQueue.forEach(func => func()),
+	_addToRenderQueue = func => {
+		_renderQueue.push(func);
+		if (_renderQueue.length === 1) {
+			gsap.ticker.add(_renderQueueTick);
+		}
+	},
+	_renderQueueTimeout = () => !_renderQueue.length && gsap.ticker.remove(_renderQueueTick),
+	_removeFromRenderQueue = func => {
+		let i = _renderQueue.length;
+		while (i--) {
+			if (_renderQueue[i] === func) {
+				_renderQueue.splice(i, 1);
+			}
+		}
+		gsap.to(_renderQueueTimeout, {overwrite:true, delay:15, duration:0, onComplete:_renderQueueTimeout, data:"_draggable"}); //remove the "tick" listener only after the render queue is empty for 15 seconds (to improve performance). Adding/removing it constantly for every click/touch wouldn't deliver optimal speed, and we also don't want the ticker to keep calling the render method when things are idle for long periods of time (we want to improve battery life on mobile devices).
+	},
+	_setDefaults = (obj, defaults) => {
+		for (let p in defaults) {
+			if (!(p in obj)) {
+				obj[p] = defaults[p];
+			}
+		}
+		return obj;
+	},
+	_addListener = (element, type, func, capture) => {
+		if (element.addEventListener) {
+			let touchType = _touchEventLookup[type];
+			capture = capture || (_supportsPassive ? {passive: false} : null);
+			element.addEventListener(touchType || type, func, capture);
+			(touchType && type !== touchType) && element.addEventListener(type, func, capture);//some browsers actually support both, so must we. But pointer events cover all.
+		}
+	},
+	_removeListener = (element, type, func, capture) => {
+		if (element.removeEventListener) {
+			let touchType = _touchEventLookup[type];
+			element.removeEventListener(touchType || type, func, capture);
+			(touchType && type !== touchType) && element.removeEventListener(type, func, capture);
+		}
+	},
+	_preventDefault = event => {
+		event.preventDefault && event.preventDefault();
+		event.preventManipulation && event.preventManipulation();  //for some Microsoft browsers
+	},
+	_hasTouchID = (list, ID) => {
+		let i = list.length;
+		while (i--) {
+			if (list[i].identifier === ID) {
+				return true;
+			}
+		}
+	},
+	_onMultiTouchDocumentEnd = event => {
+		_isMultiTouching = (event.touches && _dragCount < event.touches.length);
+		_removeListener(event.target, "touchend", _onMultiTouchDocumentEnd);
+	},
+
+	_onMultiTouchDocument = event => {
+		_isMultiTouching = (event.touches && _dragCount < event.touches.length);
+		_addListener(event.target, "touchend", _onMultiTouchDocumentEnd);
+	},
+	_getDocScrollTop = doc => _win.pageYOffset  || doc.scrollTop || doc.documentElement.scrollTop || doc.body.scrollTop || 0,
+	_getDocScrollLeft = doc => _win.pageXOffset || doc.scrollLeft || doc.documentElement.scrollLeft || doc.body.scrollLeft || 0,
+	_addScrollListener = (e, callback) => {
+		_addListener(e, "scroll", callback);
+		if (!_isRoot(e.parentNode)) {
+			_addScrollListener(e.parentNode, callback);
+		}
+	},
+	_removeScrollListener = (e, callback) => {
+		_removeListener(e, "scroll", callback);
+		if (!_isRoot(e.parentNode)) {
+			_removeScrollListener(e.parentNode, callback);
+		}
+	},
+	_isRoot = e => !!(!e || e === _docElement || e.nodeType === 9 || e === _doc.body || e === _win || !e.nodeType || !e.parentNode),
+	_getMaxScroll = (element, axis) => {
+		let dim = (axis === "x") ? "Width" : "Height",
+			scroll = "scroll" + dim,
+			client = "client" + dim;
+		return Math.max(0, _isRoot(element) ? Math.max(_docElement[scroll], _body[scroll]) - (_win["inner" + dim] || _docElement[client] || _body[client]) : element[scroll] - element[client]);
+	},
+	_recordMaxScrolls = (e, skipCurrent) => { //records _gsMaxScrollX and _gsMaxScrollY properties for the element and all ancestors up the chain so that we can cap it, otherwise dragging beyond the edges with autoScroll on can endlessly scroll.
+		let x = _getMaxScroll(e, "x"),
+			y = _getMaxScroll(e, "y");
+		if (_isRoot(e)) {
+			e = _windowProxy;
+		} else {
+			_recordMaxScrolls(e.parentNode, skipCurrent);
+		}
+		e._gsMaxScrollX = x;
+		e._gsMaxScrollY = y;
+		if (!skipCurrent) {
+			e._gsScrollX = e.scrollLeft || 0;
+			e._gsScrollY = e.scrollTop || 0;
+		}
+	},
+	_setStyle = (element, property, value) => {
+		let style = element.style;
+		if (!style) {
+			return;
+		}
+		if (_isUndefined(style[property])) {
+			property = _checkPrefix(property, element) || property;
+		}
+		if (value == null) {
+			style.removeProperty && style.removeProperty(property.replace(/([A-Z])/g, "-$1").toLowerCase());
+		} else {
+			style[property] = value;
+		}
+	},
+	_getComputedStyle = element => _win.getComputedStyle((element instanceof Element) ? element : element.host || (element.parentNode || {}).host || element), //the "host" stuff helps to accommodate ShadowDom objects.
+
+	_tempRect = {}, //reuse to reduce garbage collection tasks
+	_parseRect = e => { //accepts a DOM element, a mouse event, or a rectangle object and returns the corresponding rectangle with left, right, width, height, top, and bottom properties
+		if (e === _win) {
+			_tempRect.left = _tempRect.top = 0;
+			_tempRect.width = _tempRect.right = _docElement.clientWidth || e.innerWidth || _body.clientWidth || 0;
+			_tempRect.height = _tempRect.bottom = ((e.innerHeight || 0) - 20 < _docElement.clientHeight) ? _docElement.clientHeight : e.innerHeight || _body.clientHeight || 0;
+			return _tempRect;
+		}
+		let doc = e.ownerDocument || _doc,
+			r = !_isUndefined(e.pageX) ? {left: e.pageX - _getDocScrollLeft(doc), top: e.pageY - _getDocScrollTop(doc), right: e.pageX - _getDocScrollLeft(doc) + 1, bottom: e.pageY - _getDocScrollTop(doc) + 1} : (!e.nodeType && !_isUndefined(e.left) && !_isUndefined(e.top)) ? e : _toArray(e)[0].getBoundingClientRect();
+		if (_isUndefined(r.right) && !_isUndefined(r.width)) {
+			r.right = r.left + r.width;
+			r.bottom = r.top + r.height;
+		} else if (_isUndefined(r.width)) { //some browsers don't include width and height properties. We can't just set them directly on r because some browsers throw errors, so create a new generic object.
+			r = {width: r.right - r.left, height: r.bottom - r.top, right: r.right, left: r.left, bottom: r.bottom, top: r.top};
+		}
+		return r;
+	},
+
+	_dispatchEvent = (target, type, callbackName) => {
+		let vars = target.vars,
+			callback = vars[callbackName],
+			listeners = target._listeners[type],
+			result;
+		if (_isFunction(callback)) {
+			result = callback.apply(vars.callbackScope || target, vars[callbackName + "Params"] || [target.pointerEvent]);
+		}
+		if (listeners && target.dispatchEvent(type) === false) {
+			result = false;
+		}
+		return result;
+	},
+	_getBounds = (target, context) => { //accepts any of the following: a DOM element, jQuery object, selector text, or an object defining bounds as {top, left, width, height} or {minX, maxX, minY, maxY}. Returns an object with left, top, width, and height properties.
+		let e = _toArray(target)[0],
+			top, left, offset;
+		if (!e.nodeType && e !== _win) {
+			if (!_isUndefined(target.left)) {
+				offset = {x:0, y:0}; //_getOffsetTransformOrigin(context); //the bounds should be relative to the origin
+				return {left: target.left - offset.x, top: target.top - offset.y, width: target.width, height: target.height};
+			}
+			left = target.min || target.minX || target.minRotation || 0;
+			top = target.min || target.minY || 0;
+			return {left:left, top:top, width:(target.max || target.maxX || target.maxRotation || 0) - left, height:(target.max || target.maxY || 0) - top};
+		}
+		return _getElementBounds(e, context);
+	},
+	_point1 = {}, //we reuse to minimize garbage collection tasks.
+	_getElementBounds = (element, context) => {
+		context = _toArray(context)[0];
+		let isSVG = (element.getBBox && element.ownerSVGElement),
+			doc = element.ownerDocument || _doc,
+			left, right, top, bottom, matrix, p1, p2, p3, p4, bbox, width, height, cs;
+		if (element === _win) {
+			top = _getDocScrollTop(doc);
+			left = _getDocScrollLeft(doc);
+			right = left + (doc.documentElement.clientWidth || element.innerWidth || doc.body.clientWidth || 0);
+			bottom = top + (((element.innerHeight || 0) - 20 < doc.documentElement.clientHeight) ? doc.documentElement.clientHeight : element.innerHeight || doc.body.clientHeight || 0); //some browsers (like Firefox) ignore absolutely positioned elements, and collapse the height of the documentElement, so it could be 8px, for example, if you have just an absolutely positioned div. In that case, we use the innerHeight to resolve this.
+		} else if (context === _win || _isUndefined(context)) {
+			return element.getBoundingClientRect();
+		} else {
+			left = top =  0;
+			if (isSVG) {
+				bbox = element.getBBox();
+				width = bbox.width;
+				height = bbox.height;
+			} else {
+				if (element.viewBox && (bbox = element.viewBox.baseVal)) {
+					left = bbox.x || 0;
+					top = bbox.y || 0;
+					width = bbox.width;
+					height = bbox.height;
+				}
+				if (!width) {
+					cs = _getComputedStyle(element);
+					bbox = cs.boxSizing === "border-box";
+					width = (parseFloat(cs.width) || element.clientWidth || 0) + (bbox ? 0 : parseFloat(cs.borderLeftWidth) + parseFloat(cs.borderRightWidth));
+					height = (parseFloat(cs.height) || element.clientHeight || 0) + (bbox ? 0 : parseFloat(cs.borderTopWidth) + parseFloat(cs.borderBottomWidth));
+				}
+			}
+			right = width;
+			bottom = height;
+		}
+		if (element === context) {
+			return {left:left, top:top, width: right - left, height: bottom - top};
+		}
+		matrix = getGlobalMatrix(context, true).multiply(getGlobalMatrix(element));
+		p1 = matrix.apply({x:left, y:top});
+		p2 = matrix.apply({x:right, y:top});
+		p3 = matrix.apply({x:right, y:bottom});
+		p4 = matrix.apply({x:left, y:bottom});
+		left = Math.min(p1.x, p2.x, p3.x, p4.x);
+		top = Math.min(p1.y, p2.y, p3.y, p4.y);
+		return {left: left, top: top, width: Math.max(p1.x, p2.x, p3.x, p4.x) - left, height: Math.max(p1.y, p2.y, p3.y, p4.y) - top};
+	},
+	_parseInertia = (draggable, snap, max, min, factor, forceZeroVelocity) => {
+		let vars = {},
+			a, i, l;
+		if (snap) {
+			if (factor !== 1 && snap instanceof Array) { //some data must be altered to make sense, like if the user passes in an array of rotational values in degrees, we must convert it to radians. Or for scrollLeft and scrollTop, we invert the values.
+				vars.end = a = [];
+				l = snap.length;
+				if (_isObject(snap[0])) { //if the array is populated with objects, like points ({x:100, y:200}), make copies before multiplying by the factor, otherwise we'll mess up the originals and the user may reuse it elsewhere.
+					for (i = 0; i < l; i++) {
+						a[i] = _copy(snap[i], factor);
+					}
+				} else {
+					for (i = 0; i < l; i++) {
+						a[i] = snap[i] * factor;
+					}
+				}
+				max += 1.1; //allow 1.1 pixels of wiggle room when snapping in order to work around some browser inconsistencies in the way bounds are reported which can make them roughly a pixel off. For example, if "snap:[-$('#menu').width(), 0]" was defined and #menu had a wrapper that was used as the bounds, some browsers would be one pixel off, making the minimum -752 for example when snap was [-753,0], thus instead of snapping to -753, it would snap to 0 since -753 was below the minimum.
+				min -= 1.1;
+			} else if (_isFunction(snap)) {
+				vars.end = value => {
+					let result = snap.call(draggable, value),
+						copy, p;
+					if (factor !== 1) {
+						if (_isObject(result)) {
+							copy = {};
+							for (p in result) {
+								copy[p] = result[p] * factor;
+							}
+							result = copy;
+						} else {
+							result *= factor;
+						}
+					}
+					return result; //we need to ensure that we can scope the function call to the Draggable instance itself so that users can access important values like maxX, minX, maxY, minY, x, and y from within that function.
+				};
+			} else {
+				vars.end = snap;
+			}
+		}
+		if (max || max === 0) {
+			vars.max = max;
+		}
+		if (min || min === 0) {
+			vars.min = min;
+		}
+		if (forceZeroVelocity) {
+			vars.velocity = 0;
+		}
+		return vars;
+	},
+	_isClickable = element => { //sometimes it's convenient to mark an element as clickable by adding a data-clickable="true" attribute (in which case we won't preventDefault() the mouse/touch event). This method checks if the element is an <a>, <input>, or <button> or has the data-clickable or contentEditable attribute set to true (or any of its parent elements).
+		let data;
+		return (!element || !element.getAttribute || element === _body) ? false : ((data = element.getAttribute("data-clickable")) === "true" || (data !== "false" && (_clickableTagExp.test(element.nodeName + "") || element.getAttribute("contentEditable") === "true"))) ? true : _isClickable(element.parentNode);
+	},
+	_setSelectable = (elements, selectable) => {
+		let i = elements.length,
+			e;
+		while (i--) {
+			e = elements[i];
+			e.ondragstart = e.onselectstart = selectable ? null : _emptyFunc;
+			gsap.set(e, {lazy:true, userSelect: (selectable ? "text" : "none")});
+		}
+	},
+	_isFixed = element => {
+		if (_getComputedStyle(element).position === "fixed") {
+			return true;
+		}
+		element = element.parentNode;
+		if (element && element.nodeType === 1) { // avoid document fragments which will throw an error.
+			return _isFixed(element);
+		}
+	},
+	_supports3D, _addPaddingBR,
+
+	//The ScrollProxy class wraps an element's contents into another div (we call it "content") that we either add padding when necessary or apply a translate3d() transform in order to overscroll (scroll past the boundaries). This allows us to simply set the scrollTop/scrollLeft (or top/left for easier reverse-axis orientation, which is what we do in Draggable) and it'll do all the work for us. For example, if we tried setting scrollTop to -100 on a normal DOM element, it wouldn't work - it'd look the same as setting it to 0, but if we set scrollTop of a ScrollProxy to -100, it'll give the correct appearance by either setting paddingTop of the wrapper to 100 or applying a 100-pixel translateY.
+	ScrollProxy = function(element, vars) {
+		element = gsap.utils.toArray(element)[0];
+		vars = vars || {};
+		let content = document.createElement("div"),
+			style = content.style,
+			node = element.firstChild,
+			offsetTop = 0,
+			offsetLeft = 0,
+			prevTop = element.scrollTop,
+			prevLeft = element.scrollLeft,
+			scrollWidth = element.scrollWidth,
+			scrollHeight = element.scrollHeight,
+			extraPadRight = 0,
+			maxLeft = 0,
+			maxTop = 0,
+			elementWidth, elementHeight, contentHeight, nextNode, transformStart, transformEnd;
+		if (_supports3D && vars.force3D !== false) {
+			transformStart = "translate3d(";
+			transformEnd = "px,0px)";
+		} else if (_transformProp) {
+			transformStart = "translate(";
+			transformEnd = "px)";
+		}
+		this.scrollTop = function(value, force) {
+			if (!arguments.length) {
+				return -this.top();
+			}
+			this.top(-value, force);
+		};
+		this.scrollLeft = function(value, force) {
+			if (!arguments.length) {
+				return -this.left();
+			}
+			this.left(-value, force);
+		};
+		this.left = function(value, force) {
+			if (!arguments.length) {
+				return -(element.scrollLeft + offsetLeft);
+			}
+			let dif = element.scrollLeft - prevLeft,
+				oldOffset = offsetLeft;
+			if ((dif > 2 || dif < -2) && !force) { //if the user interacts with the scrollbar (or something else scrolls it, like the mouse wheel), we should kill any tweens of the ScrollProxy.
+				prevLeft = element.scrollLeft;
+				gsap.killTweensOf(this, {left:1, scrollLeft:1});
+				this.left(-prevLeft);
+				if (vars.onKill) {
+					vars.onKill();
+				}
+				return;
+			}
+			value = -value; //invert because scrolling works in the opposite direction
+			if (value < 0) {
+				offsetLeft = (value - 0.5) | 0;
+				value = 0;
+			} else if (value > maxLeft) {
+				offsetLeft = (value - maxLeft) | 0;
+				value = maxLeft;
+			} else {
+				offsetLeft = 0;
+			}
+			if (offsetLeft || oldOffset) {
+				if (!this._skip) {
+					style[_transformProp] = transformStart + -offsetLeft + "px," + -offsetTop + transformEnd;
+				}
+				if (offsetLeft + extraPadRight >= 0) {
+					style.paddingRight =  offsetLeft + extraPadRight + "px";
+				}
+			}
+			element.scrollLeft = value | 0;
+			prevLeft = element.scrollLeft; //don't merge this with the line above because some browsers adjust the scrollLeft after it's set, so in order to be 100% accurate in tracking it, we need to ask the browser to report it.
+		};
+		this.top = function(value, force) {
+			if (!arguments.length) {
+				return -(element.scrollTop + offsetTop);
+			}
+			let dif = element.scrollTop - prevTop,
+				oldOffset = offsetTop;
+			if ((dif > 2 || dif < -2) && !force) { //if the user interacts with the scrollbar (or something else scrolls it, like the mouse wheel), we should kill any tweens of the ScrollProxy.
+				prevTop = element.scrollTop;
+				gsap.killTweensOf(this, {top:1, scrollTop:1});
+				this.top(-prevTop);
+				if (vars.onKill) {
+					vars.onKill();
+				}
+				return;
+			}
+			value = -value; //invert because scrolling works in the opposite direction
+			if (value < 0) {
+				offsetTop = (value - 0.5) | 0;
+				value = 0;
+			} else if (value > maxTop) {
+				offsetTop = (value - maxTop) | 0;
+				value = maxTop;
+			} else {
+				offsetTop = 0;
+			}
+			if (offsetTop || oldOffset) {
+				if (!this._skip) {
+					style[_transformProp] = transformStart + -offsetLeft + "px," + -offsetTop + transformEnd;
+				}
+			}
+			element.scrollTop = value | 0;
+			prevTop = element.scrollTop;
+		};
+
+		this.maxScrollTop = () => maxTop;
+		this.maxScrollLeft = () => maxLeft;
+
+		this.disable = function() {
+			node = content.firstChild;
+			while (node) {
+				nextNode = node.nextSibling;
+				element.appendChild(node);
+				node = nextNode;
+			}
+			if (element === content.parentNode) { //in case disable() is called when it's already disabled.
+				element.removeChild(content);
+			}
+		};
+		this.enable = function() {
+			node = element.firstChild;
+			if (node === content) {
+				return;
+			}
+			while (node) {
+				nextNode = node.nextSibling;
+				content.appendChild(node);
+				node = nextNode;
+			}
+			element.appendChild(content);
+			this.calibrate();
+		};
+		this.calibrate = function(force) {
+			let widthMatches = (element.clientWidth === elementWidth),
+				cs, x, y;
+			prevTop = element.scrollTop;
+			prevLeft = element.scrollLeft;
+			if (widthMatches && element.clientHeight === elementHeight && content.offsetHeight === contentHeight && scrollWidth === element.scrollWidth && scrollHeight === element.scrollHeight && !force) {
+				return; //no need to recalculate things if the width and height haven't changed.
+			}
+			if (offsetTop || offsetLeft) {
+				x = this.left();
+				y = this.top();
+				this.left(-element.scrollLeft);
+				this.top(-element.scrollTop);
+			}
+			cs = _getComputedStyle(element);
+			//first, we need to remove any width constraints to see how the content naturally flows so that we can see if it's wider than the containing element. If so, we've got to record the amount of overage so that we can apply that as padding in order for browsers to correctly handle things. Then we switch back to a width of 100% (without that, some browsers don't flow the content correctly)
+			if (!widthMatches || force) {
+				style.display = "block";
+				style.width = "auto";
+				style.paddingRight = "0px";
+				extraPadRight = Math.max(0, element.scrollWidth - element.clientWidth);
+				//if the content is wider than the container, we need to add the paddingLeft and paddingRight in order for things to behave correctly.
+				if (extraPadRight) {
+					extraPadRight += parseFloat(cs.paddingLeft) + (_addPaddingBR ? parseFloat(cs.paddingRight) : 0);
+				}
+			}
+			style.display = "inline-block";
+			style.position = "relative";
+			style.overflow = "visible";
+			style.verticalAlign = "top";
+			style.boxSizing = "content-box";
+			style.width = "100%";
+			style.paddingRight = extraPadRight + "px";
+			//some browsers neglect to factor in the bottom padding when calculating the scrollHeight, so we need to add that padding to the content when that happens. Allow a 2px margin for error
+			if (_addPaddingBR) {
+				style.paddingBottom = cs.paddingBottom;
+			}
+			elementWidth = element.clientWidth;
+			elementHeight = element.clientHeight;
+			scrollWidth = element.scrollWidth;
+			scrollHeight = element.scrollHeight;
+			maxLeft = element.scrollWidth - elementWidth;
+			maxTop = element.scrollHeight - elementHeight;
+			contentHeight = content.offsetHeight;
+			style.display = "block";
+			if (x || y) {
+				this.left(x);
+				this.top(y);
+			}
+		};
+		this.content = content;
+		this.element = element;
+		this._skip = false;
+		this.enable();
+	},
+	_initCore = required => {
+		if (_windowExists() && document.body) {
+			let nav = window && window.navigator;
+			_win = window;
+			_doc = document;
+			_docElement = _doc.documentElement;
+			_body = _doc.body;
+			_tempDiv = _createElement("div");
+			_supportsPointer = !!window.PointerEvent;
+			_placeholderDiv = _createElement("div");
+			_placeholderDiv.style.cssText = "visibility:hidden;height:1px;top:-1px;pointer-events:none;position:relative;clear:both;cursor:grab";
+			_defaultCursor = _placeholderDiv.style.cursor === "grab" ? "grab" : "move";
+			_isAndroid = (nav && nav.userAgent.toLowerCase().indexOf("android") !== -1); //Android handles touch events in an odd way and it's virtually impossible to "feature test" so we resort to UA sniffing
+			_isTouchDevice = (("ontouchstart" in _docElement) && ("orientation" in _win)) || (nav && (nav.MaxTouchPoints > 0 || nav.msMaxTouchPoints > 0));
+			_addPaddingBR = (function() { //this function is in charge of analyzing browser behavior related to padding. It sets the _addPaddingBR to true if the browser doesn't normally factor in the bottom or right padding on the element inside the scrolling area, and it sets _addPaddingLeft to true if it's a browser that requires the extra offset (offsetLeft) to be added to the paddingRight (like Opera).
+				let div = _createElement("div"),
+					child = _createElement("div"),
+					childStyle = child.style,
+					parent = _body,
+					val;
+				childStyle.display = "inline-block";
+				childStyle.position = "relative";
+				div.style.cssText = "width:90px;height:40px;padding:10px;overflow:auto;visibility:hidden";
+				div.appendChild(child);
+				parent.appendChild(div);
+				val = (child.offsetHeight + 18 > div.scrollHeight); //div.scrollHeight should be child.offsetHeight + 20 because of the 10px of padding on each side, but some browsers ignore one side. We allow a 2px margin of error.
+				parent.removeChild(div);
+				return val;
+			}());
+			_touchEventLookup = (function(types) { //we create an object that makes it easy to translate touch event types into their "pointer" counterparts if we're in a browser that uses those instead. Like IE10 uses "MSPointerDown" instead of "touchstart", for example.
+				let standard = types.split(","),
+					converted = ("onpointerdown" in _tempDiv ? "pointerdown,pointermove,pointerup,pointercancel" : "onmspointerdown" in _tempDiv ? "MSPointerDown,MSPointerMove,MSPointerUp,MSPointerCancel" : types).split(","),
+					obj = {},
+					i = 4;
+				while (--i > -1) {
+					obj[standard[i]] = converted[i];
+					obj[converted[i]] = standard[i];
+				}
+				//to avoid problems in iOS 9, test to see if the browser supports the "passive" option on addEventListener().
+				try {
+					_docElement.addEventListener("test", null, Object.defineProperty({}, "passive", {
+						get: function () {
+							_supportsPassive = 1;
+						}
+					}));
+				} catch (e) {}
+				return obj;
+			}("touchstart,touchmove,touchend,touchcancel"));
+			_addListener(_doc, "touchcancel", _emptyFunc); //some older Android devices intermittently stop dispatching "touchmove" events if we don't listen for "touchcancel" on the document. Very strange indeed.
+			_addListener(_win, "touchmove", _emptyFunc); //works around Safari bugs that still allow the page to scroll even when we preventDefault() on the touchmove event.
+			_body && _body.addEventListener("touchstart", _emptyFunc); //works around Safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/
+			_addListener(_doc, "contextmenu", function() {
+				for (let p in _lookup) {
+					if (_lookup[p].isPressed) {
+						_lookup[p].endDrag();
+					}
+				}
+			});
+			gsap = _coreInitted = _getGSAP();
+		}
+		if (gsap) {
+			InertiaPlugin = gsap.plugins.inertia;
+			_context = gsap.core.context || function() {};
+			_checkPrefix = gsap.utils.checkPrefix;
+			_transformProp = _checkPrefix(_transformProp);
+			_transformOriginProp = _checkPrefix(_transformOriginProp);
+			_toArray = gsap.utils.toArray;
+			_getStyleSaver = gsap.core.getStyleSaver;
+			_supports3D = !!_checkPrefix("perspective");
+		} else if (required) {
+			console.warn("Please gsap.registerPlugin(Draggable)");
+		}
+	};
+
+
+
+
+
+
+class EventDispatcher {
+
+	constructor(target) {
+		this._listeners = {};
+		this.target = target || this;
+	}
+
+	addEventListener(type, callback) {
+		let list = this._listeners[type] || (this._listeners[type] = []);
+		if (!~list.indexOf(callback)) {
+			list.push(callback);
+		}
+	}
+
+	removeEventListener(type, callback) {
+		let list = this._listeners[type],
+			i = (list && list.indexOf(callback));
+		(i >= 0) && list.splice(i, 1);
+	}
+
+	dispatchEvent(type) {
+		let result;
+		(this._listeners[type] || []).forEach(callback => (callback.call(this, {type: type, target: this.target}) === false) && (result = false));
+		return result; //if any of the callbacks return false, pass that along.
+	}
+}
+
+
+
+
+
+
+
+
+
+class Draggable extends EventDispatcher {
+
+	constructor(target, vars) {
+		super();
+		_coreInitted || _initCore(1);
+		target = _toArray(target)[0]; //in case the target is a selector object or selector text
+		this.styles = _getStyleSaver && _getStyleSaver(target, "transform,left,top");
+		if (!InertiaPlugin) {
+			InertiaPlugin = gsap.plugins.inertia;
+		}
+		this.vars = vars = _copy(vars || {});
+		this.target = target;
+		this.x = this.y = this.rotation = 0;
+		this.dragResistance = parseFloat(vars.dragResistance) || 0;
+		this.edgeResistance = isNaN(vars.edgeResistance) ? 1 : parseFloat(vars.edgeResistance) || 0;
+		this.lockAxis = vars.lockAxis;
+		this.autoScroll = vars.autoScroll || 0;
+		this.lockedAxis = null;
+		this.allowEventDefault = !!vars.allowEventDefault;
+
+		gsap.getProperty(target, "x"); // to ensure that transforms are instantiated.
+
+		let type = (vars.type || "x,y").toLowerCase(),
+			xyMode = (~type.indexOf("x") || ~type.indexOf("y")),
+			rotationMode = (type.indexOf("rotation") !== -1),
+			xProp = rotationMode ? "rotation" : xyMode ? "x" : "left",
+			yProp = xyMode ? "y" : "top",
+			allowX = !!(~type.indexOf("x") || ~type.indexOf("left") || type === "scroll"),
+			allowY = !!(~type.indexOf("y") || ~type.indexOf("top") || type === "scroll"),
+			minimumMovement = vars.minimumMovement || 2,
+			self = this,
+			triggers = _toArray(vars.trigger || vars.handle || target),
+			killProps = {},
+			dragEndTime = 0,
+			checkAutoScrollBounds = false,
+			autoScrollMarginTop = vars.autoScrollMarginTop || 40,
+			autoScrollMarginRight = vars.autoScrollMarginRight || 40,
+			autoScrollMarginBottom = vars.autoScrollMarginBottom || 40,
+			autoScrollMarginLeft = vars.autoScrollMarginLeft || 40,
+			isClickable = vars.clickableTest || _isClickable,
+			clickTime = 0,
+			gsCache = target._gsap || gsap.core.getCache(target),
+			isFixed = _isFixed(target),
+			getPropAsNum = (property, unit) => parseFloat(gsCache.get(target, property, unit)),
+			ownerDoc = target.ownerDocument || _doc,
+			enabled, scrollProxy, startPointerX, startPointerY, startElementX, startElementY, hasBounds, hasDragCallback, hasMoveCallback, maxX, minX, maxY, minY, touch, touchID, rotationOrigin, dirty, old, snapX, snapY, snapXY, isClicking, touchEventTarget, matrix, interrupted, allowNativeTouchScrolling, touchDragAxis, isDispatching, clickDispatch, trustedClickDispatch, isPreventingDefault, innerMatrix, dragged,
+
+			onContextMenu = e => { //used to prevent long-touch from triggering a context menu.
+				// (self.isPressed && e.which < 2) && self.endDrag() // previously ended drag when context menu was triggered, but instead we should just stop propagation and prevent the default event behavior.
+				_preventDefault(e);
+				e.stopImmediatePropagation && e.stopImmediatePropagation();
+				return false;
+			},
+
+			//this method gets called on every tick of TweenLite.ticker which allows us to synchronize the renders to the core engine (which is typically synchronized with the display refresh via requestAnimationFrame). This is an optimization - it's better than applying the values inside the "mousemove" or "touchmove" event handler which may get called many times inbetween refreshes.
+			render = suppressEvents => {
+				if (self.autoScroll && self.isDragging && (checkAutoScrollBounds || dirty)) {
+					let e = target,
+						autoScrollFactor = self.autoScroll * 15, //multiplying by 15 just gives us a better "feel" speed-wise.
+						parent, isRoot, rect, pointerX, pointerY, changeX, changeY, gap;
+					checkAutoScrollBounds = false;
+					_windowProxy.scrollTop = ((_win.pageYOffset != null) ? _win.pageYOffset : (ownerDoc.documentElement.scrollTop != null) ? ownerDoc.documentElement.scrollTop : ownerDoc.body.scrollTop);
+					_windowProxy.scrollLeft = ((_win.pageXOffset != null) ? _win.pageXOffset : (ownerDoc.documentElement.scrollLeft != null) ? ownerDoc.documentElement.scrollLeft : ownerDoc.body.scrollLeft);
+					pointerX = self.pointerX - _windowProxy.scrollLeft;
+					pointerY = self.pointerY - _windowProxy.scrollTop;
+					while (e && !isRoot) { //walk up the chain and sense wherever the pointer is within 40px of an edge that's scrollable.
+						isRoot = _isRoot(e.parentNode);
+						parent = isRoot ? _windowProxy : e.parentNode;
+						rect = isRoot ? {bottom:Math.max(_docElement.clientHeight, _win.innerHeight || 0), right: Math.max(_docElement.clientWidth, _win.innerWidth || 0), left:0, top:0} : parent.getBoundingClientRect();
+						changeX = changeY = 0;
+						if (allowY) {
+							gap = parent._gsMaxScrollY - parent.scrollTop;
+							if (gap < 0) {
+								changeY = gap;
+							} else if (pointerY > rect.bottom - autoScrollMarginBottom && gap) {
+								checkAutoScrollBounds = true;
+								changeY = Math.min(gap, (autoScrollFactor * (1 - Math.max(0, (rect.bottom - pointerY)) / autoScrollMarginBottom)) | 0);
+							} else if (pointerY < rect.top + autoScrollMarginTop && parent.scrollTop) {
+								checkAutoScrollBounds = true;
+								changeY = -Math.min(parent.scrollTop, (autoScrollFactor * (1 - Math.max(0, (pointerY - rect.top)) / autoScrollMarginTop)) | 0);
+							}
+							if (changeY) {
+								parent.scrollTop += changeY;
+							}
+						}
+						if (allowX) {
+							gap = parent._gsMaxScrollX - parent.scrollLeft;
+							if (gap < 0) {
+								changeX = gap;
+							} else if (pointerX > rect.right - autoScrollMarginRight && gap) {
+								checkAutoScrollBounds = true;
+								changeX = Math.min(gap, (autoScrollFactor * (1 - Math.max(0, (rect.right - pointerX)) / autoScrollMarginRight)) | 0);
+							} else if (pointerX < rect.left + autoScrollMarginLeft && parent.scrollLeft) {
+								checkAutoScrollBounds = true;
+								changeX = -Math.min(parent.scrollLeft, (autoScrollFactor * (1 - Math.max(0, (pointerX - rect.left)) / autoScrollMarginLeft)) | 0);
+							}
+							if (changeX) {
+								parent.scrollLeft += changeX;
+							}
+						}
+
+						if (isRoot && (changeX || changeY)) {
+							_win.scrollTo(parent.scrollLeft, parent.scrollTop);
+							setPointerPosition(self.pointerX + changeX, self.pointerY + changeY);
+						}
+						e = parent;
+					}
+				}
+				if (dirty) {
+					let {x, y} = self;
+					if (rotationMode) {
+						self.deltaX = x - parseFloat(gsCache.rotation);
+						self.rotation = x;
+						gsCache.rotation = x + "deg";
+						gsCache.renderTransform(1, gsCache);
+					} else {
+						if (scrollProxy) {
+							if (allowY) {
+								self.deltaY = y - scrollProxy.top();
+								scrollProxy.top(y);
+							}
+							if (allowX) {
+								self.deltaX = x - scrollProxy.left();
+								scrollProxy.left(x);
+							}
+						} else if (xyMode) {
+							if (allowY) {
+								self.deltaY = y - parseFloat(gsCache.y);
+								gsCache.y = y + "px";
+							}
+							if (allowX) {
+								self.deltaX = x - parseFloat(gsCache.x);
+								gsCache.x = x + "px";
+							}
+							gsCache.renderTransform(1, gsCache);
+						} else {
+							if (allowY) {
+								self.deltaY = y - parseFloat(target.style.top || 0);
+								target.style.top = y + "px";
+							}
+							if (allowX) {
+								self.deltaX = x - parseFloat(target.style.left || 0);
+								target.style.left = x + "px";
+							}
+						}
+					}
+					if (hasDragCallback && !suppressEvents && !isDispatching) {
+						isDispatching = true; //in case onDrag has an update() call (avoid endless loop)
+						if (_dispatchEvent(self, "drag", "onDrag") === false) {
+							if (allowX) {
+								self.x -= self.deltaX;
+							}
+							if (allowY) {
+								self.y -= self.deltaY;
+							}
+							render(true);
+						}
+						isDispatching = false;
+					}
+				}
+				dirty = false;
+			},
+
+			//copies the x/y from the element (whether that be transforms, top/left, or ScrollProxy's top/left) to the Draggable's x and y (and rotation if necessary) properties so that they reflect reality and it also (optionally) applies any snapping necessary. This is used by the InertiaPlugin tween in an onUpdate to ensure things are synced and snapped.
+			syncXY = (skipOnUpdate, skipSnap) => {
+				let { x, y } = self,
+					snappedValue, cs;
+				if (!target._gsap) { //just in case the _gsap cache got wiped, like if the user called clearProps on the transform or something (very rare).
+					gsCache = gsap.core.getCache(target);
+				}
+				gsCache.uncache && gsap.getProperty(target, "x"); // trigger a re-cache
+				if (xyMode) {
+					self.x = parseFloat(gsCache.x);
+					self.y = parseFloat(gsCache.y);
+				} else if (rotationMode) {
+					self.x = self.rotation = parseFloat(gsCache.rotation);
+				} else if (scrollProxy) {
+					self.y = scrollProxy.top();
+					self.x = scrollProxy.left();
+				} else {
+					self.y = parseFloat(target.style.top || ((cs = _getComputedStyle(target)) && cs.top)) || 0;
+					self.x = parseFloat(target.style.left || (cs || {}).left) || 0;
+				}
+				if ((snapX || snapY || snapXY) && !skipSnap && (self.isDragging || self.isThrowing)) {
+					if (snapXY) {
+						_temp1.x = self.x;
+						_temp1.y = self.y;
+						snappedValue = snapXY(_temp1);
+						if (snappedValue.x !== self.x) {
+							self.x = snappedValue.x;
+							dirty = true;
+						}
+						if (snappedValue.y !== self.y) {
+							self.y = snappedValue.y;
+							dirty = true;
+						}
+					}
+					if (snapX) {
+						snappedValue = snapX(self.x);
+						if (snappedValue !== self.x) {
+							self.x = snappedValue;
+							if (rotationMode) {
+								self.rotation = snappedValue;
+							}
+							dirty = true;
+						}
+					}
+					if (snapY) {
+						snappedValue = snapY(self.y);
+						if (snappedValue !== self.y) {
+							self.y = snappedValue;
+						}
+						dirty = true;
+					}
+				}
+				dirty && render(true);
+				if (!skipOnUpdate) {
+					self.deltaX = self.x - x;
+					self.deltaY = self.y - y;
+					_dispatchEvent(self, "throwupdate", "onThrowUpdate");
+				}
+			},
+
+			buildSnapFunc = (snap, min, max, factor) => {
+				if (min == null) {
+					min = -_bigNum;
+				}
+				if (max == null) {
+					max = _bigNum;
+				}
+				if (_isFunction(snap)) {
+					return n => {
+						let edgeTolerance = !self.isPressed ? 1 : 1 - self.edgeResistance; //if we're tweening, disable the edgeTolerance because it's already factored into the tweening values (we don't want to apply it multiple times)
+						return snap.call(self, (n > max ? max + (n - max) * edgeTolerance : (n < min) ? min + (n - min) * edgeTolerance : n) * factor) * factor;
+					};
+				}
+				if (_isArray(snap)) {
+					return n => {
+						let i = snap.length,
+							closest = 0,
+							absDif = _bigNum,
+							val, dif;
+						while (--i > -1) {
+							val = snap[i];
+							dif = val - n;
+							if (dif < 0) {
+								dif = -dif;
+							}
+							if (dif < absDif && val >= min && val <= max) {
+								closest = i;
+								absDif = dif;
+							}
+						}
+						return snap[closest];
+					};
+				}
+				return isNaN(snap) ? n => n : () => snap * factor;
+			},
+
+			buildPointSnapFunc = (snap, minX, maxX, minY, maxY, radius, factor) => {
+				radius = (radius && radius < _bigNum) ? radius * radius : _bigNum; //so we don't have to Math.sqrt() in the functions. Performance optimization.
+				if (_isFunction(snap)) {
+					return point => {
+						let edgeTolerance = !self.isPressed ? 1 : 1 - self.edgeResistance,
+							x = point.x,
+							y = point.y,
+							result, dx, dy; //if we're tweening, disable the edgeTolerance because it's already factored into the tweening values (we don't want to apply it multiple times)
+						point.x = x = (x > maxX ? maxX + (x - maxX) * edgeTolerance : (x < minX) ? minX + (x - minX) * edgeTolerance : x);
+						point.y = y = (y > maxY ? maxY + (y - maxY) * edgeTolerance : (y < minY) ? minY + (y - minY) * edgeTolerance : y);
+						result = snap.call(self, point);
+						if (result !== point) {
+							point.x = result.x;
+							point.y = result.y;
+						}
+						if (factor !== 1) {
+							point.x *= factor;
+							point.y *= factor;
+						}
+						if (radius < _bigNum) {
+							dx = point.x - x;
+							dy = point.y - y;
+							if (dx * dx + dy * dy > radius) {
+								point.x = x;
+								point.y = y;
+							}
+						}
+						return point;
+					};
+				}
+				if (_isArray(snap)) {
+					return p => {
+						let i = snap.length,
+							closest = 0,
+							minDist = _bigNum,
+							x, y, point, dist;
+						while (--i > -1) {
+							point = snap[i];
+							x = point.x - p.x;
+							y = point.y - p.y;
+							dist = x * x + y * y;
+							if (dist < minDist) {
+								closest = i;
+								minDist = dist;
+							}
+						}
+						return (minDist <= radius) ? snap[closest] : p;
+					};
+				}
+				return n => n;
+			},
+
+			calculateBounds = () => {
+				let bounds, targetBounds, snap, snapIsRaw;
+				hasBounds = false;
+				if (scrollProxy) {
+					scrollProxy.calibrate();
+					self.minX = minX = -scrollProxy.maxScrollLeft();
+					self.minY = minY = -scrollProxy.maxScrollTop();
+					self.maxX = maxX = self.maxY = maxY = 0;
+					hasBounds = true;
+				} else if (!!vars.bounds) {
+					bounds = _getBounds(vars.bounds, target.parentNode); //could be a selector/jQuery object or a DOM element or a generic object like {top:0, left:100, width:1000, height:800} or {minX:100, maxX:1100, minY:0, maxY:800}
+					if (rotationMode) {
+						self.minX = minX = bounds.left;
+						self.maxX = maxX = bounds.left + bounds.width;
+						self.minY = minY = self.maxY = maxY = 0;
+					} else if (!_isUndefined(vars.bounds.maxX) || !_isUndefined(vars.bounds.maxY)) {
+						bounds = vars.bounds;
+						self.minX = minX = bounds.minX;
+						self.minY = minY = bounds.minY;
+						self.maxX = maxX = bounds.maxX;
+						self.maxY = maxY = bounds.maxY;
+					} else {
+						targetBounds = _getBounds(target, target.parentNode);
+						self.minX = minX = Math.round(getPropAsNum(xProp, "px") + bounds.left - targetBounds.left);
+						self.minY = minY = Math.round(getPropAsNum(yProp, "px") + bounds.top - targetBounds.top);
+						self.maxX = maxX = Math.round(minX + (bounds.width - targetBounds.width));
+						self.maxY = maxY = Math.round(minY + (bounds.height - targetBounds.height));
+					}
+					if (minX > maxX) {
+						self.minX = maxX;
+						self.maxX = maxX = minX;
+						minX = self.minX;
+					}
+					if (minY > maxY) {
+						self.minY = maxY;
+						self.maxY = maxY = minY;
+						minY = self.minY;
+					}
+					if (rotationMode) {
+						self.minRotation = minX;
+						self.maxRotation = maxX;
+					}
+					hasBounds = true;
+				}
+				if (vars.liveSnap) {
+					snap = (vars.liveSnap === true) ? (vars.snap || {}) : vars.liveSnap;
+					snapIsRaw = (_isArray(snap) || _isFunction(snap));
+					if (rotationMode) {
+						snapX = buildSnapFunc((snapIsRaw ? snap : snap.rotation), minX, maxX, 1);
+						snapY = null;
+					} else {
+						if (snap.points) {
+							snapXY = buildPointSnapFunc((snapIsRaw ? snap : snap.points), minX, maxX, minY, maxY, snap.radius, scrollProxy ? -1 : 1);
+						} else {
+							if (allowX) {
+								snapX = buildSnapFunc((snapIsRaw ? snap : snap.x || snap.left || snap.scrollLeft), minX, maxX, scrollProxy ? -1 : 1);
+							}
+							if (allowY) {
+								snapY = buildSnapFunc((snapIsRaw ? snap : snap.y || snap.top || snap.scrollTop), minY, maxY, scrollProxy ? -1 : 1);
+							}
+						}
+					}
+				}
+			},
+
+			onThrowComplete = () => {
+				self.isThrowing = false;
+				_dispatchEvent(self, "throwcomplete", "onThrowComplete");
+			},
+			onThrowInterrupt = () => {
+				self.isThrowing = false;
+			},
+
+			animate = (inertia, forceZeroVelocity) => {
+				let snap, snapIsRaw, tween, overshootTolerance;
+				if (inertia && InertiaPlugin) {
+					if (inertia === true) {
+						snap = vars.snap || vars.liveSnap || {};
+						snapIsRaw = (_isArray(snap) || _isFunction(snap));
+						inertia = {resistance:(vars.throwResistance || vars.resistance || 1000) / (rotationMode ? 10 : 1)};
+						if (rotationMode) {
+							inertia.rotation = _parseInertia(self, snapIsRaw ? snap : snap.rotation, maxX, minX, 1, forceZeroVelocity);
+						} else {
+							if (allowX) {
+								inertia[xProp] = _parseInertia(self, snapIsRaw ? snap : snap.points || snap.x || snap.left, maxX, minX, scrollProxy ? -1 : 1, forceZeroVelocity || (self.lockedAxis === "x"));
+							}
+							if (allowY) {
+								inertia[yProp] = _parseInertia(self, snapIsRaw ? snap : snap.points || snap.y || snap.top, maxY, minY, scrollProxy ? -1 : 1, forceZeroVelocity || (self.lockedAxis === "y"));
+							}
+							if (snap.points || (_isArray(snap) && _isObject(snap[0]))) {
+								inertia.linkedProps = xProp + "," + yProp;
+								inertia.radius = snap.radius; //note: we also disable liveSnapping while throwing if there's a "radius" defined, otherwise it looks weird to have the item thrown past a snapping point but live-snapping mid-tween. We do this by altering the onUpdateParams so that "skipSnap" parameter is true for syncXY.
+							}
+						}
+					}
+					self.isThrowing = true;
+					overshootTolerance = (!isNaN(vars.overshootTolerance)) ? vars.overshootTolerance : (vars.edgeResistance === 1) ? 0 : (1 - self.edgeResistance) + 0.2;
+					if (!inertia.duration) {
+						inertia.duration = {max: Math.max(vars.minDuration || 0, ("maxDuration" in vars) ? vars.maxDuration : 2), min: (!isNaN(vars.minDuration) ? vars.minDuration : (overshootTolerance === 0 || (_isObject(inertia) && inertia.resistance > 1000)) ? 0 : 0.5), overshoot: overshootTolerance};
+					}
+					self.tween = tween = gsap.to(scrollProxy || target, {
+						inertia: inertia,
+						data: "_draggable",
+						inherit: false,
+						onComplete: onThrowComplete,
+						onInterrupt: onThrowInterrupt,
+						onUpdate: (vars.fastMode ? _dispatchEvent : syncXY),
+						onUpdateParams: (vars.fastMode ? [self, "onthrowupdate", "onThrowUpdate"] : (snap && snap.radius) ? [false, true] : [])
+					});
+					if (!vars.fastMode) {
+						if (scrollProxy) {
+							scrollProxy._skip = true; // Microsoft browsers have a bug that causes them to briefly render the position incorrectly (it flashes to the end state when we seek() the tween even though we jump right back to the current position, and this only seems to happen when we're affecting both top and left), so we set a _suspendTransforms flag to prevent it from actually applying the values in the ScrollProxy.
+						}
+						tween.render(1e9, true, true); // force to the end. Remember, the duration will likely change upon initting because that's when InertiaPlugin calculates it.
+						syncXY(true, true);
+						self.endX = self.x;
+						self.endY = self.y;
+						if (rotationMode) {
+							self.endRotation = self.x;
+						}
+						tween.play(0);
+						syncXY(true, true);
+						if (scrollProxy) {
+							scrollProxy._skip = false; //Microsoft browsers have a bug that causes them to briefly render the position incorrectly (it flashes to the end state when we seek() the tween even though we jump right back to the current position, and this only seems to happen when we're affecting both top and left), so we set a _suspendTransforms flag to prevent it from actually applying the values in the ScrollProxy.
+						}
+					}
+				} else if (hasBounds) {
+					self.applyBounds();
+				}
+			},
+
+			updateMatrix = shiftStart => {
+				let start = matrix,
+					p;
+				matrix = getGlobalMatrix(target.parentNode, true);
+				if (shiftStart && self.isPressed && !matrix.equals(start || new Matrix2D())) { //if the matrix changes WHILE the element is pressed, we must adjust the startPointerX and startPointerY accordingly, so we invert the original matrix and figure out where the pointerX and pointerY were in the global space, then apply the new matrix to get the updated coordinates.
+					p = start.inverse().apply({x:startPointerX, y:startPointerY});
+					matrix.apply(p, p);
+					startPointerX = p.x;
+					startPointerY = p.y;
+				}
+				if (matrix.equals(_identityMatrix)) { //if there are no transforms, we can optimize performance by not factoring in the matrix
+					matrix = null;
+				}
+			},
+
+			recordStartPositions = () => {
+				let edgeTolerance = 1 - self.edgeResistance,
+					offsetX = isFixed ? _getDocScrollLeft(ownerDoc) : 0,
+					offsetY = isFixed ? _getDocScrollTop(ownerDoc) : 0,
+					parsedOrigin, x, y;
+				if (xyMode) { // in case the user set it as a different unit, like animating the x to "100%". We must convert it back to px!
+					gsCache.x = getPropAsNum(xProp, "px") + "px";
+					gsCache.y = getPropAsNum(yProp, "px") + "px";
+					gsCache.renderTransform();
+				}
+				updateMatrix(false);
+				_point1.x = self.pointerX - offsetX;
+				_point1.y = self.pointerY - offsetY;
+				matrix && matrix.apply(_point1, _point1);
+				startPointerX = _point1.x; //translate to local coordinate system
+				startPointerY = _point1.y;
+				if (dirty) {
+					setPointerPosition(self.pointerX, self.pointerY);
+					render(true);
+				}
+				innerMatrix = getGlobalMatrix(target);
+				if (scrollProxy) {
+					calculateBounds();
+					startElementY = scrollProxy.top();
+					startElementX = scrollProxy.left();
+				} else {
+					//if the element is in the process of tweening, don't force snapping to occur because it could make it jump. Imagine the user throwing, then before it's done, clicking on the element in its inbetween state.
+					if (isTweening()) {
+						syncXY(true, true);
+						calculateBounds();
+					} else {
+						self.applyBounds();
+					}
+					if (rotationMode) {
+						parsedOrigin = target.ownerSVGElement ? [gsCache.xOrigin - target.getBBox().x, gsCache.yOrigin - target.getBBox().y] : (_getComputedStyle(target)[_transformOriginProp] || "0 0").split(" ");
+						rotationOrigin = self.rotationOrigin = getGlobalMatrix(target).apply({x: parseFloat(parsedOrigin[0]) || 0, y: parseFloat(parsedOrigin[1]) || 0});
+						syncXY(true, true);
+						x = self.pointerX - rotationOrigin.x - offsetX;
+						y = rotationOrigin.y - self.pointerY + offsetY;
+						startElementX = self.x; //starting rotation (x always refers to rotation in type:"rotation", measured in degrees)
+						startElementY = self.y = Math.atan2(y, x) * _RAD2DEG;
+					} else {
+						//parent = !isFixed && target.parentNode;
+						//startScrollTop = parent ? parent.scrollTop || 0 : 0;
+						//startScrollLeft = parent ? parent.scrollLeft || 0 : 0;
+						startElementY = getPropAsNum(yProp, "px"); //record the starting top and left values so that we can just add the mouse's movement to them later.
+						startElementX = getPropAsNum(xProp, "px");
+					}
+				}
+
+				if (hasBounds && edgeTolerance) {
+					if (startElementX > maxX) {
+						startElementX = maxX + (startElementX - maxX) / edgeTolerance;
+					} else if (startElementX < minX) {
+						startElementX = minX - (minX - startElementX) / edgeTolerance;
+					}
+					if (!rotationMode) {
+						if (startElementY > maxY) {
+							startElementY = maxY + (startElementY - maxY) / edgeTolerance;
+						} else if (startElementY < minY) {
+							startElementY = minY - (minY - startElementY) / edgeTolerance;
+						}
+					}
+				}
+				self.startX = startElementX = _round(startElementX);
+				self.startY = startElementY = _round(startElementY);
+			},
+
+			isTweening = () => self.tween && self.tween.isActive(),
+
+			removePlaceholder = () => {
+				if (_placeholderDiv.parentNode && !isTweening() && !self.isDragging) { //_placeholderDiv just props open auto-scrolling containers so they don't collapse as the user drags left/up. We remove it after dragging (and throwing, if necessary) finishes.
+					_placeholderDiv.parentNode.removeChild(_placeholderDiv);
+				}
+			},
+
+			//called when the mouse is pressed (or touch starts)
+			onPress = (e, force) => {
+				let i;
+				if (!enabled || self.isPressed || !e || ((e.type === "mousedown" || e.type === "pointerdown") && !force && _getTime() - clickTime < 30 && _touchEventLookup[self.pointerEvent.type])) { //when we DON'T preventDefault() in order to accommodate touch-scrolling and the user just taps, many browsers also fire a mousedown/mouseup sequence AFTER the touchstart/touchend sequence, thus it'd result in two quick "click" events being dispatched. This line senses that condition and halts it on the subsequent mousedown.
+					isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchstart, pointerdown, mousedown. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.
+					return;
+				}
+				interrupted = isTweening();
+				dragged = false; // we need to track whether or not it was dragged in this interaction so that if, for example, the user calls .endDrag() to FORCE it to stop and then they keep the mouse pressed down and eventually release, that would normally cause an onClick but we have to skip it in that case if there was dragging that occurred.
+				self.pointerEvent = e;
+				if (_touchEventLookup[e.type]) { //note: on iOS, BOTH touchmove and mousemove are dispatched, but the mousemove has pageY and pageX of 0 which would mess up the calculations and needlessly hurt performance.
+					touchEventTarget = ~e.type.indexOf("touch") ? (e.currentTarget || e.target) : ownerDoc; //pointer-based touches (for Microsoft browsers) don't remain locked to the original target like other browsers, so we must use the document instead. The event type would be "MSPointerDown" or "pointerdown".
+					_addListener(touchEventTarget, "touchend", onRelease);
+					_addListener(touchEventTarget, "touchmove", onMove); // possible future change if PointerEvents are more standardized: https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture
+					_addListener(touchEventTarget, "touchcancel", onRelease);
+					_addListener(ownerDoc, "touchstart", _onMultiTouchDocument);
+				} else {
+					touchEventTarget = null;
+					_addListener(ownerDoc, "mousemove", onMove); //attach these to the document instead of the box itself so that if the user's mouse moves too quickly (and off of the box), things still work.
+				}
+				touchDragAxis = null;
+				if (!_supportsPointer  || !touchEventTarget) {
+					_addListener(ownerDoc, "mouseup", onRelease);
+					e && e.target && _addListener(e.target, "mouseup", onRelease); //we also have to listen directly on the element because some browsers don't bubble up the event to the _doc on elements with contentEditable="true"
+				}
+				isClicking = (isClickable.call(self, e.target) && vars.dragClickables === false && !force);
+				if (isClicking) {
+					_addListener(e.target, "change", onRelease); //in some browsers, when you mousedown on a <select> element, no mouseup gets dispatched! So we listen for a "change" event instead.
+					_dispatchEvent(self, "pressInit", "onPressInit");
+					_dispatchEvent(self, "press", "onPress");
+					_setSelectable(triggers, true); //accommodates things like inputs and elements with contentEditable="true" (otherwise user couldn't drag to select text)
+					isPreventingDefault = false;
+					return;
+				}
+				allowNativeTouchScrolling = (!touchEventTarget || allowX === allowY || self.vars.allowNativeTouchScrolling === false || (self.vars.allowContextMenu && e && (e.ctrlKey || e.which > 2))) ? false : allowX ? "y" : "x"; //note: in Chrome, right-clicking (for a context menu) fires onPress and it doesn't have the event.which set properly, so we must look for event.ctrlKey. If the user wants to allow context menus we should of course sense it here and not allow native touch scrolling.
+				isPreventingDefault = !allowNativeTouchScrolling && !self.allowEventDefault;
+				if (isPreventingDefault) {
+					_preventDefault(e);
+					_addListener(_win, "touchforcechange", _preventDefault); //works around safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/
+				}
+				if (e.changedTouches) { //touch events store the data slightly differently
+					e = touch = e.changedTouches[0];
+					touchID = e.identifier;
+				} else if (e.pointerId) {
+					touchID = e.pointerId; //for some Microsoft browsers
+				} else {
+					touch = touchID = null;
+				}
+				_dragCount++;
+				_addToRenderQueue(render); //causes the Draggable to render on each "tick" of gsap.ticker (performance optimization - updating values in a mousemove can cause them to happen too frequently, like multiple times between frame redraws which is wasteful, and it also prevents values from updating properly in IE8)
+				startPointerY = self.pointerY = e.pageY; //record the starting x and y so that we can calculate the movement from the original in _onMouseMove
+				startPointerX = self.pointerX = e.pageX;
+				_dispatchEvent(self, "pressInit", "onPressInit");
+				if (allowNativeTouchScrolling || self.autoScroll) {
+					_recordMaxScrolls(target.parentNode);
+				}
+				if (target.parentNode && self.autoScroll && !scrollProxy && !rotationMode && target.parentNode._gsMaxScrollX && !_placeholderDiv.parentNode && !target.getBBox) { //add a placeholder div to prevent the parent container from collapsing when the user drags the element left.
+					_placeholderDiv.style.width = target.parentNode.scrollWidth + "px";
+					target.parentNode.appendChild(_placeholderDiv);
+				}
+				recordStartPositions();
+				self.tween && self.tween.kill();
+				self.isThrowing = false;
+				gsap.killTweensOf(scrollProxy || target, killProps, true); //in case the user tries to drag it before the last tween is done.
+				scrollProxy && gsap.killTweensOf(target, {scrollTo:1}, true); //just in case the original target's scroll position is being tweened somewhere else.
+				self.tween = self.lockedAxis = null;
+				if (vars.zIndexBoost || (!rotationMode && !scrollProxy && vars.zIndexBoost !== false)) {
+					target.style.zIndex = Draggable.zIndex++;
+				}
+				self.isPressed = true;
+				hasDragCallback = !!(vars.onDrag || self._listeners.drag);
+				hasMoveCallback = !!(vars.onMove || self._listeners.move);
+				if (vars.cursor !== false || vars.activeCursor) {
+					i = triggers.length;
+					while (--i > -1) {
+						gsap.set(triggers[i], {cursor: vars.activeCursor || vars.cursor || (_defaultCursor === "grab" ? "grabbing" : _defaultCursor)});
+					}
+				}
+				_dispatchEvent(self, "press", "onPress");
+			},
+
+			//called every time the mouse/touch moves
+			onMove = e => {
+				let originalEvent = e,
+					touches, pointerX, pointerY, i, dx, dy;
+				if (!enabled || _isMultiTouching || !self.isPressed || !e) {
+					isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchmove, pointermove, mousemove. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.
+					return;
+				}
+				self.pointerEvent = e;
+				touches = e.changedTouches;
+				if (touches) { //touch events store the data slightly differently
+					e = touches[0];
+					if (e !== touch && e.identifier !== touchID) { //Usually changedTouches[0] will be what we're looking for, but in case it's not, look through the rest of the array...(and Android browsers don't reuse the event like iOS)
+						i = touches.length;
+						while (--i > -1 && (e = touches[i]).identifier !== touchID && e.target !== target) {} // Some Android devices dispatch a touchstart AND pointerdown initially, and then only pointermove thus the touchID may not match because it was grabbed from the touchstart event whereas the pointer event is the one that the browser dispatches for move, so if the event target matches this Draggable's target, let it through.
+						if (i < 0) {
+							return;
+						}
+					}
+				} else if (e.pointerId && touchID && e.pointerId !== touchID) { //for some Microsoft browsers, we must attach the listener to the doc rather than the trigger so that when the finger moves outside the bounds of the trigger, things still work. So if the event we're receiving has a pointerId that doesn't match the touchID, ignore it (for multi-touch)
+					return;
+				}
+
+				if (touchEventTarget && allowNativeTouchScrolling && !touchDragAxis) { //Android browsers force us to decide on the first "touchmove" event if we should allow the default (scrolling) behavior or preventDefault(). Otherwise, a "touchcancel" will be fired and then no "touchmove" or "touchend" will fire during the scrolling (no good).
+					_point1.x = e.pageX - (isFixed ? _getDocScrollLeft(ownerDoc) : 0);
+					_point1.y = e.pageY - (isFixed ? _getDocScrollTop(ownerDoc) : 0);
+					matrix && matrix.apply(_point1, _point1);
+					pointerX = _point1.x;
+					pointerY = _point1.y;
+					dx = Math.abs(pointerX - startPointerX);
+					dy = Math.abs(pointerY - startPointerY);
+					if ((dx !== dy && (dx > minimumMovement || dy > minimumMovement)) || (_isAndroid && allowNativeTouchScrolling === touchDragAxis)) {
+						touchDragAxis = (dx > dy && allowX) ? "x" : "y";
+						if (allowNativeTouchScrolling && touchDragAxis !== allowNativeTouchScrolling) {
+							_addListener(_win, "touchforcechange", _preventDefault); // prevents native touch scrolling from taking over if the user started dragging in the other direction in iOS Safari
+						}
+						if (self.vars.lockAxisOnTouchScroll !== false && allowX && allowY) {
+							self.lockedAxis = (touchDragAxis === "x") ? "y" : "x";
+							_isFunction(self.vars.onLockAxis) && self.vars.onLockAxis.call(self, originalEvent);
+						}
+						if (_isAndroid && allowNativeTouchScrolling === touchDragAxis) {
+							onRelease(originalEvent);
+							return;
+						}
+					}
+				}
+				if (!self.allowEventDefault && (!allowNativeTouchScrolling || (touchDragAxis && allowNativeTouchScrolling !== touchDragAxis)) && originalEvent.cancelable !== false) {
+					_preventDefault(originalEvent);
+					isPreventingDefault = true;
+				} else if (isPreventingDefault) {
+					isPreventingDefault = false;
+				}
+
+				if (self.autoScroll) {
+					checkAutoScrollBounds = true;
+				}
+				setPointerPosition(e.pageX, e.pageY, hasMoveCallback);
+			},
+
+			setPointerPosition = (pointerX, pointerY, invokeOnMove) => {
+				let dragTolerance = 1 - self.dragResistance,
+					edgeTolerance = 1 - self.edgeResistance,
+					prevPointerX = self.pointerX,
+					prevPointerY = self.pointerY,
+					prevStartElementY = startElementY,
+					prevX = self.x,
+					prevY = self.y,
+					prevEndX = self.endX,
+					prevEndY = self.endY,
+					prevEndRotation = self.endRotation,
+					prevDirty = dirty,
+					xChange, yChange, x, y, dif, temp;
+				self.pointerX = pointerX;
+				self.pointerY = pointerY;
+				if (isFixed) {
+					pointerX -= _getDocScrollLeft(ownerDoc);
+					pointerY -= _getDocScrollTop(ownerDoc);
+				}
+				if (rotationMode) {
+					y = Math.atan2(rotationOrigin.y - pointerY, pointerX - rotationOrigin.x) * _RAD2DEG;
+					dif = self.y - y;
+					if (dif > 180) {
+						startElementY -= 360;
+						self.y = y;
+					} else if (dif < -180) {
+						startElementY += 360;
+						self.y = y;
+					}
+					if (self.x !== startElementX || Math.abs(startElementY - y) > minimumMovement) {
+						self.y = y;
+						x = startElementX + (startElementY - y) * dragTolerance;
+					} else {
+						x = startElementX;
+					}
+
+				} else {
+					if (matrix) {
+						temp = pointerX * matrix.a + pointerY * matrix.c + matrix.e;
+						pointerY = pointerX * matrix.b + pointerY * matrix.d + matrix.f;
+						pointerX = temp;
+					}
+					yChange = (pointerY - startPointerY);
+					xChange = (pointerX - startPointerX);
+					if (yChange < minimumMovement && yChange > -minimumMovement) {
+						yChange = 0;
+					}
+					if (xChange < minimumMovement && xChange > -minimumMovement) {
+						xChange = 0;
+					}
+					if ((self.lockAxis || self.lockedAxis) && (xChange || yChange)) {
+						temp = self.lockedAxis;
+						if (!temp) {
+							self.lockedAxis = temp = (allowX && Math.abs(xChange) > Math.abs(yChange)) ? "y" : allowY ? "x" : null;
+							if (temp && _isFunction(self.vars.onLockAxis)) {
+								self.vars.onLockAxis.call(self, self.pointerEvent);
+							}
+						}
+						if (temp === "y") {
+							yChange = 0;
+						} else if (temp === "x") {
+							xChange = 0;
+						}
+					}
+					x = _round(startElementX + xChange * dragTolerance);
+					y = _round(startElementY + yChange * dragTolerance);
+				}
+
+				if ((snapX || snapY || snapXY) && (self.x !== x || (self.y !== y && !rotationMode))) {
+					if (snapXY) {
+						_temp1.x = x;
+						_temp1.y = y;
+						temp = snapXY(_temp1);
+						x = _round(temp.x);
+						y = _round(temp.y);
+					}
+					if (snapX) {
+						x = _round(snapX(x));
+					}
+					if (snapY) {
+						y = _round(snapY(y));
+					}
+				}
+				if (hasBounds) {
+					if (x > maxX) {
+						x = maxX + Math.round((x - maxX) * edgeTolerance);
+					} else if (x < minX) {
+						x = minX + Math.round((x - minX) * edgeTolerance);
+					}
+					if (!rotationMode) {
+						if (y > maxY) {
+							y = Math.round(maxY + (y - maxY) * edgeTolerance);
+						} else if (y < minY) {
+							y = Math.round(minY + (y - minY) * edgeTolerance);
+						}
+					}
+				}
+				if (self.x !== x || (self.y !== y && !rotationMode)) {
+					if (rotationMode) {
+						self.endRotation = self.x = self.endX = x;
+						dirty = true;
+					} else {
+						if (allowY) {
+							self.y = self.endY = y;
+							dirty = true; //a flag that indicates we need to render the target next time the TweenLite.ticker dispatches a "tick" event (typically on a requestAnimationFrame) - this is a performance optimization (we shouldn't render on every move because sometimes many move events can get dispatched between screen refreshes, and that'd be wasteful to render every time)
+						}
+						if (allowX) {
+							self.x = self.endX = x;
+							dirty = true;
+						}
+					}
+					if (!invokeOnMove || _dispatchEvent(self, "move", "onMove") !== false) {
+						if (!self.isDragging && self.isPressed) {
+							self.isDragging = dragged = true;
+							_dispatchEvent(self, "dragstart", "onDragStart");
+						}
+					} else { //revert because the onMove returned false!
+						self.pointerX = prevPointerX;
+						self.pointerY = prevPointerY;
+						startElementY = prevStartElementY;
+						self.x = prevX;
+						self.y = prevY;
+						self.endX = prevEndX;
+						self.endY = prevEndY;
+						self.endRotation = prevEndRotation;
+						dirty = prevDirty;
+					}
+				}
+			},
+
+			//called when the mouse/touch is released
+			onRelease = (e, force) => {
+				if (!enabled || !self.isPressed || (e && touchID != null && !force && ((e.pointerId && e.pointerId !== touchID && e.target !== target) || (e.changedTouches && !_hasTouchID(e.changedTouches, touchID))))) {  //for some Microsoft browsers, we must attach the listener to the doc rather than the trigger so that when the finger moves outside the bounds of the trigger, things still work. So if the event we're receiving has a pointerId that doesn't match the touchID, ignore it (for multi-touch)
+					isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchend, pointerup, mouseup. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.
+					return;
+				}
+				self.isPressed = false;
+				let originalEvent = e,
+					wasDragging = self.isDragging,
+					isContextMenuRelease = (self.vars.allowContextMenu && e && (e.ctrlKey || e.which > 2)),
+					placeholderDelayedCall = gsap.delayedCall(0.001, removePlaceholder),
+					touches, i, syntheticEvent, eventTarget, syntheticClick;
+				if (touchEventTarget) {
+					_removeListener(touchEventTarget, "touchend", onRelease);
+					_removeListener(touchEventTarget, "touchmove", onMove);
+					_removeListener(touchEventTarget, "touchcancel", onRelease);
+					_removeListener(ownerDoc, "touchstart", _onMultiTouchDocument);
+				} else {
+					_removeListener(ownerDoc, "mousemove", onMove);
+				}
+				_removeListener(_win, "touchforcechange", _preventDefault);
+				if (!_supportsPointer || !touchEventTarget) {
+					_removeListener(ownerDoc, "mouseup", onRelease);
+					e && e.target && _removeListener(e.target, "mouseup", onRelease);
+				}
+				dirty = false;
+				if (wasDragging) {
+					dragEndTime = _lastDragTime = _getTime();
+					self.isDragging = false;
+				}
+				_removeFromRenderQueue(render);
+				if (isClicking && !isContextMenuRelease) {
+					if (e) {
+						_removeListener(e.target, "change", onRelease);
+						self.pointerEvent = originalEvent;
+					}
+					_setSelectable(triggers, false);
+					_dispatchEvent(self, "release", "onRelease");
+					_dispatchEvent(self, "click", "onClick");
+					isClicking = false;
+					return;
+				}
+				i = triggers.length;
+				while (--i > -1) {
+					_setStyle(triggers[i], "cursor", vars.cursor || (vars.cursor !== false ? _defaultCursor : null));
+				}
+				_dragCount--;
+				if (e) {
+					touches = e.changedTouches;
+					if (touches) { //touch events store the data slightly differently
+						e = touches[0];
+						if (e !== touch && e.identifier !== touchID) { //Usually changedTouches[0] will be what we're looking for, but in case it's not, look through the rest of the array...(and Android browsers don't reuse the event like iOS)
+							i = touches.length;
+							while (--i > -1 && (e = touches[i]).identifier !== touchID && e.target !== target) {}
+							if (i < 0 && !force) {
+								return;
+							}
+						}
+					}
+					self.pointerEvent = originalEvent;
+					self.pointerX = e.pageX;
+					self.pointerY = e.pageY;
+				}
+				if (isContextMenuRelease && originalEvent) {
+					_preventDefault(originalEvent);
+					isPreventingDefault = true;
+					_dispatchEvent(self, "release", "onRelease");
+				} else if (originalEvent && !wasDragging) {
+					isPreventingDefault = false;
+					if (interrupted && (vars.snap || vars.bounds)) { //otherwise, if the user clicks on the object while it's animating to a snapped position, and then releases without moving 3 pixels, it will just stay there (it should animate/snap)
+						animate(vars.inertia || vars.throwProps);
+					}
+					_dispatchEvent(self, "release", "onRelease");
+					if ((!_isAndroid || originalEvent.type !== "touchmove") && originalEvent.type.indexOf("cancel") === -1) { //to accommodate native scrolling on Android devices, we have to immediately call onRelease() on the first touchmove event, but that shouldn't trigger a "click".
+						_dispatchEvent(self, "click", "onClick");
+						if (_getTime() - clickTime < 300) {
+							_dispatchEvent(self, "doubleclick", "onDoubleClick");
+						}
+						eventTarget = originalEvent.target || target; //old IE uses srcElement
+						clickTime = _getTime();
+						syntheticClick = () => { // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular "click" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the "real"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the "real" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.
+							if (clickTime !== clickDispatch && self.enabled() && !self.isPressed && !originalEvent.defaultPrevented) {
+								if (eventTarget.click) { //some browsers (like mobile Safari) don't properly trigger the click event
+									eventTarget.click();
+								} else if (ownerDoc.createEvent) {
+									syntheticEvent = ownerDoc.createEvent("MouseEvents");
+									syntheticEvent.initMouseEvent("click", true, true, _win, 1, self.pointerEvent.screenX, self.pointerEvent.screenY, self.pointerX, self.pointerY, false, false, false, false, 0, null);
+									eventTarget.dispatchEvent(syntheticEvent);
+								}
+							}
+						};
+						if (!_isAndroid && !originalEvent.defaultPrevented) { //iOS Safari requires the synthetic click to happen immediately or else it simply won't work, but Android doesn't play nice.
+							gsap.delayedCall(0.05, syntheticClick); //in addition to the iOS bug workaround, there's a Firefox issue with clicking on things like a video to play, so we must fake a click event in a slightly delayed fashion. Previously, we listened for the "click" event with "capture" false which solved the video-click-to-play issue, but it would allow the "click" event to be dispatched twice like if you were using a jQuery.click() because that was handled in the capture phase, thus we had to switch to the capture phase to avoid the double-dispatching, but do the delayed synthetic click. Don't fire it too fast (like 0.00001) because we want to give the native event a chance to fire first as it's "trusted".
+						}
+					}
+				} else {
+					animate(vars.inertia || vars.throwProps); //will skip if inertia/throwProps isn't defined or InertiaPlugin isn't loaded.
+					if (!self.allowEventDefault && originalEvent && (vars.dragClickables !== false || !isClickable.call(self, originalEvent.target)) && wasDragging && (!allowNativeTouchScrolling || (touchDragAxis && allowNativeTouchScrolling === touchDragAxis)) && originalEvent.cancelable !== false) {
+						isPreventingDefault = true;
+						_preventDefault(originalEvent);
+					} else {
+						isPreventingDefault = false;
+					}
+					_dispatchEvent(self, "release", "onRelease");
+				}
+				isTweening() && placeholderDelayedCall.duration( self.tween.duration() ); //sync the timing so that the placeholder DIV gets
+				wasDragging && _dispatchEvent(self, "dragend", "onDragEnd");
+				return true;
+			},
+
+			updateScroll = e => {
+				if (e && self.isDragging && !scrollProxy) {
+					let parent = e.target || target.parentNode,
+						deltaX = parent.scrollLeft - parent._gsScrollX,
+						deltaY = parent.scrollTop - parent._gsScrollY;
+					if (deltaX || deltaY) {
+						if (matrix) {
+							startPointerX -= deltaX * matrix.a + deltaY * matrix.c;
+							startPointerY -= deltaY * matrix.d + deltaX * matrix.b;
+						} else {
+							startPointerX -= deltaX;
+							startPointerY -= deltaY;
+						}
+						parent._gsScrollX += deltaX;
+						parent._gsScrollY += deltaY;
+						setPointerPosition(self.pointerX, self.pointerY);
+					}
+				}
+			},
+
+			onClick = e => { //this was a huge pain in the neck to align all the various browsers and their behaviors. Chrome, Firefox, Safari, Opera, Android, and Microsoft Edge all handle events differently! Some will only trigger native behavior (like checkbox toggling) from trusted events. Others don't even support isTrusted, but require 2 events to flow through before triggering native behavior. Edge treats everything as trusted but also mandates that 2 flow through to trigger the correct native behavior.
+				let time = _getTime(),
+					recentlyClicked = (time - clickTime < 100),
+					recentlyDragged = (time - dragEndTime < 50),
+					alreadyDispatched = (recentlyClicked && clickDispatch === clickTime),
+					defaultPrevented = (self.pointerEvent && self.pointerEvent.defaultPrevented),
+					alreadyDispatchedTrusted = (recentlyClicked && trustedClickDispatch === clickTime),
+					trusted = e.isTrusted || (e.isTrusted == null && recentlyClicked && alreadyDispatched); //note: Safari doesn't support isTrusted, and it won't properly execute native behavior (like toggling checkboxes) on the first synthetic "click" event - we must wait for the 2nd and treat it as trusted (but stop propagation at that point). Confusing, I know. Don't you love cross-browser compatibility challenges?
+				if ((alreadyDispatched || (recentlyDragged && self.vars.suppressClickOnDrag !== false) ) && e.stopImmediatePropagation) {
+					e.stopImmediatePropagation();
+				}
+				if (recentlyClicked && !(self.pointerEvent && self.pointerEvent.defaultPrevented) && (!alreadyDispatched || (trusted && !alreadyDispatchedTrusted))) { //let the first click pass through unhindered. Let the next one only if it's trusted, then no more (stop quick-succession ones)
+					if (trusted && alreadyDispatched) {
+						trustedClickDispatch = clickTime;
+					}
+					clickDispatch = clickTime;
+					return;
+				}
+				if (self.isPressed || recentlyDragged || recentlyClicked) {
+					if (!trusted || !e.detail || !recentlyClicked || defaultPrevented) {
+						_preventDefault(e);
+					}
+				}
+				if (!recentlyClicked && !recentlyDragged && !dragged) { // for script-triggered event dispatches, like element.click()
+					e && e.target && (self.pointerEvent = e);
+					_dispatchEvent(self, "click", "onClick");
+				}
+			},
+
+			localizePoint = p => matrix ? {x:p.x * matrix.a + p.y * matrix.c + matrix.e, y:p.x * matrix.b + p.y * matrix.d + matrix.f} : {x:p.x, y:p.y};
+
+		old = Draggable.get(target);
+		old && old.kill(); // avoids duplicates (an element can only be controlled by one Draggable)
+
+		//give the user access to start/stop dragging...
+		this.startDrag = (event, align) => {
+			let r1, r2, p1, p2;
+			onPress(event || self.pointerEvent, true);
+			//if the pointer isn't on top of the element, adjust things accordingly
+			if (align && !self.hitTest(event || self.pointerEvent)) {
+				r1 = _parseRect(event || self.pointerEvent);
+				r2 = _parseRect(target);
+				p1 = localizePoint({x:r1.left + r1.width / 2, y:r1.top + r1.height / 2});
+				p2 = localizePoint({x:r2.left + r2.width / 2, y:r2.top + r2.height / 2});
+				startPointerX -= p1.x - p2.x;
+				startPointerY -= p1.y - p2.y;
+			}
+			if (!self.isDragging) {
+				self.isDragging = dragged = true;
+				_dispatchEvent(self, "dragstart", "onDragStart");
+			}
+		};
+		this.drag = onMove;
+		this.endDrag = e =>	onRelease(e || self.pointerEvent, true);
+		this.timeSinceDrag = () => self.isDragging ? 0 : (_getTime() - dragEndTime) / 1000;
+		this.timeSinceClick = () => (_getTime() - clickTime) / 1000;
+		this.hitTest = (target, threshold) => Draggable.hitTest(self.target, target, threshold);
+
+		this.getDirection = (from, diagonalThreshold) => { //from can be "start" (default), "velocity", or an element
+			let mode = (from === "velocity" && InertiaPlugin) ? from : (_isObject(from) && !rotationMode) ? "element" : "start",
+				xChange, yChange, ratio, direction, r1, r2;
+			if (mode === "element") {
+				r1 = _parseRect(self.target);
+				r2 = _parseRect(from);
+			}
+			xChange = (mode === "start") ? self.x - startElementX : (mode === "velocity") ? InertiaPlugin.getVelocity(target, xProp) : (r1.left + r1.width / 2) - (r2.left + r2.width / 2);
+			if (rotationMode) {
+				return xChange < 0 ? "counter-clockwise" : "clockwise";
+			} else {
+				diagonalThreshold = diagonalThreshold || 2;
+				yChange = (mode === "start") ? self.y - startElementY : (mode === "velocity") ? InertiaPlugin.getVelocity(target, yProp) : (r1.top + r1.height / 2) - (r2.top + r2.height / 2);
+				ratio = Math.abs(xChange / yChange);
+				direction = (ratio < 1 / diagonalThreshold) ? "" : (xChange < 0) ? "left" : "right";
+				if (ratio < diagonalThreshold) {
+					if (direction !== "") {
+						direction += "-";
+					}
+					direction += (yChange < 0) ? "up" : "down";
+				}
+			}
+			return direction;
+		};
+
+		this.applyBounds = (newBounds, sticky) => {
+			let x, y, forceZeroVelocity, e, parent, isRoot;
+			if (newBounds && vars.bounds !== newBounds) {
+				vars.bounds = newBounds;
+				return self.update(true, sticky);
+			}
+			syncXY(true);
+			calculateBounds();
+			if (hasBounds && !isTweening()) {
+				x = self.x;
+				y = self.y;
+				if (x > maxX) {
+					x = maxX;
+				} else if (x < minX) {
+					x = minX;
+				}
+				if (y > maxY) {
+					y = maxY;
+				} else if (y < minY) {
+					y = minY;
+				}
+				if (self.x !== x || self.y !== y) {
+					forceZeroVelocity = true;
+					self.x = self.endX = x;
+					if (rotationMode) {
+						self.endRotation = x;
+					} else {
+						self.y = self.endY = y;
+					}
+					dirty = true;
+					render(true);
+					if (self.autoScroll && !self.isDragging) {
+						_recordMaxScrolls(target.parentNode);
+						e = target;
+						_windowProxy.scrollTop = ((_win.pageYOffset != null) ? _win.pageYOffset : (ownerDoc.documentElement.scrollTop != null) ? ownerDoc.documentElement.scrollTop : ownerDoc.body.scrollTop);
+						_windowProxy.scrollLeft = ((_win.pageXOffset != null) ? _win.pageXOffset : (ownerDoc.documentElement.scrollLeft != null) ? ownerDoc.documentElement.scrollLeft : ownerDoc.body.scrollLeft);
+						while (e && !isRoot) { //walk up the chain and sense wherever the scrollTop/scrollLeft exceeds the maximum.
+							isRoot = _isRoot(e.parentNode);
+							parent = isRoot ? _windowProxy : e.parentNode;
+							if (allowY && parent.scrollTop > parent._gsMaxScrollY) {
+								parent.scrollTop = parent._gsMaxScrollY;
+							}
+							if (allowX && parent.scrollLeft > parent._gsMaxScrollX) {
+								parent.scrollLeft = parent._gsMaxScrollX;
+							}
+							e = parent;
+						}
+					}
+				}
+				if (self.isThrowing && (forceZeroVelocity || self.endX > maxX || self.endX < minX || self.endY > maxY || self.endY < minY)) {
+					animate(vars.inertia || vars.throwProps, forceZeroVelocity);
+				}
+			}
+			return self;
+		};
+
+		this.update = (applyBounds, sticky, ignoreExternalChanges) => {
+			if (sticky && self.isPressed) { // in case the element was repositioned in the document flow, thus its x/y may be identical but its position is actually quite different.
+				let m = getGlobalMatrix(target),
+					p = innerMatrix.apply({x: self.x - startElementX, y: self.y - startElementY}),
+					m2 = getGlobalMatrix(target.parentNode, true);
+				m2.apply({x: m.e - p.x, y: m.f - p.y}, p);
+				self.x -= p.x - m2.e;
+				self.y -= p.y - m2.f;
+				render(true);
+				recordStartPositions();
+			}
+			let { x, y } = self;
+			updateMatrix(!sticky);
+			if (applyBounds) {
+				self.applyBounds();
+			} else {
+				dirty && ignoreExternalChanges && render(true);
+				syncXY(true);
+			}
+			if (sticky) {
+				setPointerPosition(self.pointerX, self.pointerY);
+				dirty && render(true);
+			}
+			if (self.isPressed && !sticky && ((allowX && Math.abs(x - self.x) > 0.01) || (allowY && (Math.abs(y - self.y) > 0.01 && !rotationMode)))) {
+				recordStartPositions();
+			}
+			if (self.autoScroll) {
+				_recordMaxScrolls(target.parentNode, self.isDragging);
+				checkAutoScrollBounds = self.isDragging;
+				render(true);
+				//in case reparenting occurred.
+				_removeScrollListener(target, updateScroll);
+				_addScrollListener(target, updateScroll);
+			}
+			return self;
+		};
+
+		this.enable = type => {
+			let setVars = {lazy: true},
+				id, i, trigger;
+			if (vars.cursor !== false) {
+				setVars.cursor = vars.cursor || _defaultCursor;
+			}
+			if (gsap.utils.checkPrefix("touchCallout")) {
+				setVars.touchCallout = "none";
+			}
+			if (type !== "soft") {
+				_setTouchActionForAllDescendants(triggers, (allowX === allowY) ? "none" : (vars.allowNativeTouchScrolling && (target.scrollHeight === target.clientHeight) === (target.scrollWidth === target.clientHeight)) || vars.allowEventDefault ? "manipulation" : allowX ? "pan-y" : "pan-x"); // Some browsers like Internet Explorer will fire a pointercancel event when the user attempts to drag when touchAction is "manipulate" because it's perceived as a pan. If the element has scrollable content in only one direction, we should use pan-x or pan-y accordingly so that the pointercancel doesn't prevent dragging.
+				i = triggers.length;
+				while (--i > -1) {
+					trigger = triggers[i];
+					_supportsPointer || _addListener(trigger, "mousedown", onPress);
+					_addListener(trigger, "touchstart", onPress);
+					_addListener(trigger, "click", onClick, true); // note: used to pass true for capture but it prevented click-to-play-video functionality in Firefox.
+					gsap.set(trigger, setVars);
+					if (trigger.getBBox && trigger.ownerSVGElement && allowX !== allowY) { // a bug in chrome doesn't respect touch-action on SVG elements - it only works if we set it on the parent SVG.
+						gsap.set(trigger.ownerSVGElement, {touchAction: vars.allowNativeTouchScrolling || vars.allowEventDefault ? "manipulation" : allowX ? "pan-y" : "pan-x"});
+					}
+					vars.allowContextMenu || _addListener(trigger, "contextmenu", onContextMenu);
+				}
+				_setSelectable(triggers, false);
+			}
+			_addScrollListener(target, updateScroll);
+			enabled = true;
+			if (InertiaPlugin && type !== "soft") {
+				InertiaPlugin.track(scrollProxy || target, (xyMode ? "x,y" : rotationMode ? "rotation" : "top,left"));
+			}
+			target._gsDragID = id = "d" + (_lookupCount++);
+			_lookup[id] = self;
+			if (scrollProxy) {
+				scrollProxy.enable();
+				scrollProxy.element._gsDragID = id;
+			}
+			(vars.bounds || rotationMode) && recordStartPositions();
+			vars.bounds && self.applyBounds();
+			return self;
+		};
+
+		this.disable = type => {
+			let dragging = self.isDragging,
+				i = triggers.length,
+				trigger;
+			while (--i > -1) {
+				_setStyle(triggers[i], "cursor", null);
+			}
+			if (type !== "soft") {
+				_setTouchActionForAllDescendants(triggers, null);
+				i = triggers.length;
+				while (--i > -1) {
+					trigger = triggers[i];
+					_setStyle(trigger, "touchCallout", null);
+					_removeListener(trigger, "mousedown", onPress);
+					_removeListener(trigger, "touchstart", onPress);
+					_removeListener(trigger, "click", onClick, true);
+					_removeListener(trigger, "contextmenu", onContextMenu);
+				}
+				_setSelectable(triggers, true);
+				if (touchEventTarget) {
+					_removeListener(touchEventTarget, "touchcancel", onRelease);
+					_removeListener(touchEventTarget, "touchend", onRelease);
+					_removeListener(touchEventTarget, "touchmove", onMove);
+				}
+				_removeListener(ownerDoc, "mouseup", onRelease);
+				_removeListener(ownerDoc, "mousemove", onMove);
+			}
+			_removeScrollListener(target, updateScroll);
+			enabled = false;
+			if (InertiaPlugin && type !== "soft") {
+				InertiaPlugin.untrack(scrollProxy || target, (xyMode ? "x,y" : rotationMode ? "rotation" : "top,left"));
+				self.tween && self.tween.kill();
+			}
+			scrollProxy && scrollProxy.disable();
+			_removeFromRenderQueue(render);
+			self.isDragging = self.isPressed = isClicking = false;
+			dragging && _dispatchEvent(self, "dragend", "onDragEnd");
+			return self;
+		};
+
+		this.enabled = function(value, type) {
+			return arguments.length ? (value ? self.enable(type) : self.disable(type)) : enabled;
+		};
+
+		this.kill = function() {
+			self.isThrowing = false;
+			self.tween && self.tween.kill();
+			self.disable();
+			gsap.set(triggers, {clearProps:"userSelect"});
+			delete _lookup[target._gsDragID];
+			return self;
+		};
+
+		this.revert = function() {
+			this.kill();
+			this.styles && this.styles.revert();
+		};
+
+		if (~type.indexOf("scroll")) {
+			scrollProxy = this.scrollProxy = new ScrollProxy(target, _extend({onKill:function() { //ScrollProxy's onKill() gets called if/when the ScrollProxy senses that the user interacted with the scroll position manually (like using the scrollbar). IE9 doesn't fire the "mouseup" properly when users drag the scrollbar of an element, so this works around that issue.
+					self.isPressed && onRelease(null);
+			}}, vars));
+			//a bug in many Android devices' stock browser causes scrollTop to get forced back to 0 after it is altered via JS, so we set overflow to "hidden" on mobile/touch devices (they hide the scroll bar anyway). That works around the bug. (This bug is discussed at https://code.google.com/p/android/issues/detail?id=19625)
+			target.style.overflowY = (allowY && !_isTouchDevice) ? "auto" : "hidden";
+			target.style.overflowX = (allowX && !_isTouchDevice) ? "auto" : "hidden";
+			target = scrollProxy.content;
+		}
+
+		if (rotationMode) {
+			killProps.rotation = 1;
+		} else {
+			if (allowX) {
+				killProps[xProp] = 1;
+			}
+			if (allowY) {
+				killProps[yProp] = 1;
+			}
+		}
+
+		gsCache.force3D = ("force3D" in vars) ? vars.force3D : true; //otherwise, normal dragging would be in 2D and then as soon as it's released and there's an inertia tween, it'd jump to 3D which can create an initial jump due to the work the browser must to do layerize it.
+
+		_context(this);
+		this.enable();
+	}
+
+
+
+
+	static register(core) {
+		gsap = core;
+		_initCore();
+	}
+
+	static create(targets, vars) {
+		_coreInitted || _initCore(true);
+		return _toArray(targets).map(target => new Draggable(target, vars));
+	}
+
+	static get(target) {
+		return _lookup[(_toArray(target)[0] || {})._gsDragID];
+	}
+
+	static timeSinceDrag() {
+		return (_getTime() - _lastDragTime) / 1000;
+	}
+
+	static hitTest(obj1, obj2, threshold) {
+		if (obj1 === obj2) {
+			return false;
+		}
+		let r1 = _parseRect(obj1),
+			r2 = _parseRect(obj2),
+			{ top, left, right, bottom, width, height } = r1,
+			isOutside = (r2.left > right || r2.right < left || r2.top > bottom || r2.bottom < top),
+			overlap, area, isRatio;
+		if (isOutside || !threshold) {
+			return !isOutside;
+		}
+		isRatio = ((threshold + "").indexOf("%") !== -1);
+		threshold = parseFloat(threshold) || 0;
+		overlap = {left: Math.max(left, r2.left), top: Math.max(top, r2.top)};
+		overlap.width = Math.min(right, r2.right) - overlap.left;
+		overlap.height = Math.min(bottom, r2.bottom) - overlap.top;
+		if (overlap.width < 0 || overlap.height < 0) {
+			return false;
+		}
+		if (isRatio) {
+			threshold *= 0.01;
+			area = overlap.width * overlap.height;
+			return (area >= width * height * threshold || area >= r2.width * r2.height * threshold);
+		}
+		return (overlap.width > threshold && overlap.height > threshold);
+	}
+
+}
+
+_setDefaults(Draggable.prototype, {pointerX:0, pointerY: 0, startX: 0, startY: 0, deltaX: 0, deltaY: 0, isDragging: false, isPressed: false});
+
+Draggable.zIndex = 1000;
+Draggable.version = "3.12.5";
+
+_getGSAP() && gsap.registerPlugin(Draggable);
+
+export { Draggable, Draggable as default };
diff --git a/dist/Draggable.d.ts b/dist/Draggable.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..d29a4206c291b5d79d4d5229b832187d46ffd1f4
--- /dev/null
+++ b/dist/Draggable.d.ts
@@ -0,0 +1,1942 @@
+import { M as Matrix2D, g as getGlobalMatrix } from './shared/gsap.7b0323e5.js';
+
+/*!
+ * Draggable 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+ */
+/* eslint-disable */
+
+
+let gsap, _win, _doc, _docElement, _body, _tempDiv, _placeholderDiv, _coreInitted, _checkPrefix, _toArray, _supportsPassive, _isTouchDevice, _touchEventLookup, _isMultiTouching, _isAndroid, InertiaPlugin, _defaultCursor, _supportsPointer, _context, _getStyleSaver,
+	_dragCount = 0,
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_isFunction = value => typeof(value) === "function",
+	_isObject = value => typeof(value) === "object",
+	_isUndefined = value => typeof(value) === "undefined",
+	_emptyFunc = () => false,
+	_transformProp = "transform",
+	_transformOriginProp = "transformOrigin",
+	_round = value => Math.round(value * 10000) / 10000,
+	_isArray = Array.isArray,
+	_createElement = (type, ns) => {
+		let e = _doc.createElementNS ? _doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.
+		return e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://gsap.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
+	},
+	_RAD2DEG = 180 / Math.PI,
+	_bigNum = 1e20,
+	_identityMatrix = new Matrix2D(),
+	_getTime = Date.now || (() => new Date().getTime()),
+	_renderQueue = [],
+	_lookup = {}, //when a Draggable is created, the target gets a unique _gsDragID property that allows gets associated with the Draggable instance for quick lookups in Draggable.get(). This avoids circular references that could cause gc problems.
+	_lookupCount = 0,
+	_clickableTagExp = /^(?:a|input|textarea|button|select)$/i,
+	_lastDragTime = 0,
+	_temp1 = {}, // a simple object we reuse and populate (usually x/y properties) to conserve memory and improve performance.
+	_windowProxy = {}, //memory/performance optimization - we reuse this object during autoScroll to store window-related bounds/offsets.
+	_copy = (obj, factor) => {
+		let copy = {}, p;
+		for (p in obj) {
+			copy[p] = factor ? obj[p] * factor : obj[p];
+		}
+		return copy;
+	},
+	_extend = (obj, defaults) => {
+		for (let p in defaults) {
+			if (!(p in obj)) {
+				obj[p] = defaults[p];
+			}
+		}
+		return obj;
+	},
+	_setTouchActionForAllDescendants = (elements, value) => {
+		let i = elements.length,
+			children;
+		while (i--) {
+			value ? (elements[i].style.touchAction = value) : elements[i].style.removeProperty("touch-action");
+			children = elements[i].children;
+			children && children.length && _setTouchActionForAllDescendants(children, value);
+		}
+	},
+	_renderQueueTick = () => _renderQueue.forEach(func => func()),
+	_addToRenderQueue = func => {
+		_renderQueue.push(func);
+		if (_renderQueue.length === 1) {
+			gsap.ticker.add(_renderQueueTick);
+		}
+	},
+	_renderQueueTimeout = () => !_renderQueue.length && gsap.ticker.remove(_renderQueueTick),
+	_removeFromRenderQueue = func => {
+		let i = _renderQueue.length;
+		while (i--) {
+			if (_renderQueue[i] === func) {
+				_renderQueue.splice(i, 1);
+			}
+		}
+		gsap.to(_renderQueueTimeout, {overwrite:true, delay:15, duration:0, onComplete:_renderQueueTimeout, data:"_draggable"}); //remove the "tick" listener only after the render queue is empty for 15 seconds (to improve performance). Adding/removing it constantly for every click/touch wouldn't deliver optimal speed, and we also don't want the ticker to keep calling the render method when things are idle for long periods of time (we want to improve battery life on mobile devices).
+	},
+	_setDefaults = (obj, defaults) => {
+		for (let p in defaults) {
+			if (!(p in obj)) {
+				obj[p] = defaults[p];
+			}
+		}
+		return obj;
+	},
+	_addListener = (element, type, func, capture) => {
+		if (element.addEventListener) {
+			let touchType = _touchEventLookup[type];
+			capture = capture || (_supportsPassive ? {passive: false} : null);
+			element.addEventListener(touchType || type, func, capture);
+			(touchType && type !== touchType) && element.addEventListener(type, func, capture);//some browsers actually support both, so must we. But pointer events cover all.
+		}
+	},
+	_removeListener = (element, type, func, capture) => {
+		if (element.removeEventListener) {
+			let touchType = _touchEventLookup[type];
+			element.removeEventListener(touchType || type, func, capture);
+			(touchType && type !== touchType) && element.removeEventListener(type, func, capture);
+		}
+	},
+	_preventDefault = event => {
+		event.preventDefault && event.preventDefault();
+		event.preventManipulation && event.preventManipulation();  //for some Microsoft browsers
+	},
+	_hasTouchID = (list, ID) => {
+		let i = list.length;
+		while (i--) {
+			if (list[i].identifier === ID) {
+				return true;
+			}
+		}
+	},
+	_onMultiTouchDocumentEnd = event => {
+		_isMultiTouching = (event.touches && _dragCount < event.touches.length);
+		_removeListener(event.target, "touchend", _onMultiTouchDocumentEnd);
+	},
+
+	_onMultiTouchDocument = event => {
+		_isMultiTouching = (event.touches && _dragCount < event.touches.length);
+		_addListener(event.target, "touchend", _onMultiTouchDocumentEnd);
+	},
+	_getDocScrollTop = doc => _win.pageYOffset  || doc.scrollTop || doc.documentElement.scrollTop || doc.body.scrollTop || 0,
+	_getDocScrollLeft = doc => _win.pageXOffset || doc.scrollLeft || doc.documentElement.scrollLeft || doc.body.scrollLeft || 0,
+	_addScrollListener = (e, callback) => {
+		_addListener(e, "scroll", callback);
+		if (!_isRoot(e.parentNode)) {
+			_addScrollListener(e.parentNode, callback);
+		}
+	},
+	_removeScrollListener = (e, callback) => {
+		_removeListener(e, "scroll", callback);
+		if (!_isRoot(e.parentNode)) {
+			_removeScrollListener(e.parentNode, callback);
+		}
+	},
+	_isRoot = e => !!(!e || e === _docElement || e.nodeType === 9 || e === _doc.body || e === _win || !e.nodeType || !e.parentNode),
+	_getMaxScroll = (element, axis) => {
+		let dim = (axis === "x") ? "Width" : "Height",
+			scroll = "scroll" + dim,
+			client = "client" + dim;
+		return Math.max(0, _isRoot(element) ? Math.max(_docElement[scroll], _body[scroll]) - (_win["inner" + dim] || _docElement[client] || _body[client]) : element[scroll] - element[client]);
+	},
+	_recordMaxScrolls = (e, skipCurrent) => { //records _gsMaxScrollX and _gsMaxScrollY properties for the element and all ancestors up the chain so that we can cap it, otherwise dragging beyond the edges with autoScroll on can endlessly scroll.
+		let x = _getMaxScroll(e, "x"),
+			y = _getMaxScroll(e, "y");
+		if (_isRoot(e)) {
+			e = _windowProxy;
+		} else {
+			_recordMaxScrolls(e.parentNode, skipCurrent);
+		}
+		e._gsMaxScrollX = x;
+		e._gsMaxScrollY = y;
+		if (!skipCurrent) {
+			e._gsScrollX = e.scrollLeft || 0;
+			e._gsScrollY = e.scrollTop || 0;
+		}
+	},
+	_setStyle = (element, property, value) => {
+		let style = element.style;
+		if (!style) {
+			return;
+		}
+		if (_isUndefined(style[property])) {
+			property = _checkPrefix(property, element) || property;
+		}
+		if (value == null) {
+			style.removeProperty && style.removeProperty(property.replace(/([A-Z])/g, "-$1").toLowerCase());
+		} else {
+			style[property] = value;
+		}
+	},
+	_getComputedStyle = element => _win.getComputedStyle((element instanceof Element) ? element : element.host || (element.parentNode || {}).host || element), //the "host" stuff helps to accommodate ShadowDom objects.
+
+	_tempRect = {}, //reuse to reduce garbage collection tasks
+	_parseRect = e => { //accepts a DOM element, a mouse event, or a rectangle object and returns the corresponding rectangle with left, right, width, height, top, and bottom properties
+		if (e === _win) {
+			_tempRect.left = _tempRect.top = 0;
+			_tempRect.width = _tempRect.right = _docElement.clientWidth || e.innerWidth || _body.clientWidth || 0;
+			_tempRect.height = _tempRect.bottom = ((e.innerHeight || 0) - 20 < _docElement.clientHeight) ? _docElement.clientHeight : e.innerHeight || _body.clientHeight || 0;
+			return _tempRect;
+		}
+		let doc = e.ownerDocument || _doc,
+			r = !_isUndefined(e.pageX) ? {left: e.pageX - _getDocScrollLeft(doc), top: e.pageY - _getDocScrollTop(doc), right: e.pageX - _getDocScrollLeft(doc) + 1, bottom: e.pageY - _getDocScrollTop(doc) + 1} : (!e.nodeType && !_isUndefined(e.left) && !_isUndefined(e.top)) ? e : _toArray(e)[0].getBoundingClientRect();
+		if (_isUndefined(r.right) && !_isUndefined(r.width)) {
+			r.right = r.left + r.width;
+			r.bottom = r.top + r.height;
+		} else if (_isUndefined(r.width)) { //some browsers don't include width and height properties. We can't just set them directly on r because some browsers throw errors, so create a new generic object.
+			r = {width: r.right - r.left, height: r.bottom - r.top, right: r.right, left: r.left, bottom: r.bottom, top: r.top};
+		}
+		return r;
+	},
+
+	_dispatchEvent = (target, type, callbackName) => {
+		let vars = target.vars,
+			callback = vars[callbackName],
+			listeners = target._listeners[type],
+			result;
+		if (_isFunction(callback)) {
+			result = callback.apply(vars.callbackScope || target, vars[callbackName + "Params"] || [target.pointerEvent]);
+		}
+		if (listeners && target.dispatchEvent(type) === false) {
+			result = false;
+		}
+		return result;
+	},
+	_getBounds = (target, context) => { //accepts any of the following: a DOM element, jQuery object, selector text, or an object defining bounds as {top, left, width, height} or {minX, maxX, minY, maxY}. Returns an object with left, top, width, and height properties.
+		let e = _toArray(target)[0],
+			top, left, offset;
+		if (!e.nodeType && e !== _win) {
+			if (!_isUndefined(target.left)) {
+				offset = {x:0, y:0}; //_getOffsetTransformOrigin(context); //the bounds should be relative to the origin
+				return {left: target.left - offset.x, top: target.top - offset.y, width: target.width, height: target.height};
+			}
+			left = target.min || target.minX || target.minRotation || 0;
+			top = target.min || target.minY || 0;
+			return {left:left, top:top, width:(target.max || target.maxX || target.maxRotation || 0) - left, height:(target.max || target.maxY || 0) - top};
+		}
+		return _getElementBounds(e, context);
+	},
+	_point1 = {}, //we reuse to minimize garbage collection tasks.
+	_getElementBounds = (element, context) => {
+		context = _toArray(context)[0];
+		let isSVG = (element.getBBox && element.ownerSVGElement),
+			doc = element.ownerDocument || _doc,
+			left, right, top, bottom, matrix, p1, p2, p3, p4, bbox, width, height, cs;
+		if (element === _win) {
+			top = _getDocScrollTop(doc);
+			left = _getDocScrollLeft(doc);
+			right = left + (doc.documentElement.clientWidth || element.innerWidth || doc.body.clientWidth || 0);
+			bottom = top + (((element.innerHeight || 0) - 20 < doc.documentElement.clientHeight) ? doc.documentElement.clientHeight : element.innerHeight || doc.body.clientHeight || 0); //some browsers (like Firefox) ignore absolutely positioned elements, and collapse the height of the documentElement, so it could be 8px, for example, if you have just an absolutely positioned div. In that case, we use the innerHeight to resolve this.
+		} else if (context === _win || _isUndefined(context)) {
+			return element.getBoundingClientRect();
+		} else {
+			left = top =  0;
+			if (isSVG) {
+				bbox = element.getBBox();
+				width = bbox.width;
+				height = bbox.height;
+			} else {
+				if (element.viewBox && (bbox = element.viewBox.baseVal)) {
+					left = bbox.x || 0;
+					top = bbox.y || 0;
+					width = bbox.width;
+					height = bbox.height;
+				}
+				if (!width) {
+					cs = _getComputedStyle(element);
+					bbox = cs.boxSizing === "border-box";
+					width = (parseFloat(cs.width) || element.clientWidth || 0) + (bbox ? 0 : parseFloat(cs.borderLeftWidth) + parseFloat(cs.borderRightWidth));
+					height = (parseFloat(cs.height) || element.clientHeight || 0) + (bbox ? 0 : parseFloat(cs.borderTopWidth) + parseFloat(cs.borderBottomWidth));
+				}
+			}
+			right = width;
+			bottom = height;
+		}
+		if (element === context) {
+			return {left:left, top:top, width: right - left, height: bottom - top};
+		}
+		matrix = getGlobalMatrix(context, true).multiply(getGlobalMatrix(element));
+		p1 = matrix.apply({x:left, y:top});
+		p2 = matrix.apply({x:right, y:top});
+		p3 = matrix.apply({x:right, y:bottom});
+		p4 = matrix.apply({x:left, y:bottom});
+		left = Math.min(p1.x, p2.x, p3.x, p4.x);
+		top = Math.min(p1.y, p2.y, p3.y, p4.y);
+		return {left: left, top: top, width: Math.max(p1.x, p2.x, p3.x, p4.x) - left, height: Math.max(p1.y, p2.y, p3.y, p4.y) - top};
+	},
+	_parseInertia = (draggable, snap, max, min, factor, forceZeroVelocity) => {
+		let vars = {},
+			a, i, l;
+		if (snap) {
+			if (factor !== 1 && snap instanceof Array) { //some data must be altered to make sense, like if the user passes in an array of rotational values in degrees, we must convert it to radians. Or for scrollLeft and scrollTop, we invert the values.
+				vars.end = a = [];
+				l = snap.length;
+				if (_isObject(snap[0])) { //if the array is populated with objects, like points ({x:100, y:200}), make copies before multiplying by the factor, otherwise we'll mess up the originals and the user may reuse it elsewhere.
+					for (i = 0; i < l; i++) {
+						a[i] = _copy(snap[i], factor);
+					}
+				} else {
+					for (i = 0; i < l; i++) {
+						a[i] = snap[i] * factor;
+					}
+				}
+				max += 1.1; //allow 1.1 pixels of wiggle room when snapping in order to work around some browser inconsistencies in the way bounds are reported which can make them roughly a pixel off. For example, if "snap:[-$('#menu').width(), 0]" was defined and #menu had a wrapper that was used as the bounds, some browsers would be one pixel off, making the minimum -752 for example when snap was [-753,0], thus instead of snapping to -753, it would snap to 0 since -753 was below the minimum.
+				min -= 1.1;
+			} else if (_isFunction(snap)) {
+				vars.end = value => {
+					let result = snap.call(draggable, value),
+						copy, p;
+					if (factor !== 1) {
+						if (_isObject(result)) {
+							copy = {};
+							for (p in result) {
+								copy[p] = result[p] * factor;
+							}
+							result = copy;
+						} else {
+							result *= factor;
+						}
+					}
+					return result; //we need to ensure that we can scope the function call to the Draggable instance itself so that users can access important values like maxX, minX, maxY, minY, x, and y from within that function.
+				};
+			} else {
+				vars.end = snap;
+			}
+		}
+		if (max || max === 0) {
+			vars.max = max;
+		}
+		if (min || min === 0) {
+			vars.min = min;
+		}
+		if (forceZeroVelocity) {
+			vars.velocity = 0;
+		}
+		return vars;
+	},
+	_isClickable = element => { //sometimes it's convenient to mark an element as clickable by adding a data-clickable="true" attribute (in which case we won't preventDefault() the mouse/touch event). This method checks if the element is an <a>, <input>, or <button> or has the data-clickable or contentEditable attribute set to true (or any of its parent elements).
+		let data;
+		return (!element || !element.getAttribute || element === _body) ? false : ((data = element.getAttribute("data-clickable")) === "true" || (data !== "false" && (_clickableTagExp.test(element.nodeName + "") || element.getAttribute("contentEditable") === "true"))) ? true : _isClickable(element.parentNode);
+	},
+	_setSelectable = (elements, selectable) => {
+		let i = elements.length,
+			e;
+		while (i--) {
+			e = elements[i];
+			e.ondragstart = e.onselectstart = selectable ? null : _emptyFunc;
+			gsap.set(e, {lazy:true, userSelect: (selectable ? "text" : "none")});
+		}
+	},
+	_isFixed = element => {
+		if (_getComputedStyle(element).position === "fixed") {
+			return true;
+		}
+		element = element.parentNode;
+		if (element && element.nodeType === 1) { // avoid document fragments which will throw an error.
+			return _isFixed(element);
+		}
+	},
+	_supports3D, _addPaddingBR,
+
+	//The ScrollProxy class wraps an element's contents into another div (we call it "content") that we either add padding when necessary or apply a translate3d() transform in order to overscroll (scroll past the boundaries). This allows us to simply set the scrollTop/scrollLeft (or top/left for easier reverse-axis orientation, which is what we do in Draggable) and it'll do all the work for us. For example, if we tried setting scrollTop to -100 on a normal DOM element, it wouldn't work - it'd look the same as setting it to 0, but if we set scrollTop of a ScrollProxy to -100, it'll give the correct appearance by either setting paddingTop of the wrapper to 100 or applying a 100-pixel translateY.
+	ScrollProxy = function(element, vars) {
+		element = gsap.utils.toArray(element)[0];
+		vars = vars || {};
+		let content = document.createElement("div"),
+			style = content.style,
+			node = element.firstChild,
+			offsetTop = 0,
+			offsetLeft = 0,
+			prevTop = element.scrollTop,
+			prevLeft = element.scrollLeft,
+			scrollWidth = element.scrollWidth,
+			scrollHeight = element.scrollHeight,
+			extraPadRight = 0,
+			maxLeft = 0,
+			maxTop = 0,
+			elementWidth, elementHeight, contentHeight, nextNode, transformStart, transformEnd;
+		if (_supports3D && vars.force3D !== false) {
+			transformStart = "translate3d(";
+			transformEnd = "px,0px)";
+		} else if (_transformProp) {
+			transformStart = "translate(";
+			transformEnd = "px)";
+		}
+		this.scrollTop = function(value, force) {
+			if (!arguments.length) {
+				return -this.top();
+			}
+			this.top(-value, force);
+		};
+		this.scrollLeft = function(value, force) {
+			if (!arguments.length) {
+				return -this.left();
+			}
+			this.left(-value, force);
+		};
+		this.left = function(value, force) {
+			if (!arguments.length) {
+				return -(element.scrollLeft + offsetLeft);
+			}
+			let dif = element.scrollLeft - prevLeft,
+				oldOffset = offsetLeft;
+			if ((dif > 2 || dif < -2) && !force) { //if the user interacts with the scrollbar (or something else scrolls it, like the mouse wheel), we should kill any tweens of the ScrollProxy.
+				prevLeft = element.scrollLeft;
+				gsap.killTweensOf(this, {left:1, scrollLeft:1});
+				this.left(-prevLeft);
+				if (vars.onKill) {
+					vars.onKill();
+				}
+				return;
+			}
+			value = -value; //invert because scrolling works in the opposite direction
+			if (value < 0) {
+				offsetLeft = (value - 0.5) | 0;
+				value = 0;
+			} else if (value > maxLeft) {
+				offsetLeft = (value - maxLeft) | 0;
+				value = maxLeft;
+			} else {
+				offsetLeft = 0;
+			}
+			if (offsetLeft || oldOffset) {
+				if (!this._skip) {
+					style[_transformProp] = transformStart + -offsetLeft + "px," + -offsetTop + transformEnd;
+				}
+				if (offsetLeft + extraPadRight >= 0) {
+					style.paddingRight =  offsetLeft + extraPadRight + "px";
+				}
+			}
+			element.scrollLeft = value | 0;
+			prevLeft = element.scrollLeft; //don't merge this with the line above because some browsers adjust the scrollLeft after it's set, so in order to be 100% accurate in tracking it, we need to ask the browser to report it.
+		};
+		this.top = function(value, force) {
+			if (!arguments.length) {
+				return -(element.scrollTop + offsetTop);
+			}
+			let dif = element.scrollTop - prevTop,
+				oldOffset = offsetTop;
+			if ((dif > 2 || dif < -2) && !force) { //if the user interacts with the scrollbar (or something else scrolls it, like the mouse wheel), we should kill any tweens of the ScrollProxy.
+				prevTop = element.scrollTop;
+				gsap.killTweensOf(this, {top:1, scrollTop:1});
+				this.top(-prevTop);
+				if (vars.onKill) {
+					vars.onKill();
+				}
+				return;
+			}
+			value = -value; //invert because scrolling works in the opposite direction
+			if (value < 0) {
+				offsetTop = (value - 0.5) | 0;
+				value = 0;
+			} else if (value > maxTop) {
+				offsetTop = (value - maxTop) | 0;
+				value = maxTop;
+			} else {
+				offsetTop = 0;
+			}
+			if (offsetTop || oldOffset) {
+				if (!this._skip) {
+					style[_transformProp] = transformStart + -offsetLeft + "px," + -offsetTop + transformEnd;
+				}
+			}
+			element.scrollTop = value | 0;
+			prevTop = element.scrollTop;
+		};
+
+		this.maxScrollTop = () => maxTop;
+		this.maxScrollLeft = () => maxLeft;
+
+		this.disable = function() {
+			node = content.firstChild;
+			while (node) {
+				nextNode = node.nextSibling;
+				element.appendChild(node);
+				node = nextNode;
+			}
+			if (element === content.parentNode) { //in case disable() is called when it's already disabled.
+				element.removeChild(content);
+			}
+		};
+		this.enable = function() {
+			node = element.firstChild;
+			if (node === content) {
+				return;
+			}
+			while (node) {
+				nextNode = node.nextSibling;
+				content.appendChild(node);
+				node = nextNode;
+			}
+			element.appendChild(content);
+			this.calibrate();
+		};
+		this.calibrate = function(force) {
+			let widthMatches = (element.clientWidth === elementWidth),
+				cs, x, y;
+			prevTop = element.scrollTop;
+			prevLeft = element.scrollLeft;
+			if (widthMatches && element.clientHeight === elementHeight && content.offsetHeight === contentHeight && scrollWidth === element.scrollWidth && scrollHeight === element.scrollHeight && !force) {
+				return; //no need to recalculate things if the width and height haven't changed.
+			}
+			if (offsetTop || offsetLeft) {
+				x = this.left();
+				y = this.top();
+				this.left(-element.scrollLeft);
+				this.top(-element.scrollTop);
+			}
+			cs = _getComputedStyle(element);
+			//first, we need to remove any width constraints to see how the content naturally flows so that we can see if it's wider than the containing element. If so, we've got to record the amount of overage so that we can apply that as padding in order for browsers to correctly handle things. Then we switch back to a width of 100% (without that, some browsers don't flow the content correctly)
+			if (!widthMatches || force) {
+				style.display = "block";
+				style.width = "auto";
+				style.paddingRight = "0px";
+				extraPadRight = Math.max(0, element.scrollWidth - element.clientWidth);
+				//if the content is wider than the container, we need to add the paddingLeft and paddingRight in order for things to behave correctly.
+				if (extraPadRight) {
+					extraPadRight += parseFloat(cs.paddingLeft) + (_addPaddingBR ? parseFloat(cs.paddingRight) : 0);
+				}
+			}
+			style.display = "inline-block";
+			style.position = "relative";
+			style.overflow = "visible";
+			style.verticalAlign = "top";
+			style.boxSizing = "content-box";
+			style.width = "100%";
+			style.paddingRight = extraPadRight + "px";
+			//some browsers neglect to factor in the bottom padding when calculating the scrollHeight, so we need to add that padding to the content when that happens. Allow a 2px margin for error
+			if (_addPaddingBR) {
+				style.paddingBottom = cs.paddingBottom;
+			}
+			elementWidth = element.clientWidth;
+			elementHeight = element.clientHeight;
+			scrollWidth = element.scrollWidth;
+			scrollHeight = element.scrollHeight;
+			maxLeft = element.scrollWidth - elementWidth;
+			maxTop = element.scrollHeight - elementHeight;
+			contentHeight = content.offsetHeight;
+			style.display = "block";
+			if (x || y) {
+				this.left(x);
+				this.top(y);
+			}
+		};
+		this.content = content;
+		this.element = element;
+		this._skip = false;
+		this.enable();
+	},
+	_initCore = required => {
+		if (_windowExists() && document.body) {
+			let nav = window && window.navigator;
+			_win = window;
+			_doc = document;
+			_docElement = _doc.documentElement;
+			_body = _doc.body;
+			_tempDiv = _createElement("div");
+			_supportsPointer = !!window.PointerEvent;
+			_placeholderDiv = _createElement("div");
+			_placeholderDiv.style.cssText = "visibility:hidden;height:1px;top:-1px;pointer-events:none;position:relative;clear:both;cursor:grab";
+			_defaultCursor = _placeholderDiv.style.cursor === "grab" ? "grab" : "move";
+			_isAndroid = (nav && nav.userAgent.toLowerCase().indexOf("android") !== -1); //Android handles touch events in an odd way and it's virtually impossible to "feature test" so we resort to UA sniffing
+			_isTouchDevice = (("ontouchstart" in _docElement) && ("orientation" in _win)) || (nav && (nav.MaxTouchPoints > 0 || nav.msMaxTouchPoints > 0));
+			_addPaddingBR = (function() { //this function is in charge of analyzing browser behavior related to padding. It sets the _addPaddingBR to true if the browser doesn't normally factor in the bottom or right padding on the element inside the scrolling area, and it sets _addPaddingLeft to true if it's a browser that requires the extra offset (offsetLeft) to be added to the paddingRight (like Opera).
+				let div = _createElement("div"),
+					child = _createElement("div"),
+					childStyle = child.style,
+					parent = _body,
+					val;
+				childStyle.display = "inline-block";
+				childStyle.position = "relative";
+				div.style.cssText = "width:90px;height:40px;padding:10px;overflow:auto;visibility:hidden";
+				div.appendChild(child);
+				parent.appendChild(div);
+				val = (child.offsetHeight + 18 > div.scrollHeight); //div.scrollHeight should be child.offsetHeight + 20 because of the 10px of padding on each side, but some browsers ignore one side. We allow a 2px margin of error.
+				parent.removeChild(div);
+				return val;
+			}());
+			_touchEventLookup = (function(types) { //we create an object that makes it easy to translate touch event types into their "pointer" counterparts if we're in a browser that uses those instead. Like IE10 uses "MSPointerDown" instead of "touchstart", for example.
+				let standard = types.split(","),
+					converted = ("onpointerdown" in _tempDiv ? "pointerdown,pointermove,pointerup,pointercancel" : "onmspointerdown" in _tempDiv ? "MSPointerDown,MSPointerMove,MSPointerUp,MSPointerCancel" : types).split(","),
+					obj = {},
+					i = 4;
+				while (--i > -1) {
+					obj[standard[i]] = converted[i];
+					obj[converted[i]] = standard[i];
+				}
+				//to avoid problems in iOS 9, test to see if the browser supports the "passive" option on addEventListener().
+				try {
+					_docElement.addEventListener("test", null, Object.defineProperty({}, "passive", {
+						get: function () {
+							_supportsPassive = 1;
+						}
+					}));
+				} catch (e) {}
+				return obj;
+			}("touchstart,touchmove,touchend,touchcancel"));
+			_addListener(_doc, "touchcancel", _emptyFunc); //some older Android devices intermittently stop dispatching "touchmove" events if we don't listen for "touchcancel" on the document. Very strange indeed.
+			_addListener(_win, "touchmove", _emptyFunc); //works around Safari bugs that still allow the page to scroll even when we preventDefault() on the touchmove event.
+			_body && _body.addEventListener("touchstart", _emptyFunc); //works around Safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/
+			_addListener(_doc, "contextmenu", function() {
+				for (let p in _lookup) {
+					if (_lookup[p].isPressed) {
+						_lookup[p].endDrag();
+					}
+				}
+			});
+			gsap = _coreInitted = _getGSAP();
+		}
+		if (gsap) {
+			InertiaPlugin = gsap.plugins.inertia;
+			_context = gsap.core.context || function() {};
+			_checkPrefix = gsap.utils.checkPrefix;
+			_transformProp = _checkPrefix(_transformProp);
+			_transformOriginProp = _checkPrefix(_transformOriginProp);
+			_toArray = gsap.utils.toArray;
+			_getStyleSaver = gsap.core.getStyleSaver;
+			_supports3D = !!_checkPrefix("perspective");
+		} else if (required) {
+			console.warn("Please gsap.registerPlugin(Draggable)");
+		}
+	};
+
+
+
+
+
+
+class EventDispatcher {
+
+	constructor(target) {
+		this._listeners = {};
+		this.target = target || this;
+	}
+
+	addEventListener(type, callback) {
+		let list = this._listeners[type] || (this._listeners[type] = []);
+		if (!~list.indexOf(callback)) {
+			list.push(callback);
+		}
+	}
+
+	removeEventListener(type, callback) {
+		let list = this._listeners[type],
+			i = (list && list.indexOf(callback));
+		(i >= 0) && list.splice(i, 1);
+	}
+
+	dispatchEvent(type) {
+		let result;
+		(this._listeners[type] || []).forEach(callback => (callback.call(this, {type: type, target: this.target}) === false) && (result = false));
+		return result; //if any of the callbacks return false, pass that along.
+	}
+}
+
+
+
+
+
+
+
+
+
+class Draggable extends EventDispatcher {
+
+	constructor(target, vars) {
+		super();
+		_coreInitted || _initCore(1);
+		target = _toArray(target)[0]; //in case the target is a selector object or selector text
+		this.styles = _getStyleSaver && _getStyleSaver(target, "transform,left,top");
+		if (!InertiaPlugin) {
+			InertiaPlugin = gsap.plugins.inertia;
+		}
+		this.vars = vars = _copy(vars || {});
+		this.target = target;
+		this.x = this.y = this.rotation = 0;
+		this.dragResistance = parseFloat(vars.dragResistance) || 0;
+		this.edgeResistance = isNaN(vars.edgeResistance) ? 1 : parseFloat(vars.edgeResistance) || 0;
+		this.lockAxis = vars.lockAxis;
+		this.autoScroll = vars.autoScroll || 0;
+		this.lockedAxis = null;
+		this.allowEventDefault = !!vars.allowEventDefault;
+
+		gsap.getProperty(target, "x"); // to ensure that transforms are instantiated.
+
+		let type = (vars.type || "x,y").toLowerCase(),
+			xyMode = (~type.indexOf("x") || ~type.indexOf("y")),
+			rotationMode = (type.indexOf("rotation") !== -1),
+			xProp = rotationMode ? "rotation" : xyMode ? "x" : "left",
+			yProp = xyMode ? "y" : "top",
+			allowX = !!(~type.indexOf("x") || ~type.indexOf("left") || type === "scroll"),
+			allowY = !!(~type.indexOf("y") || ~type.indexOf("top") || type === "scroll"),
+			minimumMovement = vars.minimumMovement || 2,
+			self = this,
+			triggers = _toArray(vars.trigger || vars.handle || target),
+			killProps = {},
+			dragEndTime = 0,
+			checkAutoScrollBounds = false,
+			autoScrollMarginTop = vars.autoScrollMarginTop || 40,
+			autoScrollMarginRight = vars.autoScrollMarginRight || 40,
+			autoScrollMarginBottom = vars.autoScrollMarginBottom || 40,
+			autoScrollMarginLeft = vars.autoScrollMarginLeft || 40,
+			isClickable = vars.clickableTest || _isClickable,
+			clickTime = 0,
+			gsCache = target._gsap || gsap.core.getCache(target),
+			isFixed = _isFixed(target),
+			getPropAsNum = (property, unit) => parseFloat(gsCache.get(target, property, unit)),
+			ownerDoc = target.ownerDocument || _doc,
+			enabled, scrollProxy, startPointerX, startPointerY, startElementX, startElementY, hasBounds, hasDragCallback, hasMoveCallback, maxX, minX, maxY, minY, touch, touchID, rotationOrigin, dirty, old, snapX, snapY, snapXY, isClicking, touchEventTarget, matrix, interrupted, allowNativeTouchScrolling, touchDragAxis, isDispatching, clickDispatch, trustedClickDispatch, isPreventingDefault, innerMatrix, dragged,
+
+			onContextMenu = e => { //used to prevent long-touch from triggering a context menu.
+				// (self.isPressed && e.which < 2) && self.endDrag() // previously ended drag when context menu was triggered, but instead we should just stop propagation and prevent the default event behavior.
+				_preventDefault(e);
+				e.stopImmediatePropagation && e.stopImmediatePropagation();
+				return false;
+			},
+
+			//this method gets called on every tick of TweenLite.ticker which allows us to synchronize the renders to the core engine (which is typically synchronized with the display refresh via requestAnimationFrame). This is an optimization - it's better than applying the values inside the "mousemove" or "touchmove" event handler which may get called many times inbetween refreshes.
+			render = suppressEvents => {
+				if (self.autoScroll && self.isDragging && (checkAutoScrollBounds || dirty)) {
+					let e = target,
+						autoScrollFactor = self.autoScroll * 15, //multiplying by 15 just gives us a better "feel" speed-wise.
+						parent, isRoot, rect, pointerX, pointerY, changeX, changeY, gap;
+					checkAutoScrollBounds = false;
+					_windowProxy.scrollTop = ((_win.pageYOffset != null) ? _win.pageYOffset : (ownerDoc.documentElement.scrollTop != null) ? ownerDoc.documentElement.scrollTop : ownerDoc.body.scrollTop);
+					_windowProxy.scrollLeft = ((_win.pageXOffset != null) ? _win.pageXOffset : (ownerDoc.documentElement.scrollLeft != null) ? ownerDoc.documentElement.scrollLeft : ownerDoc.body.scrollLeft);
+					pointerX = self.pointerX - _windowProxy.scrollLeft;
+					pointerY = self.pointerY - _windowProxy.scrollTop;
+					while (e && !isRoot) { //walk up the chain and sense wherever the pointer is within 40px of an edge that's scrollable.
+						isRoot = _isRoot(e.parentNode);
+						parent = isRoot ? _windowProxy : e.parentNode;
+						rect = isRoot ? {bottom:Math.max(_docElement.clientHeight, _win.innerHeight || 0), right: Math.max(_docElement.clientWidth, _win.innerWidth || 0), left:0, top:0} : parent.getBoundingClientRect();
+						changeX = changeY = 0;
+						if (allowY) {
+							gap = parent._gsMaxScrollY - parent.scrollTop;
+							if (gap < 0) {
+								changeY = gap;
+							} else if (pointerY > rect.bottom - autoScrollMarginBottom && gap) {
+								checkAutoScrollBounds = true;
+								changeY = Math.min(gap, (autoScrollFactor * (1 - Math.max(0, (rect.bottom - pointerY)) / autoScrollMarginBottom)) | 0);
+							} else if (pointerY < rect.top + autoScrollMarginTop && parent.scrollTop) {
+								checkAutoScrollBounds = true;
+								changeY = -Math.min(parent.scrollTop, (autoScrollFactor * (1 - Math.max(0, (pointerY - rect.top)) / autoScrollMarginTop)) | 0);
+							}
+							if (changeY) {
+								parent.scrollTop += changeY;
+							}
+						}
+						if (allowX) {
+							gap = parent._gsMaxScrollX - parent.scrollLeft;
+							if (gap < 0) {
+								changeX = gap;
+							} else if (pointerX > rect.right - autoScrollMarginRight && gap) {
+								checkAutoScrollBounds = true;
+								changeX = Math.min(gap, (autoScrollFactor * (1 - Math.max(0, (rect.right - pointerX)) / autoScrollMarginRight)) | 0);
+							} else if (pointerX < rect.left + autoScrollMarginLeft && parent.scrollLeft) {
+								checkAutoScrollBounds = true;
+								changeX = -Math.min(parent.scrollLeft, (autoScrollFactor * (1 - Math.max(0, (pointerX - rect.left)) / autoScrollMarginLeft)) | 0);
+							}
+							if (changeX) {
+								parent.scrollLeft += changeX;
+							}
+						}
+
+						if (isRoot && (changeX || changeY)) {
+							_win.scrollTo(parent.scrollLeft, parent.scrollTop);
+							setPointerPosition(self.pointerX + changeX, self.pointerY + changeY);
+						}
+						e = parent;
+					}
+				}
+				if (dirty) {
+					let {x, y} = self;
+					if (rotationMode) {
+						self.deltaX = x - parseFloat(gsCache.rotation);
+						self.rotation = x;
+						gsCache.rotation = x + "deg";
+						gsCache.renderTransform(1, gsCache);
+					} else {
+						if (scrollProxy) {
+							if (allowY) {
+								self.deltaY = y - scrollProxy.top();
+								scrollProxy.top(y);
+							}
+							if (allowX) {
+								self.deltaX = x - scrollProxy.left();
+								scrollProxy.left(x);
+							}
+						} else if (xyMode) {
+							if (allowY) {
+								self.deltaY = y - parseFloat(gsCache.y);
+								gsCache.y = y + "px";
+							}
+							if (allowX) {
+								self.deltaX = x - parseFloat(gsCache.x);
+								gsCache.x = x + "px";
+							}
+							gsCache.renderTransform(1, gsCache);
+						} else {
+							if (allowY) {
+								self.deltaY = y - parseFloat(target.style.top || 0);
+								target.style.top = y + "px";
+							}
+							if (allowX) {
+								self.deltaX = x - parseFloat(target.style.left || 0);
+								target.style.left = x + "px";
+							}
+						}
+					}
+					if (hasDragCallback && !suppressEvents && !isDispatching) {
+						isDispatching = true; //in case onDrag has an update() call (avoid endless loop)
+						if (_dispatchEvent(self, "drag", "onDrag") === false) {
+							if (allowX) {
+								self.x -= self.deltaX;
+							}
+							if (allowY) {
+								self.y -= self.deltaY;
+							}
+							render(true);
+						}
+						isDispatching = false;
+					}
+				}
+				dirty = false;
+			},
+
+			//copies the x/y from the element (whether that be transforms, top/left, or ScrollProxy's top/left) to the Draggable's x and y (and rotation if necessary) properties so that they reflect reality and it also (optionally) applies any snapping necessary. This is used by the InertiaPlugin tween in an onUpdate to ensure things are synced and snapped.
+			syncXY = (skipOnUpdate, skipSnap) => {
+				let { x, y } = self,
+					snappedValue, cs;
+				if (!target._gsap) { //just in case the _gsap cache got wiped, like if the user called clearProps on the transform or something (very rare).
+					gsCache = gsap.core.getCache(target);
+				}
+				gsCache.uncache && gsap.getProperty(target, "x"); // trigger a re-cache
+				if (xyMode) {
+					self.x = parseFloat(gsCache.x);
+					self.y = parseFloat(gsCache.y);
+				} else if (rotationMode) {
+					self.x = self.rotation = parseFloat(gsCache.rotation);
+				} else if (scrollProxy) {
+					self.y = scrollProxy.top();
+					self.x = scrollProxy.left();
+				} else {
+					self.y = parseFloat(target.style.top || ((cs = _getComputedStyle(target)) && cs.top)) || 0;
+					self.x = parseFloat(target.style.left || (cs || {}).left) || 0;
+				}
+				if ((snapX || snapY || snapXY) && !skipSnap && (self.isDragging || self.isThrowing)) {
+					if (snapXY) {
+						_temp1.x = self.x;
+						_temp1.y = self.y;
+						snappedValue = snapXY(_temp1);
+						if (snappedValue.x !== self.x) {
+							self.x = snappedValue.x;
+							dirty = true;
+						}
+						if (snappedValue.y !== self.y) {
+							self.y = snappedValue.y;
+							dirty = true;
+						}
+					}
+					if (snapX) {
+						snappedValue = snapX(self.x);
+						if (snappedValue !== self.x) {
+							self.x = snappedValue;
+							if (rotationMode) {
+								self.rotation = snappedValue;
+							}
+							dirty = true;
+						}
+					}
+					if (snapY) {
+						snappedValue = snapY(self.y);
+						if (snappedValue !== self.y) {
+							self.y = snappedValue;
+						}
+						dirty = true;
+					}
+				}
+				dirty && render(true);
+				if (!skipOnUpdate) {
+					self.deltaX = self.x - x;
+					self.deltaY = self.y - y;
+					_dispatchEvent(self, "throwupdate", "onThrowUpdate");
+				}
+			},
+
+			buildSnapFunc = (snap, min, max, factor) => {
+				if (min == null) {
+					min = -_bigNum;
+				}
+				if (max == null) {
+					max = _bigNum;
+				}
+				if (_isFunction(snap)) {
+					return n => {
+						let edgeTolerance = !self.isPressed ? 1 : 1 - self.edgeResistance; //if we're tweening, disable the edgeTolerance because it's already factored into the tweening values (we don't want to apply it multiple times)
+						return snap.call(self, (n > max ? max + (n - max) * edgeTolerance : (n < min) ? min + (n - min) * edgeTolerance : n) * factor) * factor;
+					};
+				}
+				if (_isArray(snap)) {
+					return n => {
+						let i = snap.length,
+							closest = 0,
+							absDif = _bigNum,
+							val, dif;
+						while (--i > -1) {
+							val = snap[i];
+							dif = val - n;
+							if (dif < 0) {
+								dif = -dif;
+							}
+							if (dif < absDif && val >= min && val <= max) {
+								closest = i;
+								absDif = dif;
+							}
+						}
+						return snap[closest];
+					};
+				}
+				return isNaN(snap) ? n => n : () => snap * factor;
+			},
+
+			buildPointSnapFunc = (snap, minX, maxX, minY, maxY, radius, factor) => {
+				radius = (radius && radius < _bigNum) ? radius * radius : _bigNum; //so we don't have to Math.sqrt() in the functions. Performance optimization.
+				if (_isFunction(snap)) {
+					return point => {
+						let edgeTolerance = !self.isPressed ? 1 : 1 - self.edgeResistance,
+							x = point.x,
+							y = point.y,
+							result, dx, dy; //if we're tweening, disable the edgeTolerance because it's already factored into the tweening values (we don't want to apply it multiple times)
+						point.x = x = (x > maxX ? maxX + (x - maxX) * edgeTolerance : (x < minX) ? minX + (x - minX) * edgeTolerance : x);
+						point.y = y = (y > maxY ? maxY + (y - maxY) * edgeTolerance : (y < minY) ? minY + (y - minY) * edgeTolerance : y);
+						result = snap.call(self, point);
+						if (result !== point) {
+							point.x = result.x;
+							point.y = result.y;
+						}
+						if (factor !== 1) {
+							point.x *= factor;
+							point.y *= factor;
+						}
+						if (radius < _bigNum) {
+							dx = point.x - x;
+							dy = point.y - y;
+							if (dx * dx + dy * dy > radius) {
+								point.x = x;
+								point.y = y;
+							}
+						}
+						return point;
+					};
+				}
+				if (_isArray(snap)) {
+					return p => {
+						let i = snap.length,
+							closest = 0,
+							minDist = _bigNum,
+							x, y, point, dist;
+						while (--i > -1) {
+							point = snap[i];
+							x = point.x - p.x;
+							y = point.y - p.y;
+							dist = x * x + y * y;
+							if (dist < minDist) {
+								closest = i;
+								minDist = dist;
+							}
+						}
+						return (minDist <= radius) ? snap[closest] : p;
+					};
+				}
+				return n => n;
+			},
+
+			calculateBounds = () => {
+				let bounds, targetBounds, snap, snapIsRaw;
+				hasBounds = false;
+				if (scrollProxy) {
+					scrollProxy.calibrate();
+					self.minX = minX = -scrollProxy.maxScrollLeft();
+					self.minY = minY = -scrollProxy.maxScrollTop();
+					self.maxX = maxX = self.maxY = maxY = 0;
+					hasBounds = true;
+				} else if (!!vars.bounds) {
+					bounds = _getBounds(vars.bounds, target.parentNode); //could be a selector/jQuery object or a DOM element or a generic object like {top:0, left:100, width:1000, height:800} or {minX:100, maxX:1100, minY:0, maxY:800}
+					if (rotationMode) {
+						self.minX = minX = bounds.left;
+						self.maxX = maxX = bounds.left + bounds.width;
+						self.minY = minY = self.maxY = maxY = 0;
+					} else if (!_isUndefined(vars.bounds.maxX) || !_isUndefined(vars.bounds.maxY)) {
+						bounds = vars.bounds;
+						self.minX = minX = bounds.minX;
+						self.minY = minY = bounds.minY;
+						self.maxX = maxX = bounds.maxX;
+						self.maxY = maxY = bounds.maxY;
+					} else {
+						targetBounds = _getBounds(target, target.parentNode);
+						self.minX = minX = Math.round(getPropAsNum(xProp, "px") + bounds.left - targetBounds.left);
+						self.minY = minY = Math.round(getPropAsNum(yProp, "px") + bounds.top - targetBounds.top);
+						self.maxX = maxX = Math.round(minX + (bounds.width - targetBounds.width));
+						self.maxY = maxY = Math.round(minY + (bounds.height - targetBounds.height));
+					}
+					if (minX > maxX) {
+						self.minX = maxX;
+						self.maxX = maxX = minX;
+						minX = self.minX;
+					}
+					if (minY > maxY) {
+						self.minY = maxY;
+						self.maxY = maxY = minY;
+						minY = self.minY;
+					}
+					if (rotationMode) {
+						self.minRotation = minX;
+						self.maxRotation = maxX;
+					}
+					hasBounds = true;
+				}
+				if (vars.liveSnap) {
+					snap = (vars.liveSnap === true) ? (vars.snap || {}) : vars.liveSnap;
+					snapIsRaw = (_isArray(snap) || _isFunction(snap));
+					if (rotationMode) {
+						snapX = buildSnapFunc((snapIsRaw ? snap : snap.rotation), minX, maxX, 1);
+						snapY = null;
+					} else {
+						if (snap.points) {
+							snapXY = buildPointSnapFunc((snapIsRaw ? snap : snap.points), minX, maxX, minY, maxY, snap.radius, scrollProxy ? -1 : 1);
+						} else {
+							if (allowX) {
+								snapX = buildSnapFunc((snapIsRaw ? snap : snap.x || snap.left || snap.scrollLeft), minX, maxX, scrollProxy ? -1 : 1);
+							}
+							if (allowY) {
+								snapY = buildSnapFunc((snapIsRaw ? snap : snap.y || snap.top || snap.scrollTop), minY, maxY, scrollProxy ? -1 : 1);
+							}
+						}
+					}
+				}
+			},
+
+			onThrowComplete = () => {
+				self.isThrowing = false;
+				_dispatchEvent(self, "throwcomplete", "onThrowComplete");
+			},
+			onThrowInterrupt = () => {
+				self.isThrowing = false;
+			},
+
+			animate = (inertia, forceZeroVelocity) => {
+				let snap, snapIsRaw, tween, overshootTolerance;
+				if (inertia && InertiaPlugin) {
+					if (inertia === true) {
+						snap = vars.snap || vars.liveSnap || {};
+						snapIsRaw = (_isArray(snap) || _isFunction(snap));
+						inertia = {resistance:(vars.throwResistance || vars.resistance || 1000) / (rotationMode ? 10 : 1)};
+						if (rotationMode) {
+							inertia.rotation = _parseInertia(self, snapIsRaw ? snap : snap.rotation, maxX, minX, 1, forceZeroVelocity);
+						} else {
+							if (allowX) {
+								inertia[xProp] = _parseInertia(self, snapIsRaw ? snap : snap.points || snap.x || snap.left, maxX, minX, scrollProxy ? -1 : 1, forceZeroVelocity || (self.lockedAxis === "x"));
+							}
+							if (allowY) {
+								inertia[yProp] = _parseInertia(self, snapIsRaw ? snap : snap.points || snap.y || snap.top, maxY, minY, scrollProxy ? -1 : 1, forceZeroVelocity || (self.lockedAxis === "y"));
+							}
+							if (snap.points || (_isArray(snap) && _isObject(snap[0]))) {
+								inertia.linkedProps = xProp + "," + yProp;
+								inertia.radius = snap.radius; //note: we also disable liveSnapping while throwing if there's a "radius" defined, otherwise it looks weird to have the item thrown past a snapping point but live-snapping mid-tween. We do this by altering the onUpdateParams so that "skipSnap" parameter is true for syncXY.
+							}
+						}
+					}
+					self.isThrowing = true;
+					overshootTolerance = (!isNaN(vars.overshootTolerance)) ? vars.overshootTolerance : (vars.edgeResistance === 1) ? 0 : (1 - self.edgeResistance) + 0.2;
+					if (!inertia.duration) {
+						inertia.duration = {max: Math.max(vars.minDuration || 0, ("maxDuration" in vars) ? vars.maxDuration : 2), min: (!isNaN(vars.minDuration) ? vars.minDuration : (overshootTolerance === 0 || (_isObject(inertia) && inertia.resistance > 1000)) ? 0 : 0.5), overshoot: overshootTolerance};
+					}
+					self.tween = tween = gsap.to(scrollProxy || target, {
+						inertia: inertia,
+						data: "_draggable",
+						inherit: false,
+						onComplete: onThrowComplete,
+						onInterrupt: onThrowInterrupt,
+						onUpdate: (vars.fastMode ? _dispatchEvent : syncXY),
+						onUpdateParams: (vars.fastMode ? [self, "onthrowupdate", "onThrowUpdate"] : (snap && snap.radius) ? [false, true] : [])
+					});
+					if (!vars.fastMode) {
+						if (scrollProxy) {
+							scrollProxy._skip = true; // Microsoft browsers have a bug that causes them to briefly render the position incorrectly (it flashes to the end state when we seek() the tween even though we jump right back to the current position, and this only seems to happen when we're affecting both top and left), so we set a _suspendTransforms flag to prevent it from actually applying the values in the ScrollProxy.
+						}
+						tween.render(1e9, true, true); // force to the end. Remember, the duration will likely change upon initting because that's when InertiaPlugin calculates it.
+						syncXY(true, true);
+						self.endX = self.x;
+						self.endY = self.y;
+						if (rotationMode) {
+							self.endRotation = self.x;
+						}
+						tween.play(0);
+						syncXY(true, true);
+						if (scrollProxy) {
+							scrollProxy._skip = false; //Microsoft browsers have a bug that causes them to briefly render the position incorrectly (it flashes to the end state when we seek() the tween even though we jump right back to the current position, and this only seems to happen when we're affecting both top and left), so we set a _suspendTransforms flag to prevent it from actually applying the values in the ScrollProxy.
+						}
+					}
+				} else if (hasBounds) {
+					self.applyBounds();
+				}
+			},
+
+			updateMatrix = shiftStart => {
+				let start = matrix,
+					p;
+				matrix = getGlobalMatrix(target.parentNode, true);
+				if (shiftStart && self.isPressed && !matrix.equals(start || new Matrix2D())) { //if the matrix changes WHILE the element is pressed, we must adjust the startPointerX and startPointerY accordingly, so we invert the original matrix and figure out where the pointerX and pointerY were in the global space, then apply the new matrix to get the updated coordinates.
+					p = start.inverse().apply({x:startPointerX, y:startPointerY});
+					matrix.apply(p, p);
+					startPointerX = p.x;
+					startPointerY = p.y;
+				}
+				if (matrix.equals(_identityMatrix)) { //if there are no transforms, we can optimize performance by not factoring in the matrix
+					matrix = null;
+				}
+			},
+
+			recordStartPositions = () => {
+				let edgeTolerance = 1 - self.edgeResistance,
+					offsetX = isFixed ? _getDocScrollLeft(ownerDoc) : 0,
+					offsetY = isFixed ? _getDocScrollTop(ownerDoc) : 0,
+					parsedOrigin, x, y;
+				if (xyMode) { // in case the user set it as a different unit, like animating the x to "100%". We must convert it back to px!
+					gsCache.x = getPropAsNum(xProp, "px") + "px";
+					gsCache.y = getPropAsNum(yProp, "px") + "px";
+					gsCache.renderTransform();
+				}
+				updateMatrix(false);
+				_point1.x = self.pointerX - offsetX;
+				_point1.y = self.pointerY - offsetY;
+				matrix && matrix.apply(_point1, _point1);
+				startPointerX = _point1.x; //translate to local coordinate system
+				startPointerY = _point1.y;
+				if (dirty) {
+					setPointerPosition(self.pointerX, self.pointerY);
+					render(true);
+				}
+				innerMatrix = getGlobalMatrix(target);
+				if (scrollProxy) {
+					calculateBounds();
+					startElementY = scrollProxy.top();
+					startElementX = scrollProxy.left();
+				} else {
+					//if the element is in the process of tweening, don't force snapping to occur because it could make it jump. Imagine the user throwing, then before it's done, clicking on the element in its inbetween state.
+					if (isTweening()) {
+						syncXY(true, true);
+						calculateBounds();
+					} else {
+						self.applyBounds();
+					}
+					if (rotationMode) {
+						parsedOrigin = target.ownerSVGElement ? [gsCache.xOrigin - target.getBBox().x, gsCache.yOrigin - target.getBBox().y] : (_getComputedStyle(target)[_transformOriginProp] || "0 0").split(" ");
+						rotationOrigin = self.rotationOrigin = getGlobalMatrix(target).apply({x: parseFloat(parsedOrigin[0]) || 0, y: parseFloat(parsedOrigin[1]) || 0});
+						syncXY(true, true);
+						x = self.pointerX - rotationOrigin.x - offsetX;
+						y = rotationOrigin.y - self.pointerY + offsetY;
+						startElementX = self.x; //starting rotation (x always refers to rotation in type:"rotation", measured in degrees)
+						startElementY = self.y = Math.atan2(y, x) * _RAD2DEG;
+					} else {
+						//parent = !isFixed && target.parentNode;
+						//startScrollTop = parent ? parent.scrollTop || 0 : 0;
+						//startScrollLeft = parent ? parent.scrollLeft || 0 : 0;
+						startElementY = getPropAsNum(yProp, "px"); //record the starting top and left values so that we can just add the mouse's movement to them later.
+						startElementX = getPropAsNum(xProp, "px");
+					}
+				}
+
+				if (hasBounds && edgeTolerance) {
+					if (startElementX > maxX) {
+						startElementX = maxX + (startElementX - maxX) / edgeTolerance;
+					} else if (startElementX < minX) {
+						startElementX = minX - (minX - startElementX) / edgeTolerance;
+					}
+					if (!rotationMode) {
+						if (startElementY > maxY) {
+							startElementY = maxY + (startElementY - maxY) / edgeTolerance;
+						} else if (startElementY < minY) {
+							startElementY = minY - (minY - startElementY) / edgeTolerance;
+						}
+					}
+				}
+				self.startX = startElementX = _round(startElementX);
+				self.startY = startElementY = _round(startElementY);
+			},
+
+			isTweening = () => self.tween && self.tween.isActive(),
+
+			removePlaceholder = () => {
+				if (_placeholderDiv.parentNode && !isTweening() && !self.isDragging) { //_placeholderDiv just props open auto-scrolling containers so they don't collapse as the user drags left/up. We remove it after dragging (and throwing, if necessary) finishes.
+					_placeholderDiv.parentNode.removeChild(_placeholderDiv);
+				}
+			},
+
+			//called when the mouse is pressed (or touch starts)
+			onPress = (e, force) => {
+				let i;
+				if (!enabled || self.isPressed || !e || ((e.type === "mousedown" || e.type === "pointerdown") && !force && _getTime() - clickTime < 30 && _touchEventLookup[self.pointerEvent.type])) { //when we DON'T preventDefault() in order to accommodate touch-scrolling and the user just taps, many browsers also fire a mousedown/mouseup sequence AFTER the touchstart/touchend sequence, thus it'd result in two quick "click" events being dispatched. This line senses that condition and halts it on the subsequent mousedown.
+					isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchstart, pointerdown, mousedown. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.
+					return;
+				}
+				interrupted = isTweening();
+				dragged = false; // we need to track whether or not it was dragged in this interaction so that if, for example, the user calls .endDrag() to FORCE it to stop and then they keep the mouse pressed down and eventually release, that would normally cause an onClick but we have to skip it in that case if there was dragging that occurred.
+				self.pointerEvent = e;
+				if (_touchEventLookup[e.type]) { //note: on iOS, BOTH touchmove and mousemove are dispatched, but the mousemove has pageY and pageX of 0 which would mess up the calculations and needlessly hurt performance.
+					touchEventTarget = ~e.type.indexOf("touch") ? (e.currentTarget || e.target) : ownerDoc; //pointer-based touches (for Microsoft browsers) don't remain locked to the original target like other browsers, so we must use the document instead. The event type would be "MSPointerDown" or "pointerdown".
+					_addListener(touchEventTarget, "touchend", onRelease);
+					_addListener(touchEventTarget, "touchmove", onMove); // possible future change if PointerEvents are more standardized: https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture
+					_addListener(touchEventTarget, "touchcancel", onRelease);
+					_addListener(ownerDoc, "touchstart", _onMultiTouchDocument);
+				} else {
+					touchEventTarget = null;
+					_addListener(ownerDoc, "mousemove", onMove); //attach these to the document instead of the box itself so that if the user's mouse moves too quickly (and off of the box), things still work.
+				}
+				touchDragAxis = null;
+				if (!_supportsPointer  || !touchEventTarget) {
+					_addListener(ownerDoc, "mouseup", onRelease);
+					e && e.target && _addListener(e.target, "mouseup", onRelease); //we also have to listen directly on the element because some browsers don't bubble up the event to the _doc on elements with contentEditable="true"
+				}
+				isClicking = (isClickable.call(self, e.target) && vars.dragClickables === false && !force);
+				if (isClicking) {
+					_addListener(e.target, "change", onRelease); //in some browsers, when you mousedown on a <select> element, no mouseup gets dispatched! So we listen for a "change" event instead.
+					_dispatchEvent(self, "pressInit", "onPressInit");
+					_dispatchEvent(self, "press", "onPress");
+					_setSelectable(triggers, true); //accommodates things like inputs and elements with contentEditable="true" (otherwise user couldn't drag to select text)
+					isPreventingDefault = false;
+					return;
+				}
+				allowNativeTouchScrolling = (!touchEventTarget || allowX === allowY || self.vars.allowNativeTouchScrolling === false || (self.vars.allowContextMenu && e && (e.ctrlKey || e.which > 2))) ? false : allowX ? "y" : "x"; //note: in Chrome, right-clicking (for a context menu) fires onPress and it doesn't have the event.which set properly, so we must look for event.ctrlKey. If the user wants to allow context menus we should of course sense it here and not allow native touch scrolling.
+				isPreventingDefault = !allowNativeTouchScrolling && !self.allowEventDefault;
+				if (isPreventingDefault) {
+					_preventDefault(e);
+					_addListener(_win, "touchforcechange", _preventDefault); //works around safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/
+				}
+				if (e.changedTouches) { //touch events store the data slightly differently
+					e = touch = e.changedTouches[0];
+					touchID = e.identifier;
+				} else if (e.pointerId) {
+					touchID = e.pointerId; //for some Microsoft browsers
+				} else {
+					touch = touchID = null;
+				}
+				_dragCount++;
+				_addToRenderQueue(render); //causes the Draggable to render on each "tick" of gsap.ticker (performance optimization - updating values in a mousemove can cause them to happen too frequently, like multiple times between frame redraws which is wasteful, and it also prevents values from updating properly in IE8)
+				startPointerY = self.pointerY = e.pageY; //record the starting x and y so that we can calculate the movement from the original in _onMouseMove
+				startPointerX = self.pointerX = e.pageX;
+				_dispatchEvent(self, "pressInit", "onPressInit");
+				if (allowNativeTouchScrolling || self.autoScroll) {
+					_recordMaxScrolls(target.parentNode);
+				}
+				if (target.parentNode && self.autoScroll && !scrollProxy && !rotationMode && target.parentNode._gsMaxScrollX && !_placeholderDiv.parentNode && !target.getBBox) { //add a placeholder div to prevent the parent container from collapsing when the user drags the element left.
+					_placeholderDiv.style.width = target.parentNode.scrollWidth + "px";
+					target.parentNode.appendChild(_placeholderDiv);
+				}
+				recordStartPositions();
+				self.tween && self.tween.kill();
+				self.isThrowing = false;
+				gsap.killTweensOf(scrollProxy || target, killProps, true); //in case the user tries to drag it before the last tween is done.
+				scrollProxy && gsap.killTweensOf(target, {scrollTo:1}, true); //just in case the original target's scroll position is being tweened somewhere else.
+				self.tween = self.lockedAxis = null;
+				if (vars.zIndexBoost || (!rotationMode && !scrollProxy && vars.zIndexBoost !== false)) {
+					target.style.zIndex = Draggable.zIndex++;
+				}
+				self.isPressed = true;
+				hasDragCallback = !!(vars.onDrag || self._listeners.drag);
+				hasMoveCallback = !!(vars.onMove || self._listeners.move);
+				if (vars.cursor !== false || vars.activeCursor) {
+					i = triggers.length;
+					while (--i > -1) {
+						gsap.set(triggers[i], {cursor: vars.activeCursor || vars.cursor || (_defaultCursor === "grab" ? "grabbing" : _defaultCursor)});
+					}
+				}
+				_dispatchEvent(self, "press", "onPress");
+			},
+
+			//called every time the mouse/touch moves
+			onMove = e => {
+				let originalEvent = e,
+					touches, pointerX, pointerY, i, dx, dy;
+				if (!enabled || _isMultiTouching || !self.isPressed || !e) {
+					isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchmove, pointermove, mousemove. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.
+					return;
+				}
+				self.pointerEvent = e;
+				touches = e.changedTouches;
+				if (touches) { //touch events store the data slightly differently
+					e = touches[0];
+					if (e !== touch && e.identifier !== touchID) { //Usually changedTouches[0] will be what we're looking for, but in case it's not, look through the rest of the array...(and Android browsers don't reuse the event like iOS)
+						i = touches.length;
+						while (--i > -1 && (e = touches[i]).identifier !== touchID && e.target !== target) {} // Some Android devices dispatch a touchstart AND pointerdown initially, and then only pointermove thus the touchID may not match because it was grabbed from the touchstart event whereas the pointer event is the one that the browser dispatches for move, so if the event target matches this Draggable's target, let it through.
+						if (i < 0) {
+							return;
+						}
+					}
+				} else if (e.pointerId && touchID && e.pointerId !== touchID) { //for some Microsoft browsers, we must attach the listener to the doc rather than the trigger so that when the finger moves outside the bounds of the trigger, things still work. So if the event we're receiving has a pointerId that doesn't match the touchID, ignore it (for multi-touch)
+					return;
+				}
+
+				if (touchEventTarget && allowNativeTouchScrolling && !touchDragAxis) { //Android browsers force us to decide on the first "touchmove" event if we should allow the default (scrolling) behavior or preventDefault(). Otherwise, a "touchcancel" will be fired and then no "touchmove" or "touchend" will fire during the scrolling (no good).
+					_point1.x = e.pageX - (isFixed ? _getDocScrollLeft(ownerDoc) : 0);
+					_point1.y = e.pageY - (isFixed ? _getDocScrollTop(ownerDoc) : 0);
+					matrix && matrix.apply(_point1, _point1);
+					pointerX = _point1.x;
+					pointerY = _point1.y;
+					dx = Math.abs(pointerX - startPointerX);
+					dy = Math.abs(pointerY - startPointerY);
+					if ((dx !== dy && (dx > minimumMovement || dy > minimumMovement)) || (_isAndroid && allowNativeTouchScrolling === touchDragAxis)) {
+						touchDragAxis = (dx > dy && allowX) ? "x" : "y";
+						if (allowNativeTouchScrolling && touchDragAxis !== allowNativeTouchScrolling) {
+							_addListener(_win, "touchforcechange", _preventDefault); // prevents native touch scrolling from taking over if the user started dragging in the other direction in iOS Safari
+						}
+						if (self.vars.lockAxisOnTouchScroll !== false && allowX && allowY) {
+							self.lockedAxis = (touchDragAxis === "x") ? "y" : "x";
+							_isFunction(self.vars.onLockAxis) && self.vars.onLockAxis.call(self, originalEvent);
+						}
+						if (_isAndroid && allowNativeTouchScrolling === touchDragAxis) {
+							onRelease(originalEvent);
+							return;
+						}
+					}
+				}
+				if (!self.allowEventDefault && (!allowNativeTouchScrolling || (touchDragAxis && allowNativeTouchScrolling !== touchDragAxis)) && originalEvent.cancelable !== false) {
+					_preventDefault(originalEvent);
+					isPreventingDefault = true;
+				} else if (isPreventingDefault) {
+					isPreventingDefault = false;
+				}
+
+				if (self.autoScroll) {
+					checkAutoScrollBounds = true;
+				}
+				setPointerPosition(e.pageX, e.pageY, hasMoveCallback);
+			},
+
+			setPointerPosition = (pointerX, pointerY, invokeOnMove) => {
+				let dragTolerance = 1 - self.dragResistance,
+					edgeTolerance = 1 - self.edgeResistance,
+					prevPointerX = self.pointerX,
+					prevPointerY = self.pointerY,
+					prevStartElementY = startElementY,
+					prevX = self.x,
+					prevY = self.y,
+					prevEndX = self.endX,
+					prevEndY = self.endY,
+					prevEndRotation = self.endRotation,
+					prevDirty = dirty,
+					xChange, yChange, x, y, dif, temp;
+				self.pointerX = pointerX;
+				self.pointerY = pointerY;
+				if (isFixed) {
+					pointerX -= _getDocScrollLeft(ownerDoc);
+					pointerY -= _getDocScrollTop(ownerDoc);
+				}
+				if (rotationMode) {
+					y = Math.atan2(rotationOrigin.y - pointerY, pointerX - rotationOrigin.x) * _RAD2DEG;
+					dif = self.y - y;
+					if (dif > 180) {
+						startElementY -= 360;
+						self.y = y;
+					} else if (dif < -180) {
+						startElementY += 360;
+						self.y = y;
+					}
+					if (self.x !== startElementX || Math.abs(startElementY - y) > minimumMovement) {
+						self.y = y;
+						x = startElementX + (startElementY - y) * dragTolerance;
+					} else {
+						x = startElementX;
+					}
+
+				} else {
+					if (matrix) {
+						temp = pointerX * matrix.a + pointerY * matrix.c + matrix.e;
+						pointerY = pointerX * matrix.b + pointerY * matrix.d + matrix.f;
+						pointerX = temp;
+					}
+					yChange = (pointerY - startPointerY);
+					xChange = (pointerX - startPointerX);
+					if (yChange < minimumMovement && yChange > -minimumMovement) {
+						yChange = 0;
+					}
+					if (xChange < minimumMovement && xChange > -minimumMovement) {
+						xChange = 0;
+					}
+					if ((self.lockAxis || self.lockedAxis) && (xChange || yChange)) {
+						temp = self.lockedAxis;
+						if (!temp) {
+							self.lockedAxis = temp = (allowX && Math.abs(xChange) > Math.abs(yChange)) ? "y" : allowY ? "x" : null;
+							if (temp && _isFunction(self.vars.onLockAxis)) {
+								self.vars.onLockAxis.call(self, self.pointerEvent);
+							}
+						}
+						if (temp === "y") {
+							yChange = 0;
+						} else if (temp === "x") {
+							xChange = 0;
+						}
+					}
+					x = _round(startElementX + xChange * dragTolerance);
+					y = _round(startElementY + yChange * dragTolerance);
+				}
+
+				if ((snapX || snapY || snapXY) && (self.x !== x || (self.y !== y && !rotationMode))) {
+					if (snapXY) {
+						_temp1.x = x;
+						_temp1.y = y;
+						temp = snapXY(_temp1);
+						x = _round(temp.x);
+						y = _round(temp.y);
+					}
+					if (snapX) {
+						x = _round(snapX(x));
+					}
+					if (snapY) {
+						y = _round(snapY(y));
+					}
+				}
+				if (hasBounds) {
+					if (x > maxX) {
+						x = maxX + Math.round((x - maxX) * edgeTolerance);
+					} else if (x < minX) {
+						x = minX + Math.round((x - minX) * edgeTolerance);
+					}
+					if (!rotationMode) {
+						if (y > maxY) {
+							y = Math.round(maxY + (y - maxY) * edgeTolerance);
+						} else if (y < minY) {
+							y = Math.round(minY + (y - minY) * edgeTolerance);
+						}
+					}
+				}
+				if (self.x !== x || (self.y !== y && !rotationMode)) {
+					if (rotationMode) {
+						self.endRotation = self.x = self.endX = x;
+						dirty = true;
+					} else {
+						if (allowY) {
+							self.y = self.endY = y;
+							dirty = true; //a flag that indicates we need to render the target next time the TweenLite.ticker dispatches a "tick" event (typically on a requestAnimationFrame) - this is a performance optimization (we shouldn't render on every move because sometimes many move events can get dispatched between screen refreshes, and that'd be wasteful to render every time)
+						}
+						if (allowX) {
+							self.x = self.endX = x;
+							dirty = true;
+						}
+					}
+					if (!invokeOnMove || _dispatchEvent(self, "move", "onMove") !== false) {
+						if (!self.isDragging && self.isPressed) {
+							self.isDragging = dragged = true;
+							_dispatchEvent(self, "dragstart", "onDragStart");
+						}
+					} else { //revert because the onMove returned false!
+						self.pointerX = prevPointerX;
+						self.pointerY = prevPointerY;
+						startElementY = prevStartElementY;
+						self.x = prevX;
+						self.y = prevY;
+						self.endX = prevEndX;
+						self.endY = prevEndY;
+						self.endRotation = prevEndRotation;
+						dirty = prevDirty;
+					}
+				}
+			},
+
+			//called when the mouse/touch is released
+			onRelease = (e, force) => {
+				if (!enabled || !self.isPressed || (e && touchID != null && !force && ((e.pointerId && e.pointerId !== touchID && e.target !== target) || (e.changedTouches && !_hasTouchID(e.changedTouches, touchID))))) {  //for some Microsoft browsers, we must attach the listener to the doc rather than the trigger so that when the finger moves outside the bounds of the trigger, things still work. So if the event we're receiving has a pointerId that doesn't match the touchID, ignore it (for multi-touch)
+					isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchend, pointerup, mouseup. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.
+					return;
+				}
+				self.isPressed = false;
+				let originalEvent = e,
+					wasDragging = self.isDragging,
+					isContextMenuRelease = (self.vars.allowContextMenu && e && (e.ctrlKey || e.which > 2)),
+					placeholderDelayedCall = gsap.delayedCall(0.001, removePlaceholder),
+					touches, i, syntheticEvent, eventTarget, syntheticClick;
+				if (touchEventTarget) {
+					_removeListener(touchEventTarget, "touchend", onRelease);
+					_removeListener(touchEventTarget, "touchmove", onMove);
+					_removeListener(touchEventTarget, "touchcancel", onRelease);
+					_removeListener(ownerDoc, "touchstart", _onMultiTouchDocument);
+				} else {
+					_removeListener(ownerDoc, "mousemove", onMove);
+				}
+				_removeListener(_win, "touchforcechange", _preventDefault);
+				if (!_supportsPointer || !touchEventTarget) {
+					_removeListener(ownerDoc, "mouseup", onRelease);
+					e && e.target && _removeListener(e.target, "mouseup", onRelease);
+				}
+				dirty = false;
+				if (wasDragging) {
+					dragEndTime = _lastDragTime = _getTime();
+					self.isDragging = false;
+				}
+				_removeFromRenderQueue(render);
+				if (isClicking && !isContextMenuRelease) {
+					if (e) {
+						_removeListener(e.target, "change", onRelease);
+						self.pointerEvent = originalEvent;
+					}
+					_setSelectable(triggers, false);
+					_dispatchEvent(self, "release", "onRelease");
+					_dispatchEvent(self, "click", "onClick");
+					isClicking = false;
+					return;
+				}
+				i = triggers.length;
+				while (--i > -1) {
+					_setStyle(triggers[i], "cursor", vars.cursor || (vars.cursor !== false ? _defaultCursor : null));
+				}
+				_dragCount--;
+				if (e) {
+					touches = e.changedTouches;
+					if (touches) { //touch events store the data slightly differently
+						e = touches[0];
+						if (e !== touch && e.identifier !== touchID) { //Usually changedTouches[0] will be what we're looking for, but in case it's not, look through the rest of the array...(and Android browsers don't reuse the event like iOS)
+							i = touches.length;
+							while (--i > -1 && (e = touches[i]).identifier !== touchID && e.target !== target) {}
+							if (i < 0 && !force) {
+								return;
+							}
+						}
+					}
+					self.pointerEvent = originalEvent;
+					self.pointerX = e.pageX;
+					self.pointerY = e.pageY;
+				}
+				if (isContextMenuRelease && originalEvent) {
+					_preventDefault(originalEvent);
+					isPreventingDefault = true;
+					_dispatchEvent(self, "release", "onRelease");
+				} else if (originalEvent && !wasDragging) {
+					isPreventingDefault = false;
+					if (interrupted && (vars.snap || vars.bounds)) { //otherwise, if the user clicks on the object while it's animating to a snapped position, and then releases without moving 3 pixels, it will just stay there (it should animate/snap)
+						animate(vars.inertia || vars.throwProps);
+					}
+					_dispatchEvent(self, "release", "onRelease");
+					if ((!_isAndroid || originalEvent.type !== "touchmove") && originalEvent.type.indexOf("cancel") === -1) { //to accommodate native scrolling on Android devices, we have to immediately call onRelease() on the first touchmove event, but that shouldn't trigger a "click".
+						_dispatchEvent(self, "click", "onClick");
+						if (_getTime() - clickTime < 300) {
+							_dispatchEvent(self, "doubleclick", "onDoubleClick");
+						}
+						eventTarget = originalEvent.target || target; //old IE uses srcElement
+						clickTime = _getTime();
+						syntheticClick = () => { // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular "click" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the "real"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the "real" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.
+							if (clickTime !== clickDispatch && self.enabled() && !self.isPressed && !originalEvent.defaultPrevented) {
+								if (eventTarget.click) { //some browsers (like mobile Safari) don't properly trigger the click event
+									eventTarget.click();
+								} else if (ownerDoc.createEvent) {
+									syntheticEvent = ownerDoc.createEvent("MouseEvents");
+									syntheticEvent.initMouseEvent("click", true, true, _win, 1, self.pointerEvent.screenX, self.pointerEvent.screenY, self.pointerX, self.pointerY, false, false, false, false, 0, null);
+									eventTarget.dispatchEvent(syntheticEvent);
+								}
+							}
+						};
+						if (!_isAndroid && !originalEvent.defaultPrevented) { //iOS Safari requires the synthetic click to happen immediately or else it simply won't work, but Android doesn't play nice.
+							gsap.delayedCall(0.05, syntheticClick); //in addition to the iOS bug workaround, there's a Firefox issue with clicking on things like a video to play, so we must fake a click event in a slightly delayed fashion. Previously, we listened for the "click" event with "capture" false which solved the video-click-to-play issue, but it would allow the "click" event to be dispatched twice like if you were using a jQuery.click() because that was handled in the capture phase, thus we had to switch to the capture phase to avoid the double-dispatching, but do the delayed synthetic click. Don't fire it too fast (like 0.00001) because we want to give the native event a chance to fire first as it's "trusted".
+						}
+					}
+				} else {
+					animate(vars.inertia || vars.throwProps); //will skip if inertia/throwProps isn't defined or InertiaPlugin isn't loaded.
+					if (!self.allowEventDefault && originalEvent && (vars.dragClickables !== false || !isClickable.call(self, originalEvent.target)) && wasDragging && (!allowNativeTouchScrolling || (touchDragAxis && allowNativeTouchScrolling === touchDragAxis)) && originalEvent.cancelable !== false) {
+						isPreventingDefault = true;
+						_preventDefault(originalEvent);
+					} else {
+						isPreventingDefault = false;
+					}
+					_dispatchEvent(self, "release", "onRelease");
+				}
+				isTweening() && placeholderDelayedCall.duration( self.tween.duration() ); //sync the timing so that the placeholder DIV gets
+				wasDragging && _dispatchEvent(self, "dragend", "onDragEnd");
+				return true;
+			},
+
+			updateScroll = e => {
+				if (e && self.isDragging && !scrollProxy) {
+					let parent = e.target || target.parentNode,
+						deltaX = parent.scrollLeft - parent._gsScrollX,
+						deltaY = parent.scrollTop - parent._gsScrollY;
+					if (deltaX || deltaY) {
+						if (matrix) {
+							startPointerX -= deltaX * matrix.a + deltaY * matrix.c;
+							startPointerY -= deltaY * matrix.d + deltaX * matrix.b;
+						} else {
+							startPointerX -= deltaX;
+							startPointerY -= deltaY;
+						}
+						parent._gsScrollX += deltaX;
+						parent._gsScrollY += deltaY;
+						setPointerPosition(self.pointerX, self.pointerY);
+					}
+				}
+			},
+
+			onClick = e => { //this was a huge pain in the neck to align all the various browsers and their behaviors. Chrome, Firefox, Safari, Opera, Android, and Microsoft Edge all handle events differently! Some will only trigger native behavior (like checkbox toggling) from trusted events. Others don't even support isTrusted, but require 2 events to flow through before triggering native behavior. Edge treats everything as trusted but also mandates that 2 flow through to trigger the correct native behavior.
+				let time = _getTime(),
+					recentlyClicked = (time - clickTime < 100),
+					recentlyDragged = (time - dragEndTime < 50),
+					alreadyDispatched = (recentlyClicked && clickDispatch === clickTime),
+					defaultPrevented = (self.pointerEvent && self.pointerEvent.defaultPrevented),
+					alreadyDispatchedTrusted = (recentlyClicked && trustedClickDispatch === clickTime),
+					trusted = e.isTrusted || (e.isTrusted == null && recentlyClicked && alreadyDispatched); //note: Safari doesn't support isTrusted, and it won't properly execute native behavior (like toggling checkboxes) on the first synthetic "click" event - we must wait for the 2nd and treat it as trusted (but stop propagation at that point). Confusing, I know. Don't you love cross-browser compatibility challenges?
+				if ((alreadyDispatched || (recentlyDragged && self.vars.suppressClickOnDrag !== false) ) && e.stopImmediatePropagation) {
+					e.stopImmediatePropagation();
+				}
+				if (recentlyClicked && !(self.pointerEvent && self.pointerEvent.defaultPrevented) && (!alreadyDispatched || (trusted && !alreadyDispatchedTrusted))) { //let the first click pass through unhindered. Let the next one only if it's trusted, then no more (stop quick-succession ones)
+					if (trusted && alreadyDispatched) {
+						trustedClickDispatch = clickTime;
+					}
+					clickDispatch = clickTime;
+					return;
+				}
+				if (self.isPressed || recentlyDragged || recentlyClicked) {
+					if (!trusted || !e.detail || !recentlyClicked || defaultPrevented) {
+						_preventDefault(e);
+					}
+				}
+				if (!recentlyClicked && !recentlyDragged && !dragged) { // for script-triggered event dispatches, like element.click()
+					e && e.target && (self.pointerEvent = e);
+					_dispatchEvent(self, "click", "onClick");
+				}
+			},
+
+			localizePoint = p => matrix ? {x:p.x * matrix.a + p.y * matrix.c + matrix.e, y:p.x * matrix.b + p.y * matrix.d + matrix.f} : {x:p.x, y:p.y};
+
+		old = Draggable.get(target);
+		old && old.kill(); // avoids duplicates (an element can only be controlled by one Draggable)
+
+		//give the user access to start/stop dragging...
+		this.startDrag = (event, align) => {
+			let r1, r2, p1, p2;
+			onPress(event || self.pointerEvent, true);
+			//if the pointer isn't on top of the element, adjust things accordingly
+			if (align && !self.hitTest(event || self.pointerEvent)) {
+				r1 = _parseRect(event || self.pointerEvent);
+				r2 = _parseRect(target);
+				p1 = localizePoint({x:r1.left + r1.width / 2, y:r1.top + r1.height / 2});
+				p2 = localizePoint({x:r2.left + r2.width / 2, y:r2.top + r2.height / 2});
+				startPointerX -= p1.x - p2.x;
+				startPointerY -= p1.y - p2.y;
+			}
+			if (!self.isDragging) {
+				self.isDragging = dragged = true;
+				_dispatchEvent(self, "dragstart", "onDragStart");
+			}
+		};
+		this.drag = onMove;
+		this.endDrag = e =>	onRelease(e || self.pointerEvent, true);
+		this.timeSinceDrag = () => self.isDragging ? 0 : (_getTime() - dragEndTime) / 1000;
+		this.timeSinceClick = () => (_getTime() - clickTime) / 1000;
+		this.hitTest = (target, threshold) => Draggable.hitTest(self.target, target, threshold);
+
+		this.getDirection = (from, diagonalThreshold) => { //from can be "start" (default), "velocity", or an element
+			let mode = (from === "velocity" && InertiaPlugin) ? from : (_isObject(from) && !rotationMode) ? "element" : "start",
+				xChange, yChange, ratio, direction, r1, r2;
+			if (mode === "element") {
+				r1 = _parseRect(self.target);
+				r2 = _parseRect(from);
+			}
+			xChange = (mode === "start") ? self.x - startElementX : (mode === "velocity") ? InertiaPlugin.getVelocity(target, xProp) : (r1.left + r1.width / 2) - (r2.left + r2.width / 2);
+			if (rotationMode) {
+				return xChange < 0 ? "counter-clockwise" : "clockwise";
+			} else {
+				diagonalThreshold = diagonalThreshold || 2;
+				yChange = (mode === "start") ? self.y - startElementY : (mode === "velocity") ? InertiaPlugin.getVelocity(target, yProp) : (r1.top + r1.height / 2) - (r2.top + r2.height / 2);
+				ratio = Math.abs(xChange / yChange);
+				direction = (ratio < 1 / diagonalThreshold) ? "" : (xChange < 0) ? "left" : "right";
+				if (ratio < diagonalThreshold) {
+					if (direction !== "") {
+						direction += "-";
+					}
+					direction += (yChange < 0) ? "up" : "down";
+				}
+			}
+			return direction;
+		};
+
+		this.applyBounds = (newBounds, sticky) => {
+			let x, y, forceZeroVelocity, e, parent, isRoot;
+			if (newBounds && vars.bounds !== newBounds) {
+				vars.bounds = newBounds;
+				return self.update(true, sticky);
+			}
+			syncXY(true);
+			calculateBounds();
+			if (hasBounds && !isTweening()) {
+				x = self.x;
+				y = self.y;
+				if (x > maxX) {
+					x = maxX;
+				} else if (x < minX) {
+					x = minX;
+				}
+				if (y > maxY) {
+					y = maxY;
+				} else if (y < minY) {
+					y = minY;
+				}
+				if (self.x !== x || self.y !== y) {
+					forceZeroVelocity = true;
+					self.x = self.endX = x;
+					if (rotationMode) {
+						self.endRotation = x;
+					} else {
+						self.y = self.endY = y;
+					}
+					dirty = true;
+					render(true);
+					if (self.autoScroll && !self.isDragging) {
+						_recordMaxScrolls(target.parentNode);
+						e = target;
+						_windowProxy.scrollTop = ((_win.pageYOffset != null) ? _win.pageYOffset : (ownerDoc.documentElement.scrollTop != null) ? ownerDoc.documentElement.scrollTop : ownerDoc.body.scrollTop);
+						_windowProxy.scrollLeft = ((_win.pageXOffset != null) ? _win.pageXOffset : (ownerDoc.documentElement.scrollLeft != null) ? ownerDoc.documentElement.scrollLeft : ownerDoc.body.scrollLeft);
+						while (e && !isRoot) { //walk up the chain and sense wherever the scrollTop/scrollLeft exceeds the maximum.
+							isRoot = _isRoot(e.parentNode);
+							parent = isRoot ? _windowProxy : e.parentNode;
+							if (allowY && parent.scrollTop > parent._gsMaxScrollY) {
+								parent.scrollTop = parent._gsMaxScrollY;
+							}
+							if (allowX && parent.scrollLeft > parent._gsMaxScrollX) {
+								parent.scrollLeft = parent._gsMaxScrollX;
+							}
+							e = parent;
+						}
+					}
+				}
+				if (self.isThrowing && (forceZeroVelocity || self.endX > maxX || self.endX < minX || self.endY > maxY || self.endY < minY)) {
+					animate(vars.inertia || vars.throwProps, forceZeroVelocity);
+				}
+			}
+			return self;
+		};
+
+		this.update = (applyBounds, sticky, ignoreExternalChanges) => {
+			if (sticky && self.isPressed) { // in case the element was repositioned in the document flow, thus its x/y may be identical but its position is actually quite different.
+				let m = getGlobalMatrix(target),
+					p = innerMatrix.apply({x: self.x - startElementX, y: self.y - startElementY}),
+					m2 = getGlobalMatrix(target.parentNode, true);
+				m2.apply({x: m.e - p.x, y: m.f - p.y}, p);
+				self.x -= p.x - m2.e;
+				self.y -= p.y - m2.f;
+				render(true);
+				recordStartPositions();
+			}
+			let { x, y } = self;
+			updateMatrix(!sticky);
+			if (applyBounds) {
+				self.applyBounds();
+			} else {
+				dirty && ignoreExternalChanges && render(true);
+				syncXY(true);
+			}
+			if (sticky) {
+				setPointerPosition(self.pointerX, self.pointerY);
+				dirty && render(true);
+			}
+			if (self.isPressed && !sticky && ((allowX && Math.abs(x - self.x) > 0.01) || (allowY && (Math.abs(y - self.y) > 0.01 && !rotationMode)))) {
+				recordStartPositions();
+			}
+			if (self.autoScroll) {
+				_recordMaxScrolls(target.parentNode, self.isDragging);
+				checkAutoScrollBounds = self.isDragging;
+				render(true);
+				//in case reparenting occurred.
+				_removeScrollListener(target, updateScroll);
+				_addScrollListener(target, updateScroll);
+			}
+			return self;
+		};
+
+		this.enable = type => {
+			let setVars = {lazy: true},
+				id, i, trigger;
+			if (vars.cursor !== false) {
+				setVars.cursor = vars.cursor || _defaultCursor;
+			}
+			if (gsap.utils.checkPrefix("touchCallout")) {
+				setVars.touchCallout = "none";
+			}
+			if (type !== "soft") {
+				_setTouchActionForAllDescendants(triggers, (allowX === allowY) ? "none" : (vars.allowNativeTouchScrolling && (target.scrollHeight === target.clientHeight) === (target.scrollWidth === target.clientHeight)) || vars.allowEventDefault ? "manipulation" : allowX ? "pan-y" : "pan-x"); // Some browsers like Internet Explorer will fire a pointercancel event when the user attempts to drag when touchAction is "manipulate" because it's perceived as a pan. If the element has scrollable content in only one direction, we should use pan-x or pan-y accordingly so that the pointercancel doesn't prevent dragging.
+				i = triggers.length;
+				while (--i > -1) {
+					trigger = triggers[i];
+					_supportsPointer || _addListener(trigger, "mousedown", onPress);
+					_addListener(trigger, "touchstart", onPress);
+					_addListener(trigger, "click", onClick, true); // note: used to pass true for capture but it prevented click-to-play-video functionality in Firefox.
+					gsap.set(trigger, setVars);
+					if (trigger.getBBox && trigger.ownerSVGElement && allowX !== allowY) { // a bug in chrome doesn't respect touch-action on SVG elements - it only works if we set it on the parent SVG.
+						gsap.set(trigger.ownerSVGElement, {touchAction: vars.allowNativeTouchScrolling || vars.allowEventDefault ? "manipulation" : allowX ? "pan-y" : "pan-x"});
+					}
+					vars.allowContextMenu || _addListener(trigger, "contextmenu", onContextMenu);
+				}
+				_setSelectable(triggers, false);
+			}
+			_addScrollListener(target, updateScroll);
+			enabled = true;
+			if (InertiaPlugin && type !== "soft") {
+				InertiaPlugin.track(scrollProxy || target, (xyMode ? "x,y" : rotationMode ? "rotation" : "top,left"));
+			}
+			target._gsDragID = id = "d" + (_lookupCount++);
+			_lookup[id] = self;
+			if (scrollProxy) {
+				scrollProxy.enable();
+				scrollProxy.element._gsDragID = id;
+			}
+			(vars.bounds || rotationMode) && recordStartPositions();
+			vars.bounds && self.applyBounds();
+			return self;
+		};
+
+		this.disable = type => {
+			let dragging = self.isDragging,
+				i = triggers.length,
+				trigger;
+			while (--i > -1) {
+				_setStyle(triggers[i], "cursor", null);
+			}
+			if (type !== "soft") {
+				_setTouchActionForAllDescendants(triggers, null);
+				i = triggers.length;
+				while (--i > -1) {
+					trigger = triggers[i];
+					_setStyle(trigger, "touchCallout", null);
+					_removeListener(trigger, "mousedown", onPress);
+					_removeListener(trigger, "touchstart", onPress);
+					_removeListener(trigger, "click", onClick, true);
+					_removeListener(trigger, "contextmenu", onContextMenu);
+				}
+				_setSelectable(triggers, true);
+				if (touchEventTarget) {
+					_removeListener(touchEventTarget, "touchcancel", onRelease);
+					_removeListener(touchEventTarget, "touchend", onRelease);
+					_removeListener(touchEventTarget, "touchmove", onMove);
+				}
+				_removeListener(ownerDoc, "mouseup", onRelease);
+				_removeListener(ownerDoc, "mousemove", onMove);
+			}
+			_removeScrollListener(target, updateScroll);
+			enabled = false;
+			if (InertiaPlugin && type !== "soft") {
+				InertiaPlugin.untrack(scrollProxy || target, (xyMode ? "x,y" : rotationMode ? "rotation" : "top,left"));
+				self.tween && self.tween.kill();
+			}
+			scrollProxy && scrollProxy.disable();
+			_removeFromRenderQueue(render);
+			self.isDragging = self.isPressed = isClicking = false;
+			dragging && _dispatchEvent(self, "dragend", "onDragEnd");
+			return self;
+		};
+
+		this.enabled = function(value, type) {
+			return arguments.length ? (value ? self.enable(type) : self.disable(type)) : enabled;
+		};
+
+		this.kill = function() {
+			self.isThrowing = false;
+			self.tween && self.tween.kill();
+			self.disable();
+			gsap.set(triggers, {clearProps:"userSelect"});
+			delete _lookup[target._gsDragID];
+			return self;
+		};
+
+		this.revert = function() {
+			this.kill();
+			this.styles && this.styles.revert();
+		};
+
+		if (~type.indexOf("scroll")) {
+			scrollProxy = this.scrollProxy = new ScrollProxy(target, _extend({onKill:function() { //ScrollProxy's onKill() gets called if/when the ScrollProxy senses that the user interacted with the scroll position manually (like using the scrollbar). IE9 doesn't fire the "mouseup" properly when users drag the scrollbar of an element, so this works around that issue.
+					self.isPressed && onRelease(null);
+			}}, vars));
+			//a bug in many Android devices' stock browser causes scrollTop to get forced back to 0 after it is altered via JS, so we set overflow to "hidden" on mobile/touch devices (they hide the scroll bar anyway). That works around the bug. (This bug is discussed at https://code.google.com/p/android/issues/detail?id=19625)
+			target.style.overflowY = (allowY && !_isTouchDevice) ? "auto" : "hidden";
+			target.style.overflowX = (allowX && !_isTouchDevice) ? "auto" : "hidden";
+			target = scrollProxy.content;
+		}
+
+		if (rotationMode) {
+			killProps.rotation = 1;
+		} else {
+			if (allowX) {
+				killProps[xProp] = 1;
+			}
+			if (allowY) {
+				killProps[yProp] = 1;
+			}
+		}
+
+		gsCache.force3D = ("force3D" in vars) ? vars.force3D : true; //otherwise, normal dragging would be in 2D and then as soon as it's released and there's an inertia tween, it'd jump to 3D which can create an initial jump due to the work the browser must to do layerize it.
+
+		_context(this);
+		this.enable();
+	}
+
+
+
+
+	static register(core) {
+		gsap = core;
+		_initCore();
+	}
+
+	static create(targets, vars) {
+		_coreInitted || _initCore(true);
+		return _toArray(targets).map(target => new Draggable(target, vars));
+	}
+
+	static get(target) {
+		return _lookup[(_toArray(target)[0] || {})._gsDragID];
+	}
+
+	static timeSinceDrag() {
+		return (_getTime() - _lastDragTime) / 1000;
+	}
+
+	static hitTest(obj1, obj2, threshold) {
+		if (obj1 === obj2) {
+			return false;
+		}
+		let r1 = _parseRect(obj1),
+			r2 = _parseRect(obj2),
+			{ top, left, right, bottom, width, height } = r1,
+			isOutside = (r2.left > right || r2.right < left || r2.top > bottom || r2.bottom < top),
+			overlap, area, isRatio;
+		if (isOutside || !threshold) {
+			return !isOutside;
+		}
+		isRatio = ((threshold + "").indexOf("%") !== -1);
+		threshold = parseFloat(threshold) || 0;
+		overlap = {left: Math.max(left, r2.left), top: Math.max(top, r2.top)};
+		overlap.width = Math.min(right, r2.right) - overlap.left;
+		overlap.height = Math.min(bottom, r2.bottom) - overlap.top;
+		if (overlap.width < 0 || overlap.height < 0) {
+			return false;
+		}
+		if (isRatio) {
+			threshold *= 0.01;
+			area = overlap.width * overlap.height;
+			return (area >= width * height * threshold || area >= r2.width * r2.height * threshold);
+		}
+		return (overlap.width > threshold && overlap.height > threshold);
+	}
+
+}
+
+_setDefaults(Draggable.prototype, {pointerX:0, pointerY: 0, startX: 0, startY: 0, deltaX: 0, deltaY: 0, isDragging: false, isPressed: false});
+
+Draggable.zIndex = 1000;
+Draggable.version = "3.12.5";
+
+_getGSAP() && gsap.registerPlugin(Draggable);
+
+export { Draggable, Draggable as default };
diff --git a/dist/Draggable.js b/dist/Draggable.js
deleted file mode 100644
index a749a37a36678519fbf1984138047c072e9d3b4a..0000000000000000000000000000000000000000
diff --git a/dist/Draggable.min.js b/dist/Draggable.min.js
deleted file mode 100644
index 77beb713f6143ceda34fe0f6b36dbea00f5f34e7..0000000000000000000000000000000000000000
diff --git a/dist/Draggable.min.js.map b/dist/Draggable.min.js.map
deleted file mode 100644
index 3251cd5c8af673dc30732fffc0c73550d8e4bcee..0000000000000000000000000000000000000000
diff --git a/dist/Draggable.mjs b/dist/Draggable.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..4d8de0068253d4b26a5860490685f1bbcbbe8b48
--- /dev/null
+++ b/dist/Draggable.mjs
@@ -0,0 +1,1942 @@
+import { M as Matrix2D, g as getGlobalMatrix } from './shared/gsap.7b0323e5.mjs';
+
+/*!
+ * Draggable 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+ */
+/* eslint-disable */
+
+
+let gsap, _win, _doc, _docElement, _body, _tempDiv, _placeholderDiv, _coreInitted, _checkPrefix, _toArray, _supportsPassive, _isTouchDevice, _touchEventLookup, _isMultiTouching, _isAndroid, InertiaPlugin, _defaultCursor, _supportsPointer, _context, _getStyleSaver,
+	_dragCount = 0,
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_isFunction = value => typeof(value) === "function",
+	_isObject = value => typeof(value) === "object",
+	_isUndefined = value => typeof(value) === "undefined",
+	_emptyFunc = () => false,
+	_transformProp = "transform",
+	_transformOriginProp = "transformOrigin",
+	_round = value => Math.round(value * 10000) / 10000,
+	_isArray = Array.isArray,
+	_createElement = (type, ns) => {
+		let e = _doc.createElementNS ? _doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.
+		return e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://gsap.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
+	},
+	_RAD2DEG = 180 / Math.PI,
+	_bigNum = 1e20,
+	_identityMatrix = new Matrix2D(),
+	_getTime = Date.now || (() => new Date().getTime()),
+	_renderQueue = [],
+	_lookup = {}, //when a Draggable is created, the target gets a unique _gsDragID property that allows gets associated with the Draggable instance for quick lookups in Draggable.get(). This avoids circular references that could cause gc problems.
+	_lookupCount = 0,
+	_clickableTagExp = /^(?:a|input|textarea|button|select)$/i,
+	_lastDragTime = 0,
+	_temp1 = {}, // a simple object we reuse and populate (usually x/y properties) to conserve memory and improve performance.
+	_windowProxy = {}, //memory/performance optimization - we reuse this object during autoScroll to store window-related bounds/offsets.
+	_copy = (obj, factor) => {
+		let copy = {}, p;
+		for (p in obj) {
+			copy[p] = factor ? obj[p] * factor : obj[p];
+		}
+		return copy;
+	},
+	_extend = (obj, defaults) => {
+		for (let p in defaults) {
+			if (!(p in obj)) {
+				obj[p] = defaults[p];
+			}
+		}
+		return obj;
+	},
+	_setTouchActionForAllDescendants = (elements, value) => {
+		let i = elements.length,
+			children;
+		while (i--) {
+			value ? (elements[i].style.touchAction = value) : elements[i].style.removeProperty("touch-action");
+			children = elements[i].children;
+			children && children.length && _setTouchActionForAllDescendants(children, value);
+		}
+	},
+	_renderQueueTick = () => _renderQueue.forEach(func => func()),
+	_addToRenderQueue = func => {
+		_renderQueue.push(func);
+		if (_renderQueue.length === 1) {
+			gsap.ticker.add(_renderQueueTick);
+		}
+	},
+	_renderQueueTimeout = () => !_renderQueue.length && gsap.ticker.remove(_renderQueueTick),
+	_removeFromRenderQueue = func => {
+		let i = _renderQueue.length;
+		while (i--) {
+			if (_renderQueue[i] === func) {
+				_renderQueue.splice(i, 1);
+			}
+		}
+		gsap.to(_renderQueueTimeout, {overwrite:true, delay:15, duration:0, onComplete:_renderQueueTimeout, data:"_draggable"}); //remove the "tick" listener only after the render queue is empty for 15 seconds (to improve performance). Adding/removing it constantly for every click/touch wouldn't deliver optimal speed, and we also don't want the ticker to keep calling the render method when things are idle for long periods of time (we want to improve battery life on mobile devices).
+	},
+	_setDefaults = (obj, defaults) => {
+		for (let p in defaults) {
+			if (!(p in obj)) {
+				obj[p] = defaults[p];
+			}
+		}
+		return obj;
+	},
+	_addListener = (element, type, func, capture) => {
+		if (element.addEventListener) {
+			let touchType = _touchEventLookup[type];
+			capture = capture || (_supportsPassive ? {passive: false} : null);
+			element.addEventListener(touchType || type, func, capture);
+			(touchType && type !== touchType) && element.addEventListener(type, func, capture);//some browsers actually support both, so must we. But pointer events cover all.
+		}
+	},
+	_removeListener = (element, type, func, capture) => {
+		if (element.removeEventListener) {
+			let touchType = _touchEventLookup[type];
+			element.removeEventListener(touchType || type, func, capture);
+			(touchType && type !== touchType) && element.removeEventListener(type, func, capture);
+		}
+	},
+	_preventDefault = event => {
+		event.preventDefault && event.preventDefault();
+		event.preventManipulation && event.preventManipulation();  //for some Microsoft browsers
+	},
+	_hasTouchID = (list, ID) => {
+		let i = list.length;
+		while (i--) {
+			if (list[i].identifier === ID) {
+				return true;
+			}
+		}
+	},
+	_onMultiTouchDocumentEnd = event => {
+		_isMultiTouching = (event.touches && _dragCount < event.touches.length);
+		_removeListener(event.target, "touchend", _onMultiTouchDocumentEnd);
+	},
+
+	_onMultiTouchDocument = event => {
+		_isMultiTouching = (event.touches && _dragCount < event.touches.length);
+		_addListener(event.target, "touchend", _onMultiTouchDocumentEnd);
+	},
+	_getDocScrollTop = doc => _win.pageYOffset  || doc.scrollTop || doc.documentElement.scrollTop || doc.body.scrollTop || 0,
+	_getDocScrollLeft = doc => _win.pageXOffset || doc.scrollLeft || doc.documentElement.scrollLeft || doc.body.scrollLeft || 0,
+	_addScrollListener = (e, callback) => {
+		_addListener(e, "scroll", callback);
+		if (!_isRoot(e.parentNode)) {
+			_addScrollListener(e.parentNode, callback);
+		}
+	},
+	_removeScrollListener = (e, callback) => {
+		_removeListener(e, "scroll", callback);
+		if (!_isRoot(e.parentNode)) {
+			_removeScrollListener(e.parentNode, callback);
+		}
+	},
+	_isRoot = e => !!(!e || e === _docElement || e.nodeType === 9 || e === _doc.body || e === _win || !e.nodeType || !e.parentNode),
+	_getMaxScroll = (element, axis) => {
+		let dim = (axis === "x") ? "Width" : "Height",
+			scroll = "scroll" + dim,
+			client = "client" + dim;
+		return Math.max(0, _isRoot(element) ? Math.max(_docElement[scroll], _body[scroll]) - (_win["inner" + dim] || _docElement[client] || _body[client]) : element[scroll] - element[client]);
+	},
+	_recordMaxScrolls = (e, skipCurrent) => { //records _gsMaxScrollX and _gsMaxScrollY properties for the element and all ancestors up the chain so that we can cap it, otherwise dragging beyond the edges with autoScroll on can endlessly scroll.
+		let x = _getMaxScroll(e, "x"),
+			y = _getMaxScroll(e, "y");
+		if (_isRoot(e)) {
+			e = _windowProxy;
+		} else {
+			_recordMaxScrolls(e.parentNode, skipCurrent);
+		}
+		e._gsMaxScrollX = x;
+		e._gsMaxScrollY = y;
+		if (!skipCurrent) {
+			e._gsScrollX = e.scrollLeft || 0;
+			e._gsScrollY = e.scrollTop || 0;
+		}
+	},
+	_setStyle = (element, property, value) => {
+		let style = element.style;
+		if (!style) {
+			return;
+		}
+		if (_isUndefined(style[property])) {
+			property = _checkPrefix(property, element) || property;
+		}
+		if (value == null) {
+			style.removeProperty && style.removeProperty(property.replace(/([A-Z])/g, "-$1").toLowerCase());
+		} else {
+			style[property] = value;
+		}
+	},
+	_getComputedStyle = element => _win.getComputedStyle((element instanceof Element) ? element : element.host || (element.parentNode || {}).host || element), //the "host" stuff helps to accommodate ShadowDom objects.
+
+	_tempRect = {}, //reuse to reduce garbage collection tasks
+	_parseRect = e => { //accepts a DOM element, a mouse event, or a rectangle object and returns the corresponding rectangle with left, right, width, height, top, and bottom properties
+		if (e === _win) {
+			_tempRect.left = _tempRect.top = 0;
+			_tempRect.width = _tempRect.right = _docElement.clientWidth || e.innerWidth || _body.clientWidth || 0;
+			_tempRect.height = _tempRect.bottom = ((e.innerHeight || 0) - 20 < _docElement.clientHeight) ? _docElement.clientHeight : e.innerHeight || _body.clientHeight || 0;
+			return _tempRect;
+		}
+		let doc = e.ownerDocument || _doc,
+			r = !_isUndefined(e.pageX) ? {left: e.pageX - _getDocScrollLeft(doc), top: e.pageY - _getDocScrollTop(doc), right: e.pageX - _getDocScrollLeft(doc) + 1, bottom: e.pageY - _getDocScrollTop(doc) + 1} : (!e.nodeType && !_isUndefined(e.left) && !_isUndefined(e.top)) ? e : _toArray(e)[0].getBoundingClientRect();
+		if (_isUndefined(r.right) && !_isUndefined(r.width)) {
+			r.right = r.left + r.width;
+			r.bottom = r.top + r.height;
+		} else if (_isUndefined(r.width)) { //some browsers don't include width and height properties. We can't just set them directly on r because some browsers throw errors, so create a new generic object.
+			r = {width: r.right - r.left, height: r.bottom - r.top, right: r.right, left: r.left, bottom: r.bottom, top: r.top};
+		}
+		return r;
+	},
+
+	_dispatchEvent = (target, type, callbackName) => {
+		let vars = target.vars,
+			callback = vars[callbackName],
+			listeners = target._listeners[type],
+			result;
+		if (_isFunction(callback)) {
+			result = callback.apply(vars.callbackScope || target, vars[callbackName + "Params"] || [target.pointerEvent]);
+		}
+		if (listeners && target.dispatchEvent(type) === false) {
+			result = false;
+		}
+		return result;
+	},
+	_getBounds = (target, context) => { //accepts any of the following: a DOM element, jQuery object, selector text, or an object defining bounds as {top, left, width, height} or {minX, maxX, minY, maxY}. Returns an object with left, top, width, and height properties.
+		let e = _toArray(target)[0],
+			top, left, offset;
+		if (!e.nodeType && e !== _win) {
+			if (!_isUndefined(target.left)) {
+				offset = {x:0, y:0}; //_getOffsetTransformOrigin(context); //the bounds should be relative to the origin
+				return {left: target.left - offset.x, top: target.top - offset.y, width: target.width, height: target.height};
+			}
+			left = target.min || target.minX || target.minRotation || 0;
+			top = target.min || target.minY || 0;
+			return {left:left, top:top, width:(target.max || target.maxX || target.maxRotation || 0) - left, height:(target.max || target.maxY || 0) - top};
+		}
+		return _getElementBounds(e, context);
+	},
+	_point1 = {}, //we reuse to minimize garbage collection tasks.
+	_getElementBounds = (element, context) => {
+		context = _toArray(context)[0];
+		let isSVG = (element.getBBox && element.ownerSVGElement),
+			doc = element.ownerDocument || _doc,
+			left, right, top, bottom, matrix, p1, p2, p3, p4, bbox, width, height, cs;
+		if (element === _win) {
+			top = _getDocScrollTop(doc);
+			left = _getDocScrollLeft(doc);
+			right = left + (doc.documentElement.clientWidth || element.innerWidth || doc.body.clientWidth || 0);
+			bottom = top + (((element.innerHeight || 0) - 20 < doc.documentElement.clientHeight) ? doc.documentElement.clientHeight : element.innerHeight || doc.body.clientHeight || 0); //some browsers (like Firefox) ignore absolutely positioned elements, and collapse the height of the documentElement, so it could be 8px, for example, if you have just an absolutely positioned div. In that case, we use the innerHeight to resolve this.
+		} else if (context === _win || _isUndefined(context)) {
+			return element.getBoundingClientRect();
+		} else {
+			left = top =  0;
+			if (isSVG) {
+				bbox = element.getBBox();
+				width = bbox.width;
+				height = bbox.height;
+			} else {
+				if (element.viewBox && (bbox = element.viewBox.baseVal)) {
+					left = bbox.x || 0;
+					top = bbox.y || 0;
+					width = bbox.width;
+					height = bbox.height;
+				}
+				if (!width) {
+					cs = _getComputedStyle(element);
+					bbox = cs.boxSizing === "border-box";
+					width = (parseFloat(cs.width) || element.clientWidth || 0) + (bbox ? 0 : parseFloat(cs.borderLeftWidth) + parseFloat(cs.borderRightWidth));
+					height = (parseFloat(cs.height) || element.clientHeight || 0) + (bbox ? 0 : parseFloat(cs.borderTopWidth) + parseFloat(cs.borderBottomWidth));
+				}
+			}
+			right = width;
+			bottom = height;
+		}
+		if (element === context) {
+			return {left:left, top:top, width: right - left, height: bottom - top};
+		}
+		matrix = getGlobalMatrix(context, true).multiply(getGlobalMatrix(element));
+		p1 = matrix.apply({x:left, y:top});
+		p2 = matrix.apply({x:right, y:top});
+		p3 = matrix.apply({x:right, y:bottom});
+		p4 = matrix.apply({x:left, y:bottom});
+		left = Math.min(p1.x, p2.x, p3.x, p4.x);
+		top = Math.min(p1.y, p2.y, p3.y, p4.y);
+		return {left: left, top: top, width: Math.max(p1.x, p2.x, p3.x, p4.x) - left, height: Math.max(p1.y, p2.y, p3.y, p4.y) - top};
+	},
+	_parseInertia = (draggable, snap, max, min, factor, forceZeroVelocity) => {
+		let vars = {},
+			a, i, l;
+		if (snap) {
+			if (factor !== 1 && snap instanceof Array) { //some data must be altered to make sense, like if the user passes in an array of rotational values in degrees, we must convert it to radians. Or for scrollLeft and scrollTop, we invert the values.
+				vars.end = a = [];
+				l = snap.length;
+				if (_isObject(snap[0])) { //if the array is populated with objects, like points ({x:100, y:200}), make copies before multiplying by the factor, otherwise we'll mess up the originals and the user may reuse it elsewhere.
+					for (i = 0; i < l; i++) {
+						a[i] = _copy(snap[i], factor);
+					}
+				} else {
+					for (i = 0; i < l; i++) {
+						a[i] = snap[i] * factor;
+					}
+				}
+				max += 1.1; //allow 1.1 pixels of wiggle room when snapping in order to work around some browser inconsistencies in the way bounds are reported which can make them roughly a pixel off. For example, if "snap:[-$('#menu').width(), 0]" was defined and #menu had a wrapper that was used as the bounds, some browsers would be one pixel off, making the minimum -752 for example when snap was [-753,0], thus instead of snapping to -753, it would snap to 0 since -753 was below the minimum.
+				min -= 1.1;
+			} else if (_isFunction(snap)) {
+				vars.end = value => {
+					let result = snap.call(draggable, value),
+						copy, p;
+					if (factor !== 1) {
+						if (_isObject(result)) {
+							copy = {};
+							for (p in result) {
+								copy[p] = result[p] * factor;
+							}
+							result = copy;
+						} else {
+							result *= factor;
+						}
+					}
+					return result; //we need to ensure that we can scope the function call to the Draggable instance itself so that users can access important values like maxX, minX, maxY, minY, x, and y from within that function.
+				};
+			} else {
+				vars.end = snap;
+			}
+		}
+		if (max || max === 0) {
+			vars.max = max;
+		}
+		if (min || min === 0) {
+			vars.min = min;
+		}
+		if (forceZeroVelocity) {
+			vars.velocity = 0;
+		}
+		return vars;
+	},
+	_isClickable = element => { //sometimes it's convenient to mark an element as clickable by adding a data-clickable="true" attribute (in which case we won't preventDefault() the mouse/touch event). This method checks if the element is an <a>, <input>, or <button> or has the data-clickable or contentEditable attribute set to true (or any of its parent elements).
+		let data;
+		return (!element || !element.getAttribute || element === _body) ? false : ((data = element.getAttribute("data-clickable")) === "true" || (data !== "false" && (_clickableTagExp.test(element.nodeName + "") || element.getAttribute("contentEditable") === "true"))) ? true : _isClickable(element.parentNode);
+	},
+	_setSelectable = (elements, selectable) => {
+		let i = elements.length,
+			e;
+		while (i--) {
+			e = elements[i];
+			e.ondragstart = e.onselectstart = selectable ? null : _emptyFunc;
+			gsap.set(e, {lazy:true, userSelect: (selectable ? "text" : "none")});
+		}
+	},
+	_isFixed = element => {
+		if (_getComputedStyle(element).position === "fixed") {
+			return true;
+		}
+		element = element.parentNode;
+		if (element && element.nodeType === 1) { // avoid document fragments which will throw an error.
+			return _isFixed(element);
+		}
+	},
+	_supports3D, _addPaddingBR,
+
+	//The ScrollProxy class wraps an element's contents into another div (we call it "content") that we either add padding when necessary or apply a translate3d() transform in order to overscroll (scroll past the boundaries). This allows us to simply set the scrollTop/scrollLeft (or top/left for easier reverse-axis orientation, which is what we do in Draggable) and it'll do all the work for us. For example, if we tried setting scrollTop to -100 on a normal DOM element, it wouldn't work - it'd look the same as setting it to 0, but if we set scrollTop of a ScrollProxy to -100, it'll give the correct appearance by either setting paddingTop of the wrapper to 100 or applying a 100-pixel translateY.
+	ScrollProxy = function(element, vars) {
+		element = gsap.utils.toArray(element)[0];
+		vars = vars || {};
+		let content = document.createElement("div"),
+			style = content.style,
+			node = element.firstChild,
+			offsetTop = 0,
+			offsetLeft = 0,
+			prevTop = element.scrollTop,
+			prevLeft = element.scrollLeft,
+			scrollWidth = element.scrollWidth,
+			scrollHeight = element.scrollHeight,
+			extraPadRight = 0,
+			maxLeft = 0,
+			maxTop = 0,
+			elementWidth, elementHeight, contentHeight, nextNode, transformStart, transformEnd;
+		if (_supports3D && vars.force3D !== false) {
+			transformStart = "translate3d(";
+			transformEnd = "px,0px)";
+		} else if (_transformProp) {
+			transformStart = "translate(";
+			transformEnd = "px)";
+		}
+		this.scrollTop = function(value, force) {
+			if (!arguments.length) {
+				return -this.top();
+			}
+			this.top(-value, force);
+		};
+		this.scrollLeft = function(value, force) {
+			if (!arguments.length) {
+				return -this.left();
+			}
+			this.left(-value, force);
+		};
+		this.left = function(value, force) {
+			if (!arguments.length) {
+				return -(element.scrollLeft + offsetLeft);
+			}
+			let dif = element.scrollLeft - prevLeft,
+				oldOffset = offsetLeft;
+			if ((dif > 2 || dif < -2) && !force) { //if the user interacts with the scrollbar (or something else scrolls it, like the mouse wheel), we should kill any tweens of the ScrollProxy.
+				prevLeft = element.scrollLeft;
+				gsap.killTweensOf(this, {left:1, scrollLeft:1});
+				this.left(-prevLeft);
+				if (vars.onKill) {
+					vars.onKill();
+				}
+				return;
+			}
+			value = -value; //invert because scrolling works in the opposite direction
+			if (value < 0) {
+				offsetLeft = (value - 0.5) | 0;
+				value = 0;
+			} else if (value > maxLeft) {
+				offsetLeft = (value - maxLeft) | 0;
+				value = maxLeft;
+			} else {
+				offsetLeft = 0;
+			}
+			if (offsetLeft || oldOffset) {
+				if (!this._skip) {
+					style[_transformProp] = transformStart + -offsetLeft + "px," + -offsetTop + transformEnd;
+				}
+				if (offsetLeft + extraPadRight >= 0) {
+					style.paddingRight =  offsetLeft + extraPadRight + "px";
+				}
+			}
+			element.scrollLeft = value | 0;
+			prevLeft = element.scrollLeft; //don't merge this with the line above because some browsers adjust the scrollLeft after it's set, so in order to be 100% accurate in tracking it, we need to ask the browser to report it.
+		};
+		this.top = function(value, force) {
+			if (!arguments.length) {
+				return -(element.scrollTop + offsetTop);
+			}
+			let dif = element.scrollTop - prevTop,
+				oldOffset = offsetTop;
+			if ((dif > 2 || dif < -2) && !force) { //if the user interacts with the scrollbar (or something else scrolls it, like the mouse wheel), we should kill any tweens of the ScrollProxy.
+				prevTop = element.scrollTop;
+				gsap.killTweensOf(this, {top:1, scrollTop:1});
+				this.top(-prevTop);
+				if (vars.onKill) {
+					vars.onKill();
+				}
+				return;
+			}
+			value = -value; //invert because scrolling works in the opposite direction
+			if (value < 0) {
+				offsetTop = (value - 0.5) | 0;
+				value = 0;
+			} else if (value > maxTop) {
+				offsetTop = (value - maxTop) | 0;
+				value = maxTop;
+			} else {
+				offsetTop = 0;
+			}
+			if (offsetTop || oldOffset) {
+				if (!this._skip) {
+					style[_transformProp] = transformStart + -offsetLeft + "px," + -offsetTop + transformEnd;
+				}
+			}
+			element.scrollTop = value | 0;
+			prevTop = element.scrollTop;
+		};
+
+		this.maxScrollTop = () => maxTop;
+		this.maxScrollLeft = () => maxLeft;
+
+		this.disable = function() {
+			node = content.firstChild;
+			while (node) {
+				nextNode = node.nextSibling;
+				element.appendChild(node);
+				node = nextNode;
+			}
+			if (element === content.parentNode) { //in case disable() is called when it's already disabled.
+				element.removeChild(content);
+			}
+		};
+		this.enable = function() {
+			node = element.firstChild;
+			if (node === content) {
+				return;
+			}
+			while (node) {
+				nextNode = node.nextSibling;
+				content.appendChild(node);
+				node = nextNode;
+			}
+			element.appendChild(content);
+			this.calibrate();
+		};
+		this.calibrate = function(force) {
+			let widthMatches = (element.clientWidth === elementWidth),
+				cs, x, y;
+			prevTop = element.scrollTop;
+			prevLeft = element.scrollLeft;
+			if (widthMatches && element.clientHeight === elementHeight && content.offsetHeight === contentHeight && scrollWidth === element.scrollWidth && scrollHeight === element.scrollHeight && !force) {
+				return; //no need to recalculate things if the width and height haven't changed.
+			}
+			if (offsetTop || offsetLeft) {
+				x = this.left();
+				y = this.top();
+				this.left(-element.scrollLeft);
+				this.top(-element.scrollTop);
+			}
+			cs = _getComputedStyle(element);
+			//first, we need to remove any width constraints to see how the content naturally flows so that we can see if it's wider than the containing element. If so, we've got to record the amount of overage so that we can apply that as padding in order for browsers to correctly handle things. Then we switch back to a width of 100% (without that, some browsers don't flow the content correctly)
+			if (!widthMatches || force) {
+				style.display = "block";
+				style.width = "auto";
+				style.paddingRight = "0px";
+				extraPadRight = Math.max(0, element.scrollWidth - element.clientWidth);
+				//if the content is wider than the container, we need to add the paddingLeft and paddingRight in order for things to behave correctly.
+				if (extraPadRight) {
+					extraPadRight += parseFloat(cs.paddingLeft) + (_addPaddingBR ? parseFloat(cs.paddingRight) : 0);
+				}
+			}
+			style.display = "inline-block";
+			style.position = "relative";
+			style.overflow = "visible";
+			style.verticalAlign = "top";
+			style.boxSizing = "content-box";
+			style.width = "100%";
+			style.paddingRight = extraPadRight + "px";
+			//some browsers neglect to factor in the bottom padding when calculating the scrollHeight, so we need to add that padding to the content when that happens. Allow a 2px margin for error
+			if (_addPaddingBR) {
+				style.paddingBottom = cs.paddingBottom;
+			}
+			elementWidth = element.clientWidth;
+			elementHeight = element.clientHeight;
+			scrollWidth = element.scrollWidth;
+			scrollHeight = element.scrollHeight;
+			maxLeft = element.scrollWidth - elementWidth;
+			maxTop = element.scrollHeight - elementHeight;
+			contentHeight = content.offsetHeight;
+			style.display = "block";
+			if (x || y) {
+				this.left(x);
+				this.top(y);
+			}
+		};
+		this.content = content;
+		this.element = element;
+		this._skip = false;
+		this.enable();
+	},
+	_initCore = required => {
+		if (_windowExists() && document.body) {
+			let nav = window && window.navigator;
+			_win = window;
+			_doc = document;
+			_docElement = _doc.documentElement;
+			_body = _doc.body;
+			_tempDiv = _createElement("div");
+			_supportsPointer = !!window.PointerEvent;
+			_placeholderDiv = _createElement("div");
+			_placeholderDiv.style.cssText = "visibility:hidden;height:1px;top:-1px;pointer-events:none;position:relative;clear:both;cursor:grab";
+			_defaultCursor = _placeholderDiv.style.cursor === "grab" ? "grab" : "move";
+			_isAndroid = (nav && nav.userAgent.toLowerCase().indexOf("android") !== -1); //Android handles touch events in an odd way and it's virtually impossible to "feature test" so we resort to UA sniffing
+			_isTouchDevice = (("ontouchstart" in _docElement) && ("orientation" in _win)) || (nav && (nav.MaxTouchPoints > 0 || nav.msMaxTouchPoints > 0));
+			_addPaddingBR = (function() { //this function is in charge of analyzing browser behavior related to padding. It sets the _addPaddingBR to true if the browser doesn't normally factor in the bottom or right padding on the element inside the scrolling area, and it sets _addPaddingLeft to true if it's a browser that requires the extra offset (offsetLeft) to be added to the paddingRight (like Opera).
+				let div = _createElement("div"),
+					child = _createElement("div"),
+					childStyle = child.style,
+					parent = _body,
+					val;
+				childStyle.display = "inline-block";
+				childStyle.position = "relative";
+				div.style.cssText = "width:90px;height:40px;padding:10px;overflow:auto;visibility:hidden";
+				div.appendChild(child);
+				parent.appendChild(div);
+				val = (child.offsetHeight + 18 > div.scrollHeight); //div.scrollHeight should be child.offsetHeight + 20 because of the 10px of padding on each side, but some browsers ignore one side. We allow a 2px margin of error.
+				parent.removeChild(div);
+				return val;
+			}());
+			_touchEventLookup = (function(types) { //we create an object that makes it easy to translate touch event types into their "pointer" counterparts if we're in a browser that uses those instead. Like IE10 uses "MSPointerDown" instead of "touchstart", for example.
+				let standard = types.split(","),
+					converted = ("onpointerdown" in _tempDiv ? "pointerdown,pointermove,pointerup,pointercancel" : "onmspointerdown" in _tempDiv ? "MSPointerDown,MSPointerMove,MSPointerUp,MSPointerCancel" : types).split(","),
+					obj = {},
+					i = 4;
+				while (--i > -1) {
+					obj[standard[i]] = converted[i];
+					obj[converted[i]] = standard[i];
+				}
+				//to avoid problems in iOS 9, test to see if the browser supports the "passive" option on addEventListener().
+				try {
+					_docElement.addEventListener("test", null, Object.defineProperty({}, "passive", {
+						get: function () {
+							_supportsPassive = 1;
+						}
+					}));
+				} catch (e) {}
+				return obj;
+			}("touchstart,touchmove,touchend,touchcancel"));
+			_addListener(_doc, "touchcancel", _emptyFunc); //some older Android devices intermittently stop dispatching "touchmove" events if we don't listen for "touchcancel" on the document. Very strange indeed.
+			_addListener(_win, "touchmove", _emptyFunc); //works around Safari bugs that still allow the page to scroll even when we preventDefault() on the touchmove event.
+			_body && _body.addEventListener("touchstart", _emptyFunc); //works around Safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/
+			_addListener(_doc, "contextmenu", function() {
+				for (let p in _lookup) {
+					if (_lookup[p].isPressed) {
+						_lookup[p].endDrag();
+					}
+				}
+			});
+			gsap = _coreInitted = _getGSAP();
+		}
+		if (gsap) {
+			InertiaPlugin = gsap.plugins.inertia;
+			_context = gsap.core.context || function() {};
+			_checkPrefix = gsap.utils.checkPrefix;
+			_transformProp = _checkPrefix(_transformProp);
+			_transformOriginProp = _checkPrefix(_transformOriginProp);
+			_toArray = gsap.utils.toArray;
+			_getStyleSaver = gsap.core.getStyleSaver;
+			_supports3D = !!_checkPrefix("perspective");
+		} else if (required) {
+			console.warn("Please gsap.registerPlugin(Draggable)");
+		}
+	};
+
+
+
+
+
+
+class EventDispatcher {
+
+	constructor(target) {
+		this._listeners = {};
+		this.target = target || this;
+	}
+
+	addEventListener(type, callback) {
+		let list = this._listeners[type] || (this._listeners[type] = []);
+		if (!~list.indexOf(callback)) {
+			list.push(callback);
+		}
+	}
+
+	removeEventListener(type, callback) {
+		let list = this._listeners[type],
+			i = (list && list.indexOf(callback));
+		(i >= 0) && list.splice(i, 1);
+	}
+
+	dispatchEvent(type) {
+		let result;
+		(this._listeners[type] || []).forEach(callback => (callback.call(this, {type: type, target: this.target}) === false) && (result = false));
+		return result; //if any of the callbacks return false, pass that along.
+	}
+}
+
+
+
+
+
+
+
+
+
+class Draggable extends EventDispatcher {
+
+	constructor(target, vars) {
+		super();
+		_coreInitted || _initCore(1);
+		target = _toArray(target)[0]; //in case the target is a selector object or selector text
+		this.styles = _getStyleSaver && _getStyleSaver(target, "transform,left,top");
+		if (!InertiaPlugin) {
+			InertiaPlugin = gsap.plugins.inertia;
+		}
+		this.vars = vars = _copy(vars || {});
+		this.target = target;
+		this.x = this.y = this.rotation = 0;
+		this.dragResistance = parseFloat(vars.dragResistance) || 0;
+		this.edgeResistance = isNaN(vars.edgeResistance) ? 1 : parseFloat(vars.edgeResistance) || 0;
+		this.lockAxis = vars.lockAxis;
+		this.autoScroll = vars.autoScroll || 0;
+		this.lockedAxis = null;
+		this.allowEventDefault = !!vars.allowEventDefault;
+
+		gsap.getProperty(target, "x"); // to ensure that transforms are instantiated.
+
+		let type = (vars.type || "x,y").toLowerCase(),
+			xyMode = (~type.indexOf("x") || ~type.indexOf("y")),
+			rotationMode = (type.indexOf("rotation") !== -1),
+			xProp = rotationMode ? "rotation" : xyMode ? "x" : "left",
+			yProp = xyMode ? "y" : "top",
+			allowX = !!(~type.indexOf("x") || ~type.indexOf("left") || type === "scroll"),
+			allowY = !!(~type.indexOf("y") || ~type.indexOf("top") || type === "scroll"),
+			minimumMovement = vars.minimumMovement || 2,
+			self = this,
+			triggers = _toArray(vars.trigger || vars.handle || target),
+			killProps = {},
+			dragEndTime = 0,
+			checkAutoScrollBounds = false,
+			autoScrollMarginTop = vars.autoScrollMarginTop || 40,
+			autoScrollMarginRight = vars.autoScrollMarginRight || 40,
+			autoScrollMarginBottom = vars.autoScrollMarginBottom || 40,
+			autoScrollMarginLeft = vars.autoScrollMarginLeft || 40,
+			isClickable = vars.clickableTest || _isClickable,
+			clickTime = 0,
+			gsCache = target._gsap || gsap.core.getCache(target),
+			isFixed = _isFixed(target),
+			getPropAsNum = (property, unit) => parseFloat(gsCache.get(target, property, unit)),
+			ownerDoc = target.ownerDocument || _doc,
+			enabled, scrollProxy, startPointerX, startPointerY, startElementX, startElementY, hasBounds, hasDragCallback, hasMoveCallback, maxX, minX, maxY, minY, touch, touchID, rotationOrigin, dirty, old, snapX, snapY, snapXY, isClicking, touchEventTarget, matrix, interrupted, allowNativeTouchScrolling, touchDragAxis, isDispatching, clickDispatch, trustedClickDispatch, isPreventingDefault, innerMatrix, dragged,
+
+			onContextMenu = e => { //used to prevent long-touch from triggering a context menu.
+				// (self.isPressed && e.which < 2) && self.endDrag() // previously ended drag when context menu was triggered, but instead we should just stop propagation and prevent the default event behavior.
+				_preventDefault(e);
+				e.stopImmediatePropagation && e.stopImmediatePropagation();
+				return false;
+			},
+
+			//this method gets called on every tick of TweenLite.ticker which allows us to synchronize the renders to the core engine (which is typically synchronized with the display refresh via requestAnimationFrame). This is an optimization - it's better than applying the values inside the "mousemove" or "touchmove" event handler which may get called many times inbetween refreshes.
+			render = suppressEvents => {
+				if (self.autoScroll && self.isDragging && (checkAutoScrollBounds || dirty)) {
+					let e = target,
+						autoScrollFactor = self.autoScroll * 15, //multiplying by 15 just gives us a better "feel" speed-wise.
+						parent, isRoot, rect, pointerX, pointerY, changeX, changeY, gap;
+					checkAutoScrollBounds = false;
+					_windowProxy.scrollTop = ((_win.pageYOffset != null) ? _win.pageYOffset : (ownerDoc.documentElement.scrollTop != null) ? ownerDoc.documentElement.scrollTop : ownerDoc.body.scrollTop);
+					_windowProxy.scrollLeft = ((_win.pageXOffset != null) ? _win.pageXOffset : (ownerDoc.documentElement.scrollLeft != null) ? ownerDoc.documentElement.scrollLeft : ownerDoc.body.scrollLeft);
+					pointerX = self.pointerX - _windowProxy.scrollLeft;
+					pointerY = self.pointerY - _windowProxy.scrollTop;
+					while (e && !isRoot) { //walk up the chain and sense wherever the pointer is within 40px of an edge that's scrollable.
+						isRoot = _isRoot(e.parentNode);
+						parent = isRoot ? _windowProxy : e.parentNode;
+						rect = isRoot ? {bottom:Math.max(_docElement.clientHeight, _win.innerHeight || 0), right: Math.max(_docElement.clientWidth, _win.innerWidth || 0), left:0, top:0} : parent.getBoundingClientRect();
+						changeX = changeY = 0;
+						if (allowY) {
+							gap = parent._gsMaxScrollY - parent.scrollTop;
+							if (gap < 0) {
+								changeY = gap;
+							} else if (pointerY > rect.bottom - autoScrollMarginBottom && gap) {
+								checkAutoScrollBounds = true;
+								changeY = Math.min(gap, (autoScrollFactor * (1 - Math.max(0, (rect.bottom - pointerY)) / autoScrollMarginBottom)) | 0);
+							} else if (pointerY < rect.top + autoScrollMarginTop && parent.scrollTop) {
+								checkAutoScrollBounds = true;
+								changeY = -Math.min(parent.scrollTop, (autoScrollFactor * (1 - Math.max(0, (pointerY - rect.top)) / autoScrollMarginTop)) | 0);
+							}
+							if (changeY) {
+								parent.scrollTop += changeY;
+							}
+						}
+						if (allowX) {
+							gap = parent._gsMaxScrollX - parent.scrollLeft;
+							if (gap < 0) {
+								changeX = gap;
+							} else if (pointerX > rect.right - autoScrollMarginRight && gap) {
+								checkAutoScrollBounds = true;
+								changeX = Math.min(gap, (autoScrollFactor * (1 - Math.max(0, (rect.right - pointerX)) / autoScrollMarginRight)) | 0);
+							} else if (pointerX < rect.left + autoScrollMarginLeft && parent.scrollLeft) {
+								checkAutoScrollBounds = true;
+								changeX = -Math.min(parent.scrollLeft, (autoScrollFactor * (1 - Math.max(0, (pointerX - rect.left)) / autoScrollMarginLeft)) | 0);
+							}
+							if (changeX) {
+								parent.scrollLeft += changeX;
+							}
+						}
+
+						if (isRoot && (changeX || changeY)) {
+							_win.scrollTo(parent.scrollLeft, parent.scrollTop);
+							setPointerPosition(self.pointerX + changeX, self.pointerY + changeY);
+						}
+						e = parent;
+					}
+				}
+				if (dirty) {
+					let {x, y} = self;
+					if (rotationMode) {
+						self.deltaX = x - parseFloat(gsCache.rotation);
+						self.rotation = x;
+						gsCache.rotation = x + "deg";
+						gsCache.renderTransform(1, gsCache);
+					} else {
+						if (scrollProxy) {
+							if (allowY) {
+								self.deltaY = y - scrollProxy.top();
+								scrollProxy.top(y);
+							}
+							if (allowX) {
+								self.deltaX = x - scrollProxy.left();
+								scrollProxy.left(x);
+							}
+						} else if (xyMode) {
+							if (allowY) {
+								self.deltaY = y - parseFloat(gsCache.y);
+								gsCache.y = y + "px";
+							}
+							if (allowX) {
+								self.deltaX = x - parseFloat(gsCache.x);
+								gsCache.x = x + "px";
+							}
+							gsCache.renderTransform(1, gsCache);
+						} else {
+							if (allowY) {
+								self.deltaY = y - parseFloat(target.style.top || 0);
+								target.style.top = y + "px";
+							}
+							if (allowX) {
+								self.deltaX = x - parseFloat(target.style.left || 0);
+								target.style.left = x + "px";
+							}
+						}
+					}
+					if (hasDragCallback && !suppressEvents && !isDispatching) {
+						isDispatching = true; //in case onDrag has an update() call (avoid endless loop)
+						if (_dispatchEvent(self, "drag", "onDrag") === false) {
+							if (allowX) {
+								self.x -= self.deltaX;
+							}
+							if (allowY) {
+								self.y -= self.deltaY;
+							}
+							render(true);
+						}
+						isDispatching = false;
+					}
+				}
+				dirty = false;
+			},
+
+			//copies the x/y from the element (whether that be transforms, top/left, or ScrollProxy's top/left) to the Draggable's x and y (and rotation if necessary) properties so that they reflect reality and it also (optionally) applies any snapping necessary. This is used by the InertiaPlugin tween in an onUpdate to ensure things are synced and snapped.
+			syncXY = (skipOnUpdate, skipSnap) => {
+				let { x, y } = self,
+					snappedValue, cs;
+				if (!target._gsap) { //just in case the _gsap cache got wiped, like if the user called clearProps on the transform or something (very rare).
+					gsCache = gsap.core.getCache(target);
+				}
+				gsCache.uncache && gsap.getProperty(target, "x"); // trigger a re-cache
+				if (xyMode) {
+					self.x = parseFloat(gsCache.x);
+					self.y = parseFloat(gsCache.y);
+				} else if (rotationMode) {
+					self.x = self.rotation = parseFloat(gsCache.rotation);
+				} else if (scrollProxy) {
+					self.y = scrollProxy.top();
+					self.x = scrollProxy.left();
+				} else {
+					self.y = parseFloat(target.style.top || ((cs = _getComputedStyle(target)) && cs.top)) || 0;
+					self.x = parseFloat(target.style.left || (cs || {}).left) || 0;
+				}
+				if ((snapX || snapY || snapXY) && !skipSnap && (self.isDragging || self.isThrowing)) {
+					if (snapXY) {
+						_temp1.x = self.x;
+						_temp1.y = self.y;
+						snappedValue = snapXY(_temp1);
+						if (snappedValue.x !== self.x) {
+							self.x = snappedValue.x;
+							dirty = true;
+						}
+						if (snappedValue.y !== self.y) {
+							self.y = snappedValue.y;
+							dirty = true;
+						}
+					}
+					if (snapX) {
+						snappedValue = snapX(self.x);
+						if (snappedValue !== self.x) {
+							self.x = snappedValue;
+							if (rotationMode) {
+								self.rotation = snappedValue;
+							}
+							dirty = true;
+						}
+					}
+					if (snapY) {
+						snappedValue = snapY(self.y);
+						if (snappedValue !== self.y) {
+							self.y = snappedValue;
+						}
+						dirty = true;
+					}
+				}
+				dirty && render(true);
+				if (!skipOnUpdate) {
+					self.deltaX = self.x - x;
+					self.deltaY = self.y - y;
+					_dispatchEvent(self, "throwupdate", "onThrowUpdate");
+				}
+			},
+
+			buildSnapFunc = (snap, min, max, factor) => {
+				if (min == null) {
+					min = -_bigNum;
+				}
+				if (max == null) {
+					max = _bigNum;
+				}
+				if (_isFunction(snap)) {
+					return n => {
+						let edgeTolerance = !self.isPressed ? 1 : 1 - self.edgeResistance; //if we're tweening, disable the edgeTolerance because it's already factored into the tweening values (we don't want to apply it multiple times)
+						return snap.call(self, (n > max ? max + (n - max) * edgeTolerance : (n < min) ? min + (n - min) * edgeTolerance : n) * factor) * factor;
+					};
+				}
+				if (_isArray(snap)) {
+					return n => {
+						let i = snap.length,
+							closest = 0,
+							absDif = _bigNum,
+							val, dif;
+						while (--i > -1) {
+							val = snap[i];
+							dif = val - n;
+							if (dif < 0) {
+								dif = -dif;
+							}
+							if (dif < absDif && val >= min && val <= max) {
+								closest = i;
+								absDif = dif;
+							}
+						}
+						return snap[closest];
+					};
+				}
+				return isNaN(snap) ? n => n : () => snap * factor;
+			},
+
+			buildPointSnapFunc = (snap, minX, maxX, minY, maxY, radius, factor) => {
+				radius = (radius && radius < _bigNum) ? radius * radius : _bigNum; //so we don't have to Math.sqrt() in the functions. Performance optimization.
+				if (_isFunction(snap)) {
+					return point => {
+						let edgeTolerance = !self.isPressed ? 1 : 1 - self.edgeResistance,
+							x = point.x,
+							y = point.y,
+							result, dx, dy; //if we're tweening, disable the edgeTolerance because it's already factored into the tweening values (we don't want to apply it multiple times)
+						point.x = x = (x > maxX ? maxX + (x - maxX) * edgeTolerance : (x < minX) ? minX + (x - minX) * edgeTolerance : x);
+						point.y = y = (y > maxY ? maxY + (y - maxY) * edgeTolerance : (y < minY) ? minY + (y - minY) * edgeTolerance : y);
+						result = snap.call(self, point);
+						if (result !== point) {
+							point.x = result.x;
+							point.y = result.y;
+						}
+						if (factor !== 1) {
+							point.x *= factor;
+							point.y *= factor;
+						}
+						if (radius < _bigNum) {
+							dx = point.x - x;
+							dy = point.y - y;
+							if (dx * dx + dy * dy > radius) {
+								point.x = x;
+								point.y = y;
+							}
+						}
+						return point;
+					};
+				}
+				if (_isArray(snap)) {
+					return p => {
+						let i = snap.length,
+							closest = 0,
+							minDist = _bigNum,
+							x, y, point, dist;
+						while (--i > -1) {
+							point = snap[i];
+							x = point.x - p.x;
+							y = point.y - p.y;
+							dist = x * x + y * y;
+							if (dist < minDist) {
+								closest = i;
+								minDist = dist;
+							}
+						}
+						return (minDist <= radius) ? snap[closest] : p;
+					};
+				}
+				return n => n;
+			},
+
+			calculateBounds = () => {
+				let bounds, targetBounds, snap, snapIsRaw;
+				hasBounds = false;
+				if (scrollProxy) {
+					scrollProxy.calibrate();
+					self.minX = minX = -scrollProxy.maxScrollLeft();
+					self.minY = minY = -scrollProxy.maxScrollTop();
+					self.maxX = maxX = self.maxY = maxY = 0;
+					hasBounds = true;
+				} else if (!!vars.bounds) {
+					bounds = _getBounds(vars.bounds, target.parentNode); //could be a selector/jQuery object or a DOM element or a generic object like {top:0, left:100, width:1000, height:800} or {minX:100, maxX:1100, minY:0, maxY:800}
+					if (rotationMode) {
+						self.minX = minX = bounds.left;
+						self.maxX = maxX = bounds.left + bounds.width;
+						self.minY = minY = self.maxY = maxY = 0;
+					} else if (!_isUndefined(vars.bounds.maxX) || !_isUndefined(vars.bounds.maxY)) {
+						bounds = vars.bounds;
+						self.minX = minX = bounds.minX;
+						self.minY = minY = bounds.minY;
+						self.maxX = maxX = bounds.maxX;
+						self.maxY = maxY = bounds.maxY;
+					} else {
+						targetBounds = _getBounds(target, target.parentNode);
+						self.minX = minX = Math.round(getPropAsNum(xProp, "px") + bounds.left - targetBounds.left);
+						self.minY = minY = Math.round(getPropAsNum(yProp, "px") + bounds.top - targetBounds.top);
+						self.maxX = maxX = Math.round(minX + (bounds.width - targetBounds.width));
+						self.maxY = maxY = Math.round(minY + (bounds.height - targetBounds.height));
+					}
+					if (minX > maxX) {
+						self.minX = maxX;
+						self.maxX = maxX = minX;
+						minX = self.minX;
+					}
+					if (minY > maxY) {
+						self.minY = maxY;
+						self.maxY = maxY = minY;
+						minY = self.minY;
+					}
+					if (rotationMode) {
+						self.minRotation = minX;
+						self.maxRotation = maxX;
+					}
+					hasBounds = true;
+				}
+				if (vars.liveSnap) {
+					snap = (vars.liveSnap === true) ? (vars.snap || {}) : vars.liveSnap;
+					snapIsRaw = (_isArray(snap) || _isFunction(snap));
+					if (rotationMode) {
+						snapX = buildSnapFunc((snapIsRaw ? snap : snap.rotation), minX, maxX, 1);
+						snapY = null;
+					} else {
+						if (snap.points) {
+							snapXY = buildPointSnapFunc((snapIsRaw ? snap : snap.points), minX, maxX, minY, maxY, snap.radius, scrollProxy ? -1 : 1);
+						} else {
+							if (allowX) {
+								snapX = buildSnapFunc((snapIsRaw ? snap : snap.x || snap.left || snap.scrollLeft), minX, maxX, scrollProxy ? -1 : 1);
+							}
+							if (allowY) {
+								snapY = buildSnapFunc((snapIsRaw ? snap : snap.y || snap.top || snap.scrollTop), minY, maxY, scrollProxy ? -1 : 1);
+							}
+						}
+					}
+				}
+			},
+
+			onThrowComplete = () => {
+				self.isThrowing = false;
+				_dispatchEvent(self, "throwcomplete", "onThrowComplete");
+			},
+			onThrowInterrupt = () => {
+				self.isThrowing = false;
+			},
+
+			animate = (inertia, forceZeroVelocity) => {
+				let snap, snapIsRaw, tween, overshootTolerance;
+				if (inertia && InertiaPlugin) {
+					if (inertia === true) {
+						snap = vars.snap || vars.liveSnap || {};
+						snapIsRaw = (_isArray(snap) || _isFunction(snap));
+						inertia = {resistance:(vars.throwResistance || vars.resistance || 1000) / (rotationMode ? 10 : 1)};
+						if (rotationMode) {
+							inertia.rotation = _parseInertia(self, snapIsRaw ? snap : snap.rotation, maxX, minX, 1, forceZeroVelocity);
+						} else {
+							if (allowX) {
+								inertia[xProp] = _parseInertia(self, snapIsRaw ? snap : snap.points || snap.x || snap.left, maxX, minX, scrollProxy ? -1 : 1, forceZeroVelocity || (self.lockedAxis === "x"));
+							}
+							if (allowY) {
+								inertia[yProp] = _parseInertia(self, snapIsRaw ? snap : snap.points || snap.y || snap.top, maxY, minY, scrollProxy ? -1 : 1, forceZeroVelocity || (self.lockedAxis === "y"));
+							}
+							if (snap.points || (_isArray(snap) && _isObject(snap[0]))) {
+								inertia.linkedProps = xProp + "," + yProp;
+								inertia.radius = snap.radius; //note: we also disable liveSnapping while throwing if there's a "radius" defined, otherwise it looks weird to have the item thrown past a snapping point but live-snapping mid-tween. We do this by altering the onUpdateParams so that "skipSnap" parameter is true for syncXY.
+							}
+						}
+					}
+					self.isThrowing = true;
+					overshootTolerance = (!isNaN(vars.overshootTolerance)) ? vars.overshootTolerance : (vars.edgeResistance === 1) ? 0 : (1 - self.edgeResistance) + 0.2;
+					if (!inertia.duration) {
+						inertia.duration = {max: Math.max(vars.minDuration || 0, ("maxDuration" in vars) ? vars.maxDuration : 2), min: (!isNaN(vars.minDuration) ? vars.minDuration : (overshootTolerance === 0 || (_isObject(inertia) && inertia.resistance > 1000)) ? 0 : 0.5), overshoot: overshootTolerance};
+					}
+					self.tween = tween = gsap.to(scrollProxy || target, {
+						inertia: inertia,
+						data: "_draggable",
+						inherit: false,
+						onComplete: onThrowComplete,
+						onInterrupt: onThrowInterrupt,
+						onUpdate: (vars.fastMode ? _dispatchEvent : syncXY),
+						onUpdateParams: (vars.fastMode ? [self, "onthrowupdate", "onThrowUpdate"] : (snap && snap.radius) ? [false, true] : [])
+					});
+					if (!vars.fastMode) {
+						if (scrollProxy) {
+							scrollProxy._skip = true; // Microsoft browsers have a bug that causes them to briefly render the position incorrectly (it flashes to the end state when we seek() the tween even though we jump right back to the current position, and this only seems to happen when we're affecting both top and left), so we set a _suspendTransforms flag to prevent it from actually applying the values in the ScrollProxy.
+						}
+						tween.render(1e9, true, true); // force to the end. Remember, the duration will likely change upon initting because that's when InertiaPlugin calculates it.
+						syncXY(true, true);
+						self.endX = self.x;
+						self.endY = self.y;
+						if (rotationMode) {
+							self.endRotation = self.x;
+						}
+						tween.play(0);
+						syncXY(true, true);
+						if (scrollProxy) {
+							scrollProxy._skip = false; //Microsoft browsers have a bug that causes them to briefly render the position incorrectly (it flashes to the end state when we seek() the tween even though we jump right back to the current position, and this only seems to happen when we're affecting both top and left), so we set a _suspendTransforms flag to prevent it from actually applying the values in the ScrollProxy.
+						}
+					}
+				} else if (hasBounds) {
+					self.applyBounds();
+				}
+			},
+
+			updateMatrix = shiftStart => {
+				let start = matrix,
+					p;
+				matrix = getGlobalMatrix(target.parentNode, true);
+				if (shiftStart && self.isPressed && !matrix.equals(start || new Matrix2D())) { //if the matrix changes WHILE the element is pressed, we must adjust the startPointerX and startPointerY accordingly, so we invert the original matrix and figure out where the pointerX and pointerY were in the global space, then apply the new matrix to get the updated coordinates.
+					p = start.inverse().apply({x:startPointerX, y:startPointerY});
+					matrix.apply(p, p);
+					startPointerX = p.x;
+					startPointerY = p.y;
+				}
+				if (matrix.equals(_identityMatrix)) { //if there are no transforms, we can optimize performance by not factoring in the matrix
+					matrix = null;
+				}
+			},
+
+			recordStartPositions = () => {
+				let edgeTolerance = 1 - self.edgeResistance,
+					offsetX = isFixed ? _getDocScrollLeft(ownerDoc) : 0,
+					offsetY = isFixed ? _getDocScrollTop(ownerDoc) : 0,
+					parsedOrigin, x, y;
+				if (xyMode) { // in case the user set it as a different unit, like animating the x to "100%". We must convert it back to px!
+					gsCache.x = getPropAsNum(xProp, "px") + "px";
+					gsCache.y = getPropAsNum(yProp, "px") + "px";
+					gsCache.renderTransform();
+				}
+				updateMatrix(false);
+				_point1.x = self.pointerX - offsetX;
+				_point1.y = self.pointerY - offsetY;
+				matrix && matrix.apply(_point1, _point1);
+				startPointerX = _point1.x; //translate to local coordinate system
+				startPointerY = _point1.y;
+				if (dirty) {
+					setPointerPosition(self.pointerX, self.pointerY);
+					render(true);
+				}
+				innerMatrix = getGlobalMatrix(target);
+				if (scrollProxy) {
+					calculateBounds();
+					startElementY = scrollProxy.top();
+					startElementX = scrollProxy.left();
+				} else {
+					//if the element is in the process of tweening, don't force snapping to occur because it could make it jump. Imagine the user throwing, then before it's done, clicking on the element in its inbetween state.
+					if (isTweening()) {
+						syncXY(true, true);
+						calculateBounds();
+					} else {
+						self.applyBounds();
+					}
+					if (rotationMode) {
+						parsedOrigin = target.ownerSVGElement ? [gsCache.xOrigin - target.getBBox().x, gsCache.yOrigin - target.getBBox().y] : (_getComputedStyle(target)[_transformOriginProp] || "0 0").split(" ");
+						rotationOrigin = self.rotationOrigin = getGlobalMatrix(target).apply({x: parseFloat(parsedOrigin[0]) || 0, y: parseFloat(parsedOrigin[1]) || 0});
+						syncXY(true, true);
+						x = self.pointerX - rotationOrigin.x - offsetX;
+						y = rotationOrigin.y - self.pointerY + offsetY;
+						startElementX = self.x; //starting rotation (x always refers to rotation in type:"rotation", measured in degrees)
+						startElementY = self.y = Math.atan2(y, x) * _RAD2DEG;
+					} else {
+						//parent = !isFixed && target.parentNode;
+						//startScrollTop = parent ? parent.scrollTop || 0 : 0;
+						//startScrollLeft = parent ? parent.scrollLeft || 0 : 0;
+						startElementY = getPropAsNum(yProp, "px"); //record the starting top and left values so that we can just add the mouse's movement to them later.
+						startElementX = getPropAsNum(xProp, "px");
+					}
+				}
+
+				if (hasBounds && edgeTolerance) {
+					if (startElementX > maxX) {
+						startElementX = maxX + (startElementX - maxX) / edgeTolerance;
+					} else if (startElementX < minX) {
+						startElementX = minX - (minX - startElementX) / edgeTolerance;
+					}
+					if (!rotationMode) {
+						if (startElementY > maxY) {
+							startElementY = maxY + (startElementY - maxY) / edgeTolerance;
+						} else if (startElementY < minY) {
+							startElementY = minY - (minY - startElementY) / edgeTolerance;
+						}
+					}
+				}
+				self.startX = startElementX = _round(startElementX);
+				self.startY = startElementY = _round(startElementY);
+			},
+
+			isTweening = () => self.tween && self.tween.isActive(),
+
+			removePlaceholder = () => {
+				if (_placeholderDiv.parentNode && !isTweening() && !self.isDragging) { //_placeholderDiv just props open auto-scrolling containers so they don't collapse as the user drags left/up. We remove it after dragging (and throwing, if necessary) finishes.
+					_placeholderDiv.parentNode.removeChild(_placeholderDiv);
+				}
+			},
+
+			//called when the mouse is pressed (or touch starts)
+			onPress = (e, force) => {
+				let i;
+				if (!enabled || self.isPressed || !e || ((e.type === "mousedown" || e.type === "pointerdown") && !force && _getTime() - clickTime < 30 && _touchEventLookup[self.pointerEvent.type])) { //when we DON'T preventDefault() in order to accommodate touch-scrolling and the user just taps, many browsers also fire a mousedown/mouseup sequence AFTER the touchstart/touchend sequence, thus it'd result in two quick "click" events being dispatched. This line senses that condition and halts it on the subsequent mousedown.
+					isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchstart, pointerdown, mousedown. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.
+					return;
+				}
+				interrupted = isTweening();
+				dragged = false; // we need to track whether or not it was dragged in this interaction so that if, for example, the user calls .endDrag() to FORCE it to stop and then they keep the mouse pressed down and eventually release, that would normally cause an onClick but we have to skip it in that case if there was dragging that occurred.
+				self.pointerEvent = e;
+				if (_touchEventLookup[e.type]) { //note: on iOS, BOTH touchmove and mousemove are dispatched, but the mousemove has pageY and pageX of 0 which would mess up the calculations and needlessly hurt performance.
+					touchEventTarget = ~e.type.indexOf("touch") ? (e.currentTarget || e.target) : ownerDoc; //pointer-based touches (for Microsoft browsers) don't remain locked to the original target like other browsers, so we must use the document instead. The event type would be "MSPointerDown" or "pointerdown".
+					_addListener(touchEventTarget, "touchend", onRelease);
+					_addListener(touchEventTarget, "touchmove", onMove); // possible future change if PointerEvents are more standardized: https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture
+					_addListener(touchEventTarget, "touchcancel", onRelease);
+					_addListener(ownerDoc, "touchstart", _onMultiTouchDocument);
+				} else {
+					touchEventTarget = null;
+					_addListener(ownerDoc, "mousemove", onMove); //attach these to the document instead of the box itself so that if the user's mouse moves too quickly (and off of the box), things still work.
+				}
+				touchDragAxis = null;
+				if (!_supportsPointer  || !touchEventTarget) {
+					_addListener(ownerDoc, "mouseup", onRelease);
+					e && e.target && _addListener(e.target, "mouseup", onRelease); //we also have to listen directly on the element because some browsers don't bubble up the event to the _doc on elements with contentEditable="true"
+				}
+				isClicking = (isClickable.call(self, e.target) && vars.dragClickables === false && !force);
+				if (isClicking) {
+					_addListener(e.target, "change", onRelease); //in some browsers, when you mousedown on a <select> element, no mouseup gets dispatched! So we listen for a "change" event instead.
+					_dispatchEvent(self, "pressInit", "onPressInit");
+					_dispatchEvent(self, "press", "onPress");
+					_setSelectable(triggers, true); //accommodates things like inputs and elements with contentEditable="true" (otherwise user couldn't drag to select text)
+					isPreventingDefault = false;
+					return;
+				}
+				allowNativeTouchScrolling = (!touchEventTarget || allowX === allowY || self.vars.allowNativeTouchScrolling === false || (self.vars.allowContextMenu && e && (e.ctrlKey || e.which > 2))) ? false : allowX ? "y" : "x"; //note: in Chrome, right-clicking (for a context menu) fires onPress and it doesn't have the event.which set properly, so we must look for event.ctrlKey. If the user wants to allow context menus we should of course sense it here and not allow native touch scrolling.
+				isPreventingDefault = !allowNativeTouchScrolling && !self.allowEventDefault;
+				if (isPreventingDefault) {
+					_preventDefault(e);
+					_addListener(_win, "touchforcechange", _preventDefault); //works around safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/
+				}
+				if (e.changedTouches) { //touch events store the data slightly differently
+					e = touch = e.changedTouches[0];
+					touchID = e.identifier;
+				} else if (e.pointerId) {
+					touchID = e.pointerId; //for some Microsoft browsers
+				} else {
+					touch = touchID = null;
+				}
+				_dragCount++;
+				_addToRenderQueue(render); //causes the Draggable to render on each "tick" of gsap.ticker (performance optimization - updating values in a mousemove can cause them to happen too frequently, like multiple times between frame redraws which is wasteful, and it also prevents values from updating properly in IE8)
+				startPointerY = self.pointerY = e.pageY; //record the starting x and y so that we can calculate the movement from the original in _onMouseMove
+				startPointerX = self.pointerX = e.pageX;
+				_dispatchEvent(self, "pressInit", "onPressInit");
+				if (allowNativeTouchScrolling || self.autoScroll) {
+					_recordMaxScrolls(target.parentNode);
+				}
+				if (target.parentNode && self.autoScroll && !scrollProxy && !rotationMode && target.parentNode._gsMaxScrollX && !_placeholderDiv.parentNode && !target.getBBox) { //add a placeholder div to prevent the parent container from collapsing when the user drags the element left.
+					_placeholderDiv.style.width = target.parentNode.scrollWidth + "px";
+					target.parentNode.appendChild(_placeholderDiv);
+				}
+				recordStartPositions();
+				self.tween && self.tween.kill();
+				self.isThrowing = false;
+				gsap.killTweensOf(scrollProxy || target, killProps, true); //in case the user tries to drag it before the last tween is done.
+				scrollProxy && gsap.killTweensOf(target, {scrollTo:1}, true); //just in case the original target's scroll position is being tweened somewhere else.
+				self.tween = self.lockedAxis = null;
+				if (vars.zIndexBoost || (!rotationMode && !scrollProxy && vars.zIndexBoost !== false)) {
+					target.style.zIndex = Draggable.zIndex++;
+				}
+				self.isPressed = true;
+				hasDragCallback = !!(vars.onDrag || self._listeners.drag);
+				hasMoveCallback = !!(vars.onMove || self._listeners.move);
+				if (vars.cursor !== false || vars.activeCursor) {
+					i = triggers.length;
+					while (--i > -1) {
+						gsap.set(triggers[i], {cursor: vars.activeCursor || vars.cursor || (_defaultCursor === "grab" ? "grabbing" : _defaultCursor)});
+					}
+				}
+				_dispatchEvent(self, "press", "onPress");
+			},
+
+			//called every time the mouse/touch moves
+			onMove = e => {
+				let originalEvent = e,
+					touches, pointerX, pointerY, i, dx, dy;
+				if (!enabled || _isMultiTouching || !self.isPressed || !e) {
+					isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchmove, pointermove, mousemove. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.
+					return;
+				}
+				self.pointerEvent = e;
+				touches = e.changedTouches;
+				if (touches) { //touch events store the data slightly differently
+					e = touches[0];
+					if (e !== touch && e.identifier !== touchID) { //Usually changedTouches[0] will be what we're looking for, but in case it's not, look through the rest of the array...(and Android browsers don't reuse the event like iOS)
+						i = touches.length;
+						while (--i > -1 && (e = touches[i]).identifier !== touchID && e.target !== target) {} // Some Android devices dispatch a touchstart AND pointerdown initially, and then only pointermove thus the touchID may not match because it was grabbed from the touchstart event whereas the pointer event is the one that the browser dispatches for move, so if the event target matches this Draggable's target, let it through.
+						if (i < 0) {
+							return;
+						}
+					}
+				} else if (e.pointerId && touchID && e.pointerId !== touchID) { //for some Microsoft browsers, we must attach the listener to the doc rather than the trigger so that when the finger moves outside the bounds of the trigger, things still work. So if the event we're receiving has a pointerId that doesn't match the touchID, ignore it (for multi-touch)
+					return;
+				}
+
+				if (touchEventTarget && allowNativeTouchScrolling && !touchDragAxis) { //Android browsers force us to decide on the first "touchmove" event if we should allow the default (scrolling) behavior or preventDefault(). Otherwise, a "touchcancel" will be fired and then no "touchmove" or "touchend" will fire during the scrolling (no good).
+					_point1.x = e.pageX - (isFixed ? _getDocScrollLeft(ownerDoc) : 0);
+					_point1.y = e.pageY - (isFixed ? _getDocScrollTop(ownerDoc) : 0);
+					matrix && matrix.apply(_point1, _point1);
+					pointerX = _point1.x;
+					pointerY = _point1.y;
+					dx = Math.abs(pointerX - startPointerX);
+					dy = Math.abs(pointerY - startPointerY);
+					if ((dx !== dy && (dx > minimumMovement || dy > minimumMovement)) || (_isAndroid && allowNativeTouchScrolling === touchDragAxis)) {
+						touchDragAxis = (dx > dy && allowX) ? "x" : "y";
+						if (allowNativeTouchScrolling && touchDragAxis !== allowNativeTouchScrolling) {
+							_addListener(_win, "touchforcechange", _preventDefault); // prevents native touch scrolling from taking over if the user started dragging in the other direction in iOS Safari
+						}
+						if (self.vars.lockAxisOnTouchScroll !== false && allowX && allowY) {
+							self.lockedAxis = (touchDragAxis === "x") ? "y" : "x";
+							_isFunction(self.vars.onLockAxis) && self.vars.onLockAxis.call(self, originalEvent);
+						}
+						if (_isAndroid && allowNativeTouchScrolling === touchDragAxis) {
+							onRelease(originalEvent);
+							return;
+						}
+					}
+				}
+				if (!self.allowEventDefault && (!allowNativeTouchScrolling || (touchDragAxis && allowNativeTouchScrolling !== touchDragAxis)) && originalEvent.cancelable !== false) {
+					_preventDefault(originalEvent);
+					isPreventingDefault = true;
+				} else if (isPreventingDefault) {
+					isPreventingDefault = false;
+				}
+
+				if (self.autoScroll) {
+					checkAutoScrollBounds = true;
+				}
+				setPointerPosition(e.pageX, e.pageY, hasMoveCallback);
+			},
+
+			setPointerPosition = (pointerX, pointerY, invokeOnMove) => {
+				let dragTolerance = 1 - self.dragResistance,
+					edgeTolerance = 1 - self.edgeResistance,
+					prevPointerX = self.pointerX,
+					prevPointerY = self.pointerY,
+					prevStartElementY = startElementY,
+					prevX = self.x,
+					prevY = self.y,
+					prevEndX = self.endX,
+					prevEndY = self.endY,
+					prevEndRotation = self.endRotation,
+					prevDirty = dirty,
+					xChange, yChange, x, y, dif, temp;
+				self.pointerX = pointerX;
+				self.pointerY = pointerY;
+				if (isFixed) {
+					pointerX -= _getDocScrollLeft(ownerDoc);
+					pointerY -= _getDocScrollTop(ownerDoc);
+				}
+				if (rotationMode) {
+					y = Math.atan2(rotationOrigin.y - pointerY, pointerX - rotationOrigin.x) * _RAD2DEG;
+					dif = self.y - y;
+					if (dif > 180) {
+						startElementY -= 360;
+						self.y = y;
+					} else if (dif < -180) {
+						startElementY += 360;
+						self.y = y;
+					}
+					if (self.x !== startElementX || Math.abs(startElementY - y) > minimumMovement) {
+						self.y = y;
+						x = startElementX + (startElementY - y) * dragTolerance;
+					} else {
+						x = startElementX;
+					}
+
+				} else {
+					if (matrix) {
+						temp = pointerX * matrix.a + pointerY * matrix.c + matrix.e;
+						pointerY = pointerX * matrix.b + pointerY * matrix.d + matrix.f;
+						pointerX = temp;
+					}
+					yChange = (pointerY - startPointerY);
+					xChange = (pointerX - startPointerX);
+					if (yChange < minimumMovement && yChange > -minimumMovement) {
+						yChange = 0;
+					}
+					if (xChange < minimumMovement && xChange > -minimumMovement) {
+						xChange = 0;
+					}
+					if ((self.lockAxis || self.lockedAxis) && (xChange || yChange)) {
+						temp = self.lockedAxis;
+						if (!temp) {
+							self.lockedAxis = temp = (allowX && Math.abs(xChange) > Math.abs(yChange)) ? "y" : allowY ? "x" : null;
+							if (temp && _isFunction(self.vars.onLockAxis)) {
+								self.vars.onLockAxis.call(self, self.pointerEvent);
+							}
+						}
+						if (temp === "y") {
+							yChange = 0;
+						} else if (temp === "x") {
+							xChange = 0;
+						}
+					}
+					x = _round(startElementX + xChange * dragTolerance);
+					y = _round(startElementY + yChange * dragTolerance);
+				}
+
+				if ((snapX || snapY || snapXY) && (self.x !== x || (self.y !== y && !rotationMode))) {
+					if (snapXY) {
+						_temp1.x = x;
+						_temp1.y = y;
+						temp = snapXY(_temp1);
+						x = _round(temp.x);
+						y = _round(temp.y);
+					}
+					if (snapX) {
+						x = _round(snapX(x));
+					}
+					if (snapY) {
+						y = _round(snapY(y));
+					}
+				}
+				if (hasBounds) {
+					if (x > maxX) {
+						x = maxX + Math.round((x - maxX) * edgeTolerance);
+					} else if (x < minX) {
+						x = minX + Math.round((x - minX) * edgeTolerance);
+					}
+					if (!rotationMode) {
+						if (y > maxY) {
+							y = Math.round(maxY + (y - maxY) * edgeTolerance);
+						} else if (y < minY) {
+							y = Math.round(minY + (y - minY) * edgeTolerance);
+						}
+					}
+				}
+				if (self.x !== x || (self.y !== y && !rotationMode)) {
+					if (rotationMode) {
+						self.endRotation = self.x = self.endX = x;
+						dirty = true;
+					} else {
+						if (allowY) {
+							self.y = self.endY = y;
+							dirty = true; //a flag that indicates we need to render the target next time the TweenLite.ticker dispatches a "tick" event (typically on a requestAnimationFrame) - this is a performance optimization (we shouldn't render on every move because sometimes many move events can get dispatched between screen refreshes, and that'd be wasteful to render every time)
+						}
+						if (allowX) {
+							self.x = self.endX = x;
+							dirty = true;
+						}
+					}
+					if (!invokeOnMove || _dispatchEvent(self, "move", "onMove") !== false) {
+						if (!self.isDragging && self.isPressed) {
+							self.isDragging = dragged = true;
+							_dispatchEvent(self, "dragstart", "onDragStart");
+						}
+					} else { //revert because the onMove returned false!
+						self.pointerX = prevPointerX;
+						self.pointerY = prevPointerY;
+						startElementY = prevStartElementY;
+						self.x = prevX;
+						self.y = prevY;
+						self.endX = prevEndX;
+						self.endY = prevEndY;
+						self.endRotation = prevEndRotation;
+						dirty = prevDirty;
+					}
+				}
+			},
+
+			//called when the mouse/touch is released
+			onRelease = (e, force) => {
+				if (!enabled || !self.isPressed || (e && touchID != null && !force && ((e.pointerId && e.pointerId !== touchID && e.target !== target) || (e.changedTouches && !_hasTouchID(e.changedTouches, touchID))))) {  //for some Microsoft browsers, we must attach the listener to the doc rather than the trigger so that when the finger moves outside the bounds of the trigger, things still work. So if the event we're receiving has a pointerId that doesn't match the touchID, ignore it (for multi-touch)
+					isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchend, pointerup, mouseup. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.
+					return;
+				}
+				self.isPressed = false;
+				let originalEvent = e,
+					wasDragging = self.isDragging,
+					isContextMenuRelease = (self.vars.allowContextMenu && e && (e.ctrlKey || e.which > 2)),
+					placeholderDelayedCall = gsap.delayedCall(0.001, removePlaceholder),
+					touches, i, syntheticEvent, eventTarget, syntheticClick;
+				if (touchEventTarget) {
+					_removeListener(touchEventTarget, "touchend", onRelease);
+					_removeListener(touchEventTarget, "touchmove", onMove);
+					_removeListener(touchEventTarget, "touchcancel", onRelease);
+					_removeListener(ownerDoc, "touchstart", _onMultiTouchDocument);
+				} else {
+					_removeListener(ownerDoc, "mousemove", onMove);
+				}
+				_removeListener(_win, "touchforcechange", _preventDefault);
+				if (!_supportsPointer || !touchEventTarget) {
+					_removeListener(ownerDoc, "mouseup", onRelease);
+					e && e.target && _removeListener(e.target, "mouseup", onRelease);
+				}
+				dirty = false;
+				if (wasDragging) {
+					dragEndTime = _lastDragTime = _getTime();
+					self.isDragging = false;
+				}
+				_removeFromRenderQueue(render);
+				if (isClicking && !isContextMenuRelease) {
+					if (e) {
+						_removeListener(e.target, "change", onRelease);
+						self.pointerEvent = originalEvent;
+					}
+					_setSelectable(triggers, false);
+					_dispatchEvent(self, "release", "onRelease");
+					_dispatchEvent(self, "click", "onClick");
+					isClicking = false;
+					return;
+				}
+				i = triggers.length;
+				while (--i > -1) {
+					_setStyle(triggers[i], "cursor", vars.cursor || (vars.cursor !== false ? _defaultCursor : null));
+				}
+				_dragCount--;
+				if (e) {
+					touches = e.changedTouches;
+					if (touches) { //touch events store the data slightly differently
+						e = touches[0];
+						if (e !== touch && e.identifier !== touchID) { //Usually changedTouches[0] will be what we're looking for, but in case it's not, look through the rest of the array...(and Android browsers don't reuse the event like iOS)
+							i = touches.length;
+							while (--i > -1 && (e = touches[i]).identifier !== touchID && e.target !== target) {}
+							if (i < 0 && !force) {
+								return;
+							}
+						}
+					}
+					self.pointerEvent = originalEvent;
+					self.pointerX = e.pageX;
+					self.pointerY = e.pageY;
+				}
+				if (isContextMenuRelease && originalEvent) {
+					_preventDefault(originalEvent);
+					isPreventingDefault = true;
+					_dispatchEvent(self, "release", "onRelease");
+				} else if (originalEvent && !wasDragging) {
+					isPreventingDefault = false;
+					if (interrupted && (vars.snap || vars.bounds)) { //otherwise, if the user clicks on the object while it's animating to a snapped position, and then releases without moving 3 pixels, it will just stay there (it should animate/snap)
+						animate(vars.inertia || vars.throwProps);
+					}
+					_dispatchEvent(self, "release", "onRelease");
+					if ((!_isAndroid || originalEvent.type !== "touchmove") && originalEvent.type.indexOf("cancel") === -1) { //to accommodate native scrolling on Android devices, we have to immediately call onRelease() on the first touchmove event, but that shouldn't trigger a "click".
+						_dispatchEvent(self, "click", "onClick");
+						if (_getTime() - clickTime < 300) {
+							_dispatchEvent(self, "doubleclick", "onDoubleClick");
+						}
+						eventTarget = originalEvent.target || target; //old IE uses srcElement
+						clickTime = _getTime();
+						syntheticClick = () => { // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular "click" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the "real"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the "real" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.
+							if (clickTime !== clickDispatch && self.enabled() && !self.isPressed && !originalEvent.defaultPrevented) {
+								if (eventTarget.click) { //some browsers (like mobile Safari) don't properly trigger the click event
+									eventTarget.click();
+								} else if (ownerDoc.createEvent) {
+									syntheticEvent = ownerDoc.createEvent("MouseEvents");
+									syntheticEvent.initMouseEvent("click", true, true, _win, 1, self.pointerEvent.screenX, self.pointerEvent.screenY, self.pointerX, self.pointerY, false, false, false, false, 0, null);
+									eventTarget.dispatchEvent(syntheticEvent);
+								}
+							}
+						};
+						if (!_isAndroid && !originalEvent.defaultPrevented) { //iOS Safari requires the synthetic click to happen immediately or else it simply won't work, but Android doesn't play nice.
+							gsap.delayedCall(0.05, syntheticClick); //in addition to the iOS bug workaround, there's a Firefox issue with clicking on things like a video to play, so we must fake a click event in a slightly delayed fashion. Previously, we listened for the "click" event with "capture" false which solved the video-click-to-play issue, but it would allow the "click" event to be dispatched twice like if you were using a jQuery.click() because that was handled in the capture phase, thus we had to switch to the capture phase to avoid the double-dispatching, but do the delayed synthetic click. Don't fire it too fast (like 0.00001) because we want to give the native event a chance to fire first as it's "trusted".
+						}
+					}
+				} else {
+					animate(vars.inertia || vars.throwProps); //will skip if inertia/throwProps isn't defined or InertiaPlugin isn't loaded.
+					if (!self.allowEventDefault && originalEvent && (vars.dragClickables !== false || !isClickable.call(self, originalEvent.target)) && wasDragging && (!allowNativeTouchScrolling || (touchDragAxis && allowNativeTouchScrolling === touchDragAxis)) && originalEvent.cancelable !== false) {
+						isPreventingDefault = true;
+						_preventDefault(originalEvent);
+					} else {
+						isPreventingDefault = false;
+					}
+					_dispatchEvent(self, "release", "onRelease");
+				}
+				isTweening() && placeholderDelayedCall.duration( self.tween.duration() ); //sync the timing so that the placeholder DIV gets
+				wasDragging && _dispatchEvent(self, "dragend", "onDragEnd");
+				return true;
+			},
+
+			updateScroll = e => {
+				if (e && self.isDragging && !scrollProxy) {
+					let parent = e.target || target.parentNode,
+						deltaX = parent.scrollLeft - parent._gsScrollX,
+						deltaY = parent.scrollTop - parent._gsScrollY;
+					if (deltaX || deltaY) {
+						if (matrix) {
+							startPointerX -= deltaX * matrix.a + deltaY * matrix.c;
+							startPointerY -= deltaY * matrix.d + deltaX * matrix.b;
+						} else {
+							startPointerX -= deltaX;
+							startPointerY -= deltaY;
+						}
+						parent._gsScrollX += deltaX;
+						parent._gsScrollY += deltaY;
+						setPointerPosition(self.pointerX, self.pointerY);
+					}
+				}
+			},
+
+			onClick = e => { //this was a huge pain in the neck to align all the various browsers and their behaviors. Chrome, Firefox, Safari, Opera, Android, and Microsoft Edge all handle events differently! Some will only trigger native behavior (like checkbox toggling) from trusted events. Others don't even support isTrusted, but require 2 events to flow through before triggering native behavior. Edge treats everything as trusted but also mandates that 2 flow through to trigger the correct native behavior.
+				let time = _getTime(),
+					recentlyClicked = (time - clickTime < 100),
+					recentlyDragged = (time - dragEndTime < 50),
+					alreadyDispatched = (recentlyClicked && clickDispatch === clickTime),
+					defaultPrevented = (self.pointerEvent && self.pointerEvent.defaultPrevented),
+					alreadyDispatchedTrusted = (recentlyClicked && trustedClickDispatch === clickTime),
+					trusted = e.isTrusted || (e.isTrusted == null && recentlyClicked && alreadyDispatched); //note: Safari doesn't support isTrusted, and it won't properly execute native behavior (like toggling checkboxes) on the first synthetic "click" event - we must wait for the 2nd and treat it as trusted (but stop propagation at that point). Confusing, I know. Don't you love cross-browser compatibility challenges?
+				if ((alreadyDispatched || (recentlyDragged && self.vars.suppressClickOnDrag !== false) ) && e.stopImmediatePropagation) {
+					e.stopImmediatePropagation();
+				}
+				if (recentlyClicked && !(self.pointerEvent && self.pointerEvent.defaultPrevented) && (!alreadyDispatched || (trusted && !alreadyDispatchedTrusted))) { //let the first click pass through unhindered. Let the next one only if it's trusted, then no more (stop quick-succession ones)
+					if (trusted && alreadyDispatched) {
+						trustedClickDispatch = clickTime;
+					}
+					clickDispatch = clickTime;
+					return;
+				}
+				if (self.isPressed || recentlyDragged || recentlyClicked) {
+					if (!trusted || !e.detail || !recentlyClicked || defaultPrevented) {
+						_preventDefault(e);
+					}
+				}
+				if (!recentlyClicked && !recentlyDragged && !dragged) { // for script-triggered event dispatches, like element.click()
+					e && e.target && (self.pointerEvent = e);
+					_dispatchEvent(self, "click", "onClick");
+				}
+			},
+
+			localizePoint = p => matrix ? {x:p.x * matrix.a + p.y * matrix.c + matrix.e, y:p.x * matrix.b + p.y * matrix.d + matrix.f} : {x:p.x, y:p.y};
+
+		old = Draggable.get(target);
+		old && old.kill(); // avoids duplicates (an element can only be controlled by one Draggable)
+
+		//give the user access to start/stop dragging...
+		this.startDrag = (event, align) => {
+			let r1, r2, p1, p2;
+			onPress(event || self.pointerEvent, true);
+			//if the pointer isn't on top of the element, adjust things accordingly
+			if (align && !self.hitTest(event || self.pointerEvent)) {
+				r1 = _parseRect(event || self.pointerEvent);
+				r2 = _parseRect(target);
+				p1 = localizePoint({x:r1.left + r1.width / 2, y:r1.top + r1.height / 2});
+				p2 = localizePoint({x:r2.left + r2.width / 2, y:r2.top + r2.height / 2});
+				startPointerX -= p1.x - p2.x;
+				startPointerY -= p1.y - p2.y;
+			}
+			if (!self.isDragging) {
+				self.isDragging = dragged = true;
+				_dispatchEvent(self, "dragstart", "onDragStart");
+			}
+		};
+		this.drag = onMove;
+		this.endDrag = e =>	onRelease(e || self.pointerEvent, true);
+		this.timeSinceDrag = () => self.isDragging ? 0 : (_getTime() - dragEndTime) / 1000;
+		this.timeSinceClick = () => (_getTime() - clickTime) / 1000;
+		this.hitTest = (target, threshold) => Draggable.hitTest(self.target, target, threshold);
+
+		this.getDirection = (from, diagonalThreshold) => { //from can be "start" (default), "velocity", or an element
+			let mode = (from === "velocity" && InertiaPlugin) ? from : (_isObject(from) && !rotationMode) ? "element" : "start",
+				xChange, yChange, ratio, direction, r1, r2;
+			if (mode === "element") {
+				r1 = _parseRect(self.target);
+				r2 = _parseRect(from);
+			}
+			xChange = (mode === "start") ? self.x - startElementX : (mode === "velocity") ? InertiaPlugin.getVelocity(target, xProp) : (r1.left + r1.width / 2) - (r2.left + r2.width / 2);
+			if (rotationMode) {
+				return xChange < 0 ? "counter-clockwise" : "clockwise";
+			} else {
+				diagonalThreshold = diagonalThreshold || 2;
+				yChange = (mode === "start") ? self.y - startElementY : (mode === "velocity") ? InertiaPlugin.getVelocity(target, yProp) : (r1.top + r1.height / 2) - (r2.top + r2.height / 2);
+				ratio = Math.abs(xChange / yChange);
+				direction = (ratio < 1 / diagonalThreshold) ? "" : (xChange < 0) ? "left" : "right";
+				if (ratio < diagonalThreshold) {
+					if (direction !== "") {
+						direction += "-";
+					}
+					direction += (yChange < 0) ? "up" : "down";
+				}
+			}
+			return direction;
+		};
+
+		this.applyBounds = (newBounds, sticky) => {
+			let x, y, forceZeroVelocity, e, parent, isRoot;
+			if (newBounds && vars.bounds !== newBounds) {
+				vars.bounds = newBounds;
+				return self.update(true, sticky);
+			}
+			syncXY(true);
+			calculateBounds();
+			if (hasBounds && !isTweening()) {
+				x = self.x;
+				y = self.y;
+				if (x > maxX) {
+					x = maxX;
+				} else if (x < minX) {
+					x = minX;
+				}
+				if (y > maxY) {
+					y = maxY;
+				} else if (y < minY) {
+					y = minY;
+				}
+				if (self.x !== x || self.y !== y) {
+					forceZeroVelocity = true;
+					self.x = self.endX = x;
+					if (rotationMode) {
+						self.endRotation = x;
+					} else {
+						self.y = self.endY = y;
+					}
+					dirty = true;
+					render(true);
+					if (self.autoScroll && !self.isDragging) {
+						_recordMaxScrolls(target.parentNode);
+						e = target;
+						_windowProxy.scrollTop = ((_win.pageYOffset != null) ? _win.pageYOffset : (ownerDoc.documentElement.scrollTop != null) ? ownerDoc.documentElement.scrollTop : ownerDoc.body.scrollTop);
+						_windowProxy.scrollLeft = ((_win.pageXOffset != null) ? _win.pageXOffset : (ownerDoc.documentElement.scrollLeft != null) ? ownerDoc.documentElement.scrollLeft : ownerDoc.body.scrollLeft);
+						while (e && !isRoot) { //walk up the chain and sense wherever the scrollTop/scrollLeft exceeds the maximum.
+							isRoot = _isRoot(e.parentNode);
+							parent = isRoot ? _windowProxy : e.parentNode;
+							if (allowY && parent.scrollTop > parent._gsMaxScrollY) {
+								parent.scrollTop = parent._gsMaxScrollY;
+							}
+							if (allowX && parent.scrollLeft > parent._gsMaxScrollX) {
+								parent.scrollLeft = parent._gsMaxScrollX;
+							}
+							e = parent;
+						}
+					}
+				}
+				if (self.isThrowing && (forceZeroVelocity || self.endX > maxX || self.endX < minX || self.endY > maxY || self.endY < minY)) {
+					animate(vars.inertia || vars.throwProps, forceZeroVelocity);
+				}
+			}
+			return self;
+		};
+
+		this.update = (applyBounds, sticky, ignoreExternalChanges) => {
+			if (sticky && self.isPressed) { // in case the element was repositioned in the document flow, thus its x/y may be identical but its position is actually quite different.
+				let m = getGlobalMatrix(target),
+					p = innerMatrix.apply({x: self.x - startElementX, y: self.y - startElementY}),
+					m2 = getGlobalMatrix(target.parentNode, true);
+				m2.apply({x: m.e - p.x, y: m.f - p.y}, p);
+				self.x -= p.x - m2.e;
+				self.y -= p.y - m2.f;
+				render(true);
+				recordStartPositions();
+			}
+			let { x, y } = self;
+			updateMatrix(!sticky);
+			if (applyBounds) {
+				self.applyBounds();
+			} else {
+				dirty && ignoreExternalChanges && render(true);
+				syncXY(true);
+			}
+			if (sticky) {
+				setPointerPosition(self.pointerX, self.pointerY);
+				dirty && render(true);
+			}
+			if (self.isPressed && !sticky && ((allowX && Math.abs(x - self.x) > 0.01) || (allowY && (Math.abs(y - self.y) > 0.01 && !rotationMode)))) {
+				recordStartPositions();
+			}
+			if (self.autoScroll) {
+				_recordMaxScrolls(target.parentNode, self.isDragging);
+				checkAutoScrollBounds = self.isDragging;
+				render(true);
+				//in case reparenting occurred.
+				_removeScrollListener(target, updateScroll);
+				_addScrollListener(target, updateScroll);
+			}
+			return self;
+		};
+
+		this.enable = type => {
+			let setVars = {lazy: true},
+				id, i, trigger;
+			if (vars.cursor !== false) {
+				setVars.cursor = vars.cursor || _defaultCursor;
+			}
+			if (gsap.utils.checkPrefix("touchCallout")) {
+				setVars.touchCallout = "none";
+			}
+			if (type !== "soft") {
+				_setTouchActionForAllDescendants(triggers, (allowX === allowY) ? "none" : (vars.allowNativeTouchScrolling && (target.scrollHeight === target.clientHeight) === (target.scrollWidth === target.clientHeight)) || vars.allowEventDefault ? "manipulation" : allowX ? "pan-y" : "pan-x"); // Some browsers like Internet Explorer will fire a pointercancel event when the user attempts to drag when touchAction is "manipulate" because it's perceived as a pan. If the element has scrollable content in only one direction, we should use pan-x or pan-y accordingly so that the pointercancel doesn't prevent dragging.
+				i = triggers.length;
+				while (--i > -1) {
+					trigger = triggers[i];
+					_supportsPointer || _addListener(trigger, "mousedown", onPress);
+					_addListener(trigger, "touchstart", onPress);
+					_addListener(trigger, "click", onClick, true); // note: used to pass true for capture but it prevented click-to-play-video functionality in Firefox.
+					gsap.set(trigger, setVars);
+					if (trigger.getBBox && trigger.ownerSVGElement && allowX !== allowY) { // a bug in chrome doesn't respect touch-action on SVG elements - it only works if we set it on the parent SVG.
+						gsap.set(trigger.ownerSVGElement, {touchAction: vars.allowNativeTouchScrolling || vars.allowEventDefault ? "manipulation" : allowX ? "pan-y" : "pan-x"});
+					}
+					vars.allowContextMenu || _addListener(trigger, "contextmenu", onContextMenu);
+				}
+				_setSelectable(triggers, false);
+			}
+			_addScrollListener(target, updateScroll);
+			enabled = true;
+			if (InertiaPlugin && type !== "soft") {
+				InertiaPlugin.track(scrollProxy || target, (xyMode ? "x,y" : rotationMode ? "rotation" : "top,left"));
+			}
+			target._gsDragID = id = "d" + (_lookupCount++);
+			_lookup[id] = self;
+			if (scrollProxy) {
+				scrollProxy.enable();
+				scrollProxy.element._gsDragID = id;
+			}
+			(vars.bounds || rotationMode) && recordStartPositions();
+			vars.bounds && self.applyBounds();
+			return self;
+		};
+
+		this.disable = type => {
+			let dragging = self.isDragging,
+				i = triggers.length,
+				trigger;
+			while (--i > -1) {
+				_setStyle(triggers[i], "cursor", null);
+			}
+			if (type !== "soft") {
+				_setTouchActionForAllDescendants(triggers, null);
+				i = triggers.length;
+				while (--i > -1) {
+					trigger = triggers[i];
+					_setStyle(trigger, "touchCallout", null);
+					_removeListener(trigger, "mousedown", onPress);
+					_removeListener(trigger, "touchstart", onPress);
+					_removeListener(trigger, "click", onClick, true);
+					_removeListener(trigger, "contextmenu", onContextMenu);
+				}
+				_setSelectable(triggers, true);
+				if (touchEventTarget) {
+					_removeListener(touchEventTarget, "touchcancel", onRelease);
+					_removeListener(touchEventTarget, "touchend", onRelease);
+					_removeListener(touchEventTarget, "touchmove", onMove);
+				}
+				_removeListener(ownerDoc, "mouseup", onRelease);
+				_removeListener(ownerDoc, "mousemove", onMove);
+			}
+			_removeScrollListener(target, updateScroll);
+			enabled = false;
+			if (InertiaPlugin && type !== "soft") {
+				InertiaPlugin.untrack(scrollProxy || target, (xyMode ? "x,y" : rotationMode ? "rotation" : "top,left"));
+				self.tween && self.tween.kill();
+			}
+			scrollProxy && scrollProxy.disable();
+			_removeFromRenderQueue(render);
+			self.isDragging = self.isPressed = isClicking = false;
+			dragging && _dispatchEvent(self, "dragend", "onDragEnd");
+			return self;
+		};
+
+		this.enabled = function(value, type) {
+			return arguments.length ? (value ? self.enable(type) : self.disable(type)) : enabled;
+		};
+
+		this.kill = function() {
+			self.isThrowing = false;
+			self.tween && self.tween.kill();
+			self.disable();
+			gsap.set(triggers, {clearProps:"userSelect"});
+			delete _lookup[target._gsDragID];
+			return self;
+		};
+
+		this.revert = function() {
+			this.kill();
+			this.styles && this.styles.revert();
+		};
+
+		if (~type.indexOf("scroll")) {
+			scrollProxy = this.scrollProxy = new ScrollProxy(target, _extend({onKill:function() { //ScrollProxy's onKill() gets called if/when the ScrollProxy senses that the user interacted with the scroll position manually (like using the scrollbar). IE9 doesn't fire the "mouseup" properly when users drag the scrollbar of an element, so this works around that issue.
+					self.isPressed && onRelease(null);
+			}}, vars));
+			//a bug in many Android devices' stock browser causes scrollTop to get forced back to 0 after it is altered via JS, so we set overflow to "hidden" on mobile/touch devices (they hide the scroll bar anyway). That works around the bug. (This bug is discussed at https://code.google.com/p/android/issues/detail?id=19625)
+			target.style.overflowY = (allowY && !_isTouchDevice) ? "auto" : "hidden";
+			target.style.overflowX = (allowX && !_isTouchDevice) ? "auto" : "hidden";
+			target = scrollProxy.content;
+		}
+
+		if (rotationMode) {
+			killProps.rotation = 1;
+		} else {
+			if (allowX) {
+				killProps[xProp] = 1;
+			}
+			if (allowY) {
+				killProps[yProp] = 1;
+			}
+		}
+
+		gsCache.force3D = ("force3D" in vars) ? vars.force3D : true; //otherwise, normal dragging would be in 2D and then as soon as it's released and there's an inertia tween, it'd jump to 3D which can create an initial jump due to the work the browser must to do layerize it.
+
+		_context(this);
+		this.enable();
+	}
+
+
+
+
+	static register(core) {
+		gsap = core;
+		_initCore();
+	}
+
+	static create(targets, vars) {
+		_coreInitted || _initCore(true);
+		return _toArray(targets).map(target => new Draggable(target, vars));
+	}
+
+	static get(target) {
+		return _lookup[(_toArray(target)[0] || {})._gsDragID];
+	}
+
+	static timeSinceDrag() {
+		return (_getTime() - _lastDragTime) / 1000;
+	}
+
+	static hitTest(obj1, obj2, threshold) {
+		if (obj1 === obj2) {
+			return false;
+		}
+		let r1 = _parseRect(obj1),
+			r2 = _parseRect(obj2),
+			{ top, left, right, bottom, width, height } = r1,
+			isOutside = (r2.left > right || r2.right < left || r2.top > bottom || r2.bottom < top),
+			overlap, area, isRatio;
+		if (isOutside || !threshold) {
+			return !isOutside;
+		}
+		isRatio = ((threshold + "").indexOf("%") !== -1);
+		threshold = parseFloat(threshold) || 0;
+		overlap = {left: Math.max(left, r2.left), top: Math.max(top, r2.top)};
+		overlap.width = Math.min(right, r2.right) - overlap.left;
+		overlap.height = Math.min(bottom, r2.bottom) - overlap.top;
+		if (overlap.width < 0 || overlap.height < 0) {
+			return false;
+		}
+		if (isRatio) {
+			threshold *= 0.01;
+			area = overlap.width * overlap.height;
+			return (area >= width * height * threshold || area >= r2.width * r2.height * threshold);
+		}
+		return (overlap.width > threshold && overlap.height > threshold);
+	}
+
+}
+
+_setDefaults(Draggable.prototype, {pointerX:0, pointerY: 0, startX: 0, startY: 0, deltaX: 0, deltaY: 0, isDragging: false, isPressed: false});
+
+Draggable.zIndex = 1000;
+Draggable.version = "3.12.5";
+
+_getGSAP() && gsap.registerPlugin(Draggable);
+
+export { Draggable, Draggable as default };
diff --git a/dist/EasePack.cjs b/dist/EasePack.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..28fe2bf0adc18d0c6e889aa1d62fca90c425b832
--- /dev/null
+++ b/dist/EasePack.cjs
@@ -0,0 +1,170 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+/*!
+ * EasePack 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _registerEase,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_boolean = (value, defaultValue) => !!(typeof(value) === "undefined" ? defaultValue : value && !~((value + "").indexOf("false"))),
+	_initCore = core => {
+		gsap = core || _getGSAP();
+		if (gsap) {
+			_registerEase = gsap.registerEase;
+			//add weighted ease capabilities to standard eases so users can do "power2.inOut(0.8)" for example to push everything toward the "out", or (-0.8) to push it toward the "in" (0 is neutral)
+			let eases = gsap.parseEase(),
+				createConfig = ease => ratio => {
+					let y = 0.5 + ratio / 2;
+					ease.config = p => ease(2 * (1 - p) * p * y + p * p);
+				},
+				p;
+			for (p in eases) {
+				if (!eases[p].config) {
+					createConfig(eases[p]);
+				}
+			}
+			_registerEase("slow", SlowMo);
+			_registerEase("expoScale", ExpoScaleEase);
+			_registerEase("rough", RoughEase);
+			for (p in EasePack) {
+				p !== "version" && gsap.core.globals(p, EasePack[p]);
+			}
+		}
+	},
+	_createSlowMo = (linearRatio, power, yoyoMode) => {
+		linearRatio = Math.min(1, linearRatio || 0.7);
+		let pow = linearRatio < 1 ? ((power || power === 0) ? power : 0.7) : 0,
+			p1 = (1 - linearRatio) / 2,
+			p3 = p1 + linearRatio,
+			calcEnd = _boolean(yoyoMode);
+		return p => {
+			let r = p + (0.5 - p) * pow;
+			return (p < p1) ? (calcEnd ? 1 - ((p = 1 - (p / p1)) * p) : r - ((p = 1 - (p / p1)) * p * p * p * r)) : (p > p3) ? (calcEnd ? (p === 1 ? 0 : 1 - (p = (p - p3) / p1) * p) : r + ((p - r) * (p = (p - p3) / p1) * p * p * p)) : (calcEnd ? 1 : r);
+		}
+	},
+	_createExpoScale = (start, end, ease) => {
+		let p1 = Math.log(end / start),
+			p2 = end - start;
+		ease && (ease = gsap.parseEase(ease));
+		return p => (start * Math.exp(p1 * (ease ? ease(p) : p)) - start) / p2;
+	},
+	EasePoint = function(time, value, next) {
+		this.t = time;
+		this.v = value;
+		if (next) {
+			this.next = next;
+			next.prev = this;
+			this.c = next.v - value;
+			this.gap = next.t - time;
+		}
+	},
+	_createRoughEase = vars => {
+		if (typeof(vars) !== "object") { //users may pass in via a string, like "rough(30)"
+			vars = {points: +vars || 20};
+		}
+		let taper = vars.taper || "none",
+			a = [],
+			cnt = 0,
+			points = (+vars.points || 20) | 0,
+			i = points,
+			randomize = _boolean(vars.randomize, true),
+			clamp = _boolean(vars.clamp),
+			template = gsap ? gsap.parseEase(vars.template) : 0,
+			strength = (+vars.strength || 1) * 0.4,
+			x, y, bump, invX, obj, pnt, recent;
+		while (--i > -1) {
+			x = randomize ? Math.random() : (1 / points) * i;
+			y = template ? template(x) : x;
+			if (taper === "none") {
+				bump = strength;
+			} else if (taper === "out") {
+				invX = 1 - x;
+				bump = invX * invX * strength;
+			} else if (taper === "in") {
+				bump = x * x * strength;
+			} else if (x < 0.5) {  //"both" (start)
+				invX = x * 2;
+				bump = invX * invX * 0.5 * strength;
+			} else {				//"both" (end)
+				invX = (1 - x) * 2;
+				bump = invX * invX * 0.5 * strength;
+			}
+			if (randomize) {
+				y += (Math.random() * bump) - (bump * 0.5);
+			} else if (i % 2) {
+				y += bump * 0.5;
+			} else {
+				y -= bump * 0.5;
+			}
+			if (clamp) {
+				if (y > 1) {
+					y = 1;
+				} else if (y < 0) {
+					y = 0;
+				}
+			}
+			a[cnt++] = {x:x, y:y};
+		}
+		a.sort((a, b) => a.x - b.x);
+		pnt = new EasePoint(1, 1, null);
+		i = points;
+		while (i--) {
+			obj = a[i];
+			pnt = new EasePoint(obj.x, obj.y, pnt);
+		}
+		recent = new EasePoint(0, 0, pnt.t ? pnt : pnt.next);
+		return p => {
+			let pnt = recent;
+			if (p > pnt.t) {
+				while (pnt.next && p >= pnt.t) {
+					pnt = pnt.next;
+				}
+				pnt = pnt.prev;
+			} else {
+				while (pnt.prev && p <= pnt.t) {
+					pnt = pnt.prev;
+				}
+			}
+			recent = pnt;
+			return pnt.v + ((p - pnt.t) / pnt.gap) * pnt.c;
+		};
+	};
+
+const SlowMo = _createSlowMo(0.7);
+SlowMo.ease = SlowMo; //for backward compatibility
+SlowMo.config = _createSlowMo;
+
+const ExpoScaleEase = _createExpoScale(1, 2);
+ExpoScaleEase.config = _createExpoScale;
+
+const RoughEase = _createRoughEase();
+RoughEase.ease = RoughEase; //for backward compatibility
+RoughEase.config = _createRoughEase;
+
+const EasePack = {
+	SlowMo: SlowMo,
+	RoughEase: RoughEase,
+	ExpoScaleEase: ExpoScaleEase
+};
+
+for (let p in EasePack) {
+	EasePack[p].register = _initCore;
+	EasePack[p].version = "3.12.5";
+}
+
+_getGSAP() && gsap.registerPlugin(SlowMo);
+
+exports.EasePack = EasePack;
+exports.ExpoScaleEase = ExpoScaleEase;
+exports.RoughEase = RoughEase;
+exports.SlowMo = SlowMo;
+exports.default = EasePack;
diff --git a/src/EasePack.js b/dist/EasePack.d.cts
similarity index 94%
rename from src/EasePack.js
rename to dist/EasePack.d.cts
index 8d5669cc9eb6f36447d0b8ae4a38c44844d01834..8b45370e2bf87f992d9c81c96498cb65dc4e73a0 100644
--- a/src/EasePack.js
+++ b/dist/EasePack.d.cts
@@ -9,7 +9,7 @@
 */
 /* eslint-disable */
 
-let gsap, _coreInitted, _registerEase,
+let gsap, _registerEase,
 	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap),
 	_boolean = (value, defaultValue) => !!(typeof(value) === "undefined" ? defaultValue : value && !~((value + "").indexOf("false"))),
 	_initCore = core => {
@@ -34,7 +34,6 @@ let gsap, _coreInitted, _registerEase,
 			for (p in EasePack) {
 				p !== "version" && gsap.core.globals(p, EasePack[p]);
 			}
-			_coreInitted = 1;
 		}
 	},
 	_createSlowMo = (linearRatio, power, yoyoMode) => {
@@ -136,18 +135,18 @@ let gsap, _coreInitted, _registerEase,
 		};
 	};
 
-export const SlowMo = _createSlowMo(0.7);
+const SlowMo = _createSlowMo(0.7);
 SlowMo.ease = SlowMo; //for backward compatibility
 SlowMo.config = _createSlowMo;
 
-export const ExpoScaleEase = _createExpoScale(1, 2);
+const ExpoScaleEase = _createExpoScale(1, 2);
 ExpoScaleEase.config = _createExpoScale;
 
-export const RoughEase = _createRoughEase();
+const RoughEase = _createRoughEase();
 RoughEase.ease = RoughEase; //for backward compatibility
 RoughEase.config = _createRoughEase;
 
-export const EasePack = {
+const EasePack = {
 	SlowMo: SlowMo,
 	RoughEase: RoughEase,
 	ExpoScaleEase: ExpoScaleEase
@@ -160,4 +159,4 @@ for (let p in EasePack) {
 
 _getGSAP() && gsap.registerPlugin(SlowMo);
 
-export { EasePack as default };
\ No newline at end of file
+export { EasePack, ExpoScaleEase, RoughEase, SlowMo, EasePack as default };
diff --git a/dist/EasePack.d.mts b/dist/EasePack.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..8b45370e2bf87f992d9c81c96498cb65dc4e73a0
--- /dev/null
+++ b/dist/EasePack.d.mts
@@ -0,0 +1,162 @@
+/*!
+ * EasePack 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _registerEase,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_boolean = (value, defaultValue) => !!(typeof(value) === "undefined" ? defaultValue : value && !~((value + "").indexOf("false"))),
+	_initCore = core => {
+		gsap = core || _getGSAP();
+		if (gsap) {
+			_registerEase = gsap.registerEase;
+			//add weighted ease capabilities to standard eases so users can do "power2.inOut(0.8)" for example to push everything toward the "out", or (-0.8) to push it toward the "in" (0 is neutral)
+			let eases = gsap.parseEase(),
+				createConfig = ease => ratio => {
+					let y = 0.5 + ratio / 2;
+					ease.config = p => ease(2 * (1 - p) * p * y + p * p);
+				},
+				p;
+			for (p in eases) {
+				if (!eases[p].config) {
+					createConfig(eases[p]);
+				}
+			}
+			_registerEase("slow", SlowMo);
+			_registerEase("expoScale", ExpoScaleEase);
+			_registerEase("rough", RoughEase);
+			for (p in EasePack) {
+				p !== "version" && gsap.core.globals(p, EasePack[p]);
+			}
+		}
+	},
+	_createSlowMo = (linearRatio, power, yoyoMode) => {
+		linearRatio = Math.min(1, linearRatio || 0.7);
+		let pow = linearRatio < 1 ? ((power || power === 0) ? power : 0.7) : 0,
+			p1 = (1 - linearRatio) / 2,
+			p3 = p1 + linearRatio,
+			calcEnd = _boolean(yoyoMode);
+		return p => {
+			let r = p + (0.5 - p) * pow;
+			return (p < p1) ? (calcEnd ? 1 - ((p = 1 - (p / p1)) * p) : r - ((p = 1 - (p / p1)) * p * p * p * r)) : (p > p3) ? (calcEnd ? (p === 1 ? 0 : 1 - (p = (p - p3) / p1) * p) : r + ((p - r) * (p = (p - p3) / p1) * p * p * p)) : (calcEnd ? 1 : r);
+		}
+	},
+	_createExpoScale = (start, end, ease) => {
+		let p1 = Math.log(end / start),
+			p2 = end - start;
+		ease && (ease = gsap.parseEase(ease));
+		return p => (start * Math.exp(p1 * (ease ? ease(p) : p)) - start) / p2;
+	},
+	EasePoint = function(time, value, next) {
+		this.t = time;
+		this.v = value;
+		if (next) {
+			this.next = next;
+			next.prev = this;
+			this.c = next.v - value;
+			this.gap = next.t - time;
+		}
+	},
+	_createRoughEase = vars => {
+		if (typeof(vars) !== "object") { //users may pass in via a string, like "rough(30)"
+			vars = {points: +vars || 20};
+		}
+		let taper = vars.taper || "none",
+			a = [],
+			cnt = 0,
+			points = (+vars.points || 20) | 0,
+			i = points,
+			randomize = _boolean(vars.randomize, true),
+			clamp = _boolean(vars.clamp),
+			template = gsap ? gsap.parseEase(vars.template) : 0,
+			strength = (+vars.strength || 1) * 0.4,
+			x, y, bump, invX, obj, pnt, recent;
+		while (--i > -1) {
+			x = randomize ? Math.random() : (1 / points) * i;
+			y = template ? template(x) : x;
+			if (taper === "none") {
+				bump = strength;
+			} else if (taper === "out") {
+				invX = 1 - x;
+				bump = invX * invX * strength;
+			} else if (taper === "in") {
+				bump = x * x * strength;
+			} else if (x < 0.5) {  //"both" (start)
+				invX = x * 2;
+				bump = invX * invX * 0.5 * strength;
+			} else {				//"both" (end)
+				invX = (1 - x) * 2;
+				bump = invX * invX * 0.5 * strength;
+			}
+			if (randomize) {
+				y += (Math.random() * bump) - (bump * 0.5);
+			} else if (i % 2) {
+				y += bump * 0.5;
+			} else {
+				y -= bump * 0.5;
+			}
+			if (clamp) {
+				if (y > 1) {
+					y = 1;
+				} else if (y < 0) {
+					y = 0;
+				}
+			}
+			a[cnt++] = {x:x, y:y};
+		}
+		a.sort((a, b) => a.x - b.x);
+		pnt = new EasePoint(1, 1, null);
+		i = points;
+		while (i--) {
+			obj = a[i];
+			pnt = new EasePoint(obj.x, obj.y, pnt);
+		}
+		recent = new EasePoint(0, 0, pnt.t ? pnt : pnt.next);
+		return p => {
+			let pnt = recent;
+			if (p > pnt.t) {
+				while (pnt.next && p >= pnt.t) {
+					pnt = pnt.next;
+				}
+				pnt = pnt.prev;
+			} else {
+				while (pnt.prev && p <= pnt.t) {
+					pnt = pnt.prev;
+				}
+			}
+			recent = pnt;
+			return pnt.v + ((p - pnt.t) / pnt.gap) * pnt.c;
+		};
+	};
+
+const SlowMo = _createSlowMo(0.7);
+SlowMo.ease = SlowMo; //for backward compatibility
+SlowMo.config = _createSlowMo;
+
+const ExpoScaleEase = _createExpoScale(1, 2);
+ExpoScaleEase.config = _createExpoScale;
+
+const RoughEase = _createRoughEase();
+RoughEase.ease = RoughEase; //for backward compatibility
+RoughEase.config = _createRoughEase;
+
+const EasePack = {
+	SlowMo: SlowMo,
+	RoughEase: RoughEase,
+	ExpoScaleEase: ExpoScaleEase
+};
+
+for (let p in EasePack) {
+	EasePack[p].register = _initCore;
+	EasePack[p].version = "3.12.5";
+}
+
+_getGSAP() && gsap.registerPlugin(SlowMo);
+
+export { EasePack, ExpoScaleEase, RoughEase, SlowMo, EasePack as default };
diff --git a/dist/EasePack.d.ts b/dist/EasePack.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..8b45370e2bf87f992d9c81c96498cb65dc4e73a0
--- /dev/null
+++ b/dist/EasePack.d.ts
@@ -0,0 +1,162 @@
+/*!
+ * EasePack 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _registerEase,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_boolean = (value, defaultValue) => !!(typeof(value) === "undefined" ? defaultValue : value && !~((value + "").indexOf("false"))),
+	_initCore = core => {
+		gsap = core || _getGSAP();
+		if (gsap) {
+			_registerEase = gsap.registerEase;
+			//add weighted ease capabilities to standard eases so users can do "power2.inOut(0.8)" for example to push everything toward the "out", or (-0.8) to push it toward the "in" (0 is neutral)
+			let eases = gsap.parseEase(),
+				createConfig = ease => ratio => {
+					let y = 0.5 + ratio / 2;
+					ease.config = p => ease(2 * (1 - p) * p * y + p * p);
+				},
+				p;
+			for (p in eases) {
+				if (!eases[p].config) {
+					createConfig(eases[p]);
+				}
+			}
+			_registerEase("slow", SlowMo);
+			_registerEase("expoScale", ExpoScaleEase);
+			_registerEase("rough", RoughEase);
+			for (p in EasePack) {
+				p !== "version" && gsap.core.globals(p, EasePack[p]);
+			}
+		}
+	},
+	_createSlowMo = (linearRatio, power, yoyoMode) => {
+		linearRatio = Math.min(1, linearRatio || 0.7);
+		let pow = linearRatio < 1 ? ((power || power === 0) ? power : 0.7) : 0,
+			p1 = (1 - linearRatio) / 2,
+			p3 = p1 + linearRatio,
+			calcEnd = _boolean(yoyoMode);
+		return p => {
+			let r = p + (0.5 - p) * pow;
+			return (p < p1) ? (calcEnd ? 1 - ((p = 1 - (p / p1)) * p) : r - ((p = 1 - (p / p1)) * p * p * p * r)) : (p > p3) ? (calcEnd ? (p === 1 ? 0 : 1 - (p = (p - p3) / p1) * p) : r + ((p - r) * (p = (p - p3) / p1) * p * p * p)) : (calcEnd ? 1 : r);
+		}
+	},
+	_createExpoScale = (start, end, ease) => {
+		let p1 = Math.log(end / start),
+			p2 = end - start;
+		ease && (ease = gsap.parseEase(ease));
+		return p => (start * Math.exp(p1 * (ease ? ease(p) : p)) - start) / p2;
+	},
+	EasePoint = function(time, value, next) {
+		this.t = time;
+		this.v = value;
+		if (next) {
+			this.next = next;
+			next.prev = this;
+			this.c = next.v - value;
+			this.gap = next.t - time;
+		}
+	},
+	_createRoughEase = vars => {
+		if (typeof(vars) !== "object") { //users may pass in via a string, like "rough(30)"
+			vars = {points: +vars || 20};
+		}
+		let taper = vars.taper || "none",
+			a = [],
+			cnt = 0,
+			points = (+vars.points || 20) | 0,
+			i = points,
+			randomize = _boolean(vars.randomize, true),
+			clamp = _boolean(vars.clamp),
+			template = gsap ? gsap.parseEase(vars.template) : 0,
+			strength = (+vars.strength || 1) * 0.4,
+			x, y, bump, invX, obj, pnt, recent;
+		while (--i > -1) {
+			x = randomize ? Math.random() : (1 / points) * i;
+			y = template ? template(x) : x;
+			if (taper === "none") {
+				bump = strength;
+			} else if (taper === "out") {
+				invX = 1 - x;
+				bump = invX * invX * strength;
+			} else if (taper === "in") {
+				bump = x * x * strength;
+			} else if (x < 0.5) {  //"both" (start)
+				invX = x * 2;
+				bump = invX * invX * 0.5 * strength;
+			} else {				//"both" (end)
+				invX = (1 - x) * 2;
+				bump = invX * invX * 0.5 * strength;
+			}
+			if (randomize) {
+				y += (Math.random() * bump) - (bump * 0.5);
+			} else if (i % 2) {
+				y += bump * 0.5;
+			} else {
+				y -= bump * 0.5;
+			}
+			if (clamp) {
+				if (y > 1) {
+					y = 1;
+				} else if (y < 0) {
+					y = 0;
+				}
+			}
+			a[cnt++] = {x:x, y:y};
+		}
+		a.sort((a, b) => a.x - b.x);
+		pnt = new EasePoint(1, 1, null);
+		i = points;
+		while (i--) {
+			obj = a[i];
+			pnt = new EasePoint(obj.x, obj.y, pnt);
+		}
+		recent = new EasePoint(0, 0, pnt.t ? pnt : pnt.next);
+		return p => {
+			let pnt = recent;
+			if (p > pnt.t) {
+				while (pnt.next && p >= pnt.t) {
+					pnt = pnt.next;
+				}
+				pnt = pnt.prev;
+			} else {
+				while (pnt.prev && p <= pnt.t) {
+					pnt = pnt.prev;
+				}
+			}
+			recent = pnt;
+			return pnt.v + ((p - pnt.t) / pnt.gap) * pnt.c;
+		};
+	};
+
+const SlowMo = _createSlowMo(0.7);
+SlowMo.ease = SlowMo; //for backward compatibility
+SlowMo.config = _createSlowMo;
+
+const ExpoScaleEase = _createExpoScale(1, 2);
+ExpoScaleEase.config = _createExpoScale;
+
+const RoughEase = _createRoughEase();
+RoughEase.ease = RoughEase; //for backward compatibility
+RoughEase.config = _createRoughEase;
+
+const EasePack = {
+	SlowMo: SlowMo,
+	RoughEase: RoughEase,
+	ExpoScaleEase: ExpoScaleEase
+};
+
+for (let p in EasePack) {
+	EasePack[p].register = _initCore;
+	EasePack[p].version = "3.12.5";
+}
+
+_getGSAP() && gsap.registerPlugin(SlowMo);
+
+export { EasePack, ExpoScaleEase, RoughEase, SlowMo, EasePack as default };
diff --git a/dist/EasePack.js b/dist/EasePack.js
deleted file mode 100644
index 5feacb996548df619144b29ad8b13cfd67a2d5bd..0000000000000000000000000000000000000000
diff --git a/dist/EasePack.min.js b/dist/EasePack.min.js
deleted file mode 100644
index f87f0cfc90ca267f037bd1daef9c7ebb006fba1f..0000000000000000000000000000000000000000
diff --git a/dist/EasePack.min.js.map b/dist/EasePack.min.js.map
deleted file mode 100644
index 4350ea349be7f0b5633f07a11d4497b5085a0b61..0000000000000000000000000000000000000000
diff --git a/dist/EasePack.mjs b/dist/EasePack.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..8b45370e2bf87f992d9c81c96498cb65dc4e73a0
--- /dev/null
+++ b/dist/EasePack.mjs
@@ -0,0 +1,162 @@
+/*!
+ * EasePack 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _registerEase,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_boolean = (value, defaultValue) => !!(typeof(value) === "undefined" ? defaultValue : value && !~((value + "").indexOf("false"))),
+	_initCore = core => {
+		gsap = core || _getGSAP();
+		if (gsap) {
+			_registerEase = gsap.registerEase;
+			//add weighted ease capabilities to standard eases so users can do "power2.inOut(0.8)" for example to push everything toward the "out", or (-0.8) to push it toward the "in" (0 is neutral)
+			let eases = gsap.parseEase(),
+				createConfig = ease => ratio => {
+					let y = 0.5 + ratio / 2;
+					ease.config = p => ease(2 * (1 - p) * p * y + p * p);
+				},
+				p;
+			for (p in eases) {
+				if (!eases[p].config) {
+					createConfig(eases[p]);
+				}
+			}
+			_registerEase("slow", SlowMo);
+			_registerEase("expoScale", ExpoScaleEase);
+			_registerEase("rough", RoughEase);
+			for (p in EasePack) {
+				p !== "version" && gsap.core.globals(p, EasePack[p]);
+			}
+		}
+	},
+	_createSlowMo = (linearRatio, power, yoyoMode) => {
+		linearRatio = Math.min(1, linearRatio || 0.7);
+		let pow = linearRatio < 1 ? ((power || power === 0) ? power : 0.7) : 0,
+			p1 = (1 - linearRatio) / 2,
+			p3 = p1 + linearRatio,
+			calcEnd = _boolean(yoyoMode);
+		return p => {
+			let r = p + (0.5 - p) * pow;
+			return (p < p1) ? (calcEnd ? 1 - ((p = 1 - (p / p1)) * p) : r - ((p = 1 - (p / p1)) * p * p * p * r)) : (p > p3) ? (calcEnd ? (p === 1 ? 0 : 1 - (p = (p - p3) / p1) * p) : r + ((p - r) * (p = (p - p3) / p1) * p * p * p)) : (calcEnd ? 1 : r);
+		}
+	},
+	_createExpoScale = (start, end, ease) => {
+		let p1 = Math.log(end / start),
+			p2 = end - start;
+		ease && (ease = gsap.parseEase(ease));
+		return p => (start * Math.exp(p1 * (ease ? ease(p) : p)) - start) / p2;
+	},
+	EasePoint = function(time, value, next) {
+		this.t = time;
+		this.v = value;
+		if (next) {
+			this.next = next;
+			next.prev = this;
+			this.c = next.v - value;
+			this.gap = next.t - time;
+		}
+	},
+	_createRoughEase = vars => {
+		if (typeof(vars) !== "object") { //users may pass in via a string, like "rough(30)"
+			vars = {points: +vars || 20};
+		}
+		let taper = vars.taper || "none",
+			a = [],
+			cnt = 0,
+			points = (+vars.points || 20) | 0,
+			i = points,
+			randomize = _boolean(vars.randomize, true),
+			clamp = _boolean(vars.clamp),
+			template = gsap ? gsap.parseEase(vars.template) : 0,
+			strength = (+vars.strength || 1) * 0.4,
+			x, y, bump, invX, obj, pnt, recent;
+		while (--i > -1) {
+			x = randomize ? Math.random() : (1 / points) * i;
+			y = template ? template(x) : x;
+			if (taper === "none") {
+				bump = strength;
+			} else if (taper === "out") {
+				invX = 1 - x;
+				bump = invX * invX * strength;
+			} else if (taper === "in") {
+				bump = x * x * strength;
+			} else if (x < 0.5) {  //"both" (start)
+				invX = x * 2;
+				bump = invX * invX * 0.5 * strength;
+			} else {				//"both" (end)
+				invX = (1 - x) * 2;
+				bump = invX * invX * 0.5 * strength;
+			}
+			if (randomize) {
+				y += (Math.random() * bump) - (bump * 0.5);
+			} else if (i % 2) {
+				y += bump * 0.5;
+			} else {
+				y -= bump * 0.5;
+			}
+			if (clamp) {
+				if (y > 1) {
+					y = 1;
+				} else if (y < 0) {
+					y = 0;
+				}
+			}
+			a[cnt++] = {x:x, y:y};
+		}
+		a.sort((a, b) => a.x - b.x);
+		pnt = new EasePoint(1, 1, null);
+		i = points;
+		while (i--) {
+			obj = a[i];
+			pnt = new EasePoint(obj.x, obj.y, pnt);
+		}
+		recent = new EasePoint(0, 0, pnt.t ? pnt : pnt.next);
+		return p => {
+			let pnt = recent;
+			if (p > pnt.t) {
+				while (pnt.next && p >= pnt.t) {
+					pnt = pnt.next;
+				}
+				pnt = pnt.prev;
+			} else {
+				while (pnt.prev && p <= pnt.t) {
+					pnt = pnt.prev;
+				}
+			}
+			recent = pnt;
+			return pnt.v + ((p - pnt.t) / pnt.gap) * pnt.c;
+		};
+	};
+
+const SlowMo = _createSlowMo(0.7);
+SlowMo.ease = SlowMo; //for backward compatibility
+SlowMo.config = _createSlowMo;
+
+const ExpoScaleEase = _createExpoScale(1, 2);
+ExpoScaleEase.config = _createExpoScale;
+
+const RoughEase = _createRoughEase();
+RoughEase.ease = RoughEase; //for backward compatibility
+RoughEase.config = _createRoughEase;
+
+const EasePack = {
+	SlowMo: SlowMo,
+	RoughEase: RoughEase,
+	ExpoScaleEase: ExpoScaleEase
+};
+
+for (let p in EasePack) {
+	EasePack[p].register = _initCore;
+	EasePack[p].version = "3.12.5";
+}
+
+_getGSAP() && gsap.registerPlugin(SlowMo);
+
+export { EasePack, ExpoScaleEase, RoughEase, SlowMo, EasePack as default };
diff --git a/dist/EaselPlugin.cjs b/dist/EaselPlugin.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..4564534daf2df3a9f85dfd665f5ac1f0d92006b4
--- /dev/null
+++ b/dist/EaselPlugin.cjs
@@ -0,0 +1,287 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+/*!
+ * EaselPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _coreInitted, _win, _createJS, _ColorFilter, _ColorMatrixFilter,
+	_colorProps = "redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset".split(","),
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_getCreateJS = () => _createJS || (_win && _win.createjs) || _win || {},
+	_warn = message => console.warn(message),
+	_cache = target => {
+		let b = target.getBounds && target.getBounds();
+		if (!b) {
+			b = target.nominalBounds || {x:0, y:0, width: 100, height: 100};
+			target.setBounds && target.setBounds(b.x, b.y, b.width, b.height);
+		}
+		target.cache && target.cache(b.x, b.y, b.width, b.height);
+		_warn("EaselPlugin: for filters to display in EaselJS, you must call the object's cache() method first. GSAP attempted to use the target's getBounds() for the cache but that may not be completely accurate. " + target);
+	},
+	_parseColorFilter = (target, v, plugin) => {
+		if (!_ColorFilter) {
+			_ColorFilter = _getCreateJS().ColorFilter;
+			if (!_ColorFilter) {
+				_warn("EaselPlugin error: The EaselJS ColorFilter JavaScript file wasn't loaded.");
+			}
+		}
+		let filters = target.filters || [],
+			i = filters.length,
+			c, s, e, a, p, pt;
+		while (i--) {
+			if (filters[i] instanceof _ColorFilter) {
+				s = filters[i];
+				break;
+			}
+		}
+		if (!s) {
+			s = new _ColorFilter();
+			filters.push(s);
+			target.filters = filters;
+		}
+		e = s.clone();
+		if (v.tint != null) {
+			c = gsap.utils.splitColor(v.tint);
+			a = (v.tintAmount != null) ? +v.tintAmount : 1;
+			e.redOffset = +c[0] * a;
+			e.greenOffset = +c[1] * a;
+			e.blueOffset = +c[2] * a;
+			e.redMultiplier = e.greenMultiplier = e.blueMultiplier = 1 - a;
+		} else {
+			for (p in v) {
+				if (p !== "exposure") if (p !== "brightness") {
+					e[p] = +v[p];
+				}
+			}
+		}
+		if (v.exposure != null) {
+			e.redOffset = e.greenOffset = e.blueOffset = 255 * (+v.exposure - 1);
+			e.redMultiplier = e.greenMultiplier = e.blueMultiplier = 1;
+		} else if (v.brightness != null) {
+			a = +v.brightness - 1;
+			e.redOffset = e.greenOffset = e.blueOffset = (a > 0) ? a * 255 : 0;
+			e.redMultiplier = e.greenMultiplier = e.blueMultiplier = 1 - Math.abs(a);
+		}
+		i = 8;
+		while (i--) {
+			p = _colorProps[i];
+			if (s[p] !== e[p]) {
+				pt = plugin.add(s, p, s[p], e[p], 0, 0, 0, 0, 0, 1);
+				if (pt) {
+					pt.op = "easel_colorFilter";
+				}
+			}
+		}
+		plugin._props.push("easel_colorFilter");
+		if (!target.cacheID) {
+			_cache(target);
+		}
+	},
+
+	_idMatrix = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],
+	_lumR = 0.212671,
+	_lumG = 0.715160,
+	_lumB = 0.072169,
+
+	_applyMatrix = (m, m2) => {
+		if (!(m instanceof Array) || !(m2 instanceof Array)) {
+			return m2;
+		}
+		let temp = [],
+			i = 0,
+			z = 0,
+			y, x;
+		for (y = 0; y < 4; y++) {
+			for (x = 0; x < 5; x++) {
+				z = (x === 4) ? m[i + 4] : 0;
+				temp[i + x] = m[i]   * m2[x] + m[i+1] * m2[x + 5] +	m[i+2] * m2[x + 10] + m[i+3] * m2[x + 15] +	z;
+			}
+			i += 5;
+		}
+		return temp;
+	},
+
+	_setSaturation = (m, n) => {
+		if (isNaN(n)) {
+			return m;
+		}
+		let inv = 1 - n,
+			r = inv * _lumR,
+			g = inv * _lumG,
+			b = inv * _lumB;
+		return _applyMatrix([r + n, g, b, 0, 0, r, g + n, b, 0, 0, r, g, b + n, 0, 0, 0, 0, 0, 1, 0], m);
+	},
+
+	_colorize = (m, color, amount) => {
+		if (isNaN(amount)) {
+			amount = 1;
+		}
+		let c = gsap.utils.splitColor(color),
+			r = c[0] / 255,
+			g = c[1] / 255,
+			b = c[2] / 255,
+			inv = 1 - amount;
+		return _applyMatrix([inv + amount * r * _lumR, amount * r * _lumG, amount * r * _lumB, 0, 0, amount * g * _lumR, inv + amount * g * _lumG, amount * g * _lumB, 0, 0, amount * b * _lumR, amount * b * _lumG, inv + amount * b * _lumB, 0, 0, 0, 0, 0, 1, 0], m);
+	},
+
+	_setHue = (m, n) => {
+		if (isNaN(n)) {
+			return m;
+		}
+		n *= Math.PI / 180;
+		let c = Math.cos(n),
+			s = Math.sin(n);
+		return _applyMatrix([(_lumR + (c * (1 - _lumR))) + (s * (-_lumR)), (_lumG + (c * (-_lumG))) + (s * (-_lumG)), (_lumB + (c * (-_lumB))) + (s * (1 - _lumB)), 0, 0, (_lumR + (c * (-_lumR))) + (s * 0.143), (_lumG + (c * (1 - _lumG))) + (s * 0.14), (_lumB + (c * (-_lumB))) + (s * -0.283), 0, 0, (_lumR + (c * (-_lumR))) + (s * (-(1 - _lumR))), (_lumG + (c * (-_lumG))) + (s * _lumG), (_lumB + (c * (1 - _lumB))) + (s * _lumB), 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], m);
+	},
+
+	_setContrast = (m, n) => {
+		if (isNaN(n)) {
+			return m;
+		}
+		n += 0.01;
+		return _applyMatrix([n,0,0,0,128 * (1 - n), 0,n,0,0,128 * (1 - n), 0,0,n,0,128 * (1 - n), 0,0,0,1,0], m);
+	},
+
+	_parseColorMatrixFilter = (target, v, plugin) => {
+		if (!_ColorMatrixFilter) {
+			_ColorMatrixFilter = _getCreateJS().ColorMatrixFilter;
+			if (!_ColorMatrixFilter) {
+				_warn("EaselPlugin: The EaselJS ColorMatrixFilter JavaScript file wasn't loaded.");
+			}
+		}
+		let filters = target.filters || [],
+			i = filters.length,
+			matrix, startMatrix, s, pg;
+		while (--i > -1) {
+			if (filters[i] instanceof _ColorMatrixFilter) {
+				s = filters[i];
+				break;
+			}
+		}
+		if (!s) {
+			s = new _ColorMatrixFilter(_idMatrix.slice());
+			filters.push(s);
+			target.filters = filters;
+		}
+		startMatrix = s.matrix;
+		matrix = _idMatrix.slice();
+		if (v.colorize != null) {
+			matrix = _colorize(matrix, v.colorize, Number(v.colorizeAmount));
+		}
+		if (v.contrast != null) {
+			matrix = _setContrast(matrix, Number(v.contrast));
+		}
+		if (v.hue != null) {
+			matrix = _setHue(matrix, Number(v.hue));
+		}
+		if (v.saturation != null) {
+			matrix = _setSaturation(matrix, Number(v.saturation));
+		}
+
+		i = matrix.length;
+		while (--i > -1) {
+			if (matrix[i] !== startMatrix[i]) {
+				pg = plugin.add(startMatrix, i, startMatrix[i], matrix[i], 0, 0, 0, 0, 0, 1);
+				if (pg) {
+					pg.op = "easel_colorMatrixFilter";
+				}
+			}
+		}
+
+		plugin._props.push("easel_colorMatrixFilter");
+		if (!target.cacheID) {
+			_cache();
+		}
+
+		plugin._matrix = startMatrix;
+	},
+
+	_initCore = core => {
+		gsap = core || _getGSAP();
+		if (_windowExists()) {
+			_win = window;
+		}
+		if (gsap) {
+
+			_coreInitted = 1;
+		}
+	};
+
+
+const EaselPlugin = {
+	version: "3.12.5",
+	name: "easel",
+	init(target, value, tween, index, targets) {
+		if (!_coreInitted) {
+			_initCore();
+			if (!gsap) {
+				_warn("Please gsap.registerPlugin(EaselPlugin)");
+			}
+		}
+		this.target = target;
+		let p, pt, tint, colorMatrix, end, labels, i;
+		for (p in value) {
+
+			end = value[p];
+			if (p === "colorFilter" || p === "tint" || p === "tintAmount" || p === "exposure" || p === "brightness") {
+				if (!tint) {
+					_parseColorFilter(target, value.colorFilter || value, this);
+					tint = true;
+				}
+
+			} else if (p === "saturation" || p === "contrast" || p === "hue" || p === "colorize" || p === "colorizeAmount") {
+				if (!colorMatrix) {
+					_parseColorMatrixFilter(target, value.colorMatrixFilter || value, this);
+					colorMatrix = true;
+				}
+
+			} else if (p === "frame") {
+				if (typeof(end) === "string" && end.charAt(1) !== "=" && (labels = target.labels)) {
+					for (i = 0; i < labels.length; i++) {
+						if (labels[i].label === end) {
+							end = labels[i].position;
+						}
+					}
+				}
+				pt = this.add(target, "gotoAndStop", target.currentFrame, end, index, targets, Math.round, 0, 0, 1);
+				if (pt) {
+					pt.op = p;
+				}
+
+			} else if (target[p] != null) {
+				this.add(target, p, "get", end);
+			}
+
+		}
+	},
+	render(ratio, data) {
+		let pt = data._pt;
+		while (pt) {
+			pt.r(ratio, pt.d);
+			pt = pt._next;
+		}
+		if (data.target.cacheID) {
+			data.target.updateCache();
+		}
+	},
+	register: _initCore
+};
+
+EaselPlugin.registerCreateJS = createjs => {
+	_createJS = createjs;
+};
+
+_getGSAP() && gsap.registerPlugin(EaselPlugin);
+
+exports.EaselPlugin = EaselPlugin;
+exports.default = EaselPlugin;
diff --git a/src/EaselPlugin.js b/dist/EaselPlugin.d.cts
similarity index 99%
rename from src/EaselPlugin.js
rename to dist/EaselPlugin.d.cts
index 3f9eb40ae1f68755456605c087ab7228fdbc105f..8106b2684fd26bdbe2186eacd71ea88ee2fe2f65 100644
--- a/src/EaselPlugin.js
+++ b/dist/EaselPlugin.d.cts
@@ -214,7 +214,7 @@ let gsap, _coreInitted, _win, _createJS, _ColorFilter, _ColorMatrixFilter,
 	};
 
 
-export const EaselPlugin = {
+const EaselPlugin = {
 	version: "3.12.5",
 	name: "easel",
 	init(target, value, tween, index, targets) {
@@ -279,4 +279,4 @@ EaselPlugin.registerCreateJS = createjs => {
 
 _getGSAP() && gsap.registerPlugin(EaselPlugin);
 
-export { EaselPlugin as default };
\ No newline at end of file
+export { EaselPlugin, EaselPlugin as default };
diff --git a/dist/EaselPlugin.d.mts b/dist/EaselPlugin.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..8106b2684fd26bdbe2186eacd71ea88ee2fe2f65
--- /dev/null
+++ b/dist/EaselPlugin.d.mts
@@ -0,0 +1,282 @@
+/*!
+ * EaselPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _coreInitted, _win, _createJS, _ColorFilter, _ColorMatrixFilter,
+	_colorProps = "redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset".split(","),
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_getCreateJS = () => _createJS || (_win && _win.createjs) || _win || {},
+	_warn = message => console.warn(message),
+	_cache = target => {
+		let b = target.getBounds && target.getBounds();
+		if (!b) {
+			b = target.nominalBounds || {x:0, y:0, width: 100, height: 100};
+			target.setBounds && target.setBounds(b.x, b.y, b.width, b.height);
+		}
+		target.cache && target.cache(b.x, b.y, b.width, b.height);
+		_warn("EaselPlugin: for filters to display in EaselJS, you must call the object's cache() method first. GSAP attempted to use the target's getBounds() for the cache but that may not be completely accurate. " + target);
+	},
+	_parseColorFilter = (target, v, plugin) => {
+		if (!_ColorFilter) {
+			_ColorFilter = _getCreateJS().ColorFilter;
+			if (!_ColorFilter) {
+				_warn("EaselPlugin error: The EaselJS ColorFilter JavaScript file wasn't loaded.");
+			}
+		}
+		let filters = target.filters || [],
+			i = filters.length,
+			c, s, e, a, p, pt;
+		while (i--) {
+			if (filters[i] instanceof _ColorFilter) {
+				s = filters[i];
+				break;
+			}
+		}
+		if (!s) {
+			s = new _ColorFilter();
+			filters.push(s);
+			target.filters = filters;
+		}
+		e = s.clone();
+		if (v.tint != null) {
+			c = gsap.utils.splitColor(v.tint);
+			a = (v.tintAmount != null) ? +v.tintAmount : 1;
+			e.redOffset = +c[0] * a;
+			e.greenOffset = +c[1] * a;
+			e.blueOffset = +c[2] * a;
+			e.redMultiplier = e.greenMultiplier = e.blueMultiplier = 1 - a;
+		} else {
+			for (p in v) {
+				if (p !== "exposure") if (p !== "brightness") {
+					e[p] = +v[p];
+				}
+			}
+		}
+		if (v.exposure != null) {
+			e.redOffset = e.greenOffset = e.blueOffset = 255 * (+v.exposure - 1);
+			e.redMultiplier = e.greenMultiplier = e.blueMultiplier = 1;
+		} else if (v.brightness != null) {
+			a = +v.brightness - 1;
+			e.redOffset = e.greenOffset = e.blueOffset = (a > 0) ? a * 255 : 0;
+			e.redMultiplier = e.greenMultiplier = e.blueMultiplier = 1 - Math.abs(a);
+		}
+		i = 8;
+		while (i--) {
+			p = _colorProps[i];
+			if (s[p] !== e[p]) {
+				pt = plugin.add(s, p, s[p], e[p], 0, 0, 0, 0, 0, 1);
+				if (pt) {
+					pt.op = "easel_colorFilter";
+				}
+			}
+		}
+		plugin._props.push("easel_colorFilter");
+		if (!target.cacheID) {
+			_cache(target);
+		}
+	},
+
+	_idMatrix = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],
+	_lumR = 0.212671,
+	_lumG = 0.715160,
+	_lumB = 0.072169,
+
+	_applyMatrix = (m, m2) => {
+		if (!(m instanceof Array) || !(m2 instanceof Array)) {
+			return m2;
+		}
+		let temp = [],
+			i = 0,
+			z = 0,
+			y, x;
+		for (y = 0; y < 4; y++) {
+			for (x = 0; x < 5; x++) {
+				z = (x === 4) ? m[i + 4] : 0;
+				temp[i + x] = m[i]   * m2[x] + m[i+1] * m2[x + 5] +	m[i+2] * m2[x + 10] + m[i+3] * m2[x + 15] +	z;
+			}
+			i += 5;
+		}
+		return temp;
+	},
+
+	_setSaturation = (m, n) => {
+		if (isNaN(n)) {
+			return m;
+		}
+		let inv = 1 - n,
+			r = inv * _lumR,
+			g = inv * _lumG,
+			b = inv * _lumB;
+		return _applyMatrix([r + n, g, b, 0, 0, r, g + n, b, 0, 0, r, g, b + n, 0, 0, 0, 0, 0, 1, 0], m);
+	},
+
+	_colorize = (m, color, amount) => {
+		if (isNaN(amount)) {
+			amount = 1;
+		}
+		let c = gsap.utils.splitColor(color),
+			r = c[0] / 255,
+			g = c[1] / 255,
+			b = c[2] / 255,
+			inv = 1 - amount;
+		return _applyMatrix([inv + amount * r * _lumR, amount * r * _lumG, amount * r * _lumB, 0, 0, amount * g * _lumR, inv + amount * g * _lumG, amount * g * _lumB, 0, 0, amount * b * _lumR, amount * b * _lumG, inv + amount * b * _lumB, 0, 0, 0, 0, 0, 1, 0], m);
+	},
+
+	_setHue = (m, n) => {
+		if (isNaN(n)) {
+			return m;
+		}
+		n *= Math.PI / 180;
+		let c = Math.cos(n),
+			s = Math.sin(n);
+		return _applyMatrix([(_lumR + (c * (1 - _lumR))) + (s * (-_lumR)), (_lumG + (c * (-_lumG))) + (s * (-_lumG)), (_lumB + (c * (-_lumB))) + (s * (1 - _lumB)), 0, 0, (_lumR + (c * (-_lumR))) + (s * 0.143), (_lumG + (c * (1 - _lumG))) + (s * 0.14), (_lumB + (c * (-_lumB))) + (s * -0.283), 0, 0, (_lumR + (c * (-_lumR))) + (s * (-(1 - _lumR))), (_lumG + (c * (-_lumG))) + (s * _lumG), (_lumB + (c * (1 - _lumB))) + (s * _lumB), 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], m);
+	},
+
+	_setContrast = (m, n) => {
+		if (isNaN(n)) {
+			return m;
+		}
+		n += 0.01;
+		return _applyMatrix([n,0,0,0,128 * (1 - n), 0,n,0,0,128 * (1 - n), 0,0,n,0,128 * (1 - n), 0,0,0,1,0], m);
+	},
+
+	_parseColorMatrixFilter = (target, v, plugin) => {
+		if (!_ColorMatrixFilter) {
+			_ColorMatrixFilter = _getCreateJS().ColorMatrixFilter;
+			if (!_ColorMatrixFilter) {
+				_warn("EaselPlugin: The EaselJS ColorMatrixFilter JavaScript file wasn't loaded.");
+			}
+		}
+		let filters = target.filters || [],
+			i = filters.length,
+			matrix, startMatrix, s, pg;
+		while (--i > -1) {
+			if (filters[i] instanceof _ColorMatrixFilter) {
+				s = filters[i];
+				break;
+			}
+		}
+		if (!s) {
+			s = new _ColorMatrixFilter(_idMatrix.slice());
+			filters.push(s);
+			target.filters = filters;
+		}
+		startMatrix = s.matrix;
+		matrix = _idMatrix.slice();
+		if (v.colorize != null) {
+			matrix = _colorize(matrix, v.colorize, Number(v.colorizeAmount));
+		}
+		if (v.contrast != null) {
+			matrix = _setContrast(matrix, Number(v.contrast));
+		}
+		if (v.hue != null) {
+			matrix = _setHue(matrix, Number(v.hue));
+		}
+		if (v.saturation != null) {
+			matrix = _setSaturation(matrix, Number(v.saturation));
+		}
+
+		i = matrix.length;
+		while (--i > -1) {
+			if (matrix[i] !== startMatrix[i]) {
+				pg = plugin.add(startMatrix, i, startMatrix[i], matrix[i], 0, 0, 0, 0, 0, 1);
+				if (pg) {
+					pg.op = "easel_colorMatrixFilter";
+				}
+			}
+		}
+
+		plugin._props.push("easel_colorMatrixFilter");
+		if (!target.cacheID) {
+			_cache();
+		}
+
+		plugin._matrix = startMatrix;
+	},
+
+	_initCore = core => {
+		gsap = core || _getGSAP();
+		if (_windowExists()) {
+			_win = window;
+		}
+		if (gsap) {
+
+			_coreInitted = 1;
+		}
+	};
+
+
+const EaselPlugin = {
+	version: "3.12.5",
+	name: "easel",
+	init(target, value, tween, index, targets) {
+		if (!_coreInitted) {
+			_initCore();
+			if (!gsap) {
+				_warn("Please gsap.registerPlugin(EaselPlugin)");
+			}
+		}
+		this.target = target;
+		let p, pt, tint, colorMatrix, end, labels, i;
+		for (p in value) {
+
+			end = value[p];
+			if (p === "colorFilter" || p === "tint" || p === "tintAmount" || p === "exposure" || p === "brightness") {
+				if (!tint) {
+					_parseColorFilter(target, value.colorFilter || value, this);
+					tint = true;
+				}
+
+			} else if (p === "saturation" || p === "contrast" || p === "hue" || p === "colorize" || p === "colorizeAmount") {
+				if (!colorMatrix) {
+					_parseColorMatrixFilter(target, value.colorMatrixFilter || value, this);
+					colorMatrix = true;
+				}
+
+			} else if (p === "frame") {
+				if (typeof(end) === "string" && end.charAt(1) !== "=" && (labels = target.labels)) {
+					for (i = 0; i < labels.length; i++) {
+						if (labels[i].label === end) {
+							end = labels[i].position;
+						}
+					}
+				}
+				pt = this.add(target, "gotoAndStop", target.currentFrame, end, index, targets, Math.round, 0, 0, 1);
+				if (pt) {
+					pt.op = p;
+				}
+
+			} else if (target[p] != null) {
+				this.add(target, p, "get", end);
+			}
+
+		}
+	},
+	render(ratio, data) {
+		let pt = data._pt;
+		while (pt) {
+			pt.r(ratio, pt.d);
+			pt = pt._next;
+		}
+		if (data.target.cacheID) {
+			data.target.updateCache();
+		}
+	},
+	register: _initCore
+};
+
+EaselPlugin.registerCreateJS = createjs => {
+	_createJS = createjs;
+};
+
+_getGSAP() && gsap.registerPlugin(EaselPlugin);
+
+export { EaselPlugin, EaselPlugin as default };
diff --git a/dist/EaselPlugin.d.ts b/dist/EaselPlugin.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..8106b2684fd26bdbe2186eacd71ea88ee2fe2f65
--- /dev/null
+++ b/dist/EaselPlugin.d.ts
@@ -0,0 +1,282 @@
+/*!
+ * EaselPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _coreInitted, _win, _createJS, _ColorFilter, _ColorMatrixFilter,
+	_colorProps = "redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset".split(","),
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_getCreateJS = () => _createJS || (_win && _win.createjs) || _win || {},
+	_warn = message => console.warn(message),
+	_cache = target => {
+		let b = target.getBounds && target.getBounds();
+		if (!b) {
+			b = target.nominalBounds || {x:0, y:0, width: 100, height: 100};
+			target.setBounds && target.setBounds(b.x, b.y, b.width, b.height);
+		}
+		target.cache && target.cache(b.x, b.y, b.width, b.height);
+		_warn("EaselPlugin: for filters to display in EaselJS, you must call the object's cache() method first. GSAP attempted to use the target's getBounds() for the cache but that may not be completely accurate. " + target);
+	},
+	_parseColorFilter = (target, v, plugin) => {
+		if (!_ColorFilter) {
+			_ColorFilter = _getCreateJS().ColorFilter;
+			if (!_ColorFilter) {
+				_warn("EaselPlugin error: The EaselJS ColorFilter JavaScript file wasn't loaded.");
+			}
+		}
+		let filters = target.filters || [],
+			i = filters.length,
+			c, s, e, a, p, pt;
+		while (i--) {
+			if (filters[i] instanceof _ColorFilter) {
+				s = filters[i];
+				break;
+			}
+		}
+		if (!s) {
+			s = new _ColorFilter();
+			filters.push(s);
+			target.filters = filters;
+		}
+		e = s.clone();
+		if (v.tint != null) {
+			c = gsap.utils.splitColor(v.tint);
+			a = (v.tintAmount != null) ? +v.tintAmount : 1;
+			e.redOffset = +c[0] * a;
+			e.greenOffset = +c[1] * a;
+			e.blueOffset = +c[2] * a;
+			e.redMultiplier = e.greenMultiplier = e.blueMultiplier = 1 - a;
+		} else {
+			for (p in v) {
+				if (p !== "exposure") if (p !== "brightness") {
+					e[p] = +v[p];
+				}
+			}
+		}
+		if (v.exposure != null) {
+			e.redOffset = e.greenOffset = e.blueOffset = 255 * (+v.exposure - 1);
+			e.redMultiplier = e.greenMultiplier = e.blueMultiplier = 1;
+		} else if (v.brightness != null) {
+			a = +v.brightness - 1;
+			e.redOffset = e.greenOffset = e.blueOffset = (a > 0) ? a * 255 : 0;
+			e.redMultiplier = e.greenMultiplier = e.blueMultiplier = 1 - Math.abs(a);
+		}
+		i = 8;
+		while (i--) {
+			p = _colorProps[i];
+			if (s[p] !== e[p]) {
+				pt = plugin.add(s, p, s[p], e[p], 0, 0, 0, 0, 0, 1);
+				if (pt) {
+					pt.op = "easel_colorFilter";
+				}
+			}
+		}
+		plugin._props.push("easel_colorFilter");
+		if (!target.cacheID) {
+			_cache(target);
+		}
+	},
+
+	_idMatrix = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],
+	_lumR = 0.212671,
+	_lumG = 0.715160,
+	_lumB = 0.072169,
+
+	_applyMatrix = (m, m2) => {
+		if (!(m instanceof Array) || !(m2 instanceof Array)) {
+			return m2;
+		}
+		let temp = [],
+			i = 0,
+			z = 0,
+			y, x;
+		for (y = 0; y < 4; y++) {
+			for (x = 0; x < 5; x++) {
+				z = (x === 4) ? m[i + 4] : 0;
+				temp[i + x] = m[i]   * m2[x] + m[i+1] * m2[x + 5] +	m[i+2] * m2[x + 10] + m[i+3] * m2[x + 15] +	z;
+			}
+			i += 5;
+		}
+		return temp;
+	},
+
+	_setSaturation = (m, n) => {
+		if (isNaN(n)) {
+			return m;
+		}
+		let inv = 1 - n,
+			r = inv * _lumR,
+			g = inv * _lumG,
+			b = inv * _lumB;
+		return _applyMatrix([r + n, g, b, 0, 0, r, g + n, b, 0, 0, r, g, b + n, 0, 0, 0, 0, 0, 1, 0], m);
+	},
+
+	_colorize = (m, color, amount) => {
+		if (isNaN(amount)) {
+			amount = 1;
+		}
+		let c = gsap.utils.splitColor(color),
+			r = c[0] / 255,
+			g = c[1] / 255,
+			b = c[2] / 255,
+			inv = 1 - amount;
+		return _applyMatrix([inv + amount * r * _lumR, amount * r * _lumG, amount * r * _lumB, 0, 0, amount * g * _lumR, inv + amount * g * _lumG, amount * g * _lumB, 0, 0, amount * b * _lumR, amount * b * _lumG, inv + amount * b * _lumB, 0, 0, 0, 0, 0, 1, 0], m);
+	},
+
+	_setHue = (m, n) => {
+		if (isNaN(n)) {
+			return m;
+		}
+		n *= Math.PI / 180;
+		let c = Math.cos(n),
+			s = Math.sin(n);
+		return _applyMatrix([(_lumR + (c * (1 - _lumR))) + (s * (-_lumR)), (_lumG + (c * (-_lumG))) + (s * (-_lumG)), (_lumB + (c * (-_lumB))) + (s * (1 - _lumB)), 0, 0, (_lumR + (c * (-_lumR))) + (s * 0.143), (_lumG + (c * (1 - _lumG))) + (s * 0.14), (_lumB + (c * (-_lumB))) + (s * -0.283), 0, 0, (_lumR + (c * (-_lumR))) + (s * (-(1 - _lumR))), (_lumG + (c * (-_lumG))) + (s * _lumG), (_lumB + (c * (1 - _lumB))) + (s * _lumB), 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], m);
+	},
+
+	_setContrast = (m, n) => {
+		if (isNaN(n)) {
+			return m;
+		}
+		n += 0.01;
+		return _applyMatrix([n,0,0,0,128 * (1 - n), 0,n,0,0,128 * (1 - n), 0,0,n,0,128 * (1 - n), 0,0,0,1,0], m);
+	},
+
+	_parseColorMatrixFilter = (target, v, plugin) => {
+		if (!_ColorMatrixFilter) {
+			_ColorMatrixFilter = _getCreateJS().ColorMatrixFilter;
+			if (!_ColorMatrixFilter) {
+				_warn("EaselPlugin: The EaselJS ColorMatrixFilter JavaScript file wasn't loaded.");
+			}
+		}
+		let filters = target.filters || [],
+			i = filters.length,
+			matrix, startMatrix, s, pg;
+		while (--i > -1) {
+			if (filters[i] instanceof _ColorMatrixFilter) {
+				s = filters[i];
+				break;
+			}
+		}
+		if (!s) {
+			s = new _ColorMatrixFilter(_idMatrix.slice());
+			filters.push(s);
+			target.filters = filters;
+		}
+		startMatrix = s.matrix;
+		matrix = _idMatrix.slice();
+		if (v.colorize != null) {
+			matrix = _colorize(matrix, v.colorize, Number(v.colorizeAmount));
+		}
+		if (v.contrast != null) {
+			matrix = _setContrast(matrix, Number(v.contrast));
+		}
+		if (v.hue != null) {
+			matrix = _setHue(matrix, Number(v.hue));
+		}
+		if (v.saturation != null) {
+			matrix = _setSaturation(matrix, Number(v.saturation));
+		}
+
+		i = matrix.length;
+		while (--i > -1) {
+			if (matrix[i] !== startMatrix[i]) {
+				pg = plugin.add(startMatrix, i, startMatrix[i], matrix[i], 0, 0, 0, 0, 0, 1);
+				if (pg) {
+					pg.op = "easel_colorMatrixFilter";
+				}
+			}
+		}
+
+		plugin._props.push("easel_colorMatrixFilter");
+		if (!target.cacheID) {
+			_cache();
+		}
+
+		plugin._matrix = startMatrix;
+	},
+
+	_initCore = core => {
+		gsap = core || _getGSAP();
+		if (_windowExists()) {
+			_win = window;
+		}
+		if (gsap) {
+
+			_coreInitted = 1;
+		}
+	};
+
+
+const EaselPlugin = {
+	version: "3.12.5",
+	name: "easel",
+	init(target, value, tween, index, targets) {
+		if (!_coreInitted) {
+			_initCore();
+			if (!gsap) {
+				_warn("Please gsap.registerPlugin(EaselPlugin)");
+			}
+		}
+		this.target = target;
+		let p, pt, tint, colorMatrix, end, labels, i;
+		for (p in value) {
+
+			end = value[p];
+			if (p === "colorFilter" || p === "tint" || p === "tintAmount" || p === "exposure" || p === "brightness") {
+				if (!tint) {
+					_parseColorFilter(target, value.colorFilter || value, this);
+					tint = true;
+				}
+
+			} else if (p === "saturation" || p === "contrast" || p === "hue" || p === "colorize" || p === "colorizeAmount") {
+				if (!colorMatrix) {
+					_parseColorMatrixFilter(target, value.colorMatrixFilter || value, this);
+					colorMatrix = true;
+				}
+
+			} else if (p === "frame") {
+				if (typeof(end) === "string" && end.charAt(1) !== "=" && (labels = target.labels)) {
+					for (i = 0; i < labels.length; i++) {
+						if (labels[i].label === end) {
+							end = labels[i].position;
+						}
+					}
+				}
+				pt = this.add(target, "gotoAndStop", target.currentFrame, end, index, targets, Math.round, 0, 0, 1);
+				if (pt) {
+					pt.op = p;
+				}
+
+			} else if (target[p] != null) {
+				this.add(target, p, "get", end);
+			}
+
+		}
+	},
+	render(ratio, data) {
+		let pt = data._pt;
+		while (pt) {
+			pt.r(ratio, pt.d);
+			pt = pt._next;
+		}
+		if (data.target.cacheID) {
+			data.target.updateCache();
+		}
+	},
+	register: _initCore
+};
+
+EaselPlugin.registerCreateJS = createjs => {
+	_createJS = createjs;
+};
+
+_getGSAP() && gsap.registerPlugin(EaselPlugin);
+
+export { EaselPlugin, EaselPlugin as default };
diff --git a/dist/EaselPlugin.js b/dist/EaselPlugin.js
deleted file mode 100644
index 6b5ef0387e025b2a17d1e73566a46cb354169170..0000000000000000000000000000000000000000
diff --git a/dist/EaselPlugin.min.js b/dist/EaselPlugin.min.js
deleted file mode 100644
index c6aaee0b08d95dc6df188ff61885e202a65d4f4c..0000000000000000000000000000000000000000
diff --git a/dist/EaselPlugin.min.js.map b/dist/EaselPlugin.min.js.map
deleted file mode 100644
index 2fcf8c18794cef57bd0f2f903d2731da3cde29c1..0000000000000000000000000000000000000000
diff --git a/dist/EaselPlugin.mjs b/dist/EaselPlugin.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..8106b2684fd26bdbe2186eacd71ea88ee2fe2f65
--- /dev/null
+++ b/dist/EaselPlugin.mjs
@@ -0,0 +1,282 @@
+/*!
+ * EaselPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _coreInitted, _win, _createJS, _ColorFilter, _ColorMatrixFilter,
+	_colorProps = "redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset".split(","),
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_getCreateJS = () => _createJS || (_win && _win.createjs) || _win || {},
+	_warn = message => console.warn(message),
+	_cache = target => {
+		let b = target.getBounds && target.getBounds();
+		if (!b) {
+			b = target.nominalBounds || {x:0, y:0, width: 100, height: 100};
+			target.setBounds && target.setBounds(b.x, b.y, b.width, b.height);
+		}
+		target.cache && target.cache(b.x, b.y, b.width, b.height);
+		_warn("EaselPlugin: for filters to display in EaselJS, you must call the object's cache() method first. GSAP attempted to use the target's getBounds() for the cache but that may not be completely accurate. " + target);
+	},
+	_parseColorFilter = (target, v, plugin) => {
+		if (!_ColorFilter) {
+			_ColorFilter = _getCreateJS().ColorFilter;
+			if (!_ColorFilter) {
+				_warn("EaselPlugin error: The EaselJS ColorFilter JavaScript file wasn't loaded.");
+			}
+		}
+		let filters = target.filters || [],
+			i = filters.length,
+			c, s, e, a, p, pt;
+		while (i--) {
+			if (filters[i] instanceof _ColorFilter) {
+				s = filters[i];
+				break;
+			}
+		}
+		if (!s) {
+			s = new _ColorFilter();
+			filters.push(s);
+			target.filters = filters;
+		}
+		e = s.clone();
+		if (v.tint != null) {
+			c = gsap.utils.splitColor(v.tint);
+			a = (v.tintAmount != null) ? +v.tintAmount : 1;
+			e.redOffset = +c[0] * a;
+			e.greenOffset = +c[1] * a;
+			e.blueOffset = +c[2] * a;
+			e.redMultiplier = e.greenMultiplier = e.blueMultiplier = 1 - a;
+		} else {
+			for (p in v) {
+				if (p !== "exposure") if (p !== "brightness") {
+					e[p] = +v[p];
+				}
+			}
+		}
+		if (v.exposure != null) {
+			e.redOffset = e.greenOffset = e.blueOffset = 255 * (+v.exposure - 1);
+			e.redMultiplier = e.greenMultiplier = e.blueMultiplier = 1;
+		} else if (v.brightness != null) {
+			a = +v.brightness - 1;
+			e.redOffset = e.greenOffset = e.blueOffset = (a > 0) ? a * 255 : 0;
+			e.redMultiplier = e.greenMultiplier = e.blueMultiplier = 1 - Math.abs(a);
+		}
+		i = 8;
+		while (i--) {
+			p = _colorProps[i];
+			if (s[p] !== e[p]) {
+				pt = plugin.add(s, p, s[p], e[p], 0, 0, 0, 0, 0, 1);
+				if (pt) {
+					pt.op = "easel_colorFilter";
+				}
+			}
+		}
+		plugin._props.push("easel_colorFilter");
+		if (!target.cacheID) {
+			_cache(target);
+		}
+	},
+
+	_idMatrix = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],
+	_lumR = 0.212671,
+	_lumG = 0.715160,
+	_lumB = 0.072169,
+
+	_applyMatrix = (m, m2) => {
+		if (!(m instanceof Array) || !(m2 instanceof Array)) {
+			return m2;
+		}
+		let temp = [],
+			i = 0,
+			z = 0,
+			y, x;
+		for (y = 0; y < 4; y++) {
+			for (x = 0; x < 5; x++) {
+				z = (x === 4) ? m[i + 4] : 0;
+				temp[i + x] = m[i]   * m2[x] + m[i+1] * m2[x + 5] +	m[i+2] * m2[x + 10] + m[i+3] * m2[x + 15] +	z;
+			}
+			i += 5;
+		}
+		return temp;
+	},
+
+	_setSaturation = (m, n) => {
+		if (isNaN(n)) {
+			return m;
+		}
+		let inv = 1 - n,
+			r = inv * _lumR,
+			g = inv * _lumG,
+			b = inv * _lumB;
+		return _applyMatrix([r + n, g, b, 0, 0, r, g + n, b, 0, 0, r, g, b + n, 0, 0, 0, 0, 0, 1, 0], m);
+	},
+
+	_colorize = (m, color, amount) => {
+		if (isNaN(amount)) {
+			amount = 1;
+		}
+		let c = gsap.utils.splitColor(color),
+			r = c[0] / 255,
+			g = c[1] / 255,
+			b = c[2] / 255,
+			inv = 1 - amount;
+		return _applyMatrix([inv + amount * r * _lumR, amount * r * _lumG, amount * r * _lumB, 0, 0, amount * g * _lumR, inv + amount * g * _lumG, amount * g * _lumB, 0, 0, amount * b * _lumR, amount * b * _lumG, inv + amount * b * _lumB, 0, 0, 0, 0, 0, 1, 0], m);
+	},
+
+	_setHue = (m, n) => {
+		if (isNaN(n)) {
+			return m;
+		}
+		n *= Math.PI / 180;
+		let c = Math.cos(n),
+			s = Math.sin(n);
+		return _applyMatrix([(_lumR + (c * (1 - _lumR))) + (s * (-_lumR)), (_lumG + (c * (-_lumG))) + (s * (-_lumG)), (_lumB + (c * (-_lumB))) + (s * (1 - _lumB)), 0, 0, (_lumR + (c * (-_lumR))) + (s * 0.143), (_lumG + (c * (1 - _lumG))) + (s * 0.14), (_lumB + (c * (-_lumB))) + (s * -0.283), 0, 0, (_lumR + (c * (-_lumR))) + (s * (-(1 - _lumR))), (_lumG + (c * (-_lumG))) + (s * _lumG), (_lumB + (c * (1 - _lumB))) + (s * _lumB), 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], m);
+	},
+
+	_setContrast = (m, n) => {
+		if (isNaN(n)) {
+			return m;
+		}
+		n += 0.01;
+		return _applyMatrix([n,0,0,0,128 * (1 - n), 0,n,0,0,128 * (1 - n), 0,0,n,0,128 * (1 - n), 0,0,0,1,0], m);
+	},
+
+	_parseColorMatrixFilter = (target, v, plugin) => {
+		if (!_ColorMatrixFilter) {
+			_ColorMatrixFilter = _getCreateJS().ColorMatrixFilter;
+			if (!_ColorMatrixFilter) {
+				_warn("EaselPlugin: The EaselJS ColorMatrixFilter JavaScript file wasn't loaded.");
+			}
+		}
+		let filters = target.filters || [],
+			i = filters.length,
+			matrix, startMatrix, s, pg;
+		while (--i > -1) {
+			if (filters[i] instanceof _ColorMatrixFilter) {
+				s = filters[i];
+				break;
+			}
+		}
+		if (!s) {
+			s = new _ColorMatrixFilter(_idMatrix.slice());
+			filters.push(s);
+			target.filters = filters;
+		}
+		startMatrix = s.matrix;
+		matrix = _idMatrix.slice();
+		if (v.colorize != null) {
+			matrix = _colorize(matrix, v.colorize, Number(v.colorizeAmount));
+		}
+		if (v.contrast != null) {
+			matrix = _setContrast(matrix, Number(v.contrast));
+		}
+		if (v.hue != null) {
+			matrix = _setHue(matrix, Number(v.hue));
+		}
+		if (v.saturation != null) {
+			matrix = _setSaturation(matrix, Number(v.saturation));
+		}
+
+		i = matrix.length;
+		while (--i > -1) {
+			if (matrix[i] !== startMatrix[i]) {
+				pg = plugin.add(startMatrix, i, startMatrix[i], matrix[i], 0, 0, 0, 0, 0, 1);
+				if (pg) {
+					pg.op = "easel_colorMatrixFilter";
+				}
+			}
+		}
+
+		plugin._props.push("easel_colorMatrixFilter");
+		if (!target.cacheID) {
+			_cache();
+		}
+
+		plugin._matrix = startMatrix;
+	},
+
+	_initCore = core => {
+		gsap = core || _getGSAP();
+		if (_windowExists()) {
+			_win = window;
+		}
+		if (gsap) {
+
+			_coreInitted = 1;
+		}
+	};
+
+
+const EaselPlugin = {
+	version: "3.12.5",
+	name: "easel",
+	init(target, value, tween, index, targets) {
+		if (!_coreInitted) {
+			_initCore();
+			if (!gsap) {
+				_warn("Please gsap.registerPlugin(EaselPlugin)");
+			}
+		}
+		this.target = target;
+		let p, pt, tint, colorMatrix, end, labels, i;
+		for (p in value) {
+
+			end = value[p];
+			if (p === "colorFilter" || p === "tint" || p === "tintAmount" || p === "exposure" || p === "brightness") {
+				if (!tint) {
+					_parseColorFilter(target, value.colorFilter || value, this);
+					tint = true;
+				}
+
+			} else if (p === "saturation" || p === "contrast" || p === "hue" || p === "colorize" || p === "colorizeAmount") {
+				if (!colorMatrix) {
+					_parseColorMatrixFilter(target, value.colorMatrixFilter || value, this);
+					colorMatrix = true;
+				}
+
+			} else if (p === "frame") {
+				if (typeof(end) === "string" && end.charAt(1) !== "=" && (labels = target.labels)) {
+					for (i = 0; i < labels.length; i++) {
+						if (labels[i].label === end) {
+							end = labels[i].position;
+						}
+					}
+				}
+				pt = this.add(target, "gotoAndStop", target.currentFrame, end, index, targets, Math.round, 0, 0, 1);
+				if (pt) {
+					pt.op = p;
+				}
+
+			} else if (target[p] != null) {
+				this.add(target, p, "get", end);
+			}
+
+		}
+	},
+	render(ratio, data) {
+		let pt = data._pt;
+		while (pt) {
+			pt.r(ratio, pt.d);
+			pt = pt._next;
+		}
+		if (data.target.cacheID) {
+			data.target.updateCache();
+		}
+	},
+	register: _initCore
+};
+
+EaselPlugin.registerCreateJS = createjs => {
+	_createJS = createjs;
+};
+
+_getGSAP() && gsap.registerPlugin(EaselPlugin);
+
+export { EaselPlugin, EaselPlugin as default };
diff --git a/dist/Flip.cjs b/dist/Flip.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..2bb97b34133c3919c91684cfc4df05424ad02f04
--- /dev/null
+++ b/dist/Flip.cjs
@@ -0,0 +1,1038 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+const matrix = require('./shared/gsap.b4b61722.cjs');
+
+/*!
+ * Flip 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let _id = 1,
+	_toArray, gsap, _batch, _batchAction, _body, _closestTenth, _getStyleSaver,
+	_forEachBatch = (batch, name) => batch.actions.forEach(a => a.vars[name] && a.vars[name](a)),
+	_batchLookup = {},
+	_RAD2DEG = 180 / Math.PI,
+	_DEG2RAD = Math.PI / 180,
+	_emptyObj = {},
+	_dashedNameLookup = {},
+	_memoizedRemoveProps = {},
+	_listToArray = list => typeof(list) === "string" ? list.split(" ").join("").split(",") : list, // removes extra spaces contaminating the names, returns an Array.
+	_callbacks = _listToArray("onStart,onUpdate,onComplete,onReverseComplete,onInterrupt"),
+	_removeProps = _listToArray("transform,transformOrigin,width,height,position,top,left,opacity,zIndex,maxWidth,maxHeight,minWidth,minHeight"),
+	_getEl = target => _toArray(target)[0] || console.warn("Element not found:", target),
+	_round = value => Math.round(value * 10000) / 10000 || 0,
+	_toggleClass = (targets, className, action) => targets.forEach(el => el.classList[action](className)),
+	_reserved = {zIndex:1, kill:1, simple:1, spin:1, clearProps:1, targets:1, toggleClass:1, onComplete:1, onUpdate:1, onInterrupt:1, onStart:1, delay:1, repeat:1, repeatDelay:1, yoyo:1, scale:1, fade:1, absolute:1, props:1, onEnter:1, onLeave:1, custom:1, paused:1, nested:1, prune:1, absoluteOnLeave: 1},
+	_fitReserved = {zIndex:1, simple:1, clearProps:1, scale:1, absolute:1, fitChild:1, getVars:1, props:1},
+	_camelToDashed = p => p.replace(/([A-Z])/g, "-$1").toLowerCase(),
+	_copy = (obj, exclude) => {
+		let result = {}, p;
+		for (p in obj) {
+			exclude[p] || (result[p] = obj[p]);
+		}
+		return result;
+	},
+	_memoizedProps = {},
+	_memoizeProps = props => {
+		let p = _memoizedProps[props] = _listToArray(props);
+		_memoizedRemoveProps[props] = p.concat(_removeProps);
+		return p;
+	},
+	_getInverseGlobalMatrix = el => { // integrates caching for improved performance
+		let cache = el._gsap || gsap.core.getCache(el);
+		if (cache.gmCache === gsap.ticker.frame) {
+			return cache.gMatrix;
+		}
+		cache.gmCache = gsap.ticker.frame;
+		return (cache.gMatrix = matrix.getGlobalMatrix(el, true, false, true));
+	},
+	_getDOMDepth = (el, invert, level = 0) => { // In invert is true, the sibling depth is increments of 1, and parent/nesting depth is increments of 1000. This lets us order elements in an Array to reflect document flow.
+		let parent = el.parentNode,
+			inc = 1000 * (10 ** level) * (invert ? -1 : 1),
+			l = invert ? -inc * 900 : 0;
+		while (el) {
+			l += inc;
+			el = el.previousSibling;
+		}
+		return parent ? l + _getDOMDepth(parent, invert, level + 1) : l;
+	},
+	_orderByDOMDepth = (comps, invert, isElStates) => {
+		comps.forEach(comp => comp.d = _getDOMDepth(isElStates ? comp.element : comp.t, invert));
+		comps.sort((c1, c2) => c1.d - c2.d);
+		return comps;
+	},
+	_recordInlineStyles = (elState, props) => { // records the current inline CSS properties into an Array in alternating name/value pairs that's stored in a "css" property on the state object so that we can revert later.
+		let style = elState.element.style,
+			a = elState.css = elState.css || [],
+			i = props.length,
+			p, v;
+		while (i--) {
+			p = props[i];
+			v = style[p] || style.getPropertyValue(p);
+			a.push(v ? p : _dashedNameLookup[p] || (_dashedNameLookup[p] = _camelToDashed(p)), v);
+		}
+		return style;
+	},
+	_applyInlineStyles = state => {
+		let css = state.css,
+			style = state.element.style,
+			i = 0;
+		state.cache.uncache = 1;
+		for (; i < css.length; i+=2) {
+			css[i+1] ? (style[css[i]] = css[i+1]) : style.removeProperty(css[i]);
+		}
+		if (!css[css.indexOf("transform")+1] && style.translate) { // CSSPlugin adds scale, translate, and rotate inline CSS as "none" in order to keep CSS rules from contaminating transforms.
+			style.removeProperty("translate");
+			style.removeProperty("scale");
+			style.removeProperty("rotate");
+		}
+	},
+	_setFinalStates = (comps, onlyTransforms) => {
+		comps.forEach(c => c.a.cache.uncache = 1);
+		onlyTransforms || comps.finalStates.forEach(_applyInlineStyles);
+	},
+	_absoluteProps = "paddingTop,paddingRight,paddingBottom,paddingLeft,gridArea,transition".split(","), // properties that we must record just
+	_makeAbsolute = (elState, fallbackNode, ignoreBatch) => {
+		let { element, width, height, uncache, getProp } = elState,
+			style = element.style,
+			i = 4,
+			result, displayIsNone, cs;
+		(typeof(fallbackNode) !== "object") && (fallbackNode = elState);
+		if (_batch && ignoreBatch !== 1) {
+			_batch._abs.push({t: element, b: elState, a: elState, sd: 0});
+			_batch._final.push(() => (elState.cache.uncache = 1) && _applyInlineStyles(elState));
+			return element;
+		}
+		displayIsNone = getProp("display") === "none";
+
+		if (!elState.isVisible || displayIsNone) {
+			displayIsNone && (_recordInlineStyles(elState, ["display"]).display = fallbackNode.display);
+			elState.matrix = fallbackNode.matrix;
+			elState.width = width = elState.width || fallbackNode.width;
+			elState.height = height = elState.height || fallbackNode.height;
+		}
+
+		_recordInlineStyles(elState, _absoluteProps);
+		cs = window.getComputedStyle(element);
+		while (i--) {
+			style[_absoluteProps[i]] = cs[_absoluteProps[i]]; // record paddings as px-based because if removed from grid, percentage-based ones could be altered.
+		}
+		style.gridArea = "1 / 1 / 1 / 1";
+		style.transition = "none";
+
+		style.position = "absolute";
+		style.width = width + "px";
+		style.height = height + "px";
+		style.top || (style.top = "0px");
+		style.left || (style.left = "0px");
+		if (uncache) {
+			result = new ElementState(element);
+		} else { // better performance
+			result = _copy(elState, _emptyObj);
+			result.position = "absolute";
+			if (elState.simple) {
+				let bounds = element.getBoundingClientRect();
+				result.matrix = new matrix.Matrix2D(1, 0, 0, 1, bounds.left + matrix._getDocScrollLeft(), bounds.top + matrix._getDocScrollTop());
+			} else {
+				result.matrix = matrix.getGlobalMatrix(element, false, false, true);
+			}
+		}
+		result = _fit(result, elState, true);
+		elState.x = _closestTenth(result.x, 0.01);
+		elState.y = _closestTenth(result.y, 0.01);
+		return element;
+	},
+	_filterComps = (comps, targets) => {
+		if (targets !== true) {
+			targets = _toArray(targets);
+			comps = comps.filter(c => {
+				if (targets.indexOf((c.sd < 0 ? c.b : c.a).element) !== -1) {
+				    return true;
+				} else {
+					c.t._gsap.renderTransform(1); // we must force transforms to render on anything that isn't being made position: absolute, otherwise the absolute position happens and then when animation begins it applies transforms which can create a new stacking context, throwing off positioning!
+					if (c.b.isVisible) {
+						c.t.style.width = c.b.width + "px"; // otherwise things can collapse when contents are made position: absolute.
+						c.t.style.height = c.b.height + "px";
+					}
+				}
+			});
+		}
+		return comps;
+	},
+	_makeCompsAbsolute = comps => _orderByDOMDepth(comps, true).forEach(c => (c.a.isVisible || c.b.isVisible) && _makeAbsolute(c.sd < 0 ? c.b : c.a, c.b, 1)),
+	_findElStateInState = (state, other) => (other && state.idLookup[_parseElementState(other).id]) || state.elementStates[0],
+	_parseElementState = (elOrNode, props, simple, other) => elOrNode instanceof ElementState ? elOrNode : elOrNode instanceof FlipState ? _findElStateInState(elOrNode, other) : new ElementState(typeof(elOrNode) === "string" ? _getEl(elOrNode) || console.warn(elOrNode + " not found") : elOrNode, props, simple),
+	_recordProps = (elState, props) => {
+		let getProp = gsap.getProperty(elState.element, null, "native"),
+			obj = elState.props = {},
+			i = props.length;
+		while (i--) {
+			obj[props[i]] = (getProp(props[i]) + "").trim();
+		}
+		obj.zIndex && (obj.zIndex = parseFloat(obj.zIndex) || 0);
+		return elState;
+	},
+	_applyProps = (element, props) => {
+		let style = element.style || element, // could pass in a vars object.
+			p;
+		for (p in props) {
+			style[p] = props[p];
+		}
+	},
+	_getID = el => {
+		let id = el.getAttribute("data-flip-id");
+		id || el.setAttribute("data-flip-id", (id = "auto-" + _id++));
+		return id;
+	},
+	_elementsFromElementStates = elStates => elStates.map(elState => elState.element),
+	_handleCallback = (callback, elStates, tl) => callback && elStates.length && tl.add(callback(_elementsFromElementStates(elStates), tl, new FlipState(elStates, 0, true)), 0),
+
+	_fit = (fromState, toState, scale, applyProps, fitChild, vars) => {
+		let { element, cache, parent, x, y } = fromState,
+			{ width, height, scaleX, scaleY, rotation, bounds } = toState,
+			styles = vars && _getStyleSaver && _getStyleSaver(element, "transform"), // requires at least 3.11.5
+			dimensionState = fromState,
+			{e, f} = toState.matrix,
+			deep = fromState.bounds.width !== bounds.width || fromState.bounds.height !== bounds.height || fromState.scaleX !== scaleX || fromState.scaleY !== scaleY || fromState.rotation !== rotation,
+			simple = !deep && fromState.simple && toState.simple && !fitChild,
+			skewX, fromPoint, toPoint, getProp, parentMatrix, matrix$1, bbox;
+		if (simple || !parent) {
+			scaleX = scaleY = 1;
+			rotation = skewX = 0;
+		} else {
+			parentMatrix = _getInverseGlobalMatrix(parent);
+			matrix$1 = parentMatrix.clone().multiply(toState.ctm ? toState.matrix.clone().multiply(toState.ctm) : toState.matrix); // root SVG elements have a ctm that we must factor out (for example, viewBox:"0 0 94 94" with a width of 200px would scale the internals by 2.127 but when we're matching the size of the root <svg> element itself, that scaling shouldn't factor in!)
+			rotation = _round(Math.atan2(matrix$1.b, matrix$1.a) * _RAD2DEG);
+			skewX = _round(Math.atan2(matrix$1.c, matrix$1.d) * _RAD2DEG + rotation) % 360; // in very rare cases, minor rounding might end up with 360 which should be 0.
+			scaleX = Math.sqrt(matrix$1.a ** 2 + matrix$1.b ** 2);
+			scaleY = Math.sqrt(matrix$1.c ** 2 + matrix$1.d ** 2) * Math.cos(skewX * _DEG2RAD);
+			if (fitChild) {
+				fitChild = _toArray(fitChild)[0];
+				getProp = gsap.getProperty(fitChild);
+				bbox = fitChild.getBBox && typeof(fitChild.getBBox) === "function" && fitChild.getBBox();
+				dimensionState = {scaleX: getProp("scaleX"), scaleY: getProp("scaleY"), width: bbox ? bbox.width : Math.ceil(parseFloat(getProp("width", "px"))), height: bbox ? bbox.height : parseFloat(getProp("height", "px")) };
+			}
+			cache.rotation = rotation + "deg";
+			cache.skewX = skewX + "deg";
+		}
+		if (scale) {
+			scaleX *= width === dimensionState.width || !dimensionState.width ? 1 : width / dimensionState.width; // note if widths are both 0, we should make scaleX 1 - some elements have box-sizing that incorporates padding, etc. and we don't want it to collapse in that case.
+			scaleY *= height === dimensionState.height || !dimensionState.height ? 1 : height / dimensionState.height;
+			cache.scaleX = scaleX;
+			cache.scaleY = scaleY;
+		} else {
+			width = _closestTenth(width * scaleX / dimensionState.scaleX, 0);
+			height = _closestTenth(height * scaleY / dimensionState.scaleY, 0);
+			element.style.width = width + "px";
+			element.style.height = height + "px";
+		}
+		// if (fromState.isFixed) { // commented out because it's now taken care of in getGlobalMatrix() with a flag at the end.
+		// 	e -= _getDocScrollLeft();
+		// 	f -= _getDocScrollTop();
+		// }
+		applyProps && _applyProps(element, toState.props);
+		if (simple || !parent) {
+			x += e - fromState.matrix.e;
+			y += f - fromState.matrix.f;
+		} else if (deep || parent !== toState.parent) {
+			cache.renderTransform(1, cache);
+			matrix$1 = matrix.getGlobalMatrix(fitChild || element, false, false, true);
+			fromPoint = parentMatrix.apply({x: matrix$1.e, y: matrix$1.f});
+			toPoint = parentMatrix.apply({x: e, y: f});
+			x += toPoint.x - fromPoint.x;
+			y += toPoint.y - fromPoint.y;
+		} else { // use a faster/cheaper algorithm if we're just moving x/y
+			parentMatrix.e = parentMatrix.f = 0;
+			toPoint = parentMatrix.apply({x: e - fromState.matrix.e, y: f - fromState.matrix.f});
+			x += toPoint.x;
+			y += toPoint.y;
+		}
+		x = _closestTenth(x, 0.02);
+		y = _closestTenth(y, 0.02);
+		if (vars && !(vars instanceof ElementState)) { // revert
+			styles && styles.revert();
+		} else { // or apply the transform immediately
+			cache.x = x + "px";
+			cache.y = y + "px";
+			cache.renderTransform(1, cache);
+		}
+		if (vars) {
+			vars.x = x;
+			vars.y = y;
+			vars.rotation = rotation;
+			vars.skewX = skewX;
+			if (scale) {
+				vars.scaleX = scaleX;
+				vars.scaleY = scaleY;
+			} else {
+				vars.width = width;
+				vars.height = height;
+			}
+		}
+		return vars || cache;
+	},
+
+	_parseState = (targetsOrState, vars) => targetsOrState instanceof FlipState ? targetsOrState : new FlipState(targetsOrState, vars),
+	_getChangingElState = (toState, fromState, id) => {
+		let to1 = toState.idLookup[id],
+			to2 = toState.alt[id];
+		return to2.isVisible && (!(fromState.getElementState(to2.element) || to2).isVisible || !to1.isVisible) ? to2 : to1;
+	},
+	_bodyMetrics = [], _bodyProps = "width,height,overflowX,overflowY".split(","), _bodyLocked,
+	_lockBodyScroll = lock => { // if there's no scrollbar, we should lock that so that measurements don't get affected by temporary repositioning, like if something is centered in the window.
+		if (lock !== _bodyLocked) {
+			let s = _body.style,
+				w = _body.clientWidth === window.outerWidth,
+				h = _body.clientHeight === window.outerHeight,
+				i = 4;
+			if (lock && (w || h)) {
+				while (i--) {
+					_bodyMetrics[i] = s[_bodyProps[i]];
+				}
+				if (w) {
+					s.width = _body.clientWidth + "px";
+					s.overflowY = "hidden";
+				}
+				if (h) {
+					s.height = _body.clientHeight + "px";
+					s.overflowX = "hidden";
+				}
+				_bodyLocked= lock;
+			} else if (_bodyLocked) {
+				while (i--) {
+					_bodyMetrics[i] ? (s[_bodyProps[i]] = _bodyMetrics[i]) : s.removeProperty(_camelToDashed(_bodyProps[i]));
+				}
+				_bodyLocked = lock;
+			}
+		}
+	},
+
+	_fromTo = (fromState, toState, vars, relative) => { // relative is -1 if "from()", and 1 if "to()"
+		(fromState instanceof FlipState && toState instanceof FlipState) || console.warn("Not a valid state object.");
+		vars = vars || {};
+		let { clearProps, onEnter, onLeave, absolute, absoluteOnLeave, custom, delay, paused, repeat, repeatDelay, yoyo, toggleClass, nested, zIndex, scale, fade, stagger, spin, prune } = vars,
+			props = ("props" in vars ? vars : fromState).props,
+			tweenVars = _copy(vars, _reserved),
+			animation = gsap.timeline({ delay, paused, repeat, repeatDelay, yoyo, data: "isFlip" }),
+			remainingProps = tweenVars,
+			entering = [],
+			leaving = [],
+			comps = [],
+			swapOutTargets = [],
+			spinNum = spin === true ? 1 : spin || 0,
+			spinFunc = typeof(spin) === "function" ? spin : () => spinNum,
+			interrupted = fromState.interrupted || toState.interrupted,
+			addFunc = animation[relative !== 1 ? "to" : "from"],
+			v, p, endTime, i, el, comp, state, targets, finalStates, fromNode, toNode, run, a, b;
+		//relative || (toState = (new FlipState(toState.targets, {props: props})).fit(toState, scale));
+		for (p in toState.idLookup) {
+			toNode = !toState.alt[p] ? toState.idLookup[p] : _getChangingElState(toState, fromState, p);
+			el = toNode.element;
+			fromNode = fromState.idLookup[p];
+			fromState.alt[p] && el === fromNode.element && (fromState.alt[p].isVisible || !toNode.isVisible) && (fromNode = fromState.alt[p]);
+			if (fromNode) {
+				comp = {t: el, b: fromNode, a: toNode, sd: fromNode.element === el ? 0 : toNode.isVisible ? 1 : -1};
+				comps.push(comp);
+				if (comp.sd) {
+					if (comp.sd < 0) {
+						comp.b = toNode;
+						comp.a = fromNode;
+					}
+					// for swapping elements that got interrupted, we must re-record the inline styles to ensure they're not tainted. Remember, .batch() permits getState() not to force in-progress flips to their end state.
+					interrupted && _recordInlineStyles(comp.b, props ? _memoizedRemoveProps[props] : _removeProps);
+					fade && comps.push(comp.swap = {t: fromNode.element, b: comp.b, a: comp.a, sd: -comp.sd, swap: comp});
+				}
+				el._flip = fromNode.element._flip = _batch ? _batch.timeline : animation;
+			} else if (toNode.isVisible) {
+				comps.push({t: el, b: _copy(toNode, {isVisible:1}), a: toNode, sd: 0, entering: 1}); // to include it in the "entering" Array and do absolute positioning if necessary
+				el._flip = _batch ? _batch.timeline : animation;
+			}
+		}
+
+		props && (_memoizedProps[props] || _memoizeProps(props)).forEach(p => tweenVars[p] = i => comps[i].a.props[p]);
+		comps.finalStates = finalStates = [];
+
+		run = () => {
+			_orderByDOMDepth(comps);
+			_lockBodyScroll(true); // otherwise, measurements may get thrown off when things get fit.
+			// TODO: cache the matrix, especially for parent because it'll probably get reused quite a bit, but lock it to a particular cycle(?).
+			for (i = 0; i < comps.length; i++) {
+				comp = comps[i];
+				a = comp.a;
+				b = comp.b;
+				if (prune && !a.isDifferent(b) && !comp.entering) { // only flip if things changed! Don't omit it from comps initially because that'd prevent the element from being positioned absolutely (if necessary)
+					comps.splice(i--, 1);
+				} else {
+					el = comp.t;
+					nested && !(comp.sd < 0) && i && (a.matrix = matrix.getGlobalMatrix(el, false, false, true)); // moving a parent affects the position of children
+					if (b.isVisible && a.isVisible) {
+						if (comp.sd < 0) { // swapping OUT (swap direction of -1 is out)
+							state = new ElementState(el, props, fromState.simple);
+							_fit(state, a, scale, 0, 0, state);
+							state.matrix = matrix.getGlobalMatrix(el, false, false, true);
+							state.css = comp.b.css;
+							comp.a = a = state;
+							fade && (el.style.opacity = interrupted ? b.opacity : a.opacity);
+							stagger && swapOutTargets.push(el);
+						} else if (comp.sd > 0 && fade) { // swapping IN (swap direction of 1 is in)
+							el.style.opacity = interrupted ? a.opacity - b.opacity : "0";
+						}
+						_fit(a, b, scale, props);
+
+					} else if (b.isVisible !== a.isVisible) { // either entering or leaving (one side is invisible)
+						if (!b.isVisible) { // entering
+							a.isVisible && entering.push(a);
+							comps.splice(i--, 1);
+						} else if (!a.isVisible) { // leaving
+							b.css = a.css;
+							leaving.push(b);
+							comps.splice(i--, 1);
+							absolute && nested && _fit(a, b, scale, props);
+						}
+					}
+					if (!scale) {
+						el.style.maxWidth = Math.max(a.width, b.width) + "px";
+						el.style.maxHeight = Math.max(a.height, b.height) + "px";
+						el.style.minWidth = Math.min(a.width, b.width) + "px";
+						el.style.minHeight = Math.min(a.height, b.height) + "px";
+					}
+					nested && toggleClass && el.classList.add(toggleClass);
+				}
+				finalStates.push(a);
+			}
+			let classTargets;
+			if (toggleClass) {
+				classTargets = finalStates.map(s => s.element);
+				nested && classTargets.forEach(e => e.classList.remove(toggleClass)); // there could be a delay, so don't leave the classes applied (we'll do it in a timeline callback)
+			}
+
+			_lockBodyScroll(false);
+
+			if (scale) {
+				tweenVars.scaleX = i => comps[i].a.scaleX;
+				tweenVars.scaleY = i => comps[i].a.scaleY;
+			} else {
+				tweenVars.width = i => comps[i].a.width + "px";
+				tweenVars.height = i => comps[i].a.height + "px";
+				tweenVars.autoRound = vars.autoRound || false;
+			}
+			tweenVars.x = i => comps[i].a.x + "px";
+			tweenVars.y = i => comps[i].a.y + "px";
+			tweenVars.rotation = i => comps[i].a.rotation + (spin ? spinFunc(i, targets[i], targets) * 360 : 0);
+			tweenVars.skewX = i => comps[i].a.skewX;
+
+			targets = comps.map(c => c.t);
+
+			if (zIndex || zIndex === 0) {
+				tweenVars.modifiers = {zIndex: () => zIndex};
+				tweenVars.zIndex = zIndex;
+				tweenVars.immediateRender = vars.immediateRender !== false;
+			}
+
+			fade && (tweenVars.opacity = i => comps[i].sd < 0 ? 0 : comps[i].sd > 0 ? comps[i].a.opacity : "+=0");
+
+			if (swapOutTargets.length) {
+				stagger = gsap.utils.distribute(stagger);
+				let dummyArray = targets.slice(swapOutTargets.length);
+				tweenVars.stagger = (i, el) => stagger(~swapOutTargets.indexOf(el) ? targets.indexOf(comps[i].swap.t) : i, el, dummyArray);
+			}
+
+			// // for testing...
+			// gsap.delayedCall(vars.data ? 50 : 1, function() {
+			// 	animation.eventCallback("onComplete", () => _setFinalStates(comps, !clearProps));
+			// 	addFunc.call(animation, targets, tweenVars, 0).play();
+			// });
+			// return;
+
+			_callbacks.forEach(name => vars[name] && animation.eventCallback(name, vars[name], vars[name + "Params"])); // apply callbacks to the timeline, not tweens (because "custom" timing can make multiple tweens)
+
+			if (custom && targets.length) { // bust out the custom properties as their own tweens so they can use different eases, durations, etc.
+				remainingProps = _copy(tweenVars, _reserved);
+				if ("scale" in custom) {
+					custom.scaleX = custom.scaleY = custom.scale;
+					delete custom.scale;
+				}
+				for (p in custom) {
+					v = _copy(custom[p], _fitReserved);
+					v[p] = tweenVars[p];
+					!("duration" in v) && ("duration" in tweenVars) && (v.duration = tweenVars.duration);
+					v.stagger = tweenVars.stagger;
+					addFunc.call(animation, targets, v, 0);
+					delete remainingProps[p];
+				}
+			}
+			if (targets.length || leaving.length || entering.length) {
+				toggleClass && animation.add(() => _toggleClass(classTargets, toggleClass, animation._zTime < 0 ? "remove" : "add"), 0) && !paused && _toggleClass(classTargets, toggleClass, "add");
+				targets.length && addFunc.call(animation, targets, remainingProps, 0);
+			}
+
+			_handleCallback(onEnter, entering, animation);
+			_handleCallback(onLeave, leaving, animation);
+
+			let batchTl = _batch && _batch.timeline;
+
+			if (batchTl) {
+				batchTl.add(animation, 0);
+				_batch._final.push(() => _setFinalStates(comps, !clearProps));
+			}
+
+			endTime = animation.duration();
+			animation.call(() => {
+				let forward = animation.time() >= endTime;
+				forward && !batchTl && _setFinalStates(comps, !clearProps);
+				toggleClass && _toggleClass(classTargets, toggleClass, forward ? "remove" : "add");
+			});
+		};
+
+		absoluteOnLeave && (absolute = comps.filter(comp => !comp.sd && !comp.a.isVisible && comp.b.isVisible).map(comp => comp.a.element));
+		if (_batch) {
+			absolute && _batch._abs.push(..._filterComps(comps, absolute));
+			_batch._run.push(run);
+		} else {
+			absolute && _makeCompsAbsolute(_filterComps(comps, absolute)); // when making absolute, we must go in a very particular order so that document flow changes don't affect things. Don't make it visible if both the before and after states are invisible! There's no point, and it could make things appear visible during the flip that shouldn't be.
+			run();
+		}
+
+		let anim = _batch ? _batch.timeline : animation;
+		anim.revert = () => _killFlip(anim, 1, 1); // a Flip timeline should behave very different when reverting - it should actually jump to the end so that styles get cleared out.
+
+		return anim;
+	},
+	_interrupt = tl => {
+		tl.vars.onInterrupt && tl.vars.onInterrupt.apply(tl, tl.vars.onInterruptParams || []);
+		tl.getChildren(true, false, true).forEach(_interrupt);
+	},
+	_killFlip = (tl, action, force) => { // action: 0 = nothing, 1 = complete, 2 = only kill (don't complete)
+		if (tl && tl.progress() < 1 && (!tl.paused() || force)) {
+			if (action) {
+				_interrupt(tl);
+				action < 2 && tl.progress(1); // we should also kill it in case it was added to a parent timeline.
+				tl.kill();
+			}
+			return true;
+		}
+	},
+	_createLookup = state => {
+		let lookup = state.idLookup = {},
+			alt = state.alt = {},
+			elStates = state.elementStates,
+			i = elStates.length,
+			elState;
+		while (i--) {
+			elState = elStates[i];
+			lookup[elState.id] ? (alt[elState.id] = elState) : (lookup[elState.id] = elState);
+		}
+	};
+
+
+
+
+
+
+class FlipState {
+
+	constructor(targets, vars, targetsAreElementStates) {
+		this.props = vars && vars.props;
+		this.simple = !!(vars && vars.simple);
+		if (targetsAreElementStates) {
+			this.targets = _elementsFromElementStates(targets);
+			this.elementStates = targets;
+			_createLookup(this);
+		} else {
+			this.targets = _toArray(targets);
+			let soft = vars && (vars.kill === false || (vars.batch && !vars.kill));
+			_batch && !soft && _batch._kill.push(this);
+			this.update(soft || !!_batch); // when batching, don't force in-progress flips to their end; we need to do that AFTER all getStates() are called.
+		}
+	}
+
+	update(soft) {
+		this.elementStates = this.targets.map(el => new ElementState(el, this.props, this.simple));
+		_createLookup(this);
+		this.interrupt(soft);
+		this.recordInlineStyles();
+		return this;
+	}
+
+	clear() {
+		this.targets.length = this.elementStates.length = 0;
+		_createLookup(this);
+		return this;
+	}
+
+	fit(state, scale, nested) {
+		let elStatesInOrder = _orderByDOMDepth(this.elementStates.slice(0), false, true),
+			toElStates = (state || this).idLookup,
+			i = 0,
+			fromNode, toNode;
+		for (; i < elStatesInOrder.length; i++) {
+			fromNode = elStatesInOrder[i];
+			nested && (fromNode.matrix = matrix.getGlobalMatrix(fromNode.element, false, false, true)); // moving a parent affects the position of children
+			toNode = toElStates[fromNode.id];
+			toNode && _fit(fromNode, toNode, scale, true, 0, fromNode);
+			fromNode.matrix = matrix.getGlobalMatrix(fromNode.element, false, false, true);
+		}
+		return this;
+	}
+
+	getProperty(element, property) {
+		let es = this.getElementState(element) || _emptyObj;
+		return (property in es ? es : es.props || _emptyObj)[property];
+	}
+
+	add(state) {
+		let i = state.targets.length,
+			lookup = this.idLookup,
+			alt = this.alt,
+			index, es, es2;
+		while (i--) {
+			es = state.elementStates[i];
+			es2 = lookup[es.id];
+			if (es2 && (es.element === es2.element || (alt[es.id] && alt[es.id].element === es.element))) { // if the flip id is already in this FlipState, replace it!
+				index = this.elementStates.indexOf(es.element === es2.element ? es2 : alt[es.id]);
+				this.targets.splice(index, 1, state.targets[i]);
+				this.elementStates.splice(index, 1, es);
+			} else {
+				this.targets.push(state.targets[i]);
+				this.elementStates.push(es);
+			}
+		}
+		state.interrupted && (this.interrupted = true);
+		state.simple || (this.simple = false);
+		_createLookup(this);
+		return this;
+	}
+
+	compare(state) {
+		let l1 = state.idLookup,
+			l2 = this.idLookup,
+			unchanged = [],
+			changed = [],
+			enter = [],
+			leave = [],
+			targets = [],
+			a1 = state.alt,
+			a2 = this.alt,
+			place = (s1, s2, el) => (s1.isVisible !== s2.isVisible ? (s1.isVisible ? enter : leave) : s1.isVisible ? changed : unchanged).push(el) && targets.push(el),
+			placeIfDoesNotExist = (s1, s2, el) => targets.indexOf(el) < 0 && place(s1, s2, el),
+			s1, s2, p, el, s1Alt, s2Alt, c1, c2;
+		for (p in l1) {
+			s1Alt = a1[p];
+			s2Alt = a2[p];
+			s1 = !s1Alt ? l1[p] : _getChangingElState(state, this, p);
+			el = s1.element;
+			s2 = l2[p];
+			if (s2Alt) {
+				c2 = s2.isVisible || (!s2Alt.isVisible && el === s2.element) ? s2 : s2Alt;
+				c1 = s1Alt && !s1.isVisible && !s1Alt.isVisible && c2.element === s1Alt.element ? s1Alt : s1;
+				//c1.element !== c2.element && c1.element === s2.element && (c2 = s2);
+				if (c1.isVisible && c2.isVisible && c1.element !== c2.element) { // swapping, so force into "changed" array
+					(c1.isDifferent(c2) ? changed : unchanged).push(c1.element, c2.element);
+					targets.push(c1.element, c2.element);
+				} else {
+					place(c1, c2, c1.element);
+				}
+				s1Alt && c1.element === s1Alt.element && (s1Alt = l1[p]);
+				placeIfDoesNotExist(c1.element !== s2.element && s1Alt ? s1Alt : c1, s2, s2.element);
+				placeIfDoesNotExist(s1Alt && s1Alt.element === s2Alt.element ? s1Alt : c1, s2Alt, s2Alt.element);
+				s1Alt && placeIfDoesNotExist(s1Alt, s2Alt.element === s1Alt.element ? s2Alt : s2, s1Alt.element);
+			} else {
+				!s2 ? enter.push(el) : !s2.isDifferent(s1) ? unchanged.push(el) : place(s1, s2, el);
+				s1Alt && placeIfDoesNotExist(s1Alt, s2, s1Alt.element);
+			}
+		}
+		for (p in l2) {
+			if (!l1[p]) {
+				leave.push(l2[p].element);
+				a2[p] && leave.push(a2[p].element);
+			}
+		}
+		return {changed, unchanged, enter, leave};
+	}
+
+	recordInlineStyles() {
+		let props = _memoizedRemoveProps[this.props] || _removeProps,
+			i = this.elementStates.length;
+		while (i--) {
+			_recordInlineStyles(this.elementStates[i], props);
+		}
+	}
+
+	interrupt(soft) { // soft = DON'T force in-progress flip animations to completion (like when running a batch, we can't immediately kill flips when getting states because it could contaminate positioning and other .getState() calls that will run in the batch (we kill AFTER all the .getState() calls complete).
+		let timelines = [];
+		this.targets.forEach(t => {
+			let tl = t._flip,
+				foundInProgress = _killFlip(tl, soft ? 0 : 1);
+			soft && foundInProgress && timelines.indexOf(tl) < 0 && tl.add(() => this.updateVisibility());
+			foundInProgress && timelines.push(tl);
+		});
+		!soft && timelines.length && this.updateVisibility(); // if we found an in-progress Flip animation, we must record all the values in their current state at that point BUT we should update the isVisible value AFTER pushing that flip to completion so that elements that are entering or leaving will populate those Arrays properly.
+		this.interrupted || (this.interrupted = !!timelines.length);
+	}
+
+	updateVisibility() {
+		this.elementStates.forEach(es => {
+			let b = es.element.getBoundingClientRect();
+			es.isVisible = !!(b.width || b.height || b.top || b.left);
+			es.uncache = 1;
+		});
+	}
+
+	getElementState(element) {
+		return this.elementStates[this.targets.indexOf(_getEl(element))];
+	}
+
+	makeAbsolute() {
+		return _orderByDOMDepth(this.elementStates.slice(0), true, true).map(_makeAbsolute);
+	}
+
+}
+
+
+
+class ElementState {
+
+	constructor(element, props, simple) {
+		this.element = element;
+		this.update(props, simple);
+	}
+
+	isDifferent(state) {
+		let b1 = this.bounds,
+			b2 = state.bounds;
+		return b1.top !== b2.top || b1.left !== b2.left || b1.width !== b2.width || b1.height !== b2.height || !this.matrix.equals(state.matrix) || this.opacity !== state.opacity || (this.props && state.props && JSON.stringify(this.props) !== JSON.stringify(state.props));
+	}
+
+	update(props, simple) {
+		let self = this,
+			element = self.element,
+			getProp = gsap.getProperty(element),
+			cache = gsap.core.getCache(element),
+			bounds = element.getBoundingClientRect(),
+			bbox = element.getBBox && typeof(element.getBBox) === "function" && element.nodeName.toLowerCase() !== "svg" && element.getBBox(),
+			m = simple ? new matrix.Matrix2D(1, 0, 0, 1, bounds.left + matrix._getDocScrollLeft(), bounds.top + matrix._getDocScrollTop()) : matrix.getGlobalMatrix(element, false, false, true);
+		self.getProp = getProp;
+		self.element = element;
+		self.id = _getID(element);
+		self.matrix = m;
+		self.cache = cache;
+		self.bounds = bounds;
+		self.isVisible = !!(bounds.width || bounds.height || bounds.left || bounds.top);
+		self.display = getProp("display");
+		self.position = getProp("position");
+		self.parent = element.parentNode;
+		self.x = getProp("x");
+		self.y = getProp("y");
+		self.scaleX = cache.scaleX;
+		self.scaleY = cache.scaleY;
+		self.rotation = getProp("rotation");
+		self.skewX = getProp("skewX");
+		self.opacity = getProp("opacity");
+		self.width =  bbox ? bbox.width : _closestTenth(getProp("width", "px"), 0.04); // round up to the closest 0.1 so that text doesn't wrap.
+		self.height = bbox ? bbox.height : _closestTenth(getProp("height", "px"), 0.04);
+		props && _recordProps(self, _memoizedProps[props] || _memoizeProps(props));
+		self.ctm = element.getCTM && element.nodeName.toLowerCase() === "svg" && matrix._getCTM(element).inverse();
+		self.simple = simple || (_round(m.a) === 1 && !_round(m.b) && !_round(m.c) && _round(m.d) === 1); // allows us to speed through some other tasks if it's not scale/rotated
+		self.uncache = 0;
+	}
+
+}
+
+class FlipAction {
+	constructor(vars, batch) {
+		this.vars = vars;
+		this.batch = batch;
+		this.states = [];
+		this.timeline = batch.timeline;
+	}
+
+	getStateById(id) {
+		let i = this.states.length;
+		while (i--) {
+			if (this.states[i].idLookup[id]) {
+				return this.states[i];
+			}
+		}
+	}
+
+	kill() {
+		this.batch.remove(this);
+	}
+}
+
+class FlipBatch {
+	constructor(id) {
+		this.id = id;
+		this.actions = [];
+		this._kill = [];
+		this._final = [];
+		this._abs = [];
+		this._run = [];
+		this.data = {};
+		this.state = new FlipState();
+		this.timeline = gsap.timeline();
+	}
+
+	add(config) {
+		let result = this.actions.filter(action => action.vars === config);
+		if (result.length) {
+			return result[0];
+		}
+		result = new FlipAction(typeof(config) === "function" ? {animate: config} : config, this);
+		this.actions.push(result);
+		return result;
+	}
+
+	remove(action) {
+		let i = this.actions.indexOf(action);
+		i >= 0 && this.actions.splice(i, 1);
+		return this;
+	}
+
+	getState(merge) {
+		let prevBatch = _batch,
+			prevAction = _batchAction;
+		_batch = this;
+		this.state.clear();
+		this._kill.length = 0;
+		this.actions.forEach(action => {
+			if (action.vars.getState) {
+				action.states.length = 0;
+				_batchAction = action;
+				action.state = action.vars.getState(action);
+			}
+			merge && action.states.forEach(s => this.state.add(s));
+		});
+		_batchAction = prevAction;
+		_batch = prevBatch;
+		this.killConflicts();
+		return this;
+	}
+
+	animate() {
+		let prevBatch = _batch,
+			tl = this.timeline,
+			i = this.actions.length,
+			finalStates, endTime;
+		_batch = this;
+		tl.clear();
+		this._abs.length = this._final.length = this._run.length = 0;
+		this.actions.forEach(a => {
+			a.vars.animate && a.vars.animate(a);
+			let onEnter = a.vars.onEnter,
+				onLeave = a.vars.onLeave,
+				targets = a.targets, s, result;
+			if (targets && targets.length && (onEnter || onLeave)) {
+				s = new FlipState();
+				a.states.forEach(state => s.add(state));
+				result = s.compare(Flip.getState(targets));
+				result.enter.length && onEnter && onEnter(result.enter);
+				result.leave.length && onLeave && onLeave(result.leave);
+			}
+		});
+		_makeCompsAbsolute(this._abs);
+		this._run.forEach(f => f());
+		endTime = tl.duration();
+		finalStates = this._final.slice(0);
+		tl.add(() => {
+			if (endTime <= tl.time()) { // only call if moving forward in the timeline (in case it's nested in a timeline that gets reversed)
+				finalStates.forEach(f => f());
+				_forEachBatch(this, "onComplete");
+			}
+		});
+		_batch = prevBatch;
+		while (i--) {
+			this.actions[i].vars.once && this.actions[i].kill();
+		}
+		_forEachBatch(this, "onStart");
+		tl.restart();
+		return this;
+	}
+
+	loadState(done) {
+		done || (done = () => 0);
+		let queue = [];
+		this.actions.forEach(c => {
+			if (c.vars.loadState) {
+				let i, f = targets => {
+					targets && (c.targets = targets);
+					i = queue.indexOf(f);
+					if (~i) {
+						queue.splice(i, 1);
+						queue.length || done();
+					}
+				};
+				queue.push(f);
+				c.vars.loadState(f);
+			}
+		});
+		queue.length || done();
+		return this;
+	}
+
+	setState() {
+		this.actions.forEach(c => c.targets = c.vars.setState && c.vars.setState(c));
+		return this;
+	}
+
+	killConflicts(soft) {
+		this.state.interrupt(soft);
+		this._kill.forEach(state => state.interrupt(soft));
+		return this;
+	}
+
+	run(skipGetState, merge) {
+		if (this !== _batch) {
+			skipGetState || this.getState(merge);
+			this.loadState(() => {
+				if (!this._killed) {
+					this.setState();
+					this.animate();
+				}
+			});
+		}
+		return this;
+	}
+
+	clear(stateOnly) {
+		this.state.clear();
+		stateOnly || (this.actions.length = 0);
+	}
+
+	getStateById(id) {
+		let i = this.actions.length,
+			s;
+		while (i--) {
+			s = this.actions[i].getStateById(id);
+			if (s) {
+				return s;
+			}
+		}
+		return this.state.idLookup[id] && this.state;
+	}
+
+	kill() {
+		this._killed = 1;
+		this.clear();
+		delete _batchLookup[this.id];
+	}
+}
+
+
+class Flip {
+
+	static getState(targets, vars) {
+		let state = _parseState(targets, vars);
+		_batchAction && _batchAction.states.push(state);
+		vars && vars.batch && Flip.batch(vars.batch).state.add(state);
+		return state;
+	}
+
+	static from(state, vars) {
+		vars = vars || {};
+		("clearProps" in vars) || (vars.clearProps = true);
+		return _fromTo(state, _parseState(vars.targets || state.targets, {props: vars.props || state.props, simple: vars.simple, kill: !!vars.kill}), vars, -1);
+	}
+
+	static to(state, vars) {
+		return _fromTo(state, _parseState(vars.targets || state.targets, {props: vars.props || state.props, simple: vars.simple, kill: !!vars.kill}), vars, 1);
+	}
+
+	static fromTo(fromState, toState, vars) {
+		return _fromTo(fromState, toState, vars);
+	}
+
+	static fit(fromEl, toEl, vars) {
+		let v = vars ? _copy(vars, _fitReserved) : {},
+			{absolute, scale, getVars, props, runBackwards, onComplete, simple} = vars || v,
+			fitChild = vars && vars.fitChild && _getEl(vars.fitChild),
+			before = _parseElementState(toEl, props, simple, fromEl),
+			after = _parseElementState(fromEl, 0, simple, before),
+			inlineProps = props ? _memoizedRemoveProps[props] : _removeProps,
+			ctx = gsap.context();
+		props && _applyProps(v, before.props);
+		_recordInlineStyles(after, inlineProps);
+		if (runBackwards) {
+			("immediateRender" in v) || (v.immediateRender = true);
+			v.onComplete = function() {
+				_applyInlineStyles(after);
+				onComplete && onComplete.apply(this, arguments);
+			};
+		}
+		absolute && _makeAbsolute(after, before);
+		v = _fit(after, before, scale || fitChild, props, fitChild, v.duration || getVars ? v : 0);
+		ctx && !getVars && ctx.add(() => () => _applyInlineStyles(after));
+		return getVars ? v : v.duration ? gsap.to(after.element, v) : null;
+	}
+
+	static makeAbsolute(targetsOrStates, vars) {
+		return (targetsOrStates instanceof FlipState ? targetsOrStates : new FlipState(targetsOrStates, vars)).makeAbsolute();
+	}
+
+	static batch(id) {
+		id || (id = "default");
+		return _batchLookup[id] || (_batchLookup[id] = new FlipBatch(id));
+	}
+
+	static killFlipsOf(targets, complete) {
+		(targets instanceof FlipState ? targets.targets : _toArray(targets)).forEach(t => t && _killFlip(t._flip, complete !== false ? 1 : 2));
+	}
+
+	static isFlipping(target) {
+		let f = Flip.getByTarget(target);
+		return !!f && f.isActive();
+	}
+
+	static getByTarget(target) {
+		return (_getEl(target) || _emptyObj)._flip;
+	}
+
+	static getElementState(target, props) {
+		return new ElementState(_getEl(target), props);
+	}
+
+	static convertCoordinates(fromElement, toElement, point) {
+		let m = matrix.getGlobalMatrix(toElement, true, true).multiply(matrix.getGlobalMatrix(fromElement));
+		return point ? m.apply(point) : m;
+	}
+
+
+	static register(core) {
+		_body = typeof(document) !== "undefined" && document.body;
+		if (_body) {
+			gsap = core;
+			matrix._setDoc(_body);
+			_toArray = gsap.utils.toArray;
+			_getStyleSaver = gsap.core.getStyleSaver;
+			let snap = gsap.utils.snap(0.1);
+			_closestTenth = (value, add) => snap(parseFloat(value) + add);
+		}
+	}
+}
+
+Flip.version = "3.12.5";
+
+// function whenImagesLoad(el, func) {
+// 	let pending = [],
+// 		onLoad = e => {
+// 			pending.splice(pending.indexOf(e.target), 1);
+// 			e.target.removeEventListener("load", onLoad);
+// 			pending.length || func();
+// 		};
+// 	gsap.utils.toArray(el.tagName.toLowerCase() === "img" ? el : el.querySelectorAll("img")).forEach(img => img.complete || img.addEventListener("load", onLoad) || pending.push(img));
+// 	pending.length || func();
+// }
+
+typeof(window) !== "undefined" && window.gsap && window.gsap.registerPlugin(Flip);
+
+exports.Flip = Flip;
+exports.default = Flip;
diff --git a/dist/Flip.d.cts b/dist/Flip.d.cts
new file mode 100644
index 0000000000000000000000000000000000000000..f3ec93d9c60704a0da64f501e7d3c58f87b91063
--- /dev/null
+++ b/dist/Flip.d.cts
@@ -0,0 +1,1033 @@
+import { g as getGlobalMatrix, _ as _setDoc, M as Matrix2D, a as _getDocScrollLeft, b as _getDocScrollTop, c as _getCTM } from './shared/gsap.7b0323e5.cjs';
+
+/*!
+ * Flip 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let _id = 1,
+	_toArray, gsap, _batch, _batchAction, _body, _closestTenth, _getStyleSaver,
+	_forEachBatch = (batch, name) => batch.actions.forEach(a => a.vars[name] && a.vars[name](a)),
+	_batchLookup = {},
+	_RAD2DEG = 180 / Math.PI,
+	_DEG2RAD = Math.PI / 180,
+	_emptyObj = {},
+	_dashedNameLookup = {},
+	_memoizedRemoveProps = {},
+	_listToArray = list => typeof(list) === "string" ? list.split(" ").join("").split(",") : list, // removes extra spaces contaminating the names, returns an Array.
+	_callbacks = _listToArray("onStart,onUpdate,onComplete,onReverseComplete,onInterrupt"),
+	_removeProps = _listToArray("transform,transformOrigin,width,height,position,top,left,opacity,zIndex,maxWidth,maxHeight,minWidth,minHeight"),
+	_getEl = target => _toArray(target)[0] || console.warn("Element not found:", target),
+	_round = value => Math.round(value * 10000) / 10000 || 0,
+	_toggleClass = (targets, className, action) => targets.forEach(el => el.classList[action](className)),
+	_reserved = {zIndex:1, kill:1, simple:1, spin:1, clearProps:1, targets:1, toggleClass:1, onComplete:1, onUpdate:1, onInterrupt:1, onStart:1, delay:1, repeat:1, repeatDelay:1, yoyo:1, scale:1, fade:1, absolute:1, props:1, onEnter:1, onLeave:1, custom:1, paused:1, nested:1, prune:1, absoluteOnLeave: 1},
+	_fitReserved = {zIndex:1, simple:1, clearProps:1, scale:1, absolute:1, fitChild:1, getVars:1, props:1},
+	_camelToDashed = p => p.replace(/([A-Z])/g, "-$1").toLowerCase(),
+	_copy = (obj, exclude) => {
+		let result = {}, p;
+		for (p in obj) {
+			exclude[p] || (result[p] = obj[p]);
+		}
+		return result;
+	},
+	_memoizedProps = {},
+	_memoizeProps = props => {
+		let p = _memoizedProps[props] = _listToArray(props);
+		_memoizedRemoveProps[props] = p.concat(_removeProps);
+		return p;
+	},
+	_getInverseGlobalMatrix = el => { // integrates caching for improved performance
+		let cache = el._gsap || gsap.core.getCache(el);
+		if (cache.gmCache === gsap.ticker.frame) {
+			return cache.gMatrix;
+		}
+		cache.gmCache = gsap.ticker.frame;
+		return (cache.gMatrix = getGlobalMatrix(el, true, false, true));
+	},
+	_getDOMDepth = (el, invert, level = 0) => { // In invert is true, the sibling depth is increments of 1, and parent/nesting depth is increments of 1000. This lets us order elements in an Array to reflect document flow.
+		let parent = el.parentNode,
+			inc = 1000 * (10 ** level) * (invert ? -1 : 1),
+			l = invert ? -inc * 900 : 0;
+		while (el) {
+			l += inc;
+			el = el.previousSibling;
+		}
+		return parent ? l + _getDOMDepth(parent, invert, level + 1) : l;
+	},
+	_orderByDOMDepth = (comps, invert, isElStates) => {
+		comps.forEach(comp => comp.d = _getDOMDepth(isElStates ? comp.element : comp.t, invert));
+		comps.sort((c1, c2) => c1.d - c2.d);
+		return comps;
+	},
+	_recordInlineStyles = (elState, props) => { // records the current inline CSS properties into an Array in alternating name/value pairs that's stored in a "css" property on the state object so that we can revert later.
+		let style = elState.element.style,
+			a = elState.css = elState.css || [],
+			i = props.length,
+			p, v;
+		while (i--) {
+			p = props[i];
+			v = style[p] || style.getPropertyValue(p);
+			a.push(v ? p : _dashedNameLookup[p] || (_dashedNameLookup[p] = _camelToDashed(p)), v);
+		}
+		return style;
+	},
+	_applyInlineStyles = state => {
+		let css = state.css,
+			style = state.element.style,
+			i = 0;
+		state.cache.uncache = 1;
+		for (; i < css.length; i+=2) {
+			css[i+1] ? (style[css[i]] = css[i+1]) : style.removeProperty(css[i]);
+		}
+		if (!css[css.indexOf("transform")+1] && style.translate) { // CSSPlugin adds scale, translate, and rotate inline CSS as "none" in order to keep CSS rules from contaminating transforms.
+			style.removeProperty("translate");
+			style.removeProperty("scale");
+			style.removeProperty("rotate");
+		}
+	},
+	_setFinalStates = (comps, onlyTransforms) => {
+		comps.forEach(c => c.a.cache.uncache = 1);
+		onlyTransforms || comps.finalStates.forEach(_applyInlineStyles);
+	},
+	_absoluteProps = "paddingTop,paddingRight,paddingBottom,paddingLeft,gridArea,transition".split(","), // properties that we must record just
+	_makeAbsolute = (elState, fallbackNode, ignoreBatch) => {
+		let { element, width, height, uncache, getProp } = elState,
+			style = element.style,
+			i = 4,
+			result, displayIsNone, cs;
+		(typeof(fallbackNode) !== "object") && (fallbackNode = elState);
+		if (_batch && ignoreBatch !== 1) {
+			_batch._abs.push({t: element, b: elState, a: elState, sd: 0});
+			_batch._final.push(() => (elState.cache.uncache = 1) && _applyInlineStyles(elState));
+			return element;
+		}
+		displayIsNone = getProp("display") === "none";
+
+		if (!elState.isVisible || displayIsNone) {
+			displayIsNone && (_recordInlineStyles(elState, ["display"]).display = fallbackNode.display);
+			elState.matrix = fallbackNode.matrix;
+			elState.width = width = elState.width || fallbackNode.width;
+			elState.height = height = elState.height || fallbackNode.height;
+		}
+
+		_recordInlineStyles(elState, _absoluteProps);
+		cs = window.getComputedStyle(element);
+		while (i--) {
+			style[_absoluteProps[i]] = cs[_absoluteProps[i]]; // record paddings as px-based because if removed from grid, percentage-based ones could be altered.
+		}
+		style.gridArea = "1 / 1 / 1 / 1";
+		style.transition = "none";
+
+		style.position = "absolute";
+		style.width = width + "px";
+		style.height = height + "px";
+		style.top || (style.top = "0px");
+		style.left || (style.left = "0px");
+		if (uncache) {
+			result = new ElementState(element);
+		} else { // better performance
+			result = _copy(elState, _emptyObj);
+			result.position = "absolute";
+			if (elState.simple) {
+				let bounds = element.getBoundingClientRect();
+				result.matrix = new Matrix2D(1, 0, 0, 1, bounds.left + _getDocScrollLeft(), bounds.top + _getDocScrollTop());
+			} else {
+				result.matrix = getGlobalMatrix(element, false, false, true);
+			}
+		}
+		result = _fit(result, elState, true);
+		elState.x = _closestTenth(result.x, 0.01);
+		elState.y = _closestTenth(result.y, 0.01);
+		return element;
+	},
+	_filterComps = (comps, targets) => {
+		if (targets !== true) {
+			targets = _toArray(targets);
+			comps = comps.filter(c => {
+				if (targets.indexOf((c.sd < 0 ? c.b : c.a).element) !== -1) {
+				    return true;
+				} else {
+					c.t._gsap.renderTransform(1); // we must force transforms to render on anything that isn't being made position: absolute, otherwise the absolute position happens and then when animation begins it applies transforms which can create a new stacking context, throwing off positioning!
+					if (c.b.isVisible) {
+						c.t.style.width = c.b.width + "px"; // otherwise things can collapse when contents are made position: absolute.
+						c.t.style.height = c.b.height + "px";
+					}
+				}
+			});
+		}
+		return comps;
+	},
+	_makeCompsAbsolute = comps => _orderByDOMDepth(comps, true).forEach(c => (c.a.isVisible || c.b.isVisible) && _makeAbsolute(c.sd < 0 ? c.b : c.a, c.b, 1)),
+	_findElStateInState = (state, other) => (other && state.idLookup[_parseElementState(other).id]) || state.elementStates[0],
+	_parseElementState = (elOrNode, props, simple, other) => elOrNode instanceof ElementState ? elOrNode : elOrNode instanceof FlipState ? _findElStateInState(elOrNode, other) : new ElementState(typeof(elOrNode) === "string" ? _getEl(elOrNode) || console.warn(elOrNode + " not found") : elOrNode, props, simple),
+	_recordProps = (elState, props) => {
+		let getProp = gsap.getProperty(elState.element, null, "native"),
+			obj = elState.props = {},
+			i = props.length;
+		while (i--) {
+			obj[props[i]] = (getProp(props[i]) + "").trim();
+		}
+		obj.zIndex && (obj.zIndex = parseFloat(obj.zIndex) || 0);
+		return elState;
+	},
+	_applyProps = (element, props) => {
+		let style = element.style || element, // could pass in a vars object.
+			p;
+		for (p in props) {
+			style[p] = props[p];
+		}
+	},
+	_getID = el => {
+		let id = el.getAttribute("data-flip-id");
+		id || el.setAttribute("data-flip-id", (id = "auto-" + _id++));
+		return id;
+	},
+	_elementsFromElementStates = elStates => elStates.map(elState => elState.element),
+	_handleCallback = (callback, elStates, tl) => callback && elStates.length && tl.add(callback(_elementsFromElementStates(elStates), tl, new FlipState(elStates, 0, true)), 0),
+
+	_fit = (fromState, toState, scale, applyProps, fitChild, vars) => {
+		let { element, cache, parent, x, y } = fromState,
+			{ width, height, scaleX, scaleY, rotation, bounds } = toState,
+			styles = vars && _getStyleSaver && _getStyleSaver(element, "transform"), // requires at least 3.11.5
+			dimensionState = fromState,
+			{e, f} = toState.matrix,
+			deep = fromState.bounds.width !== bounds.width || fromState.bounds.height !== bounds.height || fromState.scaleX !== scaleX || fromState.scaleY !== scaleY || fromState.rotation !== rotation,
+			simple = !deep && fromState.simple && toState.simple && !fitChild,
+			skewX, fromPoint, toPoint, getProp, parentMatrix, matrix, bbox;
+		if (simple || !parent) {
+			scaleX = scaleY = 1;
+			rotation = skewX = 0;
+		} else {
+			parentMatrix = _getInverseGlobalMatrix(parent);
+			matrix = parentMatrix.clone().multiply(toState.ctm ? toState.matrix.clone().multiply(toState.ctm) : toState.matrix); // root SVG elements have a ctm that we must factor out (for example, viewBox:"0 0 94 94" with a width of 200px would scale the internals by 2.127 but when we're matching the size of the root <svg> element itself, that scaling shouldn't factor in!)
+			rotation = _round(Math.atan2(matrix.b, matrix.a) * _RAD2DEG);
+			skewX = _round(Math.atan2(matrix.c, matrix.d) * _RAD2DEG + rotation) % 360; // in very rare cases, minor rounding might end up with 360 which should be 0.
+			scaleX = Math.sqrt(matrix.a ** 2 + matrix.b ** 2);
+			scaleY = Math.sqrt(matrix.c ** 2 + matrix.d ** 2) * Math.cos(skewX * _DEG2RAD);
+			if (fitChild) {
+				fitChild = _toArray(fitChild)[0];
+				getProp = gsap.getProperty(fitChild);
+				bbox = fitChild.getBBox && typeof(fitChild.getBBox) === "function" && fitChild.getBBox();
+				dimensionState = {scaleX: getProp("scaleX"), scaleY: getProp("scaleY"), width: bbox ? bbox.width : Math.ceil(parseFloat(getProp("width", "px"))), height: bbox ? bbox.height : parseFloat(getProp("height", "px")) };
+			}
+			cache.rotation = rotation + "deg";
+			cache.skewX = skewX + "deg";
+		}
+		if (scale) {
+			scaleX *= width === dimensionState.width || !dimensionState.width ? 1 : width / dimensionState.width; // note if widths are both 0, we should make scaleX 1 - some elements have box-sizing that incorporates padding, etc. and we don't want it to collapse in that case.
+			scaleY *= height === dimensionState.height || !dimensionState.height ? 1 : height / dimensionState.height;
+			cache.scaleX = scaleX;
+			cache.scaleY = scaleY;
+		} else {
+			width = _closestTenth(width * scaleX / dimensionState.scaleX, 0);
+			height = _closestTenth(height * scaleY / dimensionState.scaleY, 0);
+			element.style.width = width + "px";
+			element.style.height = height + "px";
+		}
+		// if (fromState.isFixed) { // commented out because it's now taken care of in getGlobalMatrix() with a flag at the end.
+		// 	e -= _getDocScrollLeft();
+		// 	f -= _getDocScrollTop();
+		// }
+		applyProps && _applyProps(element, toState.props);
+		if (simple || !parent) {
+			x += e - fromState.matrix.e;
+			y += f - fromState.matrix.f;
+		} else if (deep || parent !== toState.parent) {
+			cache.renderTransform(1, cache);
+			matrix = getGlobalMatrix(fitChild || element, false, false, true);
+			fromPoint = parentMatrix.apply({x: matrix.e, y: matrix.f});
+			toPoint = parentMatrix.apply({x: e, y: f});
+			x += toPoint.x - fromPoint.x;
+			y += toPoint.y - fromPoint.y;
+		} else { // use a faster/cheaper algorithm if we're just moving x/y
+			parentMatrix.e = parentMatrix.f = 0;
+			toPoint = parentMatrix.apply({x: e - fromState.matrix.e, y: f - fromState.matrix.f});
+			x += toPoint.x;
+			y += toPoint.y;
+		}
+		x = _closestTenth(x, 0.02);
+		y = _closestTenth(y, 0.02);
+		if (vars && !(vars instanceof ElementState)) { // revert
+			styles && styles.revert();
+		} else { // or apply the transform immediately
+			cache.x = x + "px";
+			cache.y = y + "px";
+			cache.renderTransform(1, cache);
+		}
+		if (vars) {
+			vars.x = x;
+			vars.y = y;
+			vars.rotation = rotation;
+			vars.skewX = skewX;
+			if (scale) {
+				vars.scaleX = scaleX;
+				vars.scaleY = scaleY;
+			} else {
+				vars.width = width;
+				vars.height = height;
+			}
+		}
+		return vars || cache;
+	},
+
+	_parseState = (targetsOrState, vars) => targetsOrState instanceof FlipState ? targetsOrState : new FlipState(targetsOrState, vars),
+	_getChangingElState = (toState, fromState, id) => {
+		let to1 = toState.idLookup[id],
+			to2 = toState.alt[id];
+		return to2.isVisible && (!(fromState.getElementState(to2.element) || to2).isVisible || !to1.isVisible) ? to2 : to1;
+	},
+	_bodyMetrics = [], _bodyProps = "width,height,overflowX,overflowY".split(","), _bodyLocked,
+	_lockBodyScroll = lock => { // if there's no scrollbar, we should lock that so that measurements don't get affected by temporary repositioning, like if something is centered in the window.
+		if (lock !== _bodyLocked) {
+			let s = _body.style,
+				w = _body.clientWidth === window.outerWidth,
+				h = _body.clientHeight === window.outerHeight,
+				i = 4;
+			if (lock && (w || h)) {
+				while (i--) {
+					_bodyMetrics[i] = s[_bodyProps[i]];
+				}
+				if (w) {
+					s.width = _body.clientWidth + "px";
+					s.overflowY = "hidden";
+				}
+				if (h) {
+					s.height = _body.clientHeight + "px";
+					s.overflowX = "hidden";
+				}
+				_bodyLocked= lock;
+			} else if (_bodyLocked) {
+				while (i--) {
+					_bodyMetrics[i] ? (s[_bodyProps[i]] = _bodyMetrics[i]) : s.removeProperty(_camelToDashed(_bodyProps[i]));
+				}
+				_bodyLocked = lock;
+			}
+		}
+	},
+
+	_fromTo = (fromState, toState, vars, relative) => { // relative is -1 if "from()", and 1 if "to()"
+		(fromState instanceof FlipState && toState instanceof FlipState) || console.warn("Not a valid state object.");
+		vars = vars || {};
+		let { clearProps, onEnter, onLeave, absolute, absoluteOnLeave, custom, delay, paused, repeat, repeatDelay, yoyo, toggleClass, nested, zIndex, scale, fade, stagger, spin, prune } = vars,
+			props = ("props" in vars ? vars : fromState).props,
+			tweenVars = _copy(vars, _reserved),
+			animation = gsap.timeline({ delay, paused, repeat, repeatDelay, yoyo, data: "isFlip" }),
+			remainingProps = tweenVars,
+			entering = [],
+			leaving = [],
+			comps = [],
+			swapOutTargets = [],
+			spinNum = spin === true ? 1 : spin || 0,
+			spinFunc = typeof(spin) === "function" ? spin : () => spinNum,
+			interrupted = fromState.interrupted || toState.interrupted,
+			addFunc = animation[relative !== 1 ? "to" : "from"],
+			v, p, endTime, i, el, comp, state, targets, finalStates, fromNode, toNode, run, a, b;
+		//relative || (toState = (new FlipState(toState.targets, {props: props})).fit(toState, scale));
+		for (p in toState.idLookup) {
+			toNode = !toState.alt[p] ? toState.idLookup[p] : _getChangingElState(toState, fromState, p);
+			el = toNode.element;
+			fromNode = fromState.idLookup[p];
+			fromState.alt[p] && el === fromNode.element && (fromState.alt[p].isVisible || !toNode.isVisible) && (fromNode = fromState.alt[p]);
+			if (fromNode) {
+				comp = {t: el, b: fromNode, a: toNode, sd: fromNode.element === el ? 0 : toNode.isVisible ? 1 : -1};
+				comps.push(comp);
+				if (comp.sd) {
+					if (comp.sd < 0) {
+						comp.b = toNode;
+						comp.a = fromNode;
+					}
+					// for swapping elements that got interrupted, we must re-record the inline styles to ensure they're not tainted. Remember, .batch() permits getState() not to force in-progress flips to their end state.
+					interrupted && _recordInlineStyles(comp.b, props ? _memoizedRemoveProps[props] : _removeProps);
+					fade && comps.push(comp.swap = {t: fromNode.element, b: comp.b, a: comp.a, sd: -comp.sd, swap: comp});
+				}
+				el._flip = fromNode.element._flip = _batch ? _batch.timeline : animation;
+			} else if (toNode.isVisible) {
+				comps.push({t: el, b: _copy(toNode, {isVisible:1}), a: toNode, sd: 0, entering: 1}); // to include it in the "entering" Array and do absolute positioning if necessary
+				el._flip = _batch ? _batch.timeline : animation;
+			}
+		}
+
+		props && (_memoizedProps[props] || _memoizeProps(props)).forEach(p => tweenVars[p] = i => comps[i].a.props[p]);
+		comps.finalStates = finalStates = [];
+
+		run = () => {
+			_orderByDOMDepth(comps);
+			_lockBodyScroll(true); // otherwise, measurements may get thrown off when things get fit.
+			// TODO: cache the matrix, especially for parent because it'll probably get reused quite a bit, but lock it to a particular cycle(?).
+			for (i = 0; i < comps.length; i++) {
+				comp = comps[i];
+				a = comp.a;
+				b = comp.b;
+				if (prune && !a.isDifferent(b) && !comp.entering) { // only flip if things changed! Don't omit it from comps initially because that'd prevent the element from being positioned absolutely (if necessary)
+					comps.splice(i--, 1);
+				} else {
+					el = comp.t;
+					nested && !(comp.sd < 0) && i && (a.matrix = getGlobalMatrix(el, false, false, true)); // moving a parent affects the position of children
+					if (b.isVisible && a.isVisible) {
+						if (comp.sd < 0) { // swapping OUT (swap direction of -1 is out)
+							state = new ElementState(el, props, fromState.simple);
+							_fit(state, a, scale, 0, 0, state);
+							state.matrix = getGlobalMatrix(el, false, false, true);
+							state.css = comp.b.css;
+							comp.a = a = state;
+							fade && (el.style.opacity = interrupted ? b.opacity : a.opacity);
+							stagger && swapOutTargets.push(el);
+						} else if (comp.sd > 0 && fade) { // swapping IN (swap direction of 1 is in)
+							el.style.opacity = interrupted ? a.opacity - b.opacity : "0";
+						}
+						_fit(a, b, scale, props);
+
+					} else if (b.isVisible !== a.isVisible) { // either entering or leaving (one side is invisible)
+						if (!b.isVisible) { // entering
+							a.isVisible && entering.push(a);
+							comps.splice(i--, 1);
+						} else if (!a.isVisible) { // leaving
+							b.css = a.css;
+							leaving.push(b);
+							comps.splice(i--, 1);
+							absolute && nested && _fit(a, b, scale, props);
+						}
+					}
+					if (!scale) {
+						el.style.maxWidth = Math.max(a.width, b.width) + "px";
+						el.style.maxHeight = Math.max(a.height, b.height) + "px";
+						el.style.minWidth = Math.min(a.width, b.width) + "px";
+						el.style.minHeight = Math.min(a.height, b.height) + "px";
+					}
+					nested && toggleClass && el.classList.add(toggleClass);
+				}
+				finalStates.push(a);
+			}
+			let classTargets;
+			if (toggleClass) {
+				classTargets = finalStates.map(s => s.element);
+				nested && classTargets.forEach(e => e.classList.remove(toggleClass)); // there could be a delay, so don't leave the classes applied (we'll do it in a timeline callback)
+			}
+
+			_lockBodyScroll(false);
+
+			if (scale) {
+				tweenVars.scaleX = i => comps[i].a.scaleX;
+				tweenVars.scaleY = i => comps[i].a.scaleY;
+			} else {
+				tweenVars.width = i => comps[i].a.width + "px";
+				tweenVars.height = i => comps[i].a.height + "px";
+				tweenVars.autoRound = vars.autoRound || false;
+			}
+			tweenVars.x = i => comps[i].a.x + "px";
+			tweenVars.y = i => comps[i].a.y + "px";
+			tweenVars.rotation = i => comps[i].a.rotation + (spin ? spinFunc(i, targets[i], targets) * 360 : 0);
+			tweenVars.skewX = i => comps[i].a.skewX;
+
+			targets = comps.map(c => c.t);
+
+			if (zIndex || zIndex === 0) {
+				tweenVars.modifiers = {zIndex: () => zIndex};
+				tweenVars.zIndex = zIndex;
+				tweenVars.immediateRender = vars.immediateRender !== false;
+			}
+
+			fade && (tweenVars.opacity = i => comps[i].sd < 0 ? 0 : comps[i].sd > 0 ? comps[i].a.opacity : "+=0");
+
+			if (swapOutTargets.length) {
+				stagger = gsap.utils.distribute(stagger);
+				let dummyArray = targets.slice(swapOutTargets.length);
+				tweenVars.stagger = (i, el) => stagger(~swapOutTargets.indexOf(el) ? targets.indexOf(comps[i].swap.t) : i, el, dummyArray);
+			}
+
+			// // for testing...
+			// gsap.delayedCall(vars.data ? 50 : 1, function() {
+			// 	animation.eventCallback("onComplete", () => _setFinalStates(comps, !clearProps));
+			// 	addFunc.call(animation, targets, tweenVars, 0).play();
+			// });
+			// return;
+
+			_callbacks.forEach(name => vars[name] && animation.eventCallback(name, vars[name], vars[name + "Params"])); // apply callbacks to the timeline, not tweens (because "custom" timing can make multiple tweens)
+
+			if (custom && targets.length) { // bust out the custom properties as their own tweens so they can use different eases, durations, etc.
+				remainingProps = _copy(tweenVars, _reserved);
+				if ("scale" in custom) {
+					custom.scaleX = custom.scaleY = custom.scale;
+					delete custom.scale;
+				}
+				for (p in custom) {
+					v = _copy(custom[p], _fitReserved);
+					v[p] = tweenVars[p];
+					!("duration" in v) && ("duration" in tweenVars) && (v.duration = tweenVars.duration);
+					v.stagger = tweenVars.stagger;
+					addFunc.call(animation, targets, v, 0);
+					delete remainingProps[p];
+				}
+			}
+			if (targets.length || leaving.length || entering.length) {
+				toggleClass && animation.add(() => _toggleClass(classTargets, toggleClass, animation._zTime < 0 ? "remove" : "add"), 0) && !paused && _toggleClass(classTargets, toggleClass, "add");
+				targets.length && addFunc.call(animation, targets, remainingProps, 0);
+			}
+
+			_handleCallback(onEnter, entering, animation);
+			_handleCallback(onLeave, leaving, animation);
+
+			let batchTl = _batch && _batch.timeline;
+
+			if (batchTl) {
+				batchTl.add(animation, 0);
+				_batch._final.push(() => _setFinalStates(comps, !clearProps));
+			}
+
+			endTime = animation.duration();
+			animation.call(() => {
+				let forward = animation.time() >= endTime;
+				forward && !batchTl && _setFinalStates(comps, !clearProps);
+				toggleClass && _toggleClass(classTargets, toggleClass, forward ? "remove" : "add");
+			});
+		};
+
+		absoluteOnLeave && (absolute = comps.filter(comp => !comp.sd && !comp.a.isVisible && comp.b.isVisible).map(comp => comp.a.element));
+		if (_batch) {
+			absolute && _batch._abs.push(..._filterComps(comps, absolute));
+			_batch._run.push(run);
+		} else {
+			absolute && _makeCompsAbsolute(_filterComps(comps, absolute)); // when making absolute, we must go in a very particular order so that document flow changes don't affect things. Don't make it visible if both the before and after states are invisible! There's no point, and it could make things appear visible during the flip that shouldn't be.
+			run();
+		}
+
+		let anim = _batch ? _batch.timeline : animation;
+		anim.revert = () => _killFlip(anim, 1, 1); // a Flip timeline should behave very different when reverting - it should actually jump to the end so that styles get cleared out.
+
+		return anim;
+	},
+	_interrupt = tl => {
+		tl.vars.onInterrupt && tl.vars.onInterrupt.apply(tl, tl.vars.onInterruptParams || []);
+		tl.getChildren(true, false, true).forEach(_interrupt);
+	},
+	_killFlip = (tl, action, force) => { // action: 0 = nothing, 1 = complete, 2 = only kill (don't complete)
+		if (tl && tl.progress() < 1 && (!tl.paused() || force)) {
+			if (action) {
+				_interrupt(tl);
+				action < 2 && tl.progress(1); // we should also kill it in case it was added to a parent timeline.
+				tl.kill();
+			}
+			return true;
+		}
+	},
+	_createLookup = state => {
+		let lookup = state.idLookup = {},
+			alt = state.alt = {},
+			elStates = state.elementStates,
+			i = elStates.length,
+			elState;
+		while (i--) {
+			elState = elStates[i];
+			lookup[elState.id] ? (alt[elState.id] = elState) : (lookup[elState.id] = elState);
+		}
+	};
+
+
+
+
+
+
+class FlipState {
+
+	constructor(targets, vars, targetsAreElementStates) {
+		this.props = vars && vars.props;
+		this.simple = !!(vars && vars.simple);
+		if (targetsAreElementStates) {
+			this.targets = _elementsFromElementStates(targets);
+			this.elementStates = targets;
+			_createLookup(this);
+		} else {
+			this.targets = _toArray(targets);
+			let soft = vars && (vars.kill === false || (vars.batch && !vars.kill));
+			_batch && !soft && _batch._kill.push(this);
+			this.update(soft || !!_batch); // when batching, don't force in-progress flips to their end; we need to do that AFTER all getStates() are called.
+		}
+	}
+
+	update(soft) {
+		this.elementStates = this.targets.map(el => new ElementState(el, this.props, this.simple));
+		_createLookup(this);
+		this.interrupt(soft);
+		this.recordInlineStyles();
+		return this;
+	}
+
+	clear() {
+		this.targets.length = this.elementStates.length = 0;
+		_createLookup(this);
+		return this;
+	}
+
+	fit(state, scale, nested) {
+		let elStatesInOrder = _orderByDOMDepth(this.elementStates.slice(0), false, true),
+			toElStates = (state || this).idLookup,
+			i = 0,
+			fromNode, toNode;
+		for (; i < elStatesInOrder.length; i++) {
+			fromNode = elStatesInOrder[i];
+			nested && (fromNode.matrix = getGlobalMatrix(fromNode.element, false, false, true)); // moving a parent affects the position of children
+			toNode = toElStates[fromNode.id];
+			toNode && _fit(fromNode, toNode, scale, true, 0, fromNode);
+			fromNode.matrix = getGlobalMatrix(fromNode.element, false, false, true);
+		}
+		return this;
+	}
+
+	getProperty(element, property) {
+		let es = this.getElementState(element) || _emptyObj;
+		return (property in es ? es : es.props || _emptyObj)[property];
+	}
+
+	add(state) {
+		let i = state.targets.length,
+			lookup = this.idLookup,
+			alt = this.alt,
+			index, es, es2;
+		while (i--) {
+			es = state.elementStates[i];
+			es2 = lookup[es.id];
+			if (es2 && (es.element === es2.element || (alt[es.id] && alt[es.id].element === es.element))) { // if the flip id is already in this FlipState, replace it!
+				index = this.elementStates.indexOf(es.element === es2.element ? es2 : alt[es.id]);
+				this.targets.splice(index, 1, state.targets[i]);
+				this.elementStates.splice(index, 1, es);
+			} else {
+				this.targets.push(state.targets[i]);
+				this.elementStates.push(es);
+			}
+		}
+		state.interrupted && (this.interrupted = true);
+		state.simple || (this.simple = false);
+		_createLookup(this);
+		return this;
+	}
+
+	compare(state) {
+		let l1 = state.idLookup,
+			l2 = this.idLookup,
+			unchanged = [],
+			changed = [],
+			enter = [],
+			leave = [],
+			targets = [],
+			a1 = state.alt,
+			a2 = this.alt,
+			place = (s1, s2, el) => (s1.isVisible !== s2.isVisible ? (s1.isVisible ? enter : leave) : s1.isVisible ? changed : unchanged).push(el) && targets.push(el),
+			placeIfDoesNotExist = (s1, s2, el) => targets.indexOf(el) < 0 && place(s1, s2, el),
+			s1, s2, p, el, s1Alt, s2Alt, c1, c2;
+		for (p in l1) {
+			s1Alt = a1[p];
+			s2Alt = a2[p];
+			s1 = !s1Alt ? l1[p] : _getChangingElState(state, this, p);
+			el = s1.element;
+			s2 = l2[p];
+			if (s2Alt) {
+				c2 = s2.isVisible || (!s2Alt.isVisible && el === s2.element) ? s2 : s2Alt;
+				c1 = s1Alt && !s1.isVisible && !s1Alt.isVisible && c2.element === s1Alt.element ? s1Alt : s1;
+				//c1.element !== c2.element && c1.element === s2.element && (c2 = s2);
+				if (c1.isVisible && c2.isVisible && c1.element !== c2.element) { // swapping, so force into "changed" array
+					(c1.isDifferent(c2) ? changed : unchanged).push(c1.element, c2.element);
+					targets.push(c1.element, c2.element);
+				} else {
+					place(c1, c2, c1.element);
+				}
+				s1Alt && c1.element === s1Alt.element && (s1Alt = l1[p]);
+				placeIfDoesNotExist(c1.element !== s2.element && s1Alt ? s1Alt : c1, s2, s2.element);
+				placeIfDoesNotExist(s1Alt && s1Alt.element === s2Alt.element ? s1Alt : c1, s2Alt, s2Alt.element);
+				s1Alt && placeIfDoesNotExist(s1Alt, s2Alt.element === s1Alt.element ? s2Alt : s2, s1Alt.element);
+			} else {
+				!s2 ? enter.push(el) : !s2.isDifferent(s1) ? unchanged.push(el) : place(s1, s2, el);
+				s1Alt && placeIfDoesNotExist(s1Alt, s2, s1Alt.element);
+			}
+		}
+		for (p in l2) {
+			if (!l1[p]) {
+				leave.push(l2[p].element);
+				a2[p] && leave.push(a2[p].element);
+			}
+		}
+		return {changed, unchanged, enter, leave};
+	}
+
+	recordInlineStyles() {
+		let props = _memoizedRemoveProps[this.props] || _removeProps,
+			i = this.elementStates.length;
+		while (i--) {
+			_recordInlineStyles(this.elementStates[i], props);
+		}
+	}
+
+	interrupt(soft) { // soft = DON'T force in-progress flip animations to completion (like when running a batch, we can't immediately kill flips when getting states because it could contaminate positioning and other .getState() calls that will run in the batch (we kill AFTER all the .getState() calls complete).
+		let timelines = [];
+		this.targets.forEach(t => {
+			let tl = t._flip,
+				foundInProgress = _killFlip(tl, soft ? 0 : 1);
+			soft && foundInProgress && timelines.indexOf(tl) < 0 && tl.add(() => this.updateVisibility());
+			foundInProgress && timelines.push(tl);
+		});
+		!soft && timelines.length && this.updateVisibility(); // if we found an in-progress Flip animation, we must record all the values in their current state at that point BUT we should update the isVisible value AFTER pushing that flip to completion so that elements that are entering or leaving will populate those Arrays properly.
+		this.interrupted || (this.interrupted = !!timelines.length);
+	}
+
+	updateVisibility() {
+		this.elementStates.forEach(es => {
+			let b = es.element.getBoundingClientRect();
+			es.isVisible = !!(b.width || b.height || b.top || b.left);
+			es.uncache = 1;
+		});
+	}
+
+	getElementState(element) {
+		return this.elementStates[this.targets.indexOf(_getEl(element))];
+	}
+
+	makeAbsolute() {
+		return _orderByDOMDepth(this.elementStates.slice(0), true, true).map(_makeAbsolute);
+	}
+
+}
+
+
+
+class ElementState {
+
+	constructor(element, props, simple) {
+		this.element = element;
+		this.update(props, simple);
+	}
+
+	isDifferent(state) {
+		let b1 = this.bounds,
+			b2 = state.bounds;
+		return b1.top !== b2.top || b1.left !== b2.left || b1.width !== b2.width || b1.height !== b2.height || !this.matrix.equals(state.matrix) || this.opacity !== state.opacity || (this.props && state.props && JSON.stringify(this.props) !== JSON.stringify(state.props));
+	}
+
+	update(props, simple) {
+		let self = this,
+			element = self.element,
+			getProp = gsap.getProperty(element),
+			cache = gsap.core.getCache(element),
+			bounds = element.getBoundingClientRect(),
+			bbox = element.getBBox && typeof(element.getBBox) === "function" && element.nodeName.toLowerCase() !== "svg" && element.getBBox(),
+			m = simple ? new Matrix2D(1, 0, 0, 1, bounds.left + _getDocScrollLeft(), bounds.top + _getDocScrollTop()) : getGlobalMatrix(element, false, false, true);
+		self.getProp = getProp;
+		self.element = element;
+		self.id = _getID(element);
+		self.matrix = m;
+		self.cache = cache;
+		self.bounds = bounds;
+		self.isVisible = !!(bounds.width || bounds.height || bounds.left || bounds.top);
+		self.display = getProp("display");
+		self.position = getProp("position");
+		self.parent = element.parentNode;
+		self.x = getProp("x");
+		self.y = getProp("y");
+		self.scaleX = cache.scaleX;
+		self.scaleY = cache.scaleY;
+		self.rotation = getProp("rotation");
+		self.skewX = getProp("skewX");
+		self.opacity = getProp("opacity");
+		self.width =  bbox ? bbox.width : _closestTenth(getProp("width", "px"), 0.04); // round up to the closest 0.1 so that text doesn't wrap.
+		self.height = bbox ? bbox.height : _closestTenth(getProp("height", "px"), 0.04);
+		props && _recordProps(self, _memoizedProps[props] || _memoizeProps(props));
+		self.ctm = element.getCTM && element.nodeName.toLowerCase() === "svg" && _getCTM(element).inverse();
+		self.simple = simple || (_round(m.a) === 1 && !_round(m.b) && !_round(m.c) && _round(m.d) === 1); // allows us to speed through some other tasks if it's not scale/rotated
+		self.uncache = 0;
+	}
+
+}
+
+class FlipAction {
+	constructor(vars, batch) {
+		this.vars = vars;
+		this.batch = batch;
+		this.states = [];
+		this.timeline = batch.timeline;
+	}
+
+	getStateById(id) {
+		let i = this.states.length;
+		while (i--) {
+			if (this.states[i].idLookup[id]) {
+				return this.states[i];
+			}
+		}
+	}
+
+	kill() {
+		this.batch.remove(this);
+	}
+}
+
+class FlipBatch {
+	constructor(id) {
+		this.id = id;
+		this.actions = [];
+		this._kill = [];
+		this._final = [];
+		this._abs = [];
+		this._run = [];
+		this.data = {};
+		this.state = new FlipState();
+		this.timeline = gsap.timeline();
+	}
+
+	add(config) {
+		let result = this.actions.filter(action => action.vars === config);
+		if (result.length) {
+			return result[0];
+		}
+		result = new FlipAction(typeof(config) === "function" ? {animate: config} : config, this);
+		this.actions.push(result);
+		return result;
+	}
+
+	remove(action) {
+		let i = this.actions.indexOf(action);
+		i >= 0 && this.actions.splice(i, 1);
+		return this;
+	}
+
+	getState(merge) {
+		let prevBatch = _batch,
+			prevAction = _batchAction;
+		_batch = this;
+		this.state.clear();
+		this._kill.length = 0;
+		this.actions.forEach(action => {
+			if (action.vars.getState) {
+				action.states.length = 0;
+				_batchAction = action;
+				action.state = action.vars.getState(action);
+			}
+			merge && action.states.forEach(s => this.state.add(s));
+		});
+		_batchAction = prevAction;
+		_batch = prevBatch;
+		this.killConflicts();
+		return this;
+	}
+
+	animate() {
+		let prevBatch = _batch,
+			tl = this.timeline,
+			i = this.actions.length,
+			finalStates, endTime;
+		_batch = this;
+		tl.clear();
+		this._abs.length = this._final.length = this._run.length = 0;
+		this.actions.forEach(a => {
+			a.vars.animate && a.vars.animate(a);
+			let onEnter = a.vars.onEnter,
+				onLeave = a.vars.onLeave,
+				targets = a.targets, s, result;
+			if (targets && targets.length && (onEnter || onLeave)) {
+				s = new FlipState();
+				a.states.forEach(state => s.add(state));
+				result = s.compare(Flip.getState(targets));
+				result.enter.length && onEnter && onEnter(result.enter);
+				result.leave.length && onLeave && onLeave(result.leave);
+			}
+		});
+		_makeCompsAbsolute(this._abs);
+		this._run.forEach(f => f());
+		endTime = tl.duration();
+		finalStates = this._final.slice(0);
+		tl.add(() => {
+			if (endTime <= tl.time()) { // only call if moving forward in the timeline (in case it's nested in a timeline that gets reversed)
+				finalStates.forEach(f => f());
+				_forEachBatch(this, "onComplete");
+			}
+		});
+		_batch = prevBatch;
+		while (i--) {
+			this.actions[i].vars.once && this.actions[i].kill();
+		}
+		_forEachBatch(this, "onStart");
+		tl.restart();
+		return this;
+	}
+
+	loadState(done) {
+		done || (done = () => 0);
+		let queue = [];
+		this.actions.forEach(c => {
+			if (c.vars.loadState) {
+				let i, f = targets => {
+					targets && (c.targets = targets);
+					i = queue.indexOf(f);
+					if (~i) {
+						queue.splice(i, 1);
+						queue.length || done();
+					}
+				};
+				queue.push(f);
+				c.vars.loadState(f);
+			}
+		});
+		queue.length || done();
+		return this;
+	}
+
+	setState() {
+		this.actions.forEach(c => c.targets = c.vars.setState && c.vars.setState(c));
+		return this;
+	}
+
+	killConflicts(soft) {
+		this.state.interrupt(soft);
+		this._kill.forEach(state => state.interrupt(soft));
+		return this;
+	}
+
+	run(skipGetState, merge) {
+		if (this !== _batch) {
+			skipGetState || this.getState(merge);
+			this.loadState(() => {
+				if (!this._killed) {
+					this.setState();
+					this.animate();
+				}
+			});
+		}
+		return this;
+	}
+
+	clear(stateOnly) {
+		this.state.clear();
+		stateOnly || (this.actions.length = 0);
+	}
+
+	getStateById(id) {
+		let i = this.actions.length,
+			s;
+		while (i--) {
+			s = this.actions[i].getStateById(id);
+			if (s) {
+				return s;
+			}
+		}
+		return this.state.idLookup[id] && this.state;
+	}
+
+	kill() {
+		this._killed = 1;
+		this.clear();
+		delete _batchLookup[this.id];
+	}
+}
+
+
+class Flip {
+
+	static getState(targets, vars) {
+		let state = _parseState(targets, vars);
+		_batchAction && _batchAction.states.push(state);
+		vars && vars.batch && Flip.batch(vars.batch).state.add(state);
+		return state;
+	}
+
+	static from(state, vars) {
+		vars = vars || {};
+		("clearProps" in vars) || (vars.clearProps = true);
+		return _fromTo(state, _parseState(vars.targets || state.targets, {props: vars.props || state.props, simple: vars.simple, kill: !!vars.kill}), vars, -1);
+	}
+
+	static to(state, vars) {
+		return _fromTo(state, _parseState(vars.targets || state.targets, {props: vars.props || state.props, simple: vars.simple, kill: !!vars.kill}), vars, 1);
+	}
+
+	static fromTo(fromState, toState, vars) {
+		return _fromTo(fromState, toState, vars);
+	}
+
+	static fit(fromEl, toEl, vars) {
+		let v = vars ? _copy(vars, _fitReserved) : {},
+			{absolute, scale, getVars, props, runBackwards, onComplete, simple} = vars || v,
+			fitChild = vars && vars.fitChild && _getEl(vars.fitChild),
+			before = _parseElementState(toEl, props, simple, fromEl),
+			after = _parseElementState(fromEl, 0, simple, before),
+			inlineProps = props ? _memoizedRemoveProps[props] : _removeProps,
+			ctx = gsap.context();
+		props && _applyProps(v, before.props);
+		_recordInlineStyles(after, inlineProps);
+		if (runBackwards) {
+			("immediateRender" in v) || (v.immediateRender = true);
+			v.onComplete = function() {
+				_applyInlineStyles(after);
+				onComplete && onComplete.apply(this, arguments);
+			};
+		}
+		absolute && _makeAbsolute(after, before);
+		v = _fit(after, before, scale || fitChild, props, fitChild, v.duration || getVars ? v : 0);
+		ctx && !getVars && ctx.add(() => () => _applyInlineStyles(after));
+		return getVars ? v : v.duration ? gsap.to(after.element, v) : null;
+	}
+
+	static makeAbsolute(targetsOrStates, vars) {
+		return (targetsOrStates instanceof FlipState ? targetsOrStates : new FlipState(targetsOrStates, vars)).makeAbsolute();
+	}
+
+	static batch(id) {
+		id || (id = "default");
+		return _batchLookup[id] || (_batchLookup[id] = new FlipBatch(id));
+	}
+
+	static killFlipsOf(targets, complete) {
+		(targets instanceof FlipState ? targets.targets : _toArray(targets)).forEach(t => t && _killFlip(t._flip, complete !== false ? 1 : 2));
+	}
+
+	static isFlipping(target) {
+		let f = Flip.getByTarget(target);
+		return !!f && f.isActive();
+	}
+
+	static getByTarget(target) {
+		return (_getEl(target) || _emptyObj)._flip;
+	}
+
+	static getElementState(target, props) {
+		return new ElementState(_getEl(target), props);
+	}
+
+	static convertCoordinates(fromElement, toElement, point) {
+		let m = getGlobalMatrix(toElement, true, true).multiply(getGlobalMatrix(fromElement));
+		return point ? m.apply(point) : m;
+	}
+
+
+	static register(core) {
+		_body = typeof(document) !== "undefined" && document.body;
+		if (_body) {
+			gsap = core;
+			_setDoc(_body);
+			_toArray = gsap.utils.toArray;
+			_getStyleSaver = gsap.core.getStyleSaver;
+			let snap = gsap.utils.snap(0.1);
+			_closestTenth = (value, add) => snap(parseFloat(value) + add);
+		}
+	}
+}
+
+Flip.version = "3.12.5";
+
+// function whenImagesLoad(el, func) {
+// 	let pending = [],
+// 		onLoad = e => {
+// 			pending.splice(pending.indexOf(e.target), 1);
+// 			e.target.removeEventListener("load", onLoad);
+// 			pending.length || func();
+// 		};
+// 	gsap.utils.toArray(el.tagName.toLowerCase() === "img" ? el : el.querySelectorAll("img")).forEach(img => img.complete || img.addEventListener("load", onLoad) || pending.push(img));
+// 	pending.length || func();
+// }
+
+typeof(window) !== "undefined" && window.gsap && window.gsap.registerPlugin(Flip);
+
+export { Flip, Flip as default };
diff --git a/dist/Flip.d.mts b/dist/Flip.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..60d2b4073be30ac9395c3c71aa39ed4c4d42ee03
--- /dev/null
+++ b/dist/Flip.d.mts
@@ -0,0 +1,1033 @@
+import { g as getGlobalMatrix, _ as _setDoc, M as Matrix2D, a as _getDocScrollLeft, b as _getDocScrollTop, c as _getCTM } from './shared/gsap.7b0323e5.mjs';
+
+/*!
+ * Flip 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let _id = 1,
+	_toArray, gsap, _batch, _batchAction, _body, _closestTenth, _getStyleSaver,
+	_forEachBatch = (batch, name) => batch.actions.forEach(a => a.vars[name] && a.vars[name](a)),
+	_batchLookup = {},
+	_RAD2DEG = 180 / Math.PI,
+	_DEG2RAD = Math.PI / 180,
+	_emptyObj = {},
+	_dashedNameLookup = {},
+	_memoizedRemoveProps = {},
+	_listToArray = list => typeof(list) === "string" ? list.split(" ").join("").split(",") : list, // removes extra spaces contaminating the names, returns an Array.
+	_callbacks = _listToArray("onStart,onUpdate,onComplete,onReverseComplete,onInterrupt"),
+	_removeProps = _listToArray("transform,transformOrigin,width,height,position,top,left,opacity,zIndex,maxWidth,maxHeight,minWidth,minHeight"),
+	_getEl = target => _toArray(target)[0] || console.warn("Element not found:", target),
+	_round = value => Math.round(value * 10000) / 10000 || 0,
+	_toggleClass = (targets, className, action) => targets.forEach(el => el.classList[action](className)),
+	_reserved = {zIndex:1, kill:1, simple:1, spin:1, clearProps:1, targets:1, toggleClass:1, onComplete:1, onUpdate:1, onInterrupt:1, onStart:1, delay:1, repeat:1, repeatDelay:1, yoyo:1, scale:1, fade:1, absolute:1, props:1, onEnter:1, onLeave:1, custom:1, paused:1, nested:1, prune:1, absoluteOnLeave: 1},
+	_fitReserved = {zIndex:1, simple:1, clearProps:1, scale:1, absolute:1, fitChild:1, getVars:1, props:1},
+	_camelToDashed = p => p.replace(/([A-Z])/g, "-$1").toLowerCase(),
+	_copy = (obj, exclude) => {
+		let result = {}, p;
+		for (p in obj) {
+			exclude[p] || (result[p] = obj[p]);
+		}
+		return result;
+	},
+	_memoizedProps = {},
+	_memoizeProps = props => {
+		let p = _memoizedProps[props] = _listToArray(props);
+		_memoizedRemoveProps[props] = p.concat(_removeProps);
+		return p;
+	},
+	_getInverseGlobalMatrix = el => { // integrates caching for improved performance
+		let cache = el._gsap || gsap.core.getCache(el);
+		if (cache.gmCache === gsap.ticker.frame) {
+			return cache.gMatrix;
+		}
+		cache.gmCache = gsap.ticker.frame;
+		return (cache.gMatrix = getGlobalMatrix(el, true, false, true));
+	},
+	_getDOMDepth = (el, invert, level = 0) => { // In invert is true, the sibling depth is increments of 1, and parent/nesting depth is increments of 1000. This lets us order elements in an Array to reflect document flow.
+		let parent = el.parentNode,
+			inc = 1000 * (10 ** level) * (invert ? -1 : 1),
+			l = invert ? -inc * 900 : 0;
+		while (el) {
+			l += inc;
+			el = el.previousSibling;
+		}
+		return parent ? l + _getDOMDepth(parent, invert, level + 1) : l;
+	},
+	_orderByDOMDepth = (comps, invert, isElStates) => {
+		comps.forEach(comp => comp.d = _getDOMDepth(isElStates ? comp.element : comp.t, invert));
+		comps.sort((c1, c2) => c1.d - c2.d);
+		return comps;
+	},
+	_recordInlineStyles = (elState, props) => { // records the current inline CSS properties into an Array in alternating name/value pairs that's stored in a "css" property on the state object so that we can revert later.
+		let style = elState.element.style,
+			a = elState.css = elState.css || [],
+			i = props.length,
+			p, v;
+		while (i--) {
+			p = props[i];
+			v = style[p] || style.getPropertyValue(p);
+			a.push(v ? p : _dashedNameLookup[p] || (_dashedNameLookup[p] = _camelToDashed(p)), v);
+		}
+		return style;
+	},
+	_applyInlineStyles = state => {
+		let css = state.css,
+			style = state.element.style,
+			i = 0;
+		state.cache.uncache = 1;
+		for (; i < css.length; i+=2) {
+			css[i+1] ? (style[css[i]] = css[i+1]) : style.removeProperty(css[i]);
+		}
+		if (!css[css.indexOf("transform")+1] && style.translate) { // CSSPlugin adds scale, translate, and rotate inline CSS as "none" in order to keep CSS rules from contaminating transforms.
+			style.removeProperty("translate");
+			style.removeProperty("scale");
+			style.removeProperty("rotate");
+		}
+	},
+	_setFinalStates = (comps, onlyTransforms) => {
+		comps.forEach(c => c.a.cache.uncache = 1);
+		onlyTransforms || comps.finalStates.forEach(_applyInlineStyles);
+	},
+	_absoluteProps = "paddingTop,paddingRight,paddingBottom,paddingLeft,gridArea,transition".split(","), // properties that we must record just
+	_makeAbsolute = (elState, fallbackNode, ignoreBatch) => {
+		let { element, width, height, uncache, getProp } = elState,
+			style = element.style,
+			i = 4,
+			result, displayIsNone, cs;
+		(typeof(fallbackNode) !== "object") && (fallbackNode = elState);
+		if (_batch && ignoreBatch !== 1) {
+			_batch._abs.push({t: element, b: elState, a: elState, sd: 0});
+			_batch._final.push(() => (elState.cache.uncache = 1) && _applyInlineStyles(elState));
+			return element;
+		}
+		displayIsNone = getProp("display") === "none";
+
+		if (!elState.isVisible || displayIsNone) {
+			displayIsNone && (_recordInlineStyles(elState, ["display"]).display = fallbackNode.display);
+			elState.matrix = fallbackNode.matrix;
+			elState.width = width = elState.width || fallbackNode.width;
+			elState.height = height = elState.height || fallbackNode.height;
+		}
+
+		_recordInlineStyles(elState, _absoluteProps);
+		cs = window.getComputedStyle(element);
+		while (i--) {
+			style[_absoluteProps[i]] = cs[_absoluteProps[i]]; // record paddings as px-based because if removed from grid, percentage-based ones could be altered.
+		}
+		style.gridArea = "1 / 1 / 1 / 1";
+		style.transition = "none";
+
+		style.position = "absolute";
+		style.width = width + "px";
+		style.height = height + "px";
+		style.top || (style.top = "0px");
+		style.left || (style.left = "0px");
+		if (uncache) {
+			result = new ElementState(element);
+		} else { // better performance
+			result = _copy(elState, _emptyObj);
+			result.position = "absolute";
+			if (elState.simple) {
+				let bounds = element.getBoundingClientRect();
+				result.matrix = new Matrix2D(1, 0, 0, 1, bounds.left + _getDocScrollLeft(), bounds.top + _getDocScrollTop());
+			} else {
+				result.matrix = getGlobalMatrix(element, false, false, true);
+			}
+		}
+		result = _fit(result, elState, true);
+		elState.x = _closestTenth(result.x, 0.01);
+		elState.y = _closestTenth(result.y, 0.01);
+		return element;
+	},
+	_filterComps = (comps, targets) => {
+		if (targets !== true) {
+			targets = _toArray(targets);
+			comps = comps.filter(c => {
+				if (targets.indexOf((c.sd < 0 ? c.b : c.a).element) !== -1) {
+				    return true;
+				} else {
+					c.t._gsap.renderTransform(1); // we must force transforms to render on anything that isn't being made position: absolute, otherwise the absolute position happens and then when animation begins it applies transforms which can create a new stacking context, throwing off positioning!
+					if (c.b.isVisible) {
+						c.t.style.width = c.b.width + "px"; // otherwise things can collapse when contents are made position: absolute.
+						c.t.style.height = c.b.height + "px";
+					}
+				}
+			});
+		}
+		return comps;
+	},
+	_makeCompsAbsolute = comps => _orderByDOMDepth(comps, true).forEach(c => (c.a.isVisible || c.b.isVisible) && _makeAbsolute(c.sd < 0 ? c.b : c.a, c.b, 1)),
+	_findElStateInState = (state, other) => (other && state.idLookup[_parseElementState(other).id]) || state.elementStates[0],
+	_parseElementState = (elOrNode, props, simple, other) => elOrNode instanceof ElementState ? elOrNode : elOrNode instanceof FlipState ? _findElStateInState(elOrNode, other) : new ElementState(typeof(elOrNode) === "string" ? _getEl(elOrNode) || console.warn(elOrNode + " not found") : elOrNode, props, simple),
+	_recordProps = (elState, props) => {
+		let getProp = gsap.getProperty(elState.element, null, "native"),
+			obj = elState.props = {},
+			i = props.length;
+		while (i--) {
+			obj[props[i]] = (getProp(props[i]) + "").trim();
+		}
+		obj.zIndex && (obj.zIndex = parseFloat(obj.zIndex) || 0);
+		return elState;
+	},
+	_applyProps = (element, props) => {
+		let style = element.style || element, // could pass in a vars object.
+			p;
+		for (p in props) {
+			style[p] = props[p];
+		}
+	},
+	_getID = el => {
+		let id = el.getAttribute("data-flip-id");
+		id || el.setAttribute("data-flip-id", (id = "auto-" + _id++));
+		return id;
+	},
+	_elementsFromElementStates = elStates => elStates.map(elState => elState.element),
+	_handleCallback = (callback, elStates, tl) => callback && elStates.length && tl.add(callback(_elementsFromElementStates(elStates), tl, new FlipState(elStates, 0, true)), 0),
+
+	_fit = (fromState, toState, scale, applyProps, fitChild, vars) => {
+		let { element, cache, parent, x, y } = fromState,
+			{ width, height, scaleX, scaleY, rotation, bounds } = toState,
+			styles = vars && _getStyleSaver && _getStyleSaver(element, "transform"), // requires at least 3.11.5
+			dimensionState = fromState,
+			{e, f} = toState.matrix,
+			deep = fromState.bounds.width !== bounds.width || fromState.bounds.height !== bounds.height || fromState.scaleX !== scaleX || fromState.scaleY !== scaleY || fromState.rotation !== rotation,
+			simple = !deep && fromState.simple && toState.simple && !fitChild,
+			skewX, fromPoint, toPoint, getProp, parentMatrix, matrix, bbox;
+		if (simple || !parent) {
+			scaleX = scaleY = 1;
+			rotation = skewX = 0;
+		} else {
+			parentMatrix = _getInverseGlobalMatrix(parent);
+			matrix = parentMatrix.clone().multiply(toState.ctm ? toState.matrix.clone().multiply(toState.ctm) : toState.matrix); // root SVG elements have a ctm that we must factor out (for example, viewBox:"0 0 94 94" with a width of 200px would scale the internals by 2.127 but when we're matching the size of the root <svg> element itself, that scaling shouldn't factor in!)
+			rotation = _round(Math.atan2(matrix.b, matrix.a) * _RAD2DEG);
+			skewX = _round(Math.atan2(matrix.c, matrix.d) * _RAD2DEG + rotation) % 360; // in very rare cases, minor rounding might end up with 360 which should be 0.
+			scaleX = Math.sqrt(matrix.a ** 2 + matrix.b ** 2);
+			scaleY = Math.sqrt(matrix.c ** 2 + matrix.d ** 2) * Math.cos(skewX * _DEG2RAD);
+			if (fitChild) {
+				fitChild = _toArray(fitChild)[0];
+				getProp = gsap.getProperty(fitChild);
+				bbox = fitChild.getBBox && typeof(fitChild.getBBox) === "function" && fitChild.getBBox();
+				dimensionState = {scaleX: getProp("scaleX"), scaleY: getProp("scaleY"), width: bbox ? bbox.width : Math.ceil(parseFloat(getProp("width", "px"))), height: bbox ? bbox.height : parseFloat(getProp("height", "px")) };
+			}
+			cache.rotation = rotation + "deg";
+			cache.skewX = skewX + "deg";
+		}
+		if (scale) {
+			scaleX *= width === dimensionState.width || !dimensionState.width ? 1 : width / dimensionState.width; // note if widths are both 0, we should make scaleX 1 - some elements have box-sizing that incorporates padding, etc. and we don't want it to collapse in that case.
+			scaleY *= height === dimensionState.height || !dimensionState.height ? 1 : height / dimensionState.height;
+			cache.scaleX = scaleX;
+			cache.scaleY = scaleY;
+		} else {
+			width = _closestTenth(width * scaleX / dimensionState.scaleX, 0);
+			height = _closestTenth(height * scaleY / dimensionState.scaleY, 0);
+			element.style.width = width + "px";
+			element.style.height = height + "px";
+		}
+		// if (fromState.isFixed) { // commented out because it's now taken care of in getGlobalMatrix() with a flag at the end.
+		// 	e -= _getDocScrollLeft();
+		// 	f -= _getDocScrollTop();
+		// }
+		applyProps && _applyProps(element, toState.props);
+		if (simple || !parent) {
+			x += e - fromState.matrix.e;
+			y += f - fromState.matrix.f;
+		} else if (deep || parent !== toState.parent) {
+			cache.renderTransform(1, cache);
+			matrix = getGlobalMatrix(fitChild || element, false, false, true);
+			fromPoint = parentMatrix.apply({x: matrix.e, y: matrix.f});
+			toPoint = parentMatrix.apply({x: e, y: f});
+			x += toPoint.x - fromPoint.x;
+			y += toPoint.y - fromPoint.y;
+		} else { // use a faster/cheaper algorithm if we're just moving x/y
+			parentMatrix.e = parentMatrix.f = 0;
+			toPoint = parentMatrix.apply({x: e - fromState.matrix.e, y: f - fromState.matrix.f});
+			x += toPoint.x;
+			y += toPoint.y;
+		}
+		x = _closestTenth(x, 0.02);
+		y = _closestTenth(y, 0.02);
+		if (vars && !(vars instanceof ElementState)) { // revert
+			styles && styles.revert();
+		} else { // or apply the transform immediately
+			cache.x = x + "px";
+			cache.y = y + "px";
+			cache.renderTransform(1, cache);
+		}
+		if (vars) {
+			vars.x = x;
+			vars.y = y;
+			vars.rotation = rotation;
+			vars.skewX = skewX;
+			if (scale) {
+				vars.scaleX = scaleX;
+				vars.scaleY = scaleY;
+			} else {
+				vars.width = width;
+				vars.height = height;
+			}
+		}
+		return vars || cache;
+	},
+
+	_parseState = (targetsOrState, vars) => targetsOrState instanceof FlipState ? targetsOrState : new FlipState(targetsOrState, vars),
+	_getChangingElState = (toState, fromState, id) => {
+		let to1 = toState.idLookup[id],
+			to2 = toState.alt[id];
+		return to2.isVisible && (!(fromState.getElementState(to2.element) || to2).isVisible || !to1.isVisible) ? to2 : to1;
+	},
+	_bodyMetrics = [], _bodyProps = "width,height,overflowX,overflowY".split(","), _bodyLocked,
+	_lockBodyScroll = lock => { // if there's no scrollbar, we should lock that so that measurements don't get affected by temporary repositioning, like if something is centered in the window.
+		if (lock !== _bodyLocked) {
+			let s = _body.style,
+				w = _body.clientWidth === window.outerWidth,
+				h = _body.clientHeight === window.outerHeight,
+				i = 4;
+			if (lock && (w || h)) {
+				while (i--) {
+					_bodyMetrics[i] = s[_bodyProps[i]];
+				}
+				if (w) {
+					s.width = _body.clientWidth + "px";
+					s.overflowY = "hidden";
+				}
+				if (h) {
+					s.height = _body.clientHeight + "px";
+					s.overflowX = "hidden";
+				}
+				_bodyLocked= lock;
+			} else if (_bodyLocked) {
+				while (i--) {
+					_bodyMetrics[i] ? (s[_bodyProps[i]] = _bodyMetrics[i]) : s.removeProperty(_camelToDashed(_bodyProps[i]));
+				}
+				_bodyLocked = lock;
+			}
+		}
+	},
+
+	_fromTo = (fromState, toState, vars, relative) => { // relative is -1 if "from()", and 1 if "to()"
+		(fromState instanceof FlipState && toState instanceof FlipState) || console.warn("Not a valid state object.");
+		vars = vars || {};
+		let { clearProps, onEnter, onLeave, absolute, absoluteOnLeave, custom, delay, paused, repeat, repeatDelay, yoyo, toggleClass, nested, zIndex, scale, fade, stagger, spin, prune } = vars,
+			props = ("props" in vars ? vars : fromState).props,
+			tweenVars = _copy(vars, _reserved),
+			animation = gsap.timeline({ delay, paused, repeat, repeatDelay, yoyo, data: "isFlip" }),
+			remainingProps = tweenVars,
+			entering = [],
+			leaving = [],
+			comps = [],
+			swapOutTargets = [],
+			spinNum = spin === true ? 1 : spin || 0,
+			spinFunc = typeof(spin) === "function" ? spin : () => spinNum,
+			interrupted = fromState.interrupted || toState.interrupted,
+			addFunc = animation[relative !== 1 ? "to" : "from"],
+			v, p, endTime, i, el, comp, state, targets, finalStates, fromNode, toNode, run, a, b;
+		//relative || (toState = (new FlipState(toState.targets, {props: props})).fit(toState, scale));
+		for (p in toState.idLookup) {
+			toNode = !toState.alt[p] ? toState.idLookup[p] : _getChangingElState(toState, fromState, p);
+			el = toNode.element;
+			fromNode = fromState.idLookup[p];
+			fromState.alt[p] && el === fromNode.element && (fromState.alt[p].isVisible || !toNode.isVisible) && (fromNode = fromState.alt[p]);
+			if (fromNode) {
+				comp = {t: el, b: fromNode, a: toNode, sd: fromNode.element === el ? 0 : toNode.isVisible ? 1 : -1};
+				comps.push(comp);
+				if (comp.sd) {
+					if (comp.sd < 0) {
+						comp.b = toNode;
+						comp.a = fromNode;
+					}
+					// for swapping elements that got interrupted, we must re-record the inline styles to ensure they're not tainted. Remember, .batch() permits getState() not to force in-progress flips to their end state.
+					interrupted && _recordInlineStyles(comp.b, props ? _memoizedRemoveProps[props] : _removeProps);
+					fade && comps.push(comp.swap = {t: fromNode.element, b: comp.b, a: comp.a, sd: -comp.sd, swap: comp});
+				}
+				el._flip = fromNode.element._flip = _batch ? _batch.timeline : animation;
+			} else if (toNode.isVisible) {
+				comps.push({t: el, b: _copy(toNode, {isVisible:1}), a: toNode, sd: 0, entering: 1}); // to include it in the "entering" Array and do absolute positioning if necessary
+				el._flip = _batch ? _batch.timeline : animation;
+			}
+		}
+
+		props && (_memoizedProps[props] || _memoizeProps(props)).forEach(p => tweenVars[p] = i => comps[i].a.props[p]);
+		comps.finalStates = finalStates = [];
+
+		run = () => {
+			_orderByDOMDepth(comps);
+			_lockBodyScroll(true); // otherwise, measurements may get thrown off when things get fit.
+			// TODO: cache the matrix, especially for parent because it'll probably get reused quite a bit, but lock it to a particular cycle(?).
+			for (i = 0; i < comps.length; i++) {
+				comp = comps[i];
+				a = comp.a;
+				b = comp.b;
+				if (prune && !a.isDifferent(b) && !comp.entering) { // only flip if things changed! Don't omit it from comps initially because that'd prevent the element from being positioned absolutely (if necessary)
+					comps.splice(i--, 1);
+				} else {
+					el = comp.t;
+					nested && !(comp.sd < 0) && i && (a.matrix = getGlobalMatrix(el, false, false, true)); // moving a parent affects the position of children
+					if (b.isVisible && a.isVisible) {
+						if (comp.sd < 0) { // swapping OUT (swap direction of -1 is out)
+							state = new ElementState(el, props, fromState.simple);
+							_fit(state, a, scale, 0, 0, state);
+							state.matrix = getGlobalMatrix(el, false, false, true);
+							state.css = comp.b.css;
+							comp.a = a = state;
+							fade && (el.style.opacity = interrupted ? b.opacity : a.opacity);
+							stagger && swapOutTargets.push(el);
+						} else if (comp.sd > 0 && fade) { // swapping IN (swap direction of 1 is in)
+							el.style.opacity = interrupted ? a.opacity - b.opacity : "0";
+						}
+						_fit(a, b, scale, props);
+
+					} else if (b.isVisible !== a.isVisible) { // either entering or leaving (one side is invisible)
+						if (!b.isVisible) { // entering
+							a.isVisible && entering.push(a);
+							comps.splice(i--, 1);
+						} else if (!a.isVisible) { // leaving
+							b.css = a.css;
+							leaving.push(b);
+							comps.splice(i--, 1);
+							absolute && nested && _fit(a, b, scale, props);
+						}
+					}
+					if (!scale) {
+						el.style.maxWidth = Math.max(a.width, b.width) + "px";
+						el.style.maxHeight = Math.max(a.height, b.height) + "px";
+						el.style.minWidth = Math.min(a.width, b.width) + "px";
+						el.style.minHeight = Math.min(a.height, b.height) + "px";
+					}
+					nested && toggleClass && el.classList.add(toggleClass);
+				}
+				finalStates.push(a);
+			}
+			let classTargets;
+			if (toggleClass) {
+				classTargets = finalStates.map(s => s.element);
+				nested && classTargets.forEach(e => e.classList.remove(toggleClass)); // there could be a delay, so don't leave the classes applied (we'll do it in a timeline callback)
+			}
+
+			_lockBodyScroll(false);
+
+			if (scale) {
+				tweenVars.scaleX = i => comps[i].a.scaleX;
+				tweenVars.scaleY = i => comps[i].a.scaleY;
+			} else {
+				tweenVars.width = i => comps[i].a.width + "px";
+				tweenVars.height = i => comps[i].a.height + "px";
+				tweenVars.autoRound = vars.autoRound || false;
+			}
+			tweenVars.x = i => comps[i].a.x + "px";
+			tweenVars.y = i => comps[i].a.y + "px";
+			tweenVars.rotation = i => comps[i].a.rotation + (spin ? spinFunc(i, targets[i], targets) * 360 : 0);
+			tweenVars.skewX = i => comps[i].a.skewX;
+
+			targets = comps.map(c => c.t);
+
+			if (zIndex || zIndex === 0) {
+				tweenVars.modifiers = {zIndex: () => zIndex};
+				tweenVars.zIndex = zIndex;
+				tweenVars.immediateRender = vars.immediateRender !== false;
+			}
+
+			fade && (tweenVars.opacity = i => comps[i].sd < 0 ? 0 : comps[i].sd > 0 ? comps[i].a.opacity : "+=0");
+
+			if (swapOutTargets.length) {
+				stagger = gsap.utils.distribute(stagger);
+				let dummyArray = targets.slice(swapOutTargets.length);
+				tweenVars.stagger = (i, el) => stagger(~swapOutTargets.indexOf(el) ? targets.indexOf(comps[i].swap.t) : i, el, dummyArray);
+			}
+
+			// // for testing...
+			// gsap.delayedCall(vars.data ? 50 : 1, function() {
+			// 	animation.eventCallback("onComplete", () => _setFinalStates(comps, !clearProps));
+			// 	addFunc.call(animation, targets, tweenVars, 0).play();
+			// });
+			// return;
+
+			_callbacks.forEach(name => vars[name] && animation.eventCallback(name, vars[name], vars[name + "Params"])); // apply callbacks to the timeline, not tweens (because "custom" timing can make multiple tweens)
+
+			if (custom && targets.length) { // bust out the custom properties as their own tweens so they can use different eases, durations, etc.
+				remainingProps = _copy(tweenVars, _reserved);
+				if ("scale" in custom) {
+					custom.scaleX = custom.scaleY = custom.scale;
+					delete custom.scale;
+				}
+				for (p in custom) {
+					v = _copy(custom[p], _fitReserved);
+					v[p] = tweenVars[p];
+					!("duration" in v) && ("duration" in tweenVars) && (v.duration = tweenVars.duration);
+					v.stagger = tweenVars.stagger;
+					addFunc.call(animation, targets, v, 0);
+					delete remainingProps[p];
+				}
+			}
+			if (targets.length || leaving.length || entering.length) {
+				toggleClass && animation.add(() => _toggleClass(classTargets, toggleClass, animation._zTime < 0 ? "remove" : "add"), 0) && !paused && _toggleClass(classTargets, toggleClass, "add");
+				targets.length && addFunc.call(animation, targets, remainingProps, 0);
+			}
+
+			_handleCallback(onEnter, entering, animation);
+			_handleCallback(onLeave, leaving, animation);
+
+			let batchTl = _batch && _batch.timeline;
+
+			if (batchTl) {
+				batchTl.add(animation, 0);
+				_batch._final.push(() => _setFinalStates(comps, !clearProps));
+			}
+
+			endTime = animation.duration();
+			animation.call(() => {
+				let forward = animation.time() >= endTime;
+				forward && !batchTl && _setFinalStates(comps, !clearProps);
+				toggleClass && _toggleClass(classTargets, toggleClass, forward ? "remove" : "add");
+			});
+		};
+
+		absoluteOnLeave && (absolute = comps.filter(comp => !comp.sd && !comp.a.isVisible && comp.b.isVisible).map(comp => comp.a.element));
+		if (_batch) {
+			absolute && _batch._abs.push(..._filterComps(comps, absolute));
+			_batch._run.push(run);
+		} else {
+			absolute && _makeCompsAbsolute(_filterComps(comps, absolute)); // when making absolute, we must go in a very particular order so that document flow changes don't affect things. Don't make it visible if both the before and after states are invisible! There's no point, and it could make things appear visible during the flip that shouldn't be.
+			run();
+		}
+
+		let anim = _batch ? _batch.timeline : animation;
+		anim.revert = () => _killFlip(anim, 1, 1); // a Flip timeline should behave very different when reverting - it should actually jump to the end so that styles get cleared out.
+
+		return anim;
+	},
+	_interrupt = tl => {
+		tl.vars.onInterrupt && tl.vars.onInterrupt.apply(tl, tl.vars.onInterruptParams || []);
+		tl.getChildren(true, false, true).forEach(_interrupt);
+	},
+	_killFlip = (tl, action, force) => { // action: 0 = nothing, 1 = complete, 2 = only kill (don't complete)
+		if (tl && tl.progress() < 1 && (!tl.paused() || force)) {
+			if (action) {
+				_interrupt(tl);
+				action < 2 && tl.progress(1); // we should also kill it in case it was added to a parent timeline.
+				tl.kill();
+			}
+			return true;
+		}
+	},
+	_createLookup = state => {
+		let lookup = state.idLookup = {},
+			alt = state.alt = {},
+			elStates = state.elementStates,
+			i = elStates.length,
+			elState;
+		while (i--) {
+			elState = elStates[i];
+			lookup[elState.id] ? (alt[elState.id] = elState) : (lookup[elState.id] = elState);
+		}
+	};
+
+
+
+
+
+
+class FlipState {
+
+	constructor(targets, vars, targetsAreElementStates) {
+		this.props = vars && vars.props;
+		this.simple = !!(vars && vars.simple);
+		if (targetsAreElementStates) {
+			this.targets = _elementsFromElementStates(targets);
+			this.elementStates = targets;
+			_createLookup(this);
+		} else {
+			this.targets = _toArray(targets);
+			let soft = vars && (vars.kill === false || (vars.batch && !vars.kill));
+			_batch && !soft && _batch._kill.push(this);
+			this.update(soft || !!_batch); // when batching, don't force in-progress flips to their end; we need to do that AFTER all getStates() are called.
+		}
+	}
+
+	update(soft) {
+		this.elementStates = this.targets.map(el => new ElementState(el, this.props, this.simple));
+		_createLookup(this);
+		this.interrupt(soft);
+		this.recordInlineStyles();
+		return this;
+	}
+
+	clear() {
+		this.targets.length = this.elementStates.length = 0;
+		_createLookup(this);
+		return this;
+	}
+
+	fit(state, scale, nested) {
+		let elStatesInOrder = _orderByDOMDepth(this.elementStates.slice(0), false, true),
+			toElStates = (state || this).idLookup,
+			i = 0,
+			fromNode, toNode;
+		for (; i < elStatesInOrder.length; i++) {
+			fromNode = elStatesInOrder[i];
+			nested && (fromNode.matrix = getGlobalMatrix(fromNode.element, false, false, true)); // moving a parent affects the position of children
+			toNode = toElStates[fromNode.id];
+			toNode && _fit(fromNode, toNode, scale, true, 0, fromNode);
+			fromNode.matrix = getGlobalMatrix(fromNode.element, false, false, true);
+		}
+		return this;
+	}
+
+	getProperty(element, property) {
+		let es = this.getElementState(element) || _emptyObj;
+		return (property in es ? es : es.props || _emptyObj)[property];
+	}
+
+	add(state) {
+		let i = state.targets.length,
+			lookup = this.idLookup,
+			alt = this.alt,
+			index, es, es2;
+		while (i--) {
+			es = state.elementStates[i];
+			es2 = lookup[es.id];
+			if (es2 && (es.element === es2.element || (alt[es.id] && alt[es.id].element === es.element))) { // if the flip id is already in this FlipState, replace it!
+				index = this.elementStates.indexOf(es.element === es2.element ? es2 : alt[es.id]);
+				this.targets.splice(index, 1, state.targets[i]);
+				this.elementStates.splice(index, 1, es);
+			} else {
+				this.targets.push(state.targets[i]);
+				this.elementStates.push(es);
+			}
+		}
+		state.interrupted && (this.interrupted = true);
+		state.simple || (this.simple = false);
+		_createLookup(this);
+		return this;
+	}
+
+	compare(state) {
+		let l1 = state.idLookup,
+			l2 = this.idLookup,
+			unchanged = [],
+			changed = [],
+			enter = [],
+			leave = [],
+			targets = [],
+			a1 = state.alt,
+			a2 = this.alt,
+			place = (s1, s2, el) => (s1.isVisible !== s2.isVisible ? (s1.isVisible ? enter : leave) : s1.isVisible ? changed : unchanged).push(el) && targets.push(el),
+			placeIfDoesNotExist = (s1, s2, el) => targets.indexOf(el) < 0 && place(s1, s2, el),
+			s1, s2, p, el, s1Alt, s2Alt, c1, c2;
+		for (p in l1) {
+			s1Alt = a1[p];
+			s2Alt = a2[p];
+			s1 = !s1Alt ? l1[p] : _getChangingElState(state, this, p);
+			el = s1.element;
+			s2 = l2[p];
+			if (s2Alt) {
+				c2 = s2.isVisible || (!s2Alt.isVisible && el === s2.element) ? s2 : s2Alt;
+				c1 = s1Alt && !s1.isVisible && !s1Alt.isVisible && c2.element === s1Alt.element ? s1Alt : s1;
+				//c1.element !== c2.element && c1.element === s2.element && (c2 = s2);
+				if (c1.isVisible && c2.isVisible && c1.element !== c2.element) { // swapping, so force into "changed" array
+					(c1.isDifferent(c2) ? changed : unchanged).push(c1.element, c2.element);
+					targets.push(c1.element, c2.element);
+				} else {
+					place(c1, c2, c1.element);
+				}
+				s1Alt && c1.element === s1Alt.element && (s1Alt = l1[p]);
+				placeIfDoesNotExist(c1.element !== s2.element && s1Alt ? s1Alt : c1, s2, s2.element);
+				placeIfDoesNotExist(s1Alt && s1Alt.element === s2Alt.element ? s1Alt : c1, s2Alt, s2Alt.element);
+				s1Alt && placeIfDoesNotExist(s1Alt, s2Alt.element === s1Alt.element ? s2Alt : s2, s1Alt.element);
+			} else {
+				!s2 ? enter.push(el) : !s2.isDifferent(s1) ? unchanged.push(el) : place(s1, s2, el);
+				s1Alt && placeIfDoesNotExist(s1Alt, s2, s1Alt.element);
+			}
+		}
+		for (p in l2) {
+			if (!l1[p]) {
+				leave.push(l2[p].element);
+				a2[p] && leave.push(a2[p].element);
+			}
+		}
+		return {changed, unchanged, enter, leave};
+	}
+
+	recordInlineStyles() {
+		let props = _memoizedRemoveProps[this.props] || _removeProps,
+			i = this.elementStates.length;
+		while (i--) {
+			_recordInlineStyles(this.elementStates[i], props);
+		}
+	}
+
+	interrupt(soft) { // soft = DON'T force in-progress flip animations to completion (like when running a batch, we can't immediately kill flips when getting states because it could contaminate positioning and other .getState() calls that will run in the batch (we kill AFTER all the .getState() calls complete).
+		let timelines = [];
+		this.targets.forEach(t => {
+			let tl = t._flip,
+				foundInProgress = _killFlip(tl, soft ? 0 : 1);
+			soft && foundInProgress && timelines.indexOf(tl) < 0 && tl.add(() => this.updateVisibility());
+			foundInProgress && timelines.push(tl);
+		});
+		!soft && timelines.length && this.updateVisibility(); // if we found an in-progress Flip animation, we must record all the values in their current state at that point BUT we should update the isVisible value AFTER pushing that flip to completion so that elements that are entering or leaving will populate those Arrays properly.
+		this.interrupted || (this.interrupted = !!timelines.length);
+	}
+
+	updateVisibility() {
+		this.elementStates.forEach(es => {
+			let b = es.element.getBoundingClientRect();
+			es.isVisible = !!(b.width || b.height || b.top || b.left);
+			es.uncache = 1;
+		});
+	}
+
+	getElementState(element) {
+		return this.elementStates[this.targets.indexOf(_getEl(element))];
+	}
+
+	makeAbsolute() {
+		return _orderByDOMDepth(this.elementStates.slice(0), true, true).map(_makeAbsolute);
+	}
+
+}
+
+
+
+class ElementState {
+
+	constructor(element, props, simple) {
+		this.element = element;
+		this.update(props, simple);
+	}
+
+	isDifferent(state) {
+		let b1 = this.bounds,
+			b2 = state.bounds;
+		return b1.top !== b2.top || b1.left !== b2.left || b1.width !== b2.width || b1.height !== b2.height || !this.matrix.equals(state.matrix) || this.opacity !== state.opacity || (this.props && state.props && JSON.stringify(this.props) !== JSON.stringify(state.props));
+	}
+
+	update(props, simple) {
+		let self = this,
+			element = self.element,
+			getProp = gsap.getProperty(element),
+			cache = gsap.core.getCache(element),
+			bounds = element.getBoundingClientRect(),
+			bbox = element.getBBox && typeof(element.getBBox) === "function" && element.nodeName.toLowerCase() !== "svg" && element.getBBox(),
+			m = simple ? new Matrix2D(1, 0, 0, 1, bounds.left + _getDocScrollLeft(), bounds.top + _getDocScrollTop()) : getGlobalMatrix(element, false, false, true);
+		self.getProp = getProp;
+		self.element = element;
+		self.id = _getID(element);
+		self.matrix = m;
+		self.cache = cache;
+		self.bounds = bounds;
+		self.isVisible = !!(bounds.width || bounds.height || bounds.left || bounds.top);
+		self.display = getProp("display");
+		self.position = getProp("position");
+		self.parent = element.parentNode;
+		self.x = getProp("x");
+		self.y = getProp("y");
+		self.scaleX = cache.scaleX;
+		self.scaleY = cache.scaleY;
+		self.rotation = getProp("rotation");
+		self.skewX = getProp("skewX");
+		self.opacity = getProp("opacity");
+		self.width =  bbox ? bbox.width : _closestTenth(getProp("width", "px"), 0.04); // round up to the closest 0.1 so that text doesn't wrap.
+		self.height = bbox ? bbox.height : _closestTenth(getProp("height", "px"), 0.04);
+		props && _recordProps(self, _memoizedProps[props] || _memoizeProps(props));
+		self.ctm = element.getCTM && element.nodeName.toLowerCase() === "svg" && _getCTM(element).inverse();
+		self.simple = simple || (_round(m.a) === 1 && !_round(m.b) && !_round(m.c) && _round(m.d) === 1); // allows us to speed through some other tasks if it's not scale/rotated
+		self.uncache = 0;
+	}
+
+}
+
+class FlipAction {
+	constructor(vars, batch) {
+		this.vars = vars;
+		this.batch = batch;
+		this.states = [];
+		this.timeline = batch.timeline;
+	}
+
+	getStateById(id) {
+		let i = this.states.length;
+		while (i--) {
+			if (this.states[i].idLookup[id]) {
+				return this.states[i];
+			}
+		}
+	}
+
+	kill() {
+		this.batch.remove(this);
+	}
+}
+
+class FlipBatch {
+	constructor(id) {
+		this.id = id;
+		this.actions = [];
+		this._kill = [];
+		this._final = [];
+		this._abs = [];
+		this._run = [];
+		this.data = {};
+		this.state = new FlipState();
+		this.timeline = gsap.timeline();
+	}
+
+	add(config) {
+		let result = this.actions.filter(action => action.vars === config);
+		if (result.length) {
+			return result[0];
+		}
+		result = new FlipAction(typeof(config) === "function" ? {animate: config} : config, this);
+		this.actions.push(result);
+		return result;
+	}
+
+	remove(action) {
+		let i = this.actions.indexOf(action);
+		i >= 0 && this.actions.splice(i, 1);
+		return this;
+	}
+
+	getState(merge) {
+		let prevBatch = _batch,
+			prevAction = _batchAction;
+		_batch = this;
+		this.state.clear();
+		this._kill.length = 0;
+		this.actions.forEach(action => {
+			if (action.vars.getState) {
+				action.states.length = 0;
+				_batchAction = action;
+				action.state = action.vars.getState(action);
+			}
+			merge && action.states.forEach(s => this.state.add(s));
+		});
+		_batchAction = prevAction;
+		_batch = prevBatch;
+		this.killConflicts();
+		return this;
+	}
+
+	animate() {
+		let prevBatch = _batch,
+			tl = this.timeline,
+			i = this.actions.length,
+			finalStates, endTime;
+		_batch = this;
+		tl.clear();
+		this._abs.length = this._final.length = this._run.length = 0;
+		this.actions.forEach(a => {
+			a.vars.animate && a.vars.animate(a);
+			let onEnter = a.vars.onEnter,
+				onLeave = a.vars.onLeave,
+				targets = a.targets, s, result;
+			if (targets && targets.length && (onEnter || onLeave)) {
+				s = new FlipState();
+				a.states.forEach(state => s.add(state));
+				result = s.compare(Flip.getState(targets));
+				result.enter.length && onEnter && onEnter(result.enter);
+				result.leave.length && onLeave && onLeave(result.leave);
+			}
+		});
+		_makeCompsAbsolute(this._abs);
+		this._run.forEach(f => f());
+		endTime = tl.duration();
+		finalStates = this._final.slice(0);
+		tl.add(() => {
+			if (endTime <= tl.time()) { // only call if moving forward in the timeline (in case it's nested in a timeline that gets reversed)
+				finalStates.forEach(f => f());
+				_forEachBatch(this, "onComplete");
+			}
+		});
+		_batch = prevBatch;
+		while (i--) {
+			this.actions[i].vars.once && this.actions[i].kill();
+		}
+		_forEachBatch(this, "onStart");
+		tl.restart();
+		return this;
+	}
+
+	loadState(done) {
+		done || (done = () => 0);
+		let queue = [];
+		this.actions.forEach(c => {
+			if (c.vars.loadState) {
+				let i, f = targets => {
+					targets && (c.targets = targets);
+					i = queue.indexOf(f);
+					if (~i) {
+						queue.splice(i, 1);
+						queue.length || done();
+					}
+				};
+				queue.push(f);
+				c.vars.loadState(f);
+			}
+		});
+		queue.length || done();
+		return this;
+	}
+
+	setState() {
+		this.actions.forEach(c => c.targets = c.vars.setState && c.vars.setState(c));
+		return this;
+	}
+
+	killConflicts(soft) {
+		this.state.interrupt(soft);
+		this._kill.forEach(state => state.interrupt(soft));
+		return this;
+	}
+
+	run(skipGetState, merge) {
+		if (this !== _batch) {
+			skipGetState || this.getState(merge);
+			this.loadState(() => {
+				if (!this._killed) {
+					this.setState();
+					this.animate();
+				}
+			});
+		}
+		return this;
+	}
+
+	clear(stateOnly) {
+		this.state.clear();
+		stateOnly || (this.actions.length = 0);
+	}
+
+	getStateById(id) {
+		let i = this.actions.length,
+			s;
+		while (i--) {
+			s = this.actions[i].getStateById(id);
+			if (s) {
+				return s;
+			}
+		}
+		return this.state.idLookup[id] && this.state;
+	}
+
+	kill() {
+		this._killed = 1;
+		this.clear();
+		delete _batchLookup[this.id];
+	}
+}
+
+
+class Flip {
+
+	static getState(targets, vars) {
+		let state = _parseState(targets, vars);
+		_batchAction && _batchAction.states.push(state);
+		vars && vars.batch && Flip.batch(vars.batch).state.add(state);
+		return state;
+	}
+
+	static from(state, vars) {
+		vars = vars || {};
+		("clearProps" in vars) || (vars.clearProps = true);
+		return _fromTo(state, _parseState(vars.targets || state.targets, {props: vars.props || state.props, simple: vars.simple, kill: !!vars.kill}), vars, -1);
+	}
+
+	static to(state, vars) {
+		return _fromTo(state, _parseState(vars.targets || state.targets, {props: vars.props || state.props, simple: vars.simple, kill: !!vars.kill}), vars, 1);
+	}
+
+	static fromTo(fromState, toState, vars) {
+		return _fromTo(fromState, toState, vars);
+	}
+
+	static fit(fromEl, toEl, vars) {
+		let v = vars ? _copy(vars, _fitReserved) : {},
+			{absolute, scale, getVars, props, runBackwards, onComplete, simple} = vars || v,
+			fitChild = vars && vars.fitChild && _getEl(vars.fitChild),
+			before = _parseElementState(toEl, props, simple, fromEl),
+			after = _parseElementState(fromEl, 0, simple, before),
+			inlineProps = props ? _memoizedRemoveProps[props] : _removeProps,
+			ctx = gsap.context();
+		props && _applyProps(v, before.props);
+		_recordInlineStyles(after, inlineProps);
+		if (runBackwards) {
+			("immediateRender" in v) || (v.immediateRender = true);
+			v.onComplete = function() {
+				_applyInlineStyles(after);
+				onComplete && onComplete.apply(this, arguments);
+			};
+		}
+		absolute && _makeAbsolute(after, before);
+		v = _fit(after, before, scale || fitChild, props, fitChild, v.duration || getVars ? v : 0);
+		ctx && !getVars && ctx.add(() => () => _applyInlineStyles(after));
+		return getVars ? v : v.duration ? gsap.to(after.element, v) : null;
+	}
+
+	static makeAbsolute(targetsOrStates, vars) {
+		return (targetsOrStates instanceof FlipState ? targetsOrStates : new FlipState(targetsOrStates, vars)).makeAbsolute();
+	}
+
+	static batch(id) {
+		id || (id = "default");
+		return _batchLookup[id] || (_batchLookup[id] = new FlipBatch(id));
+	}
+
+	static killFlipsOf(targets, complete) {
+		(targets instanceof FlipState ? targets.targets : _toArray(targets)).forEach(t => t && _killFlip(t._flip, complete !== false ? 1 : 2));
+	}
+
+	static isFlipping(target) {
+		let f = Flip.getByTarget(target);
+		return !!f && f.isActive();
+	}
+
+	static getByTarget(target) {
+		return (_getEl(target) || _emptyObj)._flip;
+	}
+
+	static getElementState(target, props) {
+		return new ElementState(_getEl(target), props);
+	}
+
+	static convertCoordinates(fromElement, toElement, point) {
+		let m = getGlobalMatrix(toElement, true, true).multiply(getGlobalMatrix(fromElement));
+		return point ? m.apply(point) : m;
+	}
+
+
+	static register(core) {
+		_body = typeof(document) !== "undefined" && document.body;
+		if (_body) {
+			gsap = core;
+			_setDoc(_body);
+			_toArray = gsap.utils.toArray;
+			_getStyleSaver = gsap.core.getStyleSaver;
+			let snap = gsap.utils.snap(0.1);
+			_closestTenth = (value, add) => snap(parseFloat(value) + add);
+		}
+	}
+}
+
+Flip.version = "3.12.5";
+
+// function whenImagesLoad(el, func) {
+// 	let pending = [],
+// 		onLoad = e => {
+// 			pending.splice(pending.indexOf(e.target), 1);
+// 			e.target.removeEventListener("load", onLoad);
+// 			pending.length || func();
+// 		};
+// 	gsap.utils.toArray(el.tagName.toLowerCase() === "img" ? el : el.querySelectorAll("img")).forEach(img => img.complete || img.addEventListener("load", onLoad) || pending.push(img));
+// 	pending.length || func();
+// }
+
+typeof(window) !== "undefined" && window.gsap && window.gsap.registerPlugin(Flip);
+
+export { Flip, Flip as default };
diff --git a/src/Flip.js b/dist/Flip.d.ts
similarity index 99%
rename from src/Flip.js
rename to dist/Flip.d.ts
index 23be7c74e5414d6b2b0e1648723d98289a209814..59cafb38b5909ea0cc94a6bf8ccbafc3f115da05 100644
--- a/src/Flip.js
+++ b/dist/Flip.d.ts
@@ -1,3 +1,5 @@
+import { g as getGlobalMatrix, _ as _setDoc, M as Matrix2D, a as _getDocScrollLeft, b as _getDocScrollTop, c as _getCTM } from './shared/gsap.7b0323e5.js';
+
 /*!
  * Flip 3.12.5
  * https://gsap.com
@@ -9,7 +11,6 @@
 */
 /* eslint-disable */
 
-import { getGlobalMatrix, _getDocScrollTop, _getDocScrollLeft, Matrix2D, _setDoc, _getCTM } from "./utils/matrix.js";
 
 let _id = 1,
 	_toArray, gsap, _batch, _batchAction, _body, _closestTenth, _getStyleSaver,
@@ -923,7 +924,7 @@ class FlipBatch {
 }
 
 
-export class Flip {
+class Flip {
 
 	static getState(targets, vars) {
 		let state = _parseState(targets, vars);
@@ -1029,4 +1030,4 @@ Flip.version = "3.12.5";
 
 typeof(window) !== "undefined" && window.gsap && window.gsap.registerPlugin(Flip);
 
-export { Flip as default };
\ No newline at end of file
+export { Flip, Flip as default };
diff --git a/dist/Flip.js b/dist/Flip.js
deleted file mode 100644
index 76d50e100948e3dfada5d36c330e588227912187..0000000000000000000000000000000000000000
diff --git a/dist/Flip.min.js b/dist/Flip.min.js
deleted file mode 100644
index bc19bbc4fd0d7011c04443bd0f99182b95cb9f5f..0000000000000000000000000000000000000000
diff --git a/dist/Flip.min.js.map b/dist/Flip.min.js.map
deleted file mode 100644
index 37f2e0a518f4206fe532adee49450b6d664dcdca..0000000000000000000000000000000000000000
diff --git a/dist/Flip.mjs b/dist/Flip.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..60d2b4073be30ac9395c3c71aa39ed4c4d42ee03
--- /dev/null
+++ b/dist/Flip.mjs
@@ -0,0 +1,1033 @@
+import { g as getGlobalMatrix, _ as _setDoc, M as Matrix2D, a as _getDocScrollLeft, b as _getDocScrollTop, c as _getCTM } from './shared/gsap.7b0323e5.mjs';
+
+/*!
+ * Flip 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let _id = 1,
+	_toArray, gsap, _batch, _batchAction, _body, _closestTenth, _getStyleSaver,
+	_forEachBatch = (batch, name) => batch.actions.forEach(a => a.vars[name] && a.vars[name](a)),
+	_batchLookup = {},
+	_RAD2DEG = 180 / Math.PI,
+	_DEG2RAD = Math.PI / 180,
+	_emptyObj = {},
+	_dashedNameLookup = {},
+	_memoizedRemoveProps = {},
+	_listToArray = list => typeof(list) === "string" ? list.split(" ").join("").split(",") : list, // removes extra spaces contaminating the names, returns an Array.
+	_callbacks = _listToArray("onStart,onUpdate,onComplete,onReverseComplete,onInterrupt"),
+	_removeProps = _listToArray("transform,transformOrigin,width,height,position,top,left,opacity,zIndex,maxWidth,maxHeight,minWidth,minHeight"),
+	_getEl = target => _toArray(target)[0] || console.warn("Element not found:", target),
+	_round = value => Math.round(value * 10000) / 10000 || 0,
+	_toggleClass = (targets, className, action) => targets.forEach(el => el.classList[action](className)),
+	_reserved = {zIndex:1, kill:1, simple:1, spin:1, clearProps:1, targets:1, toggleClass:1, onComplete:1, onUpdate:1, onInterrupt:1, onStart:1, delay:1, repeat:1, repeatDelay:1, yoyo:1, scale:1, fade:1, absolute:1, props:1, onEnter:1, onLeave:1, custom:1, paused:1, nested:1, prune:1, absoluteOnLeave: 1},
+	_fitReserved = {zIndex:1, simple:1, clearProps:1, scale:1, absolute:1, fitChild:1, getVars:1, props:1},
+	_camelToDashed = p => p.replace(/([A-Z])/g, "-$1").toLowerCase(),
+	_copy = (obj, exclude) => {
+		let result = {}, p;
+		for (p in obj) {
+			exclude[p] || (result[p] = obj[p]);
+		}
+		return result;
+	},
+	_memoizedProps = {},
+	_memoizeProps = props => {
+		let p = _memoizedProps[props] = _listToArray(props);
+		_memoizedRemoveProps[props] = p.concat(_removeProps);
+		return p;
+	},
+	_getInverseGlobalMatrix = el => { // integrates caching for improved performance
+		let cache = el._gsap || gsap.core.getCache(el);
+		if (cache.gmCache === gsap.ticker.frame) {
+			return cache.gMatrix;
+		}
+		cache.gmCache = gsap.ticker.frame;
+		return (cache.gMatrix = getGlobalMatrix(el, true, false, true));
+	},
+	_getDOMDepth = (el, invert, level = 0) => { // In invert is true, the sibling depth is increments of 1, and parent/nesting depth is increments of 1000. This lets us order elements in an Array to reflect document flow.
+		let parent = el.parentNode,
+			inc = 1000 * (10 ** level) * (invert ? -1 : 1),
+			l = invert ? -inc * 900 : 0;
+		while (el) {
+			l += inc;
+			el = el.previousSibling;
+		}
+		return parent ? l + _getDOMDepth(parent, invert, level + 1) : l;
+	},
+	_orderByDOMDepth = (comps, invert, isElStates) => {
+		comps.forEach(comp => comp.d = _getDOMDepth(isElStates ? comp.element : comp.t, invert));
+		comps.sort((c1, c2) => c1.d - c2.d);
+		return comps;
+	},
+	_recordInlineStyles = (elState, props) => { // records the current inline CSS properties into an Array in alternating name/value pairs that's stored in a "css" property on the state object so that we can revert later.
+		let style = elState.element.style,
+			a = elState.css = elState.css || [],
+			i = props.length,
+			p, v;
+		while (i--) {
+			p = props[i];
+			v = style[p] || style.getPropertyValue(p);
+			a.push(v ? p : _dashedNameLookup[p] || (_dashedNameLookup[p] = _camelToDashed(p)), v);
+		}
+		return style;
+	},
+	_applyInlineStyles = state => {
+		let css = state.css,
+			style = state.element.style,
+			i = 0;
+		state.cache.uncache = 1;
+		for (; i < css.length; i+=2) {
+			css[i+1] ? (style[css[i]] = css[i+1]) : style.removeProperty(css[i]);
+		}
+		if (!css[css.indexOf("transform")+1] && style.translate) { // CSSPlugin adds scale, translate, and rotate inline CSS as "none" in order to keep CSS rules from contaminating transforms.
+			style.removeProperty("translate");
+			style.removeProperty("scale");
+			style.removeProperty("rotate");
+		}
+	},
+	_setFinalStates = (comps, onlyTransforms) => {
+		comps.forEach(c => c.a.cache.uncache = 1);
+		onlyTransforms || comps.finalStates.forEach(_applyInlineStyles);
+	},
+	_absoluteProps = "paddingTop,paddingRight,paddingBottom,paddingLeft,gridArea,transition".split(","), // properties that we must record just
+	_makeAbsolute = (elState, fallbackNode, ignoreBatch) => {
+		let { element, width, height, uncache, getProp } = elState,
+			style = element.style,
+			i = 4,
+			result, displayIsNone, cs;
+		(typeof(fallbackNode) !== "object") && (fallbackNode = elState);
+		if (_batch && ignoreBatch !== 1) {
+			_batch._abs.push({t: element, b: elState, a: elState, sd: 0});
+			_batch._final.push(() => (elState.cache.uncache = 1) && _applyInlineStyles(elState));
+			return element;
+		}
+		displayIsNone = getProp("display") === "none";
+
+		if (!elState.isVisible || displayIsNone) {
+			displayIsNone && (_recordInlineStyles(elState, ["display"]).display = fallbackNode.display);
+			elState.matrix = fallbackNode.matrix;
+			elState.width = width = elState.width || fallbackNode.width;
+			elState.height = height = elState.height || fallbackNode.height;
+		}
+
+		_recordInlineStyles(elState, _absoluteProps);
+		cs = window.getComputedStyle(element);
+		while (i--) {
+			style[_absoluteProps[i]] = cs[_absoluteProps[i]]; // record paddings as px-based because if removed from grid, percentage-based ones could be altered.
+		}
+		style.gridArea = "1 / 1 / 1 / 1";
+		style.transition = "none";
+
+		style.position = "absolute";
+		style.width = width + "px";
+		style.height = height + "px";
+		style.top || (style.top = "0px");
+		style.left || (style.left = "0px");
+		if (uncache) {
+			result = new ElementState(element);
+		} else { // better performance
+			result = _copy(elState, _emptyObj);
+			result.position = "absolute";
+			if (elState.simple) {
+				let bounds = element.getBoundingClientRect();
+				result.matrix = new Matrix2D(1, 0, 0, 1, bounds.left + _getDocScrollLeft(), bounds.top + _getDocScrollTop());
+			} else {
+				result.matrix = getGlobalMatrix(element, false, false, true);
+			}
+		}
+		result = _fit(result, elState, true);
+		elState.x = _closestTenth(result.x, 0.01);
+		elState.y = _closestTenth(result.y, 0.01);
+		return element;
+	},
+	_filterComps = (comps, targets) => {
+		if (targets !== true) {
+			targets = _toArray(targets);
+			comps = comps.filter(c => {
+				if (targets.indexOf((c.sd < 0 ? c.b : c.a).element) !== -1) {
+				    return true;
+				} else {
+					c.t._gsap.renderTransform(1); // we must force transforms to render on anything that isn't being made position: absolute, otherwise the absolute position happens and then when animation begins it applies transforms which can create a new stacking context, throwing off positioning!
+					if (c.b.isVisible) {
+						c.t.style.width = c.b.width + "px"; // otherwise things can collapse when contents are made position: absolute.
+						c.t.style.height = c.b.height + "px";
+					}
+				}
+			});
+		}
+		return comps;
+	},
+	_makeCompsAbsolute = comps => _orderByDOMDepth(comps, true).forEach(c => (c.a.isVisible || c.b.isVisible) && _makeAbsolute(c.sd < 0 ? c.b : c.a, c.b, 1)),
+	_findElStateInState = (state, other) => (other && state.idLookup[_parseElementState(other).id]) || state.elementStates[0],
+	_parseElementState = (elOrNode, props, simple, other) => elOrNode instanceof ElementState ? elOrNode : elOrNode instanceof FlipState ? _findElStateInState(elOrNode, other) : new ElementState(typeof(elOrNode) === "string" ? _getEl(elOrNode) || console.warn(elOrNode + " not found") : elOrNode, props, simple),
+	_recordProps = (elState, props) => {
+		let getProp = gsap.getProperty(elState.element, null, "native"),
+			obj = elState.props = {},
+			i = props.length;
+		while (i--) {
+			obj[props[i]] = (getProp(props[i]) + "").trim();
+		}
+		obj.zIndex && (obj.zIndex = parseFloat(obj.zIndex) || 0);
+		return elState;
+	},
+	_applyProps = (element, props) => {
+		let style = element.style || element, // could pass in a vars object.
+			p;
+		for (p in props) {
+			style[p] = props[p];
+		}
+	},
+	_getID = el => {
+		let id = el.getAttribute("data-flip-id");
+		id || el.setAttribute("data-flip-id", (id = "auto-" + _id++));
+		return id;
+	},
+	_elementsFromElementStates = elStates => elStates.map(elState => elState.element),
+	_handleCallback = (callback, elStates, tl) => callback && elStates.length && tl.add(callback(_elementsFromElementStates(elStates), tl, new FlipState(elStates, 0, true)), 0),
+
+	_fit = (fromState, toState, scale, applyProps, fitChild, vars) => {
+		let { element, cache, parent, x, y } = fromState,
+			{ width, height, scaleX, scaleY, rotation, bounds } = toState,
+			styles = vars && _getStyleSaver && _getStyleSaver(element, "transform"), // requires at least 3.11.5
+			dimensionState = fromState,
+			{e, f} = toState.matrix,
+			deep = fromState.bounds.width !== bounds.width || fromState.bounds.height !== bounds.height || fromState.scaleX !== scaleX || fromState.scaleY !== scaleY || fromState.rotation !== rotation,
+			simple = !deep && fromState.simple && toState.simple && !fitChild,
+			skewX, fromPoint, toPoint, getProp, parentMatrix, matrix, bbox;
+		if (simple || !parent) {
+			scaleX = scaleY = 1;
+			rotation = skewX = 0;
+		} else {
+			parentMatrix = _getInverseGlobalMatrix(parent);
+			matrix = parentMatrix.clone().multiply(toState.ctm ? toState.matrix.clone().multiply(toState.ctm) : toState.matrix); // root SVG elements have a ctm that we must factor out (for example, viewBox:"0 0 94 94" with a width of 200px would scale the internals by 2.127 but when we're matching the size of the root <svg> element itself, that scaling shouldn't factor in!)
+			rotation = _round(Math.atan2(matrix.b, matrix.a) * _RAD2DEG);
+			skewX = _round(Math.atan2(matrix.c, matrix.d) * _RAD2DEG + rotation) % 360; // in very rare cases, minor rounding might end up with 360 which should be 0.
+			scaleX = Math.sqrt(matrix.a ** 2 + matrix.b ** 2);
+			scaleY = Math.sqrt(matrix.c ** 2 + matrix.d ** 2) * Math.cos(skewX * _DEG2RAD);
+			if (fitChild) {
+				fitChild = _toArray(fitChild)[0];
+				getProp = gsap.getProperty(fitChild);
+				bbox = fitChild.getBBox && typeof(fitChild.getBBox) === "function" && fitChild.getBBox();
+				dimensionState = {scaleX: getProp("scaleX"), scaleY: getProp("scaleY"), width: bbox ? bbox.width : Math.ceil(parseFloat(getProp("width", "px"))), height: bbox ? bbox.height : parseFloat(getProp("height", "px")) };
+			}
+			cache.rotation = rotation + "deg";
+			cache.skewX = skewX + "deg";
+		}
+		if (scale) {
+			scaleX *= width === dimensionState.width || !dimensionState.width ? 1 : width / dimensionState.width; // note if widths are both 0, we should make scaleX 1 - some elements have box-sizing that incorporates padding, etc. and we don't want it to collapse in that case.
+			scaleY *= height === dimensionState.height || !dimensionState.height ? 1 : height / dimensionState.height;
+			cache.scaleX = scaleX;
+			cache.scaleY = scaleY;
+		} else {
+			width = _closestTenth(width * scaleX / dimensionState.scaleX, 0);
+			height = _closestTenth(height * scaleY / dimensionState.scaleY, 0);
+			element.style.width = width + "px";
+			element.style.height = height + "px";
+		}
+		// if (fromState.isFixed) { // commented out because it's now taken care of in getGlobalMatrix() with a flag at the end.
+		// 	e -= _getDocScrollLeft();
+		// 	f -= _getDocScrollTop();
+		// }
+		applyProps && _applyProps(element, toState.props);
+		if (simple || !parent) {
+			x += e - fromState.matrix.e;
+			y += f - fromState.matrix.f;
+		} else if (deep || parent !== toState.parent) {
+			cache.renderTransform(1, cache);
+			matrix = getGlobalMatrix(fitChild || element, false, false, true);
+			fromPoint = parentMatrix.apply({x: matrix.e, y: matrix.f});
+			toPoint = parentMatrix.apply({x: e, y: f});
+			x += toPoint.x - fromPoint.x;
+			y += toPoint.y - fromPoint.y;
+		} else { // use a faster/cheaper algorithm if we're just moving x/y
+			parentMatrix.e = parentMatrix.f = 0;
+			toPoint = parentMatrix.apply({x: e - fromState.matrix.e, y: f - fromState.matrix.f});
+			x += toPoint.x;
+			y += toPoint.y;
+		}
+		x = _closestTenth(x, 0.02);
+		y = _closestTenth(y, 0.02);
+		if (vars && !(vars instanceof ElementState)) { // revert
+			styles && styles.revert();
+		} else { // or apply the transform immediately
+			cache.x = x + "px";
+			cache.y = y + "px";
+			cache.renderTransform(1, cache);
+		}
+		if (vars) {
+			vars.x = x;
+			vars.y = y;
+			vars.rotation = rotation;
+			vars.skewX = skewX;
+			if (scale) {
+				vars.scaleX = scaleX;
+				vars.scaleY = scaleY;
+			} else {
+				vars.width = width;
+				vars.height = height;
+			}
+		}
+		return vars || cache;
+	},
+
+	_parseState = (targetsOrState, vars) => targetsOrState instanceof FlipState ? targetsOrState : new FlipState(targetsOrState, vars),
+	_getChangingElState = (toState, fromState, id) => {
+		let to1 = toState.idLookup[id],
+			to2 = toState.alt[id];
+		return to2.isVisible && (!(fromState.getElementState(to2.element) || to2).isVisible || !to1.isVisible) ? to2 : to1;
+	},
+	_bodyMetrics = [], _bodyProps = "width,height,overflowX,overflowY".split(","), _bodyLocked,
+	_lockBodyScroll = lock => { // if there's no scrollbar, we should lock that so that measurements don't get affected by temporary repositioning, like if something is centered in the window.
+		if (lock !== _bodyLocked) {
+			let s = _body.style,
+				w = _body.clientWidth === window.outerWidth,
+				h = _body.clientHeight === window.outerHeight,
+				i = 4;
+			if (lock && (w || h)) {
+				while (i--) {
+					_bodyMetrics[i] = s[_bodyProps[i]];
+				}
+				if (w) {
+					s.width = _body.clientWidth + "px";
+					s.overflowY = "hidden";
+				}
+				if (h) {
+					s.height = _body.clientHeight + "px";
+					s.overflowX = "hidden";
+				}
+				_bodyLocked= lock;
+			} else if (_bodyLocked) {
+				while (i--) {
+					_bodyMetrics[i] ? (s[_bodyProps[i]] = _bodyMetrics[i]) : s.removeProperty(_camelToDashed(_bodyProps[i]));
+				}
+				_bodyLocked = lock;
+			}
+		}
+	},
+
+	_fromTo = (fromState, toState, vars, relative) => { // relative is -1 if "from()", and 1 if "to()"
+		(fromState instanceof FlipState && toState instanceof FlipState) || console.warn("Not a valid state object.");
+		vars = vars || {};
+		let { clearProps, onEnter, onLeave, absolute, absoluteOnLeave, custom, delay, paused, repeat, repeatDelay, yoyo, toggleClass, nested, zIndex, scale, fade, stagger, spin, prune } = vars,
+			props = ("props" in vars ? vars : fromState).props,
+			tweenVars = _copy(vars, _reserved),
+			animation = gsap.timeline({ delay, paused, repeat, repeatDelay, yoyo, data: "isFlip" }),
+			remainingProps = tweenVars,
+			entering = [],
+			leaving = [],
+			comps = [],
+			swapOutTargets = [],
+			spinNum = spin === true ? 1 : spin || 0,
+			spinFunc = typeof(spin) === "function" ? spin : () => spinNum,
+			interrupted = fromState.interrupted || toState.interrupted,
+			addFunc = animation[relative !== 1 ? "to" : "from"],
+			v, p, endTime, i, el, comp, state, targets, finalStates, fromNode, toNode, run, a, b;
+		//relative || (toState = (new FlipState(toState.targets, {props: props})).fit(toState, scale));
+		for (p in toState.idLookup) {
+			toNode = !toState.alt[p] ? toState.idLookup[p] : _getChangingElState(toState, fromState, p);
+			el = toNode.element;
+			fromNode = fromState.idLookup[p];
+			fromState.alt[p] && el === fromNode.element && (fromState.alt[p].isVisible || !toNode.isVisible) && (fromNode = fromState.alt[p]);
+			if (fromNode) {
+				comp = {t: el, b: fromNode, a: toNode, sd: fromNode.element === el ? 0 : toNode.isVisible ? 1 : -1};
+				comps.push(comp);
+				if (comp.sd) {
+					if (comp.sd < 0) {
+						comp.b = toNode;
+						comp.a = fromNode;
+					}
+					// for swapping elements that got interrupted, we must re-record the inline styles to ensure they're not tainted. Remember, .batch() permits getState() not to force in-progress flips to their end state.
+					interrupted && _recordInlineStyles(comp.b, props ? _memoizedRemoveProps[props] : _removeProps);
+					fade && comps.push(comp.swap = {t: fromNode.element, b: comp.b, a: comp.a, sd: -comp.sd, swap: comp});
+				}
+				el._flip = fromNode.element._flip = _batch ? _batch.timeline : animation;
+			} else if (toNode.isVisible) {
+				comps.push({t: el, b: _copy(toNode, {isVisible:1}), a: toNode, sd: 0, entering: 1}); // to include it in the "entering" Array and do absolute positioning if necessary
+				el._flip = _batch ? _batch.timeline : animation;
+			}
+		}
+
+		props && (_memoizedProps[props] || _memoizeProps(props)).forEach(p => tweenVars[p] = i => comps[i].a.props[p]);
+		comps.finalStates = finalStates = [];
+
+		run = () => {
+			_orderByDOMDepth(comps);
+			_lockBodyScroll(true); // otherwise, measurements may get thrown off when things get fit.
+			// TODO: cache the matrix, especially for parent because it'll probably get reused quite a bit, but lock it to a particular cycle(?).
+			for (i = 0; i < comps.length; i++) {
+				comp = comps[i];
+				a = comp.a;
+				b = comp.b;
+				if (prune && !a.isDifferent(b) && !comp.entering) { // only flip if things changed! Don't omit it from comps initially because that'd prevent the element from being positioned absolutely (if necessary)
+					comps.splice(i--, 1);
+				} else {
+					el = comp.t;
+					nested && !(comp.sd < 0) && i && (a.matrix = getGlobalMatrix(el, false, false, true)); // moving a parent affects the position of children
+					if (b.isVisible && a.isVisible) {
+						if (comp.sd < 0) { // swapping OUT (swap direction of -1 is out)
+							state = new ElementState(el, props, fromState.simple);
+							_fit(state, a, scale, 0, 0, state);
+							state.matrix = getGlobalMatrix(el, false, false, true);
+							state.css = comp.b.css;
+							comp.a = a = state;
+							fade && (el.style.opacity = interrupted ? b.opacity : a.opacity);
+							stagger && swapOutTargets.push(el);
+						} else if (comp.sd > 0 && fade) { // swapping IN (swap direction of 1 is in)
+							el.style.opacity = interrupted ? a.opacity - b.opacity : "0";
+						}
+						_fit(a, b, scale, props);
+
+					} else if (b.isVisible !== a.isVisible) { // either entering or leaving (one side is invisible)
+						if (!b.isVisible) { // entering
+							a.isVisible && entering.push(a);
+							comps.splice(i--, 1);
+						} else if (!a.isVisible) { // leaving
+							b.css = a.css;
+							leaving.push(b);
+							comps.splice(i--, 1);
+							absolute && nested && _fit(a, b, scale, props);
+						}
+					}
+					if (!scale) {
+						el.style.maxWidth = Math.max(a.width, b.width) + "px";
+						el.style.maxHeight = Math.max(a.height, b.height) + "px";
+						el.style.minWidth = Math.min(a.width, b.width) + "px";
+						el.style.minHeight = Math.min(a.height, b.height) + "px";
+					}
+					nested && toggleClass && el.classList.add(toggleClass);
+				}
+				finalStates.push(a);
+			}
+			let classTargets;
+			if (toggleClass) {
+				classTargets = finalStates.map(s => s.element);
+				nested && classTargets.forEach(e => e.classList.remove(toggleClass)); // there could be a delay, so don't leave the classes applied (we'll do it in a timeline callback)
+			}
+
+			_lockBodyScroll(false);
+
+			if (scale) {
+				tweenVars.scaleX = i => comps[i].a.scaleX;
+				tweenVars.scaleY = i => comps[i].a.scaleY;
+			} else {
+				tweenVars.width = i => comps[i].a.width + "px";
+				tweenVars.height = i => comps[i].a.height + "px";
+				tweenVars.autoRound = vars.autoRound || false;
+			}
+			tweenVars.x = i => comps[i].a.x + "px";
+			tweenVars.y = i => comps[i].a.y + "px";
+			tweenVars.rotation = i => comps[i].a.rotation + (spin ? spinFunc(i, targets[i], targets) * 360 : 0);
+			tweenVars.skewX = i => comps[i].a.skewX;
+
+			targets = comps.map(c => c.t);
+
+			if (zIndex || zIndex === 0) {
+				tweenVars.modifiers = {zIndex: () => zIndex};
+				tweenVars.zIndex = zIndex;
+				tweenVars.immediateRender = vars.immediateRender !== false;
+			}
+
+			fade && (tweenVars.opacity = i => comps[i].sd < 0 ? 0 : comps[i].sd > 0 ? comps[i].a.opacity : "+=0");
+
+			if (swapOutTargets.length) {
+				stagger = gsap.utils.distribute(stagger);
+				let dummyArray = targets.slice(swapOutTargets.length);
+				tweenVars.stagger = (i, el) => stagger(~swapOutTargets.indexOf(el) ? targets.indexOf(comps[i].swap.t) : i, el, dummyArray);
+			}
+
+			// // for testing...
+			// gsap.delayedCall(vars.data ? 50 : 1, function() {
+			// 	animation.eventCallback("onComplete", () => _setFinalStates(comps, !clearProps));
+			// 	addFunc.call(animation, targets, tweenVars, 0).play();
+			// });
+			// return;
+
+			_callbacks.forEach(name => vars[name] && animation.eventCallback(name, vars[name], vars[name + "Params"])); // apply callbacks to the timeline, not tweens (because "custom" timing can make multiple tweens)
+
+			if (custom && targets.length) { // bust out the custom properties as their own tweens so they can use different eases, durations, etc.
+				remainingProps = _copy(tweenVars, _reserved);
+				if ("scale" in custom) {
+					custom.scaleX = custom.scaleY = custom.scale;
+					delete custom.scale;
+				}
+				for (p in custom) {
+					v = _copy(custom[p], _fitReserved);
+					v[p] = tweenVars[p];
+					!("duration" in v) && ("duration" in tweenVars) && (v.duration = tweenVars.duration);
+					v.stagger = tweenVars.stagger;
+					addFunc.call(animation, targets, v, 0);
+					delete remainingProps[p];
+				}
+			}
+			if (targets.length || leaving.length || entering.length) {
+				toggleClass && animation.add(() => _toggleClass(classTargets, toggleClass, animation._zTime < 0 ? "remove" : "add"), 0) && !paused && _toggleClass(classTargets, toggleClass, "add");
+				targets.length && addFunc.call(animation, targets, remainingProps, 0);
+			}
+
+			_handleCallback(onEnter, entering, animation);
+			_handleCallback(onLeave, leaving, animation);
+
+			let batchTl = _batch && _batch.timeline;
+
+			if (batchTl) {
+				batchTl.add(animation, 0);
+				_batch._final.push(() => _setFinalStates(comps, !clearProps));
+			}
+
+			endTime = animation.duration();
+			animation.call(() => {
+				let forward = animation.time() >= endTime;
+				forward && !batchTl && _setFinalStates(comps, !clearProps);
+				toggleClass && _toggleClass(classTargets, toggleClass, forward ? "remove" : "add");
+			});
+		};
+
+		absoluteOnLeave && (absolute = comps.filter(comp => !comp.sd && !comp.a.isVisible && comp.b.isVisible).map(comp => comp.a.element));
+		if (_batch) {
+			absolute && _batch._abs.push(..._filterComps(comps, absolute));
+			_batch._run.push(run);
+		} else {
+			absolute && _makeCompsAbsolute(_filterComps(comps, absolute)); // when making absolute, we must go in a very particular order so that document flow changes don't affect things. Don't make it visible if both the before and after states are invisible! There's no point, and it could make things appear visible during the flip that shouldn't be.
+			run();
+		}
+
+		let anim = _batch ? _batch.timeline : animation;
+		anim.revert = () => _killFlip(anim, 1, 1); // a Flip timeline should behave very different when reverting - it should actually jump to the end so that styles get cleared out.
+
+		return anim;
+	},
+	_interrupt = tl => {
+		tl.vars.onInterrupt && tl.vars.onInterrupt.apply(tl, tl.vars.onInterruptParams || []);
+		tl.getChildren(true, false, true).forEach(_interrupt);
+	},
+	_killFlip = (tl, action, force) => { // action: 0 = nothing, 1 = complete, 2 = only kill (don't complete)
+		if (tl && tl.progress() < 1 && (!tl.paused() || force)) {
+			if (action) {
+				_interrupt(tl);
+				action < 2 && tl.progress(1); // we should also kill it in case it was added to a parent timeline.
+				tl.kill();
+			}
+			return true;
+		}
+	},
+	_createLookup = state => {
+		let lookup = state.idLookup = {},
+			alt = state.alt = {},
+			elStates = state.elementStates,
+			i = elStates.length,
+			elState;
+		while (i--) {
+			elState = elStates[i];
+			lookup[elState.id] ? (alt[elState.id] = elState) : (lookup[elState.id] = elState);
+		}
+	};
+
+
+
+
+
+
+class FlipState {
+
+	constructor(targets, vars, targetsAreElementStates) {
+		this.props = vars && vars.props;
+		this.simple = !!(vars && vars.simple);
+		if (targetsAreElementStates) {
+			this.targets = _elementsFromElementStates(targets);
+			this.elementStates = targets;
+			_createLookup(this);
+		} else {
+			this.targets = _toArray(targets);
+			let soft = vars && (vars.kill === false || (vars.batch && !vars.kill));
+			_batch && !soft && _batch._kill.push(this);
+			this.update(soft || !!_batch); // when batching, don't force in-progress flips to their end; we need to do that AFTER all getStates() are called.
+		}
+	}
+
+	update(soft) {
+		this.elementStates = this.targets.map(el => new ElementState(el, this.props, this.simple));
+		_createLookup(this);
+		this.interrupt(soft);
+		this.recordInlineStyles();
+		return this;
+	}
+
+	clear() {
+		this.targets.length = this.elementStates.length = 0;
+		_createLookup(this);
+		return this;
+	}
+
+	fit(state, scale, nested) {
+		let elStatesInOrder = _orderByDOMDepth(this.elementStates.slice(0), false, true),
+			toElStates = (state || this).idLookup,
+			i = 0,
+			fromNode, toNode;
+		for (; i < elStatesInOrder.length; i++) {
+			fromNode = elStatesInOrder[i];
+			nested && (fromNode.matrix = getGlobalMatrix(fromNode.element, false, false, true)); // moving a parent affects the position of children
+			toNode = toElStates[fromNode.id];
+			toNode && _fit(fromNode, toNode, scale, true, 0, fromNode);
+			fromNode.matrix = getGlobalMatrix(fromNode.element, false, false, true);
+		}
+		return this;
+	}
+
+	getProperty(element, property) {
+		let es = this.getElementState(element) || _emptyObj;
+		return (property in es ? es : es.props || _emptyObj)[property];
+	}
+
+	add(state) {
+		let i = state.targets.length,
+			lookup = this.idLookup,
+			alt = this.alt,
+			index, es, es2;
+		while (i--) {
+			es = state.elementStates[i];
+			es2 = lookup[es.id];
+			if (es2 && (es.element === es2.element || (alt[es.id] && alt[es.id].element === es.element))) { // if the flip id is already in this FlipState, replace it!
+				index = this.elementStates.indexOf(es.element === es2.element ? es2 : alt[es.id]);
+				this.targets.splice(index, 1, state.targets[i]);
+				this.elementStates.splice(index, 1, es);
+			} else {
+				this.targets.push(state.targets[i]);
+				this.elementStates.push(es);
+			}
+		}
+		state.interrupted && (this.interrupted = true);
+		state.simple || (this.simple = false);
+		_createLookup(this);
+		return this;
+	}
+
+	compare(state) {
+		let l1 = state.idLookup,
+			l2 = this.idLookup,
+			unchanged = [],
+			changed = [],
+			enter = [],
+			leave = [],
+			targets = [],
+			a1 = state.alt,
+			a2 = this.alt,
+			place = (s1, s2, el) => (s1.isVisible !== s2.isVisible ? (s1.isVisible ? enter : leave) : s1.isVisible ? changed : unchanged).push(el) && targets.push(el),
+			placeIfDoesNotExist = (s1, s2, el) => targets.indexOf(el) < 0 && place(s1, s2, el),
+			s1, s2, p, el, s1Alt, s2Alt, c1, c2;
+		for (p in l1) {
+			s1Alt = a1[p];
+			s2Alt = a2[p];
+			s1 = !s1Alt ? l1[p] : _getChangingElState(state, this, p);
+			el = s1.element;
+			s2 = l2[p];
+			if (s2Alt) {
+				c2 = s2.isVisible || (!s2Alt.isVisible && el === s2.element) ? s2 : s2Alt;
+				c1 = s1Alt && !s1.isVisible && !s1Alt.isVisible && c2.element === s1Alt.element ? s1Alt : s1;
+				//c1.element !== c2.element && c1.element === s2.element && (c2 = s2);
+				if (c1.isVisible && c2.isVisible && c1.element !== c2.element) { // swapping, so force into "changed" array
+					(c1.isDifferent(c2) ? changed : unchanged).push(c1.element, c2.element);
+					targets.push(c1.element, c2.element);
+				} else {
+					place(c1, c2, c1.element);
+				}
+				s1Alt && c1.element === s1Alt.element && (s1Alt = l1[p]);
+				placeIfDoesNotExist(c1.element !== s2.element && s1Alt ? s1Alt : c1, s2, s2.element);
+				placeIfDoesNotExist(s1Alt && s1Alt.element === s2Alt.element ? s1Alt : c1, s2Alt, s2Alt.element);
+				s1Alt && placeIfDoesNotExist(s1Alt, s2Alt.element === s1Alt.element ? s2Alt : s2, s1Alt.element);
+			} else {
+				!s2 ? enter.push(el) : !s2.isDifferent(s1) ? unchanged.push(el) : place(s1, s2, el);
+				s1Alt && placeIfDoesNotExist(s1Alt, s2, s1Alt.element);
+			}
+		}
+		for (p in l2) {
+			if (!l1[p]) {
+				leave.push(l2[p].element);
+				a2[p] && leave.push(a2[p].element);
+			}
+		}
+		return {changed, unchanged, enter, leave};
+	}
+
+	recordInlineStyles() {
+		let props = _memoizedRemoveProps[this.props] || _removeProps,
+			i = this.elementStates.length;
+		while (i--) {
+			_recordInlineStyles(this.elementStates[i], props);
+		}
+	}
+
+	interrupt(soft) { // soft = DON'T force in-progress flip animations to completion (like when running a batch, we can't immediately kill flips when getting states because it could contaminate positioning and other .getState() calls that will run in the batch (we kill AFTER all the .getState() calls complete).
+		let timelines = [];
+		this.targets.forEach(t => {
+			let tl = t._flip,
+				foundInProgress = _killFlip(tl, soft ? 0 : 1);
+			soft && foundInProgress && timelines.indexOf(tl) < 0 && tl.add(() => this.updateVisibility());
+			foundInProgress && timelines.push(tl);
+		});
+		!soft && timelines.length && this.updateVisibility(); // if we found an in-progress Flip animation, we must record all the values in their current state at that point BUT we should update the isVisible value AFTER pushing that flip to completion so that elements that are entering or leaving will populate those Arrays properly.
+		this.interrupted || (this.interrupted = !!timelines.length);
+	}
+
+	updateVisibility() {
+		this.elementStates.forEach(es => {
+			let b = es.element.getBoundingClientRect();
+			es.isVisible = !!(b.width || b.height || b.top || b.left);
+			es.uncache = 1;
+		});
+	}
+
+	getElementState(element) {
+		return this.elementStates[this.targets.indexOf(_getEl(element))];
+	}
+
+	makeAbsolute() {
+		return _orderByDOMDepth(this.elementStates.slice(0), true, true).map(_makeAbsolute);
+	}
+
+}
+
+
+
+class ElementState {
+
+	constructor(element, props, simple) {
+		this.element = element;
+		this.update(props, simple);
+	}
+
+	isDifferent(state) {
+		let b1 = this.bounds,
+			b2 = state.bounds;
+		return b1.top !== b2.top || b1.left !== b2.left || b1.width !== b2.width || b1.height !== b2.height || !this.matrix.equals(state.matrix) || this.opacity !== state.opacity || (this.props && state.props && JSON.stringify(this.props) !== JSON.stringify(state.props));
+	}
+
+	update(props, simple) {
+		let self = this,
+			element = self.element,
+			getProp = gsap.getProperty(element),
+			cache = gsap.core.getCache(element),
+			bounds = element.getBoundingClientRect(),
+			bbox = element.getBBox && typeof(element.getBBox) === "function" && element.nodeName.toLowerCase() !== "svg" && element.getBBox(),
+			m = simple ? new Matrix2D(1, 0, 0, 1, bounds.left + _getDocScrollLeft(), bounds.top + _getDocScrollTop()) : getGlobalMatrix(element, false, false, true);
+		self.getProp = getProp;
+		self.element = element;
+		self.id = _getID(element);
+		self.matrix = m;
+		self.cache = cache;
+		self.bounds = bounds;
+		self.isVisible = !!(bounds.width || bounds.height || bounds.left || bounds.top);
+		self.display = getProp("display");
+		self.position = getProp("position");
+		self.parent = element.parentNode;
+		self.x = getProp("x");
+		self.y = getProp("y");
+		self.scaleX = cache.scaleX;
+		self.scaleY = cache.scaleY;
+		self.rotation = getProp("rotation");
+		self.skewX = getProp("skewX");
+		self.opacity = getProp("opacity");
+		self.width =  bbox ? bbox.width : _closestTenth(getProp("width", "px"), 0.04); // round up to the closest 0.1 so that text doesn't wrap.
+		self.height = bbox ? bbox.height : _closestTenth(getProp("height", "px"), 0.04);
+		props && _recordProps(self, _memoizedProps[props] || _memoizeProps(props));
+		self.ctm = element.getCTM && element.nodeName.toLowerCase() === "svg" && _getCTM(element).inverse();
+		self.simple = simple || (_round(m.a) === 1 && !_round(m.b) && !_round(m.c) && _round(m.d) === 1); // allows us to speed through some other tasks if it's not scale/rotated
+		self.uncache = 0;
+	}
+
+}
+
+class FlipAction {
+	constructor(vars, batch) {
+		this.vars = vars;
+		this.batch = batch;
+		this.states = [];
+		this.timeline = batch.timeline;
+	}
+
+	getStateById(id) {
+		let i = this.states.length;
+		while (i--) {
+			if (this.states[i].idLookup[id]) {
+				return this.states[i];
+			}
+		}
+	}
+
+	kill() {
+		this.batch.remove(this);
+	}
+}
+
+class FlipBatch {
+	constructor(id) {
+		this.id = id;
+		this.actions = [];
+		this._kill = [];
+		this._final = [];
+		this._abs = [];
+		this._run = [];
+		this.data = {};
+		this.state = new FlipState();
+		this.timeline = gsap.timeline();
+	}
+
+	add(config) {
+		let result = this.actions.filter(action => action.vars === config);
+		if (result.length) {
+			return result[0];
+		}
+		result = new FlipAction(typeof(config) === "function" ? {animate: config} : config, this);
+		this.actions.push(result);
+		return result;
+	}
+
+	remove(action) {
+		let i = this.actions.indexOf(action);
+		i >= 0 && this.actions.splice(i, 1);
+		return this;
+	}
+
+	getState(merge) {
+		let prevBatch = _batch,
+			prevAction = _batchAction;
+		_batch = this;
+		this.state.clear();
+		this._kill.length = 0;
+		this.actions.forEach(action => {
+			if (action.vars.getState) {
+				action.states.length = 0;
+				_batchAction = action;
+				action.state = action.vars.getState(action);
+			}
+			merge && action.states.forEach(s => this.state.add(s));
+		});
+		_batchAction = prevAction;
+		_batch = prevBatch;
+		this.killConflicts();
+		return this;
+	}
+
+	animate() {
+		let prevBatch = _batch,
+			tl = this.timeline,
+			i = this.actions.length,
+			finalStates, endTime;
+		_batch = this;
+		tl.clear();
+		this._abs.length = this._final.length = this._run.length = 0;
+		this.actions.forEach(a => {
+			a.vars.animate && a.vars.animate(a);
+			let onEnter = a.vars.onEnter,
+				onLeave = a.vars.onLeave,
+				targets = a.targets, s, result;
+			if (targets && targets.length && (onEnter || onLeave)) {
+				s = new FlipState();
+				a.states.forEach(state => s.add(state));
+				result = s.compare(Flip.getState(targets));
+				result.enter.length && onEnter && onEnter(result.enter);
+				result.leave.length && onLeave && onLeave(result.leave);
+			}
+		});
+		_makeCompsAbsolute(this._abs);
+		this._run.forEach(f => f());
+		endTime = tl.duration();
+		finalStates = this._final.slice(0);
+		tl.add(() => {
+			if (endTime <= tl.time()) { // only call if moving forward in the timeline (in case it's nested in a timeline that gets reversed)
+				finalStates.forEach(f => f());
+				_forEachBatch(this, "onComplete");
+			}
+		});
+		_batch = prevBatch;
+		while (i--) {
+			this.actions[i].vars.once && this.actions[i].kill();
+		}
+		_forEachBatch(this, "onStart");
+		tl.restart();
+		return this;
+	}
+
+	loadState(done) {
+		done || (done = () => 0);
+		let queue = [];
+		this.actions.forEach(c => {
+			if (c.vars.loadState) {
+				let i, f = targets => {
+					targets && (c.targets = targets);
+					i = queue.indexOf(f);
+					if (~i) {
+						queue.splice(i, 1);
+						queue.length || done();
+					}
+				};
+				queue.push(f);
+				c.vars.loadState(f);
+			}
+		});
+		queue.length || done();
+		return this;
+	}
+
+	setState() {
+		this.actions.forEach(c => c.targets = c.vars.setState && c.vars.setState(c));
+		return this;
+	}
+
+	killConflicts(soft) {
+		this.state.interrupt(soft);
+		this._kill.forEach(state => state.interrupt(soft));
+		return this;
+	}
+
+	run(skipGetState, merge) {
+		if (this !== _batch) {
+			skipGetState || this.getState(merge);
+			this.loadState(() => {
+				if (!this._killed) {
+					this.setState();
+					this.animate();
+				}
+			});
+		}
+		return this;
+	}
+
+	clear(stateOnly) {
+		this.state.clear();
+		stateOnly || (this.actions.length = 0);
+	}
+
+	getStateById(id) {
+		let i = this.actions.length,
+			s;
+		while (i--) {
+			s = this.actions[i].getStateById(id);
+			if (s) {
+				return s;
+			}
+		}
+		return this.state.idLookup[id] && this.state;
+	}
+
+	kill() {
+		this._killed = 1;
+		this.clear();
+		delete _batchLookup[this.id];
+	}
+}
+
+
+class Flip {
+
+	static getState(targets, vars) {
+		let state = _parseState(targets, vars);
+		_batchAction && _batchAction.states.push(state);
+		vars && vars.batch && Flip.batch(vars.batch).state.add(state);
+		return state;
+	}
+
+	static from(state, vars) {
+		vars = vars || {};
+		("clearProps" in vars) || (vars.clearProps = true);
+		return _fromTo(state, _parseState(vars.targets || state.targets, {props: vars.props || state.props, simple: vars.simple, kill: !!vars.kill}), vars, -1);
+	}
+
+	static to(state, vars) {
+		return _fromTo(state, _parseState(vars.targets || state.targets, {props: vars.props || state.props, simple: vars.simple, kill: !!vars.kill}), vars, 1);
+	}
+
+	static fromTo(fromState, toState, vars) {
+		return _fromTo(fromState, toState, vars);
+	}
+
+	static fit(fromEl, toEl, vars) {
+		let v = vars ? _copy(vars, _fitReserved) : {},
+			{absolute, scale, getVars, props, runBackwards, onComplete, simple} = vars || v,
+			fitChild = vars && vars.fitChild && _getEl(vars.fitChild),
+			before = _parseElementState(toEl, props, simple, fromEl),
+			after = _parseElementState(fromEl, 0, simple, before),
+			inlineProps = props ? _memoizedRemoveProps[props] : _removeProps,
+			ctx = gsap.context();
+		props && _applyProps(v, before.props);
+		_recordInlineStyles(after, inlineProps);
+		if (runBackwards) {
+			("immediateRender" in v) || (v.immediateRender = true);
+			v.onComplete = function() {
+				_applyInlineStyles(after);
+				onComplete && onComplete.apply(this, arguments);
+			};
+		}
+		absolute && _makeAbsolute(after, before);
+		v = _fit(after, before, scale || fitChild, props, fitChild, v.duration || getVars ? v : 0);
+		ctx && !getVars && ctx.add(() => () => _applyInlineStyles(after));
+		return getVars ? v : v.duration ? gsap.to(after.element, v) : null;
+	}
+
+	static makeAbsolute(targetsOrStates, vars) {
+		return (targetsOrStates instanceof FlipState ? targetsOrStates : new FlipState(targetsOrStates, vars)).makeAbsolute();
+	}
+
+	static batch(id) {
+		id || (id = "default");
+		return _batchLookup[id] || (_batchLookup[id] = new FlipBatch(id));
+	}
+
+	static killFlipsOf(targets, complete) {
+		(targets instanceof FlipState ? targets.targets : _toArray(targets)).forEach(t => t && _killFlip(t._flip, complete !== false ? 1 : 2));
+	}
+
+	static isFlipping(target) {
+		let f = Flip.getByTarget(target);
+		return !!f && f.isActive();
+	}
+
+	static getByTarget(target) {
+		return (_getEl(target) || _emptyObj)._flip;
+	}
+
+	static getElementState(target, props) {
+		return new ElementState(_getEl(target), props);
+	}
+
+	static convertCoordinates(fromElement, toElement, point) {
+		let m = getGlobalMatrix(toElement, true, true).multiply(getGlobalMatrix(fromElement));
+		return point ? m.apply(point) : m;
+	}
+
+
+	static register(core) {
+		_body = typeof(document) !== "undefined" && document.body;
+		if (_body) {
+			gsap = core;
+			_setDoc(_body);
+			_toArray = gsap.utils.toArray;
+			_getStyleSaver = gsap.core.getStyleSaver;
+			let snap = gsap.utils.snap(0.1);
+			_closestTenth = (value, add) => snap(parseFloat(value) + add);
+		}
+	}
+}
+
+Flip.version = "3.12.5";
+
+// function whenImagesLoad(el, func) {
+// 	let pending = [],
+// 		onLoad = e => {
+// 			pending.splice(pending.indexOf(e.target), 1);
+// 			e.target.removeEventListener("load", onLoad);
+// 			pending.length || func();
+// 		};
+// 	gsap.utils.toArray(el.tagName.toLowerCase() === "img" ? el : el.querySelectorAll("img")).forEach(img => img.complete || img.addEventListener("load", onLoad) || pending.push(img));
+// 	pending.length || func();
+// }
+
+typeof(window) !== "undefined" && window.gsap && window.gsap.registerPlugin(Flip);
+
+export { Flip, Flip as default };
diff --git a/dist/MotionPathPlugin.cjs b/dist/MotionPathPlugin.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..3a66db43ad82da1780e1df373549464582aee491
--- /dev/null
+++ b/dist/MotionPathPlugin.cjs
@@ -0,0 +1,275 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+const paths = require('./shared/gsap.82b47a43.cjs');
+const matrix = require('./shared/gsap.b4b61722.cjs');
+
+/*!
+ * MotionPathPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let _xProps = "x,translateX,left,marginLeft,xPercent".split(","),
+	_yProps = "y,translateY,top,marginTop,yPercent".split(","),
+	_DEG2RAD = Math.PI / 180,
+	gsap, PropTween, _getUnit, _toArray, _getStyleSaver, _reverting,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_populateSegmentFromArray = (segment, values, property, mode) => { //mode: 0 = x but don't fill y yet, 1 = y, 2 = x and fill y with 0.
+		let l = values.length,
+			si = mode === 2 ? 0 : mode,
+			i = 0;
+		for (; i < l; i++) {
+			segment[si] = parseFloat(values[i][property]);
+			mode === 2 && (segment[si+1] = 0);
+			si += 2;
+		}
+		return segment;
+	},
+	_getPropNum = (target, prop, unit) => parseFloat(target._gsap.get(target, prop, unit || "px")) || 0,
+	_relativize = segment => {
+		let x = segment[0],
+			y = segment[1],
+			i;
+		for (i = 2; i < segment.length; i+=2) {
+			x = (segment[i] += x);
+			y = (segment[i+1] += y);
+		}
+	},
+	// feed in an array of quadratic bezier points like [{x: 0, y: 0}, ...] and it'll convert it to cubic bezier
+	// _quadToCubic = points => {
+	// 	let cubic = [],
+	// 		l = points.length - 1,
+	// 		i = 1,
+	// 		a, b, c;
+	// 	for (; i < l; i+=2) {
+	// 		a = points[i-1];
+	// 		b = points[i];
+	// 		c = points[i+1];
+	// 		cubic.push(a, {x: (2 * b.x + a.x) / 3, y: (2 * b.y + a.y) / 3}, {x: (2 * b.x + c.x) / 3, y: (2 * b.y + c.y) / 3});
+	// 	}
+	// 	cubic.push(points[l]);
+	// 	return cubic;
+	// },
+	_segmentToRawPath = (plugin, segment, target, x, y, slicer, vars, unitX, unitY) => {
+		if (vars.type === "cubic") {
+			segment = [segment];
+		} else {
+			vars.fromCurrent !== false && segment.unshift(_getPropNum(target, x, unitX), y ? _getPropNum(target, y, unitY) : 0);
+			vars.relative && _relativize(segment);
+			let pointFunc = y ? paths.pointsToSegment : paths.flatPointsToSegment;
+			segment = [pointFunc(segment, vars.curviness)];
+		}
+		segment = slicer(_align(segment, target, vars));
+		_addDimensionalPropTween(plugin, target, x, segment, "x", unitX);
+		y && _addDimensionalPropTween(plugin, target, y, segment, "y", unitY);
+		return paths.cacheRawPathMeasurements(segment, vars.resolution || (vars.curviness === 0 ? 20 : 12)); //when curviness is 0, it creates control points right on top of the anchors which makes it more sensitive to resolution, thus we change the default accordingly.
+	},
+	_emptyFunc = v => v,
+	_numExp = /[-+\.]*\d+\.?(?:e-|e\+)?\d*/g,
+	_originToPoint = (element, origin, parentMatrix) => { // origin is an array of normalized values (0-1) in relation to the width/height, so [0.5, 0.5] would be the center. It can also be "auto" in which case it will be the top left unless it's a <path>, when it will start at the beginning of the path itself.
+		let m = matrix.getGlobalMatrix(element),
+			x = 0,
+			y = 0,
+			svg;
+		if ((element.tagName + "").toLowerCase() === "svg") {
+			svg = element.viewBox.baseVal;
+			svg.width || (svg = {width: +element.getAttribute("width"), height: +element.getAttribute("height")});
+		} else {
+			svg = origin && element.getBBox && element.getBBox();
+		}
+		if (origin && origin !== "auto") {
+			x = origin.push ? origin[0] * (svg ? svg.width : element.offsetWidth || 0) : origin.x;
+			y = origin.push ? origin[1] * (svg ? svg.height : element.offsetHeight || 0) : origin.y;
+		}
+		return parentMatrix.apply( x || y ? m.apply({x: x, y: y}) : {x: m.e, y: m.f} );
+	},
+	_getAlignMatrix = (fromElement, toElement, fromOrigin, toOrigin) => {
+		let parentMatrix = matrix.getGlobalMatrix(fromElement.parentNode, true, true),
+			m = parentMatrix.clone().multiply(matrix.getGlobalMatrix(toElement)),
+			fromPoint = _originToPoint(fromElement, fromOrigin, parentMatrix),
+			{x, y} = _originToPoint(toElement, toOrigin, parentMatrix),
+			p;
+		m.e = m.f = 0;
+		if (toOrigin === "auto" && toElement.getTotalLength && toElement.tagName.toLowerCase() === "path") {
+			p = toElement.getAttribute("d").match(_numExp) || [];
+			p = m.apply({x:+p[0], y:+p[1]});
+			x += p.x;
+			y += p.y;
+		}
+		//if (p || (toElement.getBBox && fromElement.getBBox && toElement.ownerSVGElement === fromElement.ownerSVGElement)) {
+		if (p) {
+			p = m.apply(toElement.getBBox());
+			x -= p.x;
+			y -= p.y;
+		}
+		m.e = x - fromPoint.x;
+		m.f = y - fromPoint.y;
+		return m;
+	},
+	_align = (rawPath, target, {align, matrix, offsetX, offsetY, alignOrigin}) => {
+		let x = rawPath[0][0],
+			y = rawPath[0][1],
+			curX = _getPropNum(target, "x"),
+			curY = _getPropNum(target, "y"),
+			alignTarget, m, p;
+		if (!rawPath || !rawPath.length) {
+			return paths.getRawPath("M0,0L0,0");
+		}
+		if (align) {
+			if (align === "self" || ((alignTarget = _toArray(align)[0] || target) === target)) {
+				paths.transformRawPath(rawPath, 1, 0, 0, 1, curX - x, curY - y);
+			} else {
+				if (alignOrigin && alignOrigin[2] !== false) {
+					gsap.set(target, {transformOrigin:(alignOrigin[0] * 100) + "% " + (alignOrigin[1] * 100) + "%"});
+				} else {
+					alignOrigin = [_getPropNum(target, "xPercent") / -100, _getPropNum(target, "yPercent") / -100];
+				}
+				m = _getAlignMatrix(target, alignTarget, alignOrigin, "auto");
+				p = m.apply({x: x, y: y});
+				paths.transformRawPath(rawPath, m.a, m.b, m.c, m.d, curX + m.e - (p.x - m.e), curY + m.f - (p.y - m.f));
+			}
+		}
+		if (matrix) {
+			paths.transformRawPath(rawPath, matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);
+		} else if (offsetX || offsetY) {
+			paths.transformRawPath(rawPath, 1, 0, 0, 1, offsetX || 0, offsetY || 0);
+		}
+		return rawPath;
+	},
+	_addDimensionalPropTween = (plugin, target, property, rawPath, pathProperty, forceUnit) => {
+		let cache = target._gsap,
+			harness = cache.harness,
+			alias = (harness && harness.aliases && harness.aliases[property]),
+			prop = alias && alias.indexOf(",") < 0 ? alias : property,
+			pt = plugin._pt = new PropTween(plugin._pt, target, prop, 0, 0, _emptyFunc, 0, cache.set(target, prop, plugin));
+		pt.u = _getUnit(cache.get(target, prop, forceUnit)) || 0;
+		pt.path = rawPath;
+		pt.pp = pathProperty;
+		plugin._props.push(prop);
+	},
+	_sliceModifier = (start, end) => rawPath => (start || end !== 1) ? paths.sliceRawPath(rawPath, start, end) : rawPath;
+
+
+const MotionPathPlugin = {
+	version: "3.12.5",
+	name: "motionPath",
+	register(core, Plugin, propTween) {
+		gsap = core;
+		_getUnit = gsap.utils.getUnit;
+		_toArray = gsap.utils.toArray;
+		_getStyleSaver = gsap.core.getStyleSaver;
+		_reverting = gsap.core.reverting || function() {};
+		PropTween = propTween;
+	},
+	init(target, vars, tween) {
+		if (!gsap) {
+			console.warn("Please gsap.registerPlugin(MotionPathPlugin)");
+			return false;
+		}
+		if (!(typeof(vars) === "object" && !vars.style) || !vars.path) {
+			vars = {path:vars};
+		}
+		let rawPaths = [],
+			{path, autoRotate, unitX, unitY, x, y} = vars,
+			firstObj = path[0],
+			slicer = _sliceModifier(vars.start, ("end" in vars) ? vars.end : 1),
+			rawPath, p;
+		this.rawPaths = rawPaths;
+		this.target = target;
+		this.tween = tween;
+		this.styles = _getStyleSaver && _getStyleSaver(target, "transform");
+		if ((this.rotate = (autoRotate || autoRotate === 0))) { //get the rotational data FIRST so that the setTransform() method is called in the correct order in the render() loop - rotation gets set last.
+			this.rOffset = parseFloat(autoRotate) || 0;
+			this.radians = !!vars.useRadians;
+			this.rProp = vars.rotation || "rotation";                       // rotation property
+			this.rSet = target._gsap.set(target, this.rProp, this);         // rotation setter
+			this.ru = _getUnit(target._gsap.get(target, this.rProp)) || 0;  // rotation units
+		}
+		if (Array.isArray(path) && !("closed" in path) && typeof(firstObj) !== "number") {
+			for (p in firstObj) {
+				if (!x && ~_xProps.indexOf(p)) {
+					x = p;
+				} else if (!y && ~_yProps.indexOf(p)) {
+					y = p;
+				}
+			}
+			if (x && y) { //correlated values
+				rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray(_populateSegmentFromArray([], path, x, 0), path, y, 1), target, x, y, slicer, vars, unitX || _getUnit(path[0][x]), unitY || _getUnit(path[0][y])));
+			} else {
+				x = y = 0;
+			}
+			for (p in firstObj) {
+				p !== x && p !== y && rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray([], path, p, 2), target, p, 0, slicer, vars, _getUnit(path[0][p])));
+			}
+		} else {
+			rawPath = slicer(_align(paths.getRawPath(vars.path), target, vars));
+			paths.cacheRawPathMeasurements(rawPath, vars.resolution);
+			rawPaths.push(rawPath);
+			_addDimensionalPropTween(this, target, vars.x || "x", rawPath, "x", vars.unitX || "px");
+			_addDimensionalPropTween(this, target, vars.y || "y", rawPath, "y", vars.unitY || "px");
+		}
+	},
+	render(ratio, data) {
+		let rawPaths = data.rawPaths,
+			i = rawPaths.length,
+			pt = data._pt;
+		if (data.tween._time || !_reverting()) {
+			if (ratio > 1) {
+				ratio = 1;
+			} else if (ratio < 0) {
+				ratio = 0;
+			}
+			while (i--) {
+				paths.getPositionOnPath(rawPaths[i], ratio, !i && data.rotate, rawPaths[i]);
+			}
+			while (pt) {
+				pt.set(pt.t, pt.p, pt.path[pt.pp] + pt.u, pt.d, ratio);
+				pt = pt._next;
+			}
+			data.rotate && data.rSet(data.target, data.rProp, rawPaths[0].angle * (data.radians ? _DEG2RAD : 1) + data.rOffset + data.ru, data, ratio);
+		} else {
+			data.styles.revert();
+		}
+	},
+	getLength(path) {
+		return paths.cacheRawPathMeasurements(paths.getRawPath(path)).totalLength;
+	},
+	sliceRawPath: paths.sliceRawPath,
+	getRawPath: paths.getRawPath,
+	pointsToSegment: paths.pointsToSegment,
+	stringToRawPath: paths.stringToRawPath,
+	rawPathToString: paths.rawPathToString,
+	transformRawPath: paths.transformRawPath,
+	getGlobalMatrix: matrix.getGlobalMatrix,
+	getPositionOnPath: paths.getPositionOnPath,
+	cacheRawPathMeasurements: paths.cacheRawPathMeasurements,
+	convertToPath: (targets, swap) => _toArray(targets).map(target => paths.convertToPath(target, swap !== false)),
+	convertCoordinates(fromElement, toElement, point) {
+		let m = matrix.getGlobalMatrix(toElement, true, true).multiply(matrix.getGlobalMatrix(fromElement));
+		return point ? m.apply(point) : m;
+	},
+	getAlignMatrix: _getAlignMatrix,
+	getRelativePosition(fromElement, toElement, fromOrigin, toOrigin) {
+		let m =_getAlignMatrix(fromElement, toElement, fromOrigin, toOrigin);
+		return {x: m.e, y: m.f};
+	},
+	arrayToRawPath(value, vars) {
+		vars = vars || {};
+		let segment = _populateSegmentFromArray(_populateSegmentFromArray([], value, vars.x || "x", 0), value, vars.y || "y", 1);
+		vars.relative && _relativize(segment);
+		return [(vars.type === "cubic") ? segment : paths.pointsToSegment(segment, vars.curviness)];
+	}
+};
+
+_getGSAP() && gsap.registerPlugin(MotionPathPlugin);
+
+exports.MotionPathPlugin = MotionPathPlugin;
+exports.default = MotionPathPlugin;
diff --git a/dist/MotionPathPlugin.d.cts b/dist/MotionPathPlugin.d.cts
new file mode 100644
index 0000000000000000000000000000000000000000..0ae3c98e85dac5a0cb241799c70d2432124fadfa
--- /dev/null
+++ b/dist/MotionPathPlugin.d.cts
@@ -0,0 +1,270 @@
+import { g as getRawPath, c as cacheRawPathMeasurements, a as getPositionOnPath, b as sliceRawPath, p as pointsToSegment, s as stringToRawPath, r as rawPathToString, t as transformRawPath, d as convertToPath, f as flatPointsToSegment } from './shared/gsap.41b79ecf.cjs';
+import { g as getGlobalMatrix } from './shared/gsap.7b0323e5.cjs';
+
+/*!
+ * MotionPathPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let _xProps = "x,translateX,left,marginLeft,xPercent".split(","),
+	_yProps = "y,translateY,top,marginTop,yPercent".split(","),
+	_DEG2RAD = Math.PI / 180,
+	gsap, PropTween, _getUnit, _toArray, _getStyleSaver, _reverting,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_populateSegmentFromArray = (segment, values, property, mode) => { //mode: 0 = x but don't fill y yet, 1 = y, 2 = x and fill y with 0.
+		let l = values.length,
+			si = mode === 2 ? 0 : mode,
+			i = 0;
+		for (; i < l; i++) {
+			segment[si] = parseFloat(values[i][property]);
+			mode === 2 && (segment[si+1] = 0);
+			si += 2;
+		}
+		return segment;
+	},
+	_getPropNum = (target, prop, unit) => parseFloat(target._gsap.get(target, prop, unit || "px")) || 0,
+	_relativize = segment => {
+		let x = segment[0],
+			y = segment[1],
+			i;
+		for (i = 2; i < segment.length; i+=2) {
+			x = (segment[i] += x);
+			y = (segment[i+1] += y);
+		}
+	},
+	// feed in an array of quadratic bezier points like [{x: 0, y: 0}, ...] and it'll convert it to cubic bezier
+	// _quadToCubic = points => {
+	// 	let cubic = [],
+	// 		l = points.length - 1,
+	// 		i = 1,
+	// 		a, b, c;
+	// 	for (; i < l; i+=2) {
+	// 		a = points[i-1];
+	// 		b = points[i];
+	// 		c = points[i+1];
+	// 		cubic.push(a, {x: (2 * b.x + a.x) / 3, y: (2 * b.y + a.y) / 3}, {x: (2 * b.x + c.x) / 3, y: (2 * b.y + c.y) / 3});
+	// 	}
+	// 	cubic.push(points[l]);
+	// 	return cubic;
+	// },
+	_segmentToRawPath = (plugin, segment, target, x, y, slicer, vars, unitX, unitY) => {
+		if (vars.type === "cubic") {
+			segment = [segment];
+		} else {
+			vars.fromCurrent !== false && segment.unshift(_getPropNum(target, x, unitX), y ? _getPropNum(target, y, unitY) : 0);
+			vars.relative && _relativize(segment);
+			let pointFunc = y ? pointsToSegment : flatPointsToSegment;
+			segment = [pointFunc(segment, vars.curviness)];
+		}
+		segment = slicer(_align(segment, target, vars));
+		_addDimensionalPropTween(plugin, target, x, segment, "x", unitX);
+		y && _addDimensionalPropTween(plugin, target, y, segment, "y", unitY);
+		return cacheRawPathMeasurements(segment, vars.resolution || (vars.curviness === 0 ? 20 : 12)); //when curviness is 0, it creates control points right on top of the anchors which makes it more sensitive to resolution, thus we change the default accordingly.
+	},
+	_emptyFunc = v => v,
+	_numExp = /[-+\.]*\d+\.?(?:e-|e\+)?\d*/g,
+	_originToPoint = (element, origin, parentMatrix) => { // origin is an array of normalized values (0-1) in relation to the width/height, so [0.5, 0.5] would be the center. It can also be "auto" in which case it will be the top left unless it's a <path>, when it will start at the beginning of the path itself.
+		let m = getGlobalMatrix(element),
+			x = 0,
+			y = 0,
+			svg;
+		if ((element.tagName + "").toLowerCase() === "svg") {
+			svg = element.viewBox.baseVal;
+			svg.width || (svg = {width: +element.getAttribute("width"), height: +element.getAttribute("height")});
+		} else {
+			svg = origin && element.getBBox && element.getBBox();
+		}
+		if (origin && origin !== "auto") {
+			x = origin.push ? origin[0] * (svg ? svg.width : element.offsetWidth || 0) : origin.x;
+			y = origin.push ? origin[1] * (svg ? svg.height : element.offsetHeight || 0) : origin.y;
+		}
+		return parentMatrix.apply( x || y ? m.apply({x: x, y: y}) : {x: m.e, y: m.f} );
+	},
+	_getAlignMatrix = (fromElement, toElement, fromOrigin, toOrigin) => {
+		let parentMatrix = getGlobalMatrix(fromElement.parentNode, true, true),
+			m = parentMatrix.clone().multiply(getGlobalMatrix(toElement)),
+			fromPoint = _originToPoint(fromElement, fromOrigin, parentMatrix),
+			{x, y} = _originToPoint(toElement, toOrigin, parentMatrix),
+			p;
+		m.e = m.f = 0;
+		if (toOrigin === "auto" && toElement.getTotalLength && toElement.tagName.toLowerCase() === "path") {
+			p = toElement.getAttribute("d").match(_numExp) || [];
+			p = m.apply({x:+p[0], y:+p[1]});
+			x += p.x;
+			y += p.y;
+		}
+		//if (p || (toElement.getBBox && fromElement.getBBox && toElement.ownerSVGElement === fromElement.ownerSVGElement)) {
+		if (p) {
+			p = m.apply(toElement.getBBox());
+			x -= p.x;
+			y -= p.y;
+		}
+		m.e = x - fromPoint.x;
+		m.f = y - fromPoint.y;
+		return m;
+	},
+	_align = (rawPath, target, {align, matrix, offsetX, offsetY, alignOrigin}) => {
+		let x = rawPath[0][0],
+			y = rawPath[0][1],
+			curX = _getPropNum(target, "x"),
+			curY = _getPropNum(target, "y"),
+			alignTarget, m, p;
+		if (!rawPath || !rawPath.length) {
+			return getRawPath("M0,0L0,0");
+		}
+		if (align) {
+			if (align === "self" || ((alignTarget = _toArray(align)[0] || target) === target)) {
+				transformRawPath(rawPath, 1, 0, 0, 1, curX - x, curY - y);
+			} else {
+				if (alignOrigin && alignOrigin[2] !== false) {
+					gsap.set(target, {transformOrigin:(alignOrigin[0] * 100) + "% " + (alignOrigin[1] * 100) + "%"});
+				} else {
+					alignOrigin = [_getPropNum(target, "xPercent") / -100, _getPropNum(target, "yPercent") / -100];
+				}
+				m = _getAlignMatrix(target, alignTarget, alignOrigin, "auto");
+				p = m.apply({x: x, y: y});
+				transformRawPath(rawPath, m.a, m.b, m.c, m.d, curX + m.e - (p.x - m.e), curY + m.f - (p.y - m.f));
+			}
+		}
+		if (matrix) {
+			transformRawPath(rawPath, matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);
+		} else if (offsetX || offsetY) {
+			transformRawPath(rawPath, 1, 0, 0, 1, offsetX || 0, offsetY || 0);
+		}
+		return rawPath;
+	},
+	_addDimensionalPropTween = (plugin, target, property, rawPath, pathProperty, forceUnit) => {
+		let cache = target._gsap,
+			harness = cache.harness,
+			alias = (harness && harness.aliases && harness.aliases[property]),
+			prop = alias && alias.indexOf(",") < 0 ? alias : property,
+			pt = plugin._pt = new PropTween(plugin._pt, target, prop, 0, 0, _emptyFunc, 0, cache.set(target, prop, plugin));
+		pt.u = _getUnit(cache.get(target, prop, forceUnit)) || 0;
+		pt.path = rawPath;
+		pt.pp = pathProperty;
+		plugin._props.push(prop);
+	},
+	_sliceModifier = (start, end) => rawPath => (start || end !== 1) ? sliceRawPath(rawPath, start, end) : rawPath;
+
+
+const MotionPathPlugin = {
+	version: "3.12.5",
+	name: "motionPath",
+	register(core, Plugin, propTween) {
+		gsap = core;
+		_getUnit = gsap.utils.getUnit;
+		_toArray = gsap.utils.toArray;
+		_getStyleSaver = gsap.core.getStyleSaver;
+		_reverting = gsap.core.reverting || function() {};
+		PropTween = propTween;
+	},
+	init(target, vars, tween) {
+		if (!gsap) {
+			console.warn("Please gsap.registerPlugin(MotionPathPlugin)");
+			return false;
+		}
+		if (!(typeof(vars) === "object" && !vars.style) || !vars.path) {
+			vars = {path:vars};
+		}
+		let rawPaths = [],
+			{path, autoRotate, unitX, unitY, x, y} = vars,
+			firstObj = path[0],
+			slicer = _sliceModifier(vars.start, ("end" in vars) ? vars.end : 1),
+			rawPath, p;
+		this.rawPaths = rawPaths;
+		this.target = target;
+		this.tween = tween;
+		this.styles = _getStyleSaver && _getStyleSaver(target, "transform");
+		if ((this.rotate = (autoRotate || autoRotate === 0))) { //get the rotational data FIRST so that the setTransform() method is called in the correct order in the render() loop - rotation gets set last.
+			this.rOffset = parseFloat(autoRotate) || 0;
+			this.radians = !!vars.useRadians;
+			this.rProp = vars.rotation || "rotation";                       // rotation property
+			this.rSet = target._gsap.set(target, this.rProp, this);         // rotation setter
+			this.ru = _getUnit(target._gsap.get(target, this.rProp)) || 0;  // rotation units
+		}
+		if (Array.isArray(path) && !("closed" in path) && typeof(firstObj) !== "number") {
+			for (p in firstObj) {
+				if (!x && ~_xProps.indexOf(p)) {
+					x = p;
+				} else if (!y && ~_yProps.indexOf(p)) {
+					y = p;
+				}
+			}
+			if (x && y) { //correlated values
+				rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray(_populateSegmentFromArray([], path, x, 0), path, y, 1), target, x, y, slicer, vars, unitX || _getUnit(path[0][x]), unitY || _getUnit(path[0][y])));
+			} else {
+				x = y = 0;
+			}
+			for (p in firstObj) {
+				p !== x && p !== y && rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray([], path, p, 2), target, p, 0, slicer, vars, _getUnit(path[0][p])));
+			}
+		} else {
+			rawPath = slicer(_align(getRawPath(vars.path), target, vars));
+			cacheRawPathMeasurements(rawPath, vars.resolution);
+			rawPaths.push(rawPath);
+			_addDimensionalPropTween(this, target, vars.x || "x", rawPath, "x", vars.unitX || "px");
+			_addDimensionalPropTween(this, target, vars.y || "y", rawPath, "y", vars.unitY || "px");
+		}
+	},
+	render(ratio, data) {
+		let rawPaths = data.rawPaths,
+			i = rawPaths.length,
+			pt = data._pt;
+		if (data.tween._time || !_reverting()) {
+			if (ratio > 1) {
+				ratio = 1;
+			} else if (ratio < 0) {
+				ratio = 0;
+			}
+			while (i--) {
+				getPositionOnPath(rawPaths[i], ratio, !i && data.rotate, rawPaths[i]);
+			}
+			while (pt) {
+				pt.set(pt.t, pt.p, pt.path[pt.pp] + pt.u, pt.d, ratio);
+				pt = pt._next;
+			}
+			data.rotate && data.rSet(data.target, data.rProp, rawPaths[0].angle * (data.radians ? _DEG2RAD : 1) + data.rOffset + data.ru, data, ratio);
+		} else {
+			data.styles.revert();
+		}
+	},
+	getLength(path) {
+		return cacheRawPathMeasurements(getRawPath(path)).totalLength;
+	},
+	sliceRawPath,
+	getRawPath,
+	pointsToSegment,
+	stringToRawPath,
+	rawPathToString,
+	transformRawPath,
+	getGlobalMatrix,
+	getPositionOnPath,
+	cacheRawPathMeasurements,
+	convertToPath: (targets, swap) => _toArray(targets).map(target => convertToPath(target, swap !== false)),
+	convertCoordinates(fromElement, toElement, point) {
+		let m = getGlobalMatrix(toElement, true, true).multiply(getGlobalMatrix(fromElement));
+		return point ? m.apply(point) : m;
+	},
+	getAlignMatrix: _getAlignMatrix,
+	getRelativePosition(fromElement, toElement, fromOrigin, toOrigin) {
+		let m =_getAlignMatrix(fromElement, toElement, fromOrigin, toOrigin);
+		return {x: m.e, y: m.f};
+	},
+	arrayToRawPath(value, vars) {
+		vars = vars || {};
+		let segment = _populateSegmentFromArray(_populateSegmentFromArray([], value, vars.x || "x", 0), value, vars.y || "y", 1);
+		vars.relative && _relativize(segment);
+		return [(vars.type === "cubic") ? segment : pointsToSegment(segment, vars.curviness)];
+	}
+};
+
+_getGSAP() && gsap.registerPlugin(MotionPathPlugin);
+
+export { MotionPathPlugin, MotionPathPlugin as default };
diff --git a/dist/MotionPathPlugin.d.mts b/dist/MotionPathPlugin.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..792c5678674a04d3bd268983b2440d4bee8b3fe3
--- /dev/null
+++ b/dist/MotionPathPlugin.d.mts
@@ -0,0 +1,270 @@
+import { g as getRawPath, c as cacheRawPathMeasurements, a as getPositionOnPath, b as sliceRawPath, p as pointsToSegment, s as stringToRawPath, r as rawPathToString, t as transformRawPath, d as convertToPath, f as flatPointsToSegment } from './shared/gsap.41b79ecf.mjs';
+import { g as getGlobalMatrix } from './shared/gsap.7b0323e5.mjs';
+
+/*!
+ * MotionPathPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let _xProps = "x,translateX,left,marginLeft,xPercent".split(","),
+	_yProps = "y,translateY,top,marginTop,yPercent".split(","),
+	_DEG2RAD = Math.PI / 180,
+	gsap, PropTween, _getUnit, _toArray, _getStyleSaver, _reverting,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_populateSegmentFromArray = (segment, values, property, mode) => { //mode: 0 = x but don't fill y yet, 1 = y, 2 = x and fill y with 0.
+		let l = values.length,
+			si = mode === 2 ? 0 : mode,
+			i = 0;
+		for (; i < l; i++) {
+			segment[si] = parseFloat(values[i][property]);
+			mode === 2 && (segment[si+1] = 0);
+			si += 2;
+		}
+		return segment;
+	},
+	_getPropNum = (target, prop, unit) => parseFloat(target._gsap.get(target, prop, unit || "px")) || 0,
+	_relativize = segment => {
+		let x = segment[0],
+			y = segment[1],
+			i;
+		for (i = 2; i < segment.length; i+=2) {
+			x = (segment[i] += x);
+			y = (segment[i+1] += y);
+		}
+	},
+	// feed in an array of quadratic bezier points like [{x: 0, y: 0}, ...] and it'll convert it to cubic bezier
+	// _quadToCubic = points => {
+	// 	let cubic = [],
+	// 		l = points.length - 1,
+	// 		i = 1,
+	// 		a, b, c;
+	// 	for (; i < l; i+=2) {
+	// 		a = points[i-1];
+	// 		b = points[i];
+	// 		c = points[i+1];
+	// 		cubic.push(a, {x: (2 * b.x + a.x) / 3, y: (2 * b.y + a.y) / 3}, {x: (2 * b.x + c.x) / 3, y: (2 * b.y + c.y) / 3});
+	// 	}
+	// 	cubic.push(points[l]);
+	// 	return cubic;
+	// },
+	_segmentToRawPath = (plugin, segment, target, x, y, slicer, vars, unitX, unitY) => {
+		if (vars.type === "cubic") {
+			segment = [segment];
+		} else {
+			vars.fromCurrent !== false && segment.unshift(_getPropNum(target, x, unitX), y ? _getPropNum(target, y, unitY) : 0);
+			vars.relative && _relativize(segment);
+			let pointFunc = y ? pointsToSegment : flatPointsToSegment;
+			segment = [pointFunc(segment, vars.curviness)];
+		}
+		segment = slicer(_align(segment, target, vars));
+		_addDimensionalPropTween(plugin, target, x, segment, "x", unitX);
+		y && _addDimensionalPropTween(plugin, target, y, segment, "y", unitY);
+		return cacheRawPathMeasurements(segment, vars.resolution || (vars.curviness === 0 ? 20 : 12)); //when curviness is 0, it creates control points right on top of the anchors which makes it more sensitive to resolution, thus we change the default accordingly.
+	},
+	_emptyFunc = v => v,
+	_numExp = /[-+\.]*\d+\.?(?:e-|e\+)?\d*/g,
+	_originToPoint = (element, origin, parentMatrix) => { // origin is an array of normalized values (0-1) in relation to the width/height, so [0.5, 0.5] would be the center. It can also be "auto" in which case it will be the top left unless it's a <path>, when it will start at the beginning of the path itself.
+		let m = getGlobalMatrix(element),
+			x = 0,
+			y = 0,
+			svg;
+		if ((element.tagName + "").toLowerCase() === "svg") {
+			svg = element.viewBox.baseVal;
+			svg.width || (svg = {width: +element.getAttribute("width"), height: +element.getAttribute("height")});
+		} else {
+			svg = origin && element.getBBox && element.getBBox();
+		}
+		if (origin && origin !== "auto") {
+			x = origin.push ? origin[0] * (svg ? svg.width : element.offsetWidth || 0) : origin.x;
+			y = origin.push ? origin[1] * (svg ? svg.height : element.offsetHeight || 0) : origin.y;
+		}
+		return parentMatrix.apply( x || y ? m.apply({x: x, y: y}) : {x: m.e, y: m.f} );
+	},
+	_getAlignMatrix = (fromElement, toElement, fromOrigin, toOrigin) => {
+		let parentMatrix = getGlobalMatrix(fromElement.parentNode, true, true),
+			m = parentMatrix.clone().multiply(getGlobalMatrix(toElement)),
+			fromPoint = _originToPoint(fromElement, fromOrigin, parentMatrix),
+			{x, y} = _originToPoint(toElement, toOrigin, parentMatrix),
+			p;
+		m.e = m.f = 0;
+		if (toOrigin === "auto" && toElement.getTotalLength && toElement.tagName.toLowerCase() === "path") {
+			p = toElement.getAttribute("d").match(_numExp) || [];
+			p = m.apply({x:+p[0], y:+p[1]});
+			x += p.x;
+			y += p.y;
+		}
+		//if (p || (toElement.getBBox && fromElement.getBBox && toElement.ownerSVGElement === fromElement.ownerSVGElement)) {
+		if (p) {
+			p = m.apply(toElement.getBBox());
+			x -= p.x;
+			y -= p.y;
+		}
+		m.e = x - fromPoint.x;
+		m.f = y - fromPoint.y;
+		return m;
+	},
+	_align = (rawPath, target, {align, matrix, offsetX, offsetY, alignOrigin}) => {
+		let x = rawPath[0][0],
+			y = rawPath[0][1],
+			curX = _getPropNum(target, "x"),
+			curY = _getPropNum(target, "y"),
+			alignTarget, m, p;
+		if (!rawPath || !rawPath.length) {
+			return getRawPath("M0,0L0,0");
+		}
+		if (align) {
+			if (align === "self" || ((alignTarget = _toArray(align)[0] || target) === target)) {
+				transformRawPath(rawPath, 1, 0, 0, 1, curX - x, curY - y);
+			} else {
+				if (alignOrigin && alignOrigin[2] !== false) {
+					gsap.set(target, {transformOrigin:(alignOrigin[0] * 100) + "% " + (alignOrigin[1] * 100) + "%"});
+				} else {
+					alignOrigin = [_getPropNum(target, "xPercent") / -100, _getPropNum(target, "yPercent") / -100];
+				}
+				m = _getAlignMatrix(target, alignTarget, alignOrigin, "auto");
+				p = m.apply({x: x, y: y});
+				transformRawPath(rawPath, m.a, m.b, m.c, m.d, curX + m.e - (p.x - m.e), curY + m.f - (p.y - m.f));
+			}
+		}
+		if (matrix) {
+			transformRawPath(rawPath, matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);
+		} else if (offsetX || offsetY) {
+			transformRawPath(rawPath, 1, 0, 0, 1, offsetX || 0, offsetY || 0);
+		}
+		return rawPath;
+	},
+	_addDimensionalPropTween = (plugin, target, property, rawPath, pathProperty, forceUnit) => {
+		let cache = target._gsap,
+			harness = cache.harness,
+			alias = (harness && harness.aliases && harness.aliases[property]),
+			prop = alias && alias.indexOf(",") < 0 ? alias : property,
+			pt = plugin._pt = new PropTween(plugin._pt, target, prop, 0, 0, _emptyFunc, 0, cache.set(target, prop, plugin));
+		pt.u = _getUnit(cache.get(target, prop, forceUnit)) || 0;
+		pt.path = rawPath;
+		pt.pp = pathProperty;
+		plugin._props.push(prop);
+	},
+	_sliceModifier = (start, end) => rawPath => (start || end !== 1) ? sliceRawPath(rawPath, start, end) : rawPath;
+
+
+const MotionPathPlugin = {
+	version: "3.12.5",
+	name: "motionPath",
+	register(core, Plugin, propTween) {
+		gsap = core;
+		_getUnit = gsap.utils.getUnit;
+		_toArray = gsap.utils.toArray;
+		_getStyleSaver = gsap.core.getStyleSaver;
+		_reverting = gsap.core.reverting || function() {};
+		PropTween = propTween;
+	},
+	init(target, vars, tween) {
+		if (!gsap) {
+			console.warn("Please gsap.registerPlugin(MotionPathPlugin)");
+			return false;
+		}
+		if (!(typeof(vars) === "object" && !vars.style) || !vars.path) {
+			vars = {path:vars};
+		}
+		let rawPaths = [],
+			{path, autoRotate, unitX, unitY, x, y} = vars,
+			firstObj = path[0],
+			slicer = _sliceModifier(vars.start, ("end" in vars) ? vars.end : 1),
+			rawPath, p;
+		this.rawPaths = rawPaths;
+		this.target = target;
+		this.tween = tween;
+		this.styles = _getStyleSaver && _getStyleSaver(target, "transform");
+		if ((this.rotate = (autoRotate || autoRotate === 0))) { //get the rotational data FIRST so that the setTransform() method is called in the correct order in the render() loop - rotation gets set last.
+			this.rOffset = parseFloat(autoRotate) || 0;
+			this.radians = !!vars.useRadians;
+			this.rProp = vars.rotation || "rotation";                       // rotation property
+			this.rSet = target._gsap.set(target, this.rProp, this);         // rotation setter
+			this.ru = _getUnit(target._gsap.get(target, this.rProp)) || 0;  // rotation units
+		}
+		if (Array.isArray(path) && !("closed" in path) && typeof(firstObj) !== "number") {
+			for (p in firstObj) {
+				if (!x && ~_xProps.indexOf(p)) {
+					x = p;
+				} else if (!y && ~_yProps.indexOf(p)) {
+					y = p;
+				}
+			}
+			if (x && y) { //correlated values
+				rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray(_populateSegmentFromArray([], path, x, 0), path, y, 1), target, x, y, slicer, vars, unitX || _getUnit(path[0][x]), unitY || _getUnit(path[0][y])));
+			} else {
+				x = y = 0;
+			}
+			for (p in firstObj) {
+				p !== x && p !== y && rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray([], path, p, 2), target, p, 0, slicer, vars, _getUnit(path[0][p])));
+			}
+		} else {
+			rawPath = slicer(_align(getRawPath(vars.path), target, vars));
+			cacheRawPathMeasurements(rawPath, vars.resolution);
+			rawPaths.push(rawPath);
+			_addDimensionalPropTween(this, target, vars.x || "x", rawPath, "x", vars.unitX || "px");
+			_addDimensionalPropTween(this, target, vars.y || "y", rawPath, "y", vars.unitY || "px");
+		}
+	},
+	render(ratio, data) {
+		let rawPaths = data.rawPaths,
+			i = rawPaths.length,
+			pt = data._pt;
+		if (data.tween._time || !_reverting()) {
+			if (ratio > 1) {
+				ratio = 1;
+			} else if (ratio < 0) {
+				ratio = 0;
+			}
+			while (i--) {
+				getPositionOnPath(rawPaths[i], ratio, !i && data.rotate, rawPaths[i]);
+			}
+			while (pt) {
+				pt.set(pt.t, pt.p, pt.path[pt.pp] + pt.u, pt.d, ratio);
+				pt = pt._next;
+			}
+			data.rotate && data.rSet(data.target, data.rProp, rawPaths[0].angle * (data.radians ? _DEG2RAD : 1) + data.rOffset + data.ru, data, ratio);
+		} else {
+			data.styles.revert();
+		}
+	},
+	getLength(path) {
+		return cacheRawPathMeasurements(getRawPath(path)).totalLength;
+	},
+	sliceRawPath,
+	getRawPath,
+	pointsToSegment,
+	stringToRawPath,
+	rawPathToString,
+	transformRawPath,
+	getGlobalMatrix,
+	getPositionOnPath,
+	cacheRawPathMeasurements,
+	convertToPath: (targets, swap) => _toArray(targets).map(target => convertToPath(target, swap !== false)),
+	convertCoordinates(fromElement, toElement, point) {
+		let m = getGlobalMatrix(toElement, true, true).multiply(getGlobalMatrix(fromElement));
+		return point ? m.apply(point) : m;
+	},
+	getAlignMatrix: _getAlignMatrix,
+	getRelativePosition(fromElement, toElement, fromOrigin, toOrigin) {
+		let m =_getAlignMatrix(fromElement, toElement, fromOrigin, toOrigin);
+		return {x: m.e, y: m.f};
+	},
+	arrayToRawPath(value, vars) {
+		vars = vars || {};
+		let segment = _populateSegmentFromArray(_populateSegmentFromArray([], value, vars.x || "x", 0), value, vars.y || "y", 1);
+		vars.relative && _relativize(segment);
+		return [(vars.type === "cubic") ? segment : pointsToSegment(segment, vars.curviness)];
+	}
+};
+
+_getGSAP() && gsap.registerPlugin(MotionPathPlugin);
+
+export { MotionPathPlugin, MotionPathPlugin as default };
diff --git a/src/MotionPathPlugin.js b/dist/MotionPathPlugin.d.ts
similarity index 95%
rename from src/MotionPathPlugin.js
rename to dist/MotionPathPlugin.d.ts
index 97d2adc230f23c32f3ebcbdf51acb4da848555fe..d1324a9a11de2fc443c0a5c06fd307199fa7b264 100644
--- a/src/MotionPathPlugin.js
+++ b/dist/MotionPathPlugin.d.ts
@@ -1,3 +1,6 @@
+import { g as getRawPath, c as cacheRawPathMeasurements, a as getPositionOnPath, b as sliceRawPath, p as pointsToSegment, s as stringToRawPath, r as rawPathToString, t as transformRawPath, d as convertToPath, f as flatPointsToSegment } from './shared/gsap.41b79ecf.js';
+import { g as getGlobalMatrix } from './shared/gsap.7b0323e5.js';
+
 /*!
  * MotionPathPlugin 3.12.5
  * https://gsap.com
@@ -9,8 +12,6 @@
 */
 /* eslint-disable */
 
-import { getRawPath, cacheRawPathMeasurements, getPositionOnPath, pointsToSegment, flatPointsToSegment, sliceRawPath, stringToRawPath, rawPathToString, transformRawPath, convertToPath } from "./utils/paths.js";
-import { getGlobalMatrix } from "./utils/matrix.js";
 
 let _xProps = "x,translateX,left,marginLeft,xPercent".split(","),
 	_yProps = "y,translateY,top,marginTop,yPercent".split(","),
@@ -20,10 +21,9 @@ let _xProps = "x,translateX,left,marginLeft,xPercent".split(","),
 	_populateSegmentFromArray = (segment, values, property, mode) => { //mode: 0 = x but don't fill y yet, 1 = y, 2 = x and fill y with 0.
 		let l = values.length,
 			si = mode === 2 ? 0 : mode,
-			i = 0,
-			v;
+			i = 0;
 		for (; i < l; i++) {
-			segment[si] = v = parseFloat(values[i][property]);
+			segment[si] = parseFloat(values[i][property]);
 			mode === 2 && (segment[si+1] = 0);
 			si += 2;
 		}
@@ -154,7 +154,7 @@ let _xProps = "x,translateX,left,marginLeft,xPercent".split(","),
 	_sliceModifier = (start, end) => rawPath => (start || end !== 1) ? sliceRawPath(rawPath, start, end) : rawPath;
 
 
-export const MotionPathPlugin = {
+const MotionPathPlugin = {
 	version: "3.12.5",
 	name: "motionPath",
 	register(core, Plugin, propTween) {
@@ -267,4 +267,4 @@ export const MotionPathPlugin = {
 
 _getGSAP() && gsap.registerPlugin(MotionPathPlugin);
 
-export { MotionPathPlugin as default };
\ No newline at end of file
+export { MotionPathPlugin, MotionPathPlugin as default };
diff --git a/dist/MotionPathPlugin.js b/dist/MotionPathPlugin.js
deleted file mode 100644
index 759f3b2200adddd0b3a270822ab10060e9d91a52..0000000000000000000000000000000000000000
diff --git a/dist/MotionPathPlugin.min.js b/dist/MotionPathPlugin.min.js
deleted file mode 100644
index 2259d10abea6841813fd95a5f6914404af2634d7..0000000000000000000000000000000000000000
diff --git a/dist/MotionPathPlugin.min.js.map b/dist/MotionPathPlugin.min.js.map
deleted file mode 100644
index b3cc98f4f3934540e2786e04c3f2ba5f2a13ebe7..0000000000000000000000000000000000000000
diff --git a/dist/MotionPathPlugin.mjs b/dist/MotionPathPlugin.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..792c5678674a04d3bd268983b2440d4bee8b3fe3
--- /dev/null
+++ b/dist/MotionPathPlugin.mjs
@@ -0,0 +1,270 @@
+import { g as getRawPath, c as cacheRawPathMeasurements, a as getPositionOnPath, b as sliceRawPath, p as pointsToSegment, s as stringToRawPath, r as rawPathToString, t as transformRawPath, d as convertToPath, f as flatPointsToSegment } from './shared/gsap.41b79ecf.mjs';
+import { g as getGlobalMatrix } from './shared/gsap.7b0323e5.mjs';
+
+/*!
+ * MotionPathPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let _xProps = "x,translateX,left,marginLeft,xPercent".split(","),
+	_yProps = "y,translateY,top,marginTop,yPercent".split(","),
+	_DEG2RAD = Math.PI / 180,
+	gsap, PropTween, _getUnit, _toArray, _getStyleSaver, _reverting,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_populateSegmentFromArray = (segment, values, property, mode) => { //mode: 0 = x but don't fill y yet, 1 = y, 2 = x and fill y with 0.
+		let l = values.length,
+			si = mode === 2 ? 0 : mode,
+			i = 0;
+		for (; i < l; i++) {
+			segment[si] = parseFloat(values[i][property]);
+			mode === 2 && (segment[si+1] = 0);
+			si += 2;
+		}
+		return segment;
+	},
+	_getPropNum = (target, prop, unit) => parseFloat(target._gsap.get(target, prop, unit || "px")) || 0,
+	_relativize = segment => {
+		let x = segment[0],
+			y = segment[1],
+			i;
+		for (i = 2; i < segment.length; i+=2) {
+			x = (segment[i] += x);
+			y = (segment[i+1] += y);
+		}
+	},
+	// feed in an array of quadratic bezier points like [{x: 0, y: 0}, ...] and it'll convert it to cubic bezier
+	// _quadToCubic = points => {
+	// 	let cubic = [],
+	// 		l = points.length - 1,
+	// 		i = 1,
+	// 		a, b, c;
+	// 	for (; i < l; i+=2) {
+	// 		a = points[i-1];
+	// 		b = points[i];
+	// 		c = points[i+1];
+	// 		cubic.push(a, {x: (2 * b.x + a.x) / 3, y: (2 * b.y + a.y) / 3}, {x: (2 * b.x + c.x) / 3, y: (2 * b.y + c.y) / 3});
+	// 	}
+	// 	cubic.push(points[l]);
+	// 	return cubic;
+	// },
+	_segmentToRawPath = (plugin, segment, target, x, y, slicer, vars, unitX, unitY) => {
+		if (vars.type === "cubic") {
+			segment = [segment];
+		} else {
+			vars.fromCurrent !== false && segment.unshift(_getPropNum(target, x, unitX), y ? _getPropNum(target, y, unitY) : 0);
+			vars.relative && _relativize(segment);
+			let pointFunc = y ? pointsToSegment : flatPointsToSegment;
+			segment = [pointFunc(segment, vars.curviness)];
+		}
+		segment = slicer(_align(segment, target, vars));
+		_addDimensionalPropTween(plugin, target, x, segment, "x", unitX);
+		y && _addDimensionalPropTween(plugin, target, y, segment, "y", unitY);
+		return cacheRawPathMeasurements(segment, vars.resolution || (vars.curviness === 0 ? 20 : 12)); //when curviness is 0, it creates control points right on top of the anchors which makes it more sensitive to resolution, thus we change the default accordingly.
+	},
+	_emptyFunc = v => v,
+	_numExp = /[-+\.]*\d+\.?(?:e-|e\+)?\d*/g,
+	_originToPoint = (element, origin, parentMatrix) => { // origin is an array of normalized values (0-1) in relation to the width/height, so [0.5, 0.5] would be the center. It can also be "auto" in which case it will be the top left unless it's a <path>, when it will start at the beginning of the path itself.
+		let m = getGlobalMatrix(element),
+			x = 0,
+			y = 0,
+			svg;
+		if ((element.tagName + "").toLowerCase() === "svg") {
+			svg = element.viewBox.baseVal;
+			svg.width || (svg = {width: +element.getAttribute("width"), height: +element.getAttribute("height")});
+		} else {
+			svg = origin && element.getBBox && element.getBBox();
+		}
+		if (origin && origin !== "auto") {
+			x = origin.push ? origin[0] * (svg ? svg.width : element.offsetWidth || 0) : origin.x;
+			y = origin.push ? origin[1] * (svg ? svg.height : element.offsetHeight || 0) : origin.y;
+		}
+		return parentMatrix.apply( x || y ? m.apply({x: x, y: y}) : {x: m.e, y: m.f} );
+	},
+	_getAlignMatrix = (fromElement, toElement, fromOrigin, toOrigin) => {
+		let parentMatrix = getGlobalMatrix(fromElement.parentNode, true, true),
+			m = parentMatrix.clone().multiply(getGlobalMatrix(toElement)),
+			fromPoint = _originToPoint(fromElement, fromOrigin, parentMatrix),
+			{x, y} = _originToPoint(toElement, toOrigin, parentMatrix),
+			p;
+		m.e = m.f = 0;
+		if (toOrigin === "auto" && toElement.getTotalLength && toElement.tagName.toLowerCase() === "path") {
+			p = toElement.getAttribute("d").match(_numExp) || [];
+			p = m.apply({x:+p[0], y:+p[1]});
+			x += p.x;
+			y += p.y;
+		}
+		//if (p || (toElement.getBBox && fromElement.getBBox && toElement.ownerSVGElement === fromElement.ownerSVGElement)) {
+		if (p) {
+			p = m.apply(toElement.getBBox());
+			x -= p.x;
+			y -= p.y;
+		}
+		m.e = x - fromPoint.x;
+		m.f = y - fromPoint.y;
+		return m;
+	},
+	_align = (rawPath, target, {align, matrix, offsetX, offsetY, alignOrigin}) => {
+		let x = rawPath[0][0],
+			y = rawPath[0][1],
+			curX = _getPropNum(target, "x"),
+			curY = _getPropNum(target, "y"),
+			alignTarget, m, p;
+		if (!rawPath || !rawPath.length) {
+			return getRawPath("M0,0L0,0");
+		}
+		if (align) {
+			if (align === "self" || ((alignTarget = _toArray(align)[0] || target) === target)) {
+				transformRawPath(rawPath, 1, 0, 0, 1, curX - x, curY - y);
+			} else {
+				if (alignOrigin && alignOrigin[2] !== false) {
+					gsap.set(target, {transformOrigin:(alignOrigin[0] * 100) + "% " + (alignOrigin[1] * 100) + "%"});
+				} else {
+					alignOrigin = [_getPropNum(target, "xPercent") / -100, _getPropNum(target, "yPercent") / -100];
+				}
+				m = _getAlignMatrix(target, alignTarget, alignOrigin, "auto");
+				p = m.apply({x: x, y: y});
+				transformRawPath(rawPath, m.a, m.b, m.c, m.d, curX + m.e - (p.x - m.e), curY + m.f - (p.y - m.f));
+			}
+		}
+		if (matrix) {
+			transformRawPath(rawPath, matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);
+		} else if (offsetX || offsetY) {
+			transformRawPath(rawPath, 1, 0, 0, 1, offsetX || 0, offsetY || 0);
+		}
+		return rawPath;
+	},
+	_addDimensionalPropTween = (plugin, target, property, rawPath, pathProperty, forceUnit) => {
+		let cache = target._gsap,
+			harness = cache.harness,
+			alias = (harness && harness.aliases && harness.aliases[property]),
+			prop = alias && alias.indexOf(",") < 0 ? alias : property,
+			pt = plugin._pt = new PropTween(plugin._pt, target, prop, 0, 0, _emptyFunc, 0, cache.set(target, prop, plugin));
+		pt.u = _getUnit(cache.get(target, prop, forceUnit)) || 0;
+		pt.path = rawPath;
+		pt.pp = pathProperty;
+		plugin._props.push(prop);
+	},
+	_sliceModifier = (start, end) => rawPath => (start || end !== 1) ? sliceRawPath(rawPath, start, end) : rawPath;
+
+
+const MotionPathPlugin = {
+	version: "3.12.5",
+	name: "motionPath",
+	register(core, Plugin, propTween) {
+		gsap = core;
+		_getUnit = gsap.utils.getUnit;
+		_toArray = gsap.utils.toArray;
+		_getStyleSaver = gsap.core.getStyleSaver;
+		_reverting = gsap.core.reverting || function() {};
+		PropTween = propTween;
+	},
+	init(target, vars, tween) {
+		if (!gsap) {
+			console.warn("Please gsap.registerPlugin(MotionPathPlugin)");
+			return false;
+		}
+		if (!(typeof(vars) === "object" && !vars.style) || !vars.path) {
+			vars = {path:vars};
+		}
+		let rawPaths = [],
+			{path, autoRotate, unitX, unitY, x, y} = vars,
+			firstObj = path[0],
+			slicer = _sliceModifier(vars.start, ("end" in vars) ? vars.end : 1),
+			rawPath, p;
+		this.rawPaths = rawPaths;
+		this.target = target;
+		this.tween = tween;
+		this.styles = _getStyleSaver && _getStyleSaver(target, "transform");
+		if ((this.rotate = (autoRotate || autoRotate === 0))) { //get the rotational data FIRST so that the setTransform() method is called in the correct order in the render() loop - rotation gets set last.
+			this.rOffset = parseFloat(autoRotate) || 0;
+			this.radians = !!vars.useRadians;
+			this.rProp = vars.rotation || "rotation";                       // rotation property
+			this.rSet = target._gsap.set(target, this.rProp, this);         // rotation setter
+			this.ru = _getUnit(target._gsap.get(target, this.rProp)) || 0;  // rotation units
+		}
+		if (Array.isArray(path) && !("closed" in path) && typeof(firstObj) !== "number") {
+			for (p in firstObj) {
+				if (!x && ~_xProps.indexOf(p)) {
+					x = p;
+				} else if (!y && ~_yProps.indexOf(p)) {
+					y = p;
+				}
+			}
+			if (x && y) { //correlated values
+				rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray(_populateSegmentFromArray([], path, x, 0), path, y, 1), target, x, y, slicer, vars, unitX || _getUnit(path[0][x]), unitY || _getUnit(path[0][y])));
+			} else {
+				x = y = 0;
+			}
+			for (p in firstObj) {
+				p !== x && p !== y && rawPaths.push(_segmentToRawPath(this, _populateSegmentFromArray([], path, p, 2), target, p, 0, slicer, vars, _getUnit(path[0][p])));
+			}
+		} else {
+			rawPath = slicer(_align(getRawPath(vars.path), target, vars));
+			cacheRawPathMeasurements(rawPath, vars.resolution);
+			rawPaths.push(rawPath);
+			_addDimensionalPropTween(this, target, vars.x || "x", rawPath, "x", vars.unitX || "px");
+			_addDimensionalPropTween(this, target, vars.y || "y", rawPath, "y", vars.unitY || "px");
+		}
+	},
+	render(ratio, data) {
+		let rawPaths = data.rawPaths,
+			i = rawPaths.length,
+			pt = data._pt;
+		if (data.tween._time || !_reverting()) {
+			if (ratio > 1) {
+				ratio = 1;
+			} else if (ratio < 0) {
+				ratio = 0;
+			}
+			while (i--) {
+				getPositionOnPath(rawPaths[i], ratio, !i && data.rotate, rawPaths[i]);
+			}
+			while (pt) {
+				pt.set(pt.t, pt.p, pt.path[pt.pp] + pt.u, pt.d, ratio);
+				pt = pt._next;
+			}
+			data.rotate && data.rSet(data.target, data.rProp, rawPaths[0].angle * (data.radians ? _DEG2RAD : 1) + data.rOffset + data.ru, data, ratio);
+		} else {
+			data.styles.revert();
+		}
+	},
+	getLength(path) {
+		return cacheRawPathMeasurements(getRawPath(path)).totalLength;
+	},
+	sliceRawPath,
+	getRawPath,
+	pointsToSegment,
+	stringToRawPath,
+	rawPathToString,
+	transformRawPath,
+	getGlobalMatrix,
+	getPositionOnPath,
+	cacheRawPathMeasurements,
+	convertToPath: (targets, swap) => _toArray(targets).map(target => convertToPath(target, swap !== false)),
+	convertCoordinates(fromElement, toElement, point) {
+		let m = getGlobalMatrix(toElement, true, true).multiply(getGlobalMatrix(fromElement));
+		return point ? m.apply(point) : m;
+	},
+	getAlignMatrix: _getAlignMatrix,
+	getRelativePosition(fromElement, toElement, fromOrigin, toOrigin) {
+		let m =_getAlignMatrix(fromElement, toElement, fromOrigin, toOrigin);
+		return {x: m.e, y: m.f};
+	},
+	arrayToRawPath(value, vars) {
+		vars = vars || {};
+		let segment = _populateSegmentFromArray(_populateSegmentFromArray([], value, vars.x || "x", 0), value, vars.y || "y", 1);
+		vars.relative && _relativize(segment);
+		return [(vars.type === "cubic") ? segment : pointsToSegment(segment, vars.curviness)];
+	}
+};
+
+_getGSAP() && gsap.registerPlugin(MotionPathPlugin);
+
+export { MotionPathPlugin, MotionPathPlugin as default };
diff --git a/dist/Observer.cjs b/dist/Observer.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..9b8705d7d3252965321f9e41c8335cd4ddcccf6b
--- /dev/null
+++ b/dist/Observer.cjs
@@ -0,0 +1,437 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+/*!
+ * Observer 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _coreInitted, _win, _doc, _docEl, _body, _isTouch, _pointerType, ScrollTrigger, _root, _normalizer, _eventTypes, _context,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_startup = 1,
+	_observers = [];
+	exports._scrollers = [];
+	exports._proxies = [];
+	let _getTime = Date.now,
+	_bridge = (name, value) => value,
+	_integrate = () => {
+		let core = ScrollTrigger.core,
+			data = core.bridge || {},
+			scrollers = core._scrollers,
+			proxies = core._proxies;
+		scrollers.push(...exports._scrollers);
+		proxies.push(...exports._proxies);
+		exports._scrollers = scrollers;
+		exports._proxies = proxies;
+		_bridge = (name, value) => data[name](value);
+	},
+	_getProxyProp = (element, property) => ~exports._proxies.indexOf(element) && exports._proxies[exports._proxies.indexOf(element) + 1][property],
+	_isViewport = el => !!~_root.indexOf(el),
+	_addListener = (element, type, func, passive, capture) => element.addEventListener(type, func, {passive: passive !== false, capture: !!capture}),
+	_removeListener = (element, type, func, capture) => element.removeEventListener(type, func, !!capture),
+	_scrollLeft = "scrollLeft",
+	_scrollTop = "scrollTop",
+	_onScroll = () => (_normalizer && _normalizer.isPressed) || exports._scrollers.cache++,
+	_scrollCacheFunc = (f, doNotCache) => {
+		let cachingFunc = value => { // since reading the scrollTop/scrollLeft/pageOffsetY/pageOffsetX can trigger a layout, this function allows us to cache the value so it only gets read fresh after a "scroll" event fires (or while we're refreshing because that can lengthen the page and alter the scroll position). when "soft" is true, that means don't actually set the scroll, but cache the new value instead (useful in ScrollSmoother)
+			if (value || value === 0) {
+				_startup && (_win.history.scrollRestoration = "manual"); // otherwise the new position will get overwritten by the browser onload.
+				let isNormalizing = _normalizer && _normalizer.isPressed;
+				value = cachingFunc.v = Math.round(value) || (_normalizer && _normalizer.iOS ? 1 : 0); //TODO: iOS Bug: if you allow it to go to 0, Safari can start to report super strange (wildly inaccurate) touch positions!
+				f(value);
+				cachingFunc.cacheID = exports._scrollers.cache;
+				isNormalizing && _bridge("ss", value); // set scroll (notify ScrollTrigger so it can dispatch a "scrollStart" event if necessary
+			} else if (doNotCache || exports._scrollers.cache !== cachingFunc.cacheID || _bridge("ref")) {
+				cachingFunc.cacheID = exports._scrollers.cache;
+				cachingFunc.v = f();
+			}
+			return cachingFunc.v + cachingFunc.offset;
+		};
+		cachingFunc.offset = 0;
+		return f && cachingFunc;
+	},
+	_horizontal = {s: _scrollLeft, p: "left", p2: "Left", os: "right", os2: "Right", d: "width", d2: "Width", a: "x", sc: _scrollCacheFunc(function(value) { return arguments.length ? _win.scrollTo(value, _vertical.sc()) : _win.pageXOffset || _doc[_scrollLeft] || _docEl[_scrollLeft] || _body[_scrollLeft] || 0})},
+	_vertical = {s: _scrollTop, p: "top", p2: "Top", os: "bottom", os2: "Bottom", d: "height", d2: "Height", a: "y", op: _horizontal, sc: _scrollCacheFunc(function(value) { return arguments.length ? _win.scrollTo(_horizontal.sc(), value) : _win.pageYOffset || _doc[_scrollTop] || _docEl[_scrollTop] || _body[_scrollTop] || 0})},
+	_getTarget = (t, self) => ((self && self._ctx && self._ctx.selector) || gsap.utils.toArray)(t)[0] || (typeof(t) === "string" && gsap.config().nullTargetWarn !== false ? console.warn("Element not found:", t) : null),
+
+	_getScrollFunc = (element, {s, sc}) => { // we store the scroller functions in an alternating sequenced Array like [element, verticalScrollFunc, horizontalScrollFunc, ...] so that we can minimize memory, maximize performance, and we also record the last position as a ".rec" property in order to revert to that after refreshing to ensure things don't shift around.
+		_isViewport(element) && (element = _doc.scrollingElement || _docEl);
+		let i = exports._scrollers.indexOf(element),
+			offset = sc === _vertical.sc ? 1 : 2;
+		!~i && (i = exports._scrollers.push(element) - 1);
+		exports._scrollers[i + offset] || _addListener(element, "scroll", _onScroll); // clear the cache when a scroll occurs
+		let prev = exports._scrollers[i + offset],
+			func = prev || (exports._scrollers[i + offset] = _scrollCacheFunc(_getProxyProp(element, s), true) || (_isViewport(element) ? sc : _scrollCacheFunc(function(value) { return arguments.length ? (element[s] = value) : element[s]; })));
+		func.target = element;
+		prev || (func.smooth = gsap.getProperty(element, "scrollBehavior") === "smooth"); // only set it the first time (don't reset every time a scrollFunc is requested because perhaps it happens during a refresh() when it's disabled in ScrollTrigger.
+		return func;
+	},
+	_getVelocityProp = (value, minTimeRefresh, useDelta) => {
+		let v1 = value,
+			v2 = value,
+			t1 = _getTime(),
+			t2 = t1,
+			min = minTimeRefresh || 50,
+			dropToZeroTime = Math.max(500, min * 3),
+			update = (value, force) => {
+				let t = _getTime();
+				if (force || t - t1 > min) {
+					v2 = v1;
+					v1 = value;
+					t2 = t1;
+					t1 = t;
+				} else if (useDelta) {
+					v1 += value;
+				} else { // not totally necessary, but makes it a bit more accurate by adjusting the v1 value according to the new slope. This way we're not just ignoring the incoming data. Removing for now because it doesn't seem to make much practical difference and it's probably not worth the kb.
+					v1 = v2 + (value - v2) / (t - t2) * (t1 - t2);
+				}
+			},
+			reset = () => { v2 = v1 = useDelta ? 0 : v1; t2 = t1 = 0; },
+			getVelocity = latestValue => {
+				let tOld = t2,
+					vOld = v2,
+					t = _getTime();
+				(latestValue || latestValue === 0) && latestValue !== v1 && update(latestValue);
+				return (t1 === t2 || t - t2 > dropToZeroTime) ? 0 : (v1 + (useDelta ? vOld : -vOld)) / ((useDelta ? t : t1) - tOld) * 1000;
+			};
+		return {update, reset, getVelocity};
+	},
+	_getEvent = (e, preventDefault) => {
+		preventDefault && !e._gsapAllow && e.preventDefault();
+		return e.changedTouches ? e.changedTouches[0] : e;
+	},
+	_getAbsoluteMax = a => {
+		let max = Math.max(...a),
+			min = Math.min(...a);
+		return Math.abs(max) >= Math.abs(min) ? max : min;
+	},
+	_setScrollTrigger = () => {
+		ScrollTrigger = gsap.core.globals().ScrollTrigger;
+		ScrollTrigger && ScrollTrigger.core && _integrate();
+	},
+	_initCore = core => {
+		gsap = core || _getGSAP();
+		if (!_coreInitted && gsap && typeof(document) !== "undefined" && document.body) {
+			_win = window;
+			_doc = document;
+			_docEl = _doc.documentElement;
+			_body = _doc.body;
+			_root = [_win, _doc, _docEl, _body];
+			gsap.utils.clamp;
+			_context = gsap.core.context || function() {};
+			_pointerType = "onpointerenter" in _body ? "pointer" : "mouse";
+			// isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.
+			_isTouch = Observer.isTouch = _win.matchMedia && _win.matchMedia("(hover: none), (pointer: coarse)").matches ? 1 : ("ontouchstart" in _win || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0) ? 2 : 0;
+			_eventTypes = Observer.eventTypes = ("ontouchstart" in _docEl ? "touchstart,touchmove,touchcancel,touchend" : !("onpointerdown" in _docEl) ? "mousedown,mousemove,mouseup,mouseup" : "pointerdown,pointermove,pointercancel,pointerup").split(",");
+			setTimeout(() => _startup = 0, 500);
+			_setScrollTrigger();
+			_coreInitted = 1;
+		}
+		return _coreInitted;
+	};
+
+_horizontal.op = _vertical;
+exports._scrollers.cache = 0;
+
+class Observer {
+	constructor(vars) {
+		this.init(vars);
+	}
+
+	init(vars) {
+		_coreInitted || _initCore(gsap) || console.warn("Please gsap.registerPlugin(Observer)");
+		ScrollTrigger || _setScrollTrigger();
+		let {tolerance, dragMinimum, type, target, lineHeight, debounce, preventDefault, onStop, onStopDelay, ignore, wheelSpeed, event, onDragStart, onDragEnd, onDrag, onPress, onRelease, onRight, onLeft, onUp, onDown, onChangeX, onChangeY, onChange, onToggleX, onToggleY, onHover, onHoverEnd, onMove, ignoreCheck, isNormalizer, onGestureStart, onGestureEnd, onWheel, onEnable, onDisable, onClick, scrollSpeed, capture, allowClicks, lockAxis, onLockAxis} = vars;
+		this.target = target = _getTarget(target) || _docEl;
+		this.vars = vars;
+		ignore && (ignore = gsap.utils.toArray(ignore));
+		tolerance = tolerance || 1e-9;
+		dragMinimum = dragMinimum || 0;
+		wheelSpeed = wheelSpeed || 1;
+		scrollSpeed = scrollSpeed || 1;
+		type = type || "wheel,touch,pointer";
+		debounce = debounce !== false;
+		lineHeight || (lineHeight = parseFloat(_win.getComputedStyle(_body).lineHeight) || 22); // note: browser may report "normal", so default to 22.
+		let id, onStopDelayedCall, dragged, moved, wheeled, locked, axis,
+			self = this,
+			prevDeltaX = 0,
+			prevDeltaY = 0,
+			passive = vars.passive || !preventDefault,
+			scrollFuncX = _getScrollFunc(target, _horizontal),
+			scrollFuncY = _getScrollFunc(target, _vertical),
+			scrollX = scrollFuncX(),
+			scrollY = scrollFuncY(),
+			limitToTouch = ~type.indexOf("touch") && !~type.indexOf("pointer") && _eventTypes[0] === "pointerdown", // for devices that accommodate mouse events and touch events, we need to distinguish.
+			isViewport = _isViewport(target),
+			ownerDoc = target.ownerDocument || _doc,
+			deltaX = [0, 0, 0], // wheel, scroll, pointer/touch
+			deltaY = [0, 0, 0],
+			onClickTime = 0,
+			clickCapture = () => onClickTime = _getTime(),
+			_ignoreCheck = (e, isPointerOrTouch) => (self.event = e) && (ignore && ~ignore.indexOf(e.target)) || (isPointerOrTouch && limitToTouch && e.pointerType !== "touch") || (ignoreCheck && ignoreCheck(e, isPointerOrTouch)),
+			onStopFunc = () => {
+				self._vx.reset();
+				self._vy.reset();
+				onStopDelayedCall.pause();
+				onStop && onStop(self);
+			},
+			update = () => {
+				let dx = self.deltaX = _getAbsoluteMax(deltaX),
+					dy = self.deltaY = _getAbsoluteMax(deltaY),
+					changedX = Math.abs(dx) >= tolerance,
+					changedY = Math.abs(dy) >= tolerance;
+				onChange && (changedX || changedY) && onChange(self, dx, dy, deltaX, deltaY); // in ScrollTrigger.normalizeScroll(), we need to know if it was touch/pointer so we need access to the deltaX/deltaY Arrays before we clear them out.
+				if (changedX) {
+					onRight && self.deltaX > 0 && onRight(self);
+					onLeft && self.deltaX < 0 && onLeft(self);
+					onChangeX && onChangeX(self);
+					onToggleX && ((self.deltaX < 0) !== (prevDeltaX < 0)) && onToggleX(self);
+					prevDeltaX = self.deltaX;
+					deltaX[0] = deltaX[1] = deltaX[2] = 0;
+				}
+				if (changedY) {
+					onDown && self.deltaY > 0 && onDown(self);
+					onUp && self.deltaY < 0 && onUp(self);
+					onChangeY && onChangeY(self);
+					onToggleY && ((self.deltaY < 0) !== (prevDeltaY < 0)) && onToggleY(self);
+					prevDeltaY = self.deltaY;
+					deltaY[0] = deltaY[1] = deltaY[2] = 0;
+				}
+				if (moved || dragged) {
+					onMove && onMove(self);
+					if (dragged) {
+						onDrag(self);
+						dragged = false;
+					}
+					moved = false;
+				}
+				locked && !(locked = false) && onLockAxis && onLockAxis(self);
+				if (wheeled) {
+					onWheel(self);
+					wheeled = false;
+				}
+				id = 0;
+			},
+			onDelta = (x, y, index) => {
+				deltaX[index] += x;
+				deltaY[index] += y;
+				self._vx.update(x);
+				self._vy.update(y);
+				debounce ? id || (id = requestAnimationFrame(update)) : update();
+			},
+			onTouchOrPointerDelta = (x, y) => {
+				if (lockAxis && !axis) {
+					self.axis = axis = Math.abs(x) > Math.abs(y) ? "x" : "y";
+					locked = true;
+				}
+				if (axis !== "y") {
+					deltaX[2] += x;
+					self._vx.update(x, true); // update the velocity as frequently as possible instead of in the debounced function so that very quick touch-scrolls (flicks) feel natural. If it's the mouse/touch/pointer, force it so that we get snappy/accurate momentum scroll.
+				}
+				if (axis !== "x") {
+					deltaY[2] += y;
+					self._vy.update(y, true);
+				}
+				debounce ? id || (id = requestAnimationFrame(update)) : update();
+			},
+			_onDrag = e => {
+				if (_ignoreCheck(e, 1)) {return;}
+				e = _getEvent(e, preventDefault);
+				let x = e.clientX,
+					y = e.clientY,
+					dx = x - self.x,
+					dy = y - self.y,
+					isDragging = self.isDragging;
+				self.x = x;
+				self.y = y;
+				if (isDragging || Math.abs(self.startX - x) >= dragMinimum || Math.abs(self.startY - y) >= dragMinimum) {
+					onDrag && (dragged = true);
+					isDragging || (self.isDragging = true);
+					onTouchOrPointerDelta(dx, dy);
+					isDragging || onDragStart && onDragStart(self);
+				}
+			},
+			_onPress = self.onPress = e => {
+				if (_ignoreCheck(e, 1) || (e && e.button)) {return;}
+				self.axis = axis = null;
+				onStopDelayedCall.pause();
+				self.isPressed = true;
+				e = _getEvent(e); // note: may need to preventDefault(?) Won't side-scroll on iOS Safari if we do, though.
+				prevDeltaX = prevDeltaY = 0;
+				self.startX = self.x = e.clientX;
+				self.startY = self.y = e.clientY;
+				self._vx.reset(); // otherwise the t2 may be stale if the user touches and flicks super fast and releases in less than 2 requestAnimationFrame ticks, causing velocity to be 0.
+				self._vy.reset();
+				_addListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, passive, true);
+				self.deltaX = self.deltaY = 0;
+				onPress && onPress(self);
+			},
+			_onRelease = self.onRelease = e => {
+				if (_ignoreCheck(e, 1)) {return;}
+				_removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);
+				let isTrackingDrag = !isNaN(self.y - self.startY),
+					wasDragging = self.isDragging,
+					isDragNotClick = wasDragging && (Math.abs(self.x - self.startX) > 3 || Math.abs(self.y - self.startY) > 3), // some touch devices need some wiggle room in terms of sensing clicks - the finger may move a few pixels.
+					eventData = _getEvent(e);
+				if (!isDragNotClick && isTrackingDrag) {
+					self._vx.reset();
+					self._vy.reset();
+					//if (preventDefault && allowClicks && self.isPressed) { // check isPressed because in a rare edge case, the inputObserver in ScrollTrigger may stopPropagation() on the press/drag, so the onRelease may get fired without the onPress/onDrag ever getting called, thus it could trigger a click to occur on a link after scroll-dragging it.
+					if (preventDefault && allowClicks) {
+						gsap.delayedCall(0.08, () => { // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular "click" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the "real"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the "real" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.
+							if (_getTime() - onClickTime > 300 && !e.defaultPrevented) {
+								if (e.target.click) { //some browsers (like mobile Safari) don't properly trigger the click event
+									e.target.click();
+								} else if (ownerDoc.createEvent) {
+									let syntheticEvent = ownerDoc.createEvent("MouseEvents");
+									syntheticEvent.initMouseEvent("click", true, true, _win, 1, eventData.screenX, eventData.screenY, eventData.clientX, eventData.clientY, false, false, false, false, 0, null);
+									e.target.dispatchEvent(syntheticEvent);
+								}
+							}
+						});
+					}
+				}
+				self.isDragging = self.isGesturing = self.isPressed = false;
+				onStop && wasDragging && !isNormalizer && onStopDelayedCall.restart(true);
+				onDragEnd && wasDragging && onDragEnd(self);
+				onRelease && onRelease(self, isDragNotClick);
+			},
+			_onGestureStart = e => e.touches && e.touches.length > 1 && (self.isGesturing = true) && onGestureStart(e, self.isDragging),
+			_onGestureEnd = () => (self.isGesturing = false) || onGestureEnd(self),
+			onScroll = e => {
+				if (_ignoreCheck(e)) {return;}
+				let x = scrollFuncX(),
+					y = scrollFuncY();
+				onDelta((x - scrollX) * scrollSpeed, (y - scrollY) * scrollSpeed, 1);
+				scrollX = x;
+				scrollY = y;
+				onStop && onStopDelayedCall.restart(true);
+			},
+			_onWheel = e => {
+				if (_ignoreCheck(e)) {return;}
+				e = _getEvent(e, preventDefault);
+				onWheel && (wheeled = true);
+				let multiplier = (e.deltaMode === 1 ? lineHeight : e.deltaMode === 2 ? _win.innerHeight : 1) * wheelSpeed;
+				onDelta(e.deltaX * multiplier, e.deltaY * multiplier, 0);
+				onStop && !isNormalizer && onStopDelayedCall.restart(true);
+			},
+			_onMove = e => {
+				if (_ignoreCheck(e)) {return;}
+				let x = e.clientX,
+					y = e.clientY,
+					dx = x - self.x,
+					dy = y - self.y;
+				self.x = x;
+				self.y = y;
+				moved = true;
+				onStop && onStopDelayedCall.restart(true);
+				(dx || dy) && onTouchOrPointerDelta(dx, dy);
+			},
+			_onHover = e => {self.event = e; onHover(self);},
+			_onHoverEnd = e => {self.event = e; onHoverEnd(self);},
+			_onClick = e => _ignoreCheck(e) || (_getEvent(e, preventDefault) && onClick(self));
+
+		onStopDelayedCall = self._dc = gsap.delayedCall(onStopDelay || 0.25, onStopFunc).pause();
+
+		self.deltaX = self.deltaY = 0;
+		self._vx = _getVelocityProp(0, 50, true);
+		self._vy = _getVelocityProp(0, 50, true);
+		self.scrollX = scrollFuncX;
+		self.scrollY = scrollFuncY;
+		self.isDragging = self.isGesturing = self.isPressed = false;
+		_context(this);
+		self.enable = e => {
+			if (!self.isEnabled) {
+				_addListener(isViewport ? ownerDoc : target, "scroll", _onScroll);
+				type.indexOf("scroll") >= 0 && _addListener(isViewport ? ownerDoc : target, "scroll", onScroll, passive, capture);
+				type.indexOf("wheel") >= 0 && _addListener(target, "wheel", _onWheel, passive, capture);
+				if ((type.indexOf("touch") >= 0 && _isTouch) || type.indexOf("pointer") >= 0) {
+					_addListener(target, _eventTypes[0], _onPress, passive, capture);
+					_addListener(ownerDoc, _eventTypes[2], _onRelease);
+					_addListener(ownerDoc, _eventTypes[3], _onRelease);
+					allowClicks && _addListener(target, "click", clickCapture, true, true);
+					onClick && _addListener(target, "click", _onClick);
+					onGestureStart && _addListener(ownerDoc, "gesturestart", _onGestureStart);
+					onGestureEnd && _addListener(ownerDoc, "gestureend", _onGestureEnd);
+					onHover && _addListener(target, _pointerType + "enter", _onHover);
+					onHoverEnd && _addListener(target, _pointerType + "leave", _onHoverEnd);
+					onMove && _addListener(target, _pointerType + "move", _onMove);
+				}
+				self.isEnabled = true;
+				e && e.type && _onPress(e);
+				onEnable && onEnable(self);
+			}
+			return self;
+		};
+		self.disable = () => {
+			if (self.isEnabled) {
+				// only remove the _onScroll listener if there aren't any others that rely on the functionality.
+				_observers.filter(o => o !== self && _isViewport(o.target)).length || _removeListener(isViewport ? ownerDoc : target, "scroll", _onScroll);
+				if (self.isPressed) {
+					self._vx.reset();
+					self._vy.reset();
+					_removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);
+				}
+				_removeListener(isViewport ? ownerDoc : target, "scroll", onScroll, capture);
+				_removeListener(target, "wheel", _onWheel, capture);
+				_removeListener(target, _eventTypes[0], _onPress, capture);
+				_removeListener(ownerDoc, _eventTypes[2], _onRelease);
+				_removeListener(ownerDoc, _eventTypes[3], _onRelease);
+				_removeListener(target, "click", clickCapture, true);
+				_removeListener(target, "click", _onClick);
+				_removeListener(ownerDoc, "gesturestart", _onGestureStart);
+				_removeListener(ownerDoc, "gestureend", _onGestureEnd);
+				_removeListener(target, _pointerType + "enter", _onHover);
+				_removeListener(target, _pointerType + "leave", _onHoverEnd);
+				_removeListener(target, _pointerType + "move", _onMove);
+				self.isEnabled = self.isPressed = self.isDragging = false;
+				onDisable && onDisable(self);
+			}
+		};
+
+		self.kill = self.revert = () => {
+			self.disable();
+			let i = _observers.indexOf(self);
+			i >= 0 && _observers.splice(i, 1);
+			_normalizer === self && (_normalizer = 0);
+		};
+
+		_observers.push(self);
+		isNormalizer && _isViewport(target) && (_normalizer = self);
+
+		self.enable(event);
+	}
+
+	get velocityX() {
+		return this._vx.getVelocity();
+	}
+	get velocityY() {
+		return this._vy.getVelocity();
+	}
+
+}
+
+Observer.version = "3.12.5";
+Observer.create = vars => new Observer(vars);
+Observer.register = _initCore;
+Observer.getAll = () => _observers.slice();
+Observer.getById = id => _observers.filter(o => o.vars.id === id)[0];
+
+_getGSAP() && gsap.registerPlugin(Observer);
+
+exports.Observer = Observer;
+exports._getProxyProp = _getProxyProp;
+exports._getScrollFunc = _getScrollFunc;
+exports._getTarget = _getTarget;
+exports._getVelocityProp = _getVelocityProp;
+exports._horizontal = _horizontal;
+exports._isViewport = _isViewport;
+exports._vertical = _vertical;
+exports.default = Observer;
diff --git a/src/Observer.js b/dist/Observer.d.cts
similarity index 97%
rename from src/Observer.js
rename to dist/Observer.d.cts
index 2d65151768f5ea8ef0b484c0e3176afe0727da3e..a974db1786b0d4d6ce12f62e28e0291e77a11221 100644
--- a/src/Observer.js
+++ b/dist/Observer.d.cts
@@ -9,7 +9,7 @@
 */
 /* eslint-disable */
 
-let gsap, _coreInitted, _clamp, _win, _doc, _docEl, _body, _isTouch, _pointerType, ScrollTrigger, _root, _normalizer, _eventTypes, _context,
+let gsap, _coreInitted, _win, _doc, _docEl, _body, _isTouch, _pointerType, ScrollTrigger, _root, _normalizer, _eventTypes, _context,
 	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap),
 	_startup = 1,
 	_observers = [],
@@ -120,7 +120,7 @@ let gsap, _coreInitted, _clamp, _win, _doc, _docEl, _body, _isTouch, _pointerTyp
 			_docEl = _doc.documentElement;
 			_body = _doc.body;
 			_root = [_win, _doc, _docEl, _body];
-			_clamp = gsap.utils.clamp;
+			gsap.utils.clamp;
 			_context = gsap.core.context || function() {};
 			_pointerType = "onpointerenter" in _body ? "pointer" : "mouse";
 			// isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.
@@ -136,7 +136,7 @@ let gsap, _coreInitted, _clamp, _win, _doc, _docEl, _body, _isTouch, _pointerTyp
 _horizontal.op = _vertical;
 _scrollers.cache = 0;
 
-export class Observer {
+class Observer {
 	constructor(vars) {
 		this.init(vars);
 	}
@@ -190,7 +190,7 @@ export class Observer {
 					onChangeX && onChangeX(self);
 					onToggleX && ((self.deltaX < 0) !== (prevDeltaX < 0)) && onToggleX(self);
 					prevDeltaX = self.deltaX;
-					deltaX[0] = deltaX[1] = deltaX[2] = 0
+					deltaX[0] = deltaX[1] = deltaX[2] = 0;
 				}
 				if (changedY) {
 					onDown && self.deltaY > 0 && onDown(self);
@@ -198,7 +198,7 @@ export class Observer {
 					onChangeY && onChangeY(self);
 					onToggleY && ((self.deltaY < 0) !== (prevDeltaY < 0)) && onToggleY(self);
 					prevDeltaY = self.deltaY;
-					deltaY[0] = deltaY[1] = deltaY[2] = 0
+					deltaY[0] = deltaY[1] = deltaY[2] = 0;
 				}
 				if (moved || dragged) {
 					onMove && onMove(self);
@@ -397,7 +397,7 @@ export class Observer {
 			let i = _observers.indexOf(self);
 			i >= 0 && _observers.splice(i, 1);
 			_normalizer === self && (_normalizer = 0);
-		}
+		};
 
 		_observers.push(self);
 		isNormalizer && _isViewport(target) && (_normalizer = self);
@@ -422,4 +422,4 @@ Observer.getById = id => _observers.filter(o => o.vars.id === id)[0];
 
 _getGSAP() && gsap.registerPlugin(Observer);
 
-export { Observer as default, _isViewport, _scrollers, _getScrollFunc, _getProxyProp, _proxies, _getVelocityProp, _vertical, _horizontal, _getTarget };
\ No newline at end of file
+export { Observer, _getProxyProp, _getScrollFunc, _getTarget, _getVelocityProp, _horizontal, _isViewport, _proxies, _scrollers, _vertical, Observer as default };
diff --git a/dist/Observer.d.mts b/dist/Observer.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..a974db1786b0d4d6ce12f62e28e0291e77a11221
--- /dev/null
+++ b/dist/Observer.d.mts
@@ -0,0 +1,425 @@
+/*!
+ * Observer 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _coreInitted, _win, _doc, _docEl, _body, _isTouch, _pointerType, ScrollTrigger, _root, _normalizer, _eventTypes, _context,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_startup = 1,
+	_observers = [],
+	_scrollers = [],
+	_proxies = [],
+	_getTime = Date.now,
+	_bridge = (name, value) => value,
+	_integrate = () => {
+		let core = ScrollTrigger.core,
+			data = core.bridge || {},
+			scrollers = core._scrollers,
+			proxies = core._proxies;
+		scrollers.push(..._scrollers);
+		proxies.push(..._proxies);
+		_scrollers = scrollers;
+		_proxies = proxies;
+		_bridge = (name, value) => data[name](value);
+	},
+	_getProxyProp = (element, property) => ~_proxies.indexOf(element) && _proxies[_proxies.indexOf(element) + 1][property],
+	_isViewport = el => !!~_root.indexOf(el),
+	_addListener = (element, type, func, passive, capture) => element.addEventListener(type, func, {passive: passive !== false, capture: !!capture}),
+	_removeListener = (element, type, func, capture) => element.removeEventListener(type, func, !!capture),
+	_scrollLeft = "scrollLeft",
+	_scrollTop = "scrollTop",
+	_onScroll = () => (_normalizer && _normalizer.isPressed) || _scrollers.cache++,
+	_scrollCacheFunc = (f, doNotCache) => {
+		let cachingFunc = value => { // since reading the scrollTop/scrollLeft/pageOffsetY/pageOffsetX can trigger a layout, this function allows us to cache the value so it only gets read fresh after a "scroll" event fires (or while we're refreshing because that can lengthen the page and alter the scroll position). when "soft" is true, that means don't actually set the scroll, but cache the new value instead (useful in ScrollSmoother)
+			if (value || value === 0) {
+				_startup && (_win.history.scrollRestoration = "manual"); // otherwise the new position will get overwritten by the browser onload.
+				let isNormalizing = _normalizer && _normalizer.isPressed;
+				value = cachingFunc.v = Math.round(value) || (_normalizer && _normalizer.iOS ? 1 : 0); //TODO: iOS Bug: if you allow it to go to 0, Safari can start to report super strange (wildly inaccurate) touch positions!
+				f(value);
+				cachingFunc.cacheID = _scrollers.cache;
+				isNormalizing && _bridge("ss", value); // set scroll (notify ScrollTrigger so it can dispatch a "scrollStart" event if necessary
+			} else if (doNotCache || _scrollers.cache !== cachingFunc.cacheID || _bridge("ref")) {
+				cachingFunc.cacheID = _scrollers.cache;
+				cachingFunc.v = f();
+			}
+			return cachingFunc.v + cachingFunc.offset;
+		};
+		cachingFunc.offset = 0;
+		return f && cachingFunc;
+	},
+	_horizontal = {s: _scrollLeft, p: "left", p2: "Left", os: "right", os2: "Right", d: "width", d2: "Width", a: "x", sc: _scrollCacheFunc(function(value) { return arguments.length ? _win.scrollTo(value, _vertical.sc()) : _win.pageXOffset || _doc[_scrollLeft] || _docEl[_scrollLeft] || _body[_scrollLeft] || 0})},
+	_vertical = {s: _scrollTop, p: "top", p2: "Top", os: "bottom", os2: "Bottom", d: "height", d2: "Height", a: "y", op: _horizontal, sc: _scrollCacheFunc(function(value) { return arguments.length ? _win.scrollTo(_horizontal.sc(), value) : _win.pageYOffset || _doc[_scrollTop] || _docEl[_scrollTop] || _body[_scrollTop] || 0})},
+	_getTarget = (t, self) => ((self && self._ctx && self._ctx.selector) || gsap.utils.toArray)(t)[0] || (typeof(t) === "string" && gsap.config().nullTargetWarn !== false ? console.warn("Element not found:", t) : null),
+
+	_getScrollFunc = (element, {s, sc}) => { // we store the scroller functions in an alternating sequenced Array like [element, verticalScrollFunc, horizontalScrollFunc, ...] so that we can minimize memory, maximize performance, and we also record the last position as a ".rec" property in order to revert to that after refreshing to ensure things don't shift around.
+		_isViewport(element) && (element = _doc.scrollingElement || _docEl);
+		let i = _scrollers.indexOf(element),
+			offset = sc === _vertical.sc ? 1 : 2;
+		!~i && (i = _scrollers.push(element) - 1);
+		_scrollers[i + offset] || _addListener(element, "scroll", _onScroll); // clear the cache when a scroll occurs
+		let prev = _scrollers[i + offset],
+			func = prev || (_scrollers[i + offset] = _scrollCacheFunc(_getProxyProp(element, s), true) || (_isViewport(element) ? sc : _scrollCacheFunc(function(value) { return arguments.length ? (element[s] = value) : element[s]; })));
+		func.target = element;
+		prev || (func.smooth = gsap.getProperty(element, "scrollBehavior") === "smooth"); // only set it the first time (don't reset every time a scrollFunc is requested because perhaps it happens during a refresh() when it's disabled in ScrollTrigger.
+		return func;
+	},
+	_getVelocityProp = (value, minTimeRefresh, useDelta) => {
+		let v1 = value,
+			v2 = value,
+			t1 = _getTime(),
+			t2 = t1,
+			min = minTimeRefresh || 50,
+			dropToZeroTime = Math.max(500, min * 3),
+			update = (value, force) => {
+				let t = _getTime();
+				if (force || t - t1 > min) {
+					v2 = v1;
+					v1 = value;
+					t2 = t1;
+					t1 = t;
+				} else if (useDelta) {
+					v1 += value;
+				} else { // not totally necessary, but makes it a bit more accurate by adjusting the v1 value according to the new slope. This way we're not just ignoring the incoming data. Removing for now because it doesn't seem to make much practical difference and it's probably not worth the kb.
+					v1 = v2 + (value - v2) / (t - t2) * (t1 - t2);
+				}
+			},
+			reset = () => { v2 = v1 = useDelta ? 0 : v1; t2 = t1 = 0; },
+			getVelocity = latestValue => {
+				let tOld = t2,
+					vOld = v2,
+					t = _getTime();
+				(latestValue || latestValue === 0) && latestValue !== v1 && update(latestValue);
+				return (t1 === t2 || t - t2 > dropToZeroTime) ? 0 : (v1 + (useDelta ? vOld : -vOld)) / ((useDelta ? t : t1) - tOld) * 1000;
+			};
+		return {update, reset, getVelocity};
+	},
+	_getEvent = (e, preventDefault) => {
+		preventDefault && !e._gsapAllow && e.preventDefault();
+		return e.changedTouches ? e.changedTouches[0] : e;
+	},
+	_getAbsoluteMax = a => {
+		let max = Math.max(...a),
+			min = Math.min(...a);
+		return Math.abs(max) >= Math.abs(min) ? max : min;
+	},
+	_setScrollTrigger = () => {
+		ScrollTrigger = gsap.core.globals().ScrollTrigger;
+		ScrollTrigger && ScrollTrigger.core && _integrate();
+	},
+	_initCore = core => {
+		gsap = core || _getGSAP();
+		if (!_coreInitted && gsap && typeof(document) !== "undefined" && document.body) {
+			_win = window;
+			_doc = document;
+			_docEl = _doc.documentElement;
+			_body = _doc.body;
+			_root = [_win, _doc, _docEl, _body];
+			gsap.utils.clamp;
+			_context = gsap.core.context || function() {};
+			_pointerType = "onpointerenter" in _body ? "pointer" : "mouse";
+			// isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.
+			_isTouch = Observer.isTouch = _win.matchMedia && _win.matchMedia("(hover: none), (pointer: coarse)").matches ? 1 : ("ontouchstart" in _win || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0) ? 2 : 0;
+			_eventTypes = Observer.eventTypes = ("ontouchstart" in _docEl ? "touchstart,touchmove,touchcancel,touchend" : !("onpointerdown" in _docEl) ? "mousedown,mousemove,mouseup,mouseup" : "pointerdown,pointermove,pointercancel,pointerup").split(",");
+			setTimeout(() => _startup = 0, 500);
+			_setScrollTrigger();
+			_coreInitted = 1;
+		}
+		return _coreInitted;
+	};
+
+_horizontal.op = _vertical;
+_scrollers.cache = 0;
+
+class Observer {
+	constructor(vars) {
+		this.init(vars);
+	}
+
+	init(vars) {
+		_coreInitted || _initCore(gsap) || console.warn("Please gsap.registerPlugin(Observer)");
+		ScrollTrigger || _setScrollTrigger();
+		let {tolerance, dragMinimum, type, target, lineHeight, debounce, preventDefault, onStop, onStopDelay, ignore, wheelSpeed, event, onDragStart, onDragEnd, onDrag, onPress, onRelease, onRight, onLeft, onUp, onDown, onChangeX, onChangeY, onChange, onToggleX, onToggleY, onHover, onHoverEnd, onMove, ignoreCheck, isNormalizer, onGestureStart, onGestureEnd, onWheel, onEnable, onDisable, onClick, scrollSpeed, capture, allowClicks, lockAxis, onLockAxis} = vars;
+		this.target = target = _getTarget(target) || _docEl;
+		this.vars = vars;
+		ignore && (ignore = gsap.utils.toArray(ignore));
+		tolerance = tolerance || 1e-9;
+		dragMinimum = dragMinimum || 0;
+		wheelSpeed = wheelSpeed || 1;
+		scrollSpeed = scrollSpeed || 1;
+		type = type || "wheel,touch,pointer";
+		debounce = debounce !== false;
+		lineHeight || (lineHeight = parseFloat(_win.getComputedStyle(_body).lineHeight) || 22); // note: browser may report "normal", so default to 22.
+		let id, onStopDelayedCall, dragged, moved, wheeled, locked, axis,
+			self = this,
+			prevDeltaX = 0,
+			prevDeltaY = 0,
+			passive = vars.passive || !preventDefault,
+			scrollFuncX = _getScrollFunc(target, _horizontal),
+			scrollFuncY = _getScrollFunc(target, _vertical),
+			scrollX = scrollFuncX(),
+			scrollY = scrollFuncY(),
+			limitToTouch = ~type.indexOf("touch") && !~type.indexOf("pointer") && _eventTypes[0] === "pointerdown", // for devices that accommodate mouse events and touch events, we need to distinguish.
+			isViewport = _isViewport(target),
+			ownerDoc = target.ownerDocument || _doc,
+			deltaX = [0, 0, 0], // wheel, scroll, pointer/touch
+			deltaY = [0, 0, 0],
+			onClickTime = 0,
+			clickCapture = () => onClickTime = _getTime(),
+			_ignoreCheck = (e, isPointerOrTouch) => (self.event = e) && (ignore && ~ignore.indexOf(e.target)) || (isPointerOrTouch && limitToTouch && e.pointerType !== "touch") || (ignoreCheck && ignoreCheck(e, isPointerOrTouch)),
+			onStopFunc = () => {
+				self._vx.reset();
+				self._vy.reset();
+				onStopDelayedCall.pause();
+				onStop && onStop(self);
+			},
+			update = () => {
+				let dx = self.deltaX = _getAbsoluteMax(deltaX),
+					dy = self.deltaY = _getAbsoluteMax(deltaY),
+					changedX = Math.abs(dx) >= tolerance,
+					changedY = Math.abs(dy) >= tolerance;
+				onChange && (changedX || changedY) && onChange(self, dx, dy, deltaX, deltaY); // in ScrollTrigger.normalizeScroll(), we need to know if it was touch/pointer so we need access to the deltaX/deltaY Arrays before we clear them out.
+				if (changedX) {
+					onRight && self.deltaX > 0 && onRight(self);
+					onLeft && self.deltaX < 0 && onLeft(self);
+					onChangeX && onChangeX(self);
+					onToggleX && ((self.deltaX < 0) !== (prevDeltaX < 0)) && onToggleX(self);
+					prevDeltaX = self.deltaX;
+					deltaX[0] = deltaX[1] = deltaX[2] = 0;
+				}
+				if (changedY) {
+					onDown && self.deltaY > 0 && onDown(self);
+					onUp && self.deltaY < 0 && onUp(self);
+					onChangeY && onChangeY(self);
+					onToggleY && ((self.deltaY < 0) !== (prevDeltaY < 0)) && onToggleY(self);
+					prevDeltaY = self.deltaY;
+					deltaY[0] = deltaY[1] = deltaY[2] = 0;
+				}
+				if (moved || dragged) {
+					onMove && onMove(self);
+					if (dragged) {
+						onDrag(self);
+						dragged = false;
+					}
+					moved = false;
+				}
+				locked && !(locked = false) && onLockAxis && onLockAxis(self);
+				if (wheeled) {
+					onWheel(self);
+					wheeled = false;
+				}
+				id = 0;
+			},
+			onDelta = (x, y, index) => {
+				deltaX[index] += x;
+				deltaY[index] += y;
+				self._vx.update(x);
+				self._vy.update(y);
+				debounce ? id || (id = requestAnimationFrame(update)) : update();
+			},
+			onTouchOrPointerDelta = (x, y) => {
+				if (lockAxis && !axis) {
+					self.axis = axis = Math.abs(x) > Math.abs(y) ? "x" : "y";
+					locked = true;
+				}
+				if (axis !== "y") {
+					deltaX[2] += x;
+					self._vx.update(x, true); // update the velocity as frequently as possible instead of in the debounced function so that very quick touch-scrolls (flicks) feel natural. If it's the mouse/touch/pointer, force it so that we get snappy/accurate momentum scroll.
+				}
+				if (axis !== "x") {
+					deltaY[2] += y;
+					self._vy.update(y, true);
+				}
+				debounce ? id || (id = requestAnimationFrame(update)) : update();
+			},
+			_onDrag = e => {
+				if (_ignoreCheck(e, 1)) {return;}
+				e = _getEvent(e, preventDefault);
+				let x = e.clientX,
+					y = e.clientY,
+					dx = x - self.x,
+					dy = y - self.y,
+					isDragging = self.isDragging;
+				self.x = x;
+				self.y = y;
+				if (isDragging || Math.abs(self.startX - x) >= dragMinimum || Math.abs(self.startY - y) >= dragMinimum) {
+					onDrag && (dragged = true);
+					isDragging || (self.isDragging = true);
+					onTouchOrPointerDelta(dx, dy);
+					isDragging || onDragStart && onDragStart(self);
+				}
+			},
+			_onPress = self.onPress = e => {
+				if (_ignoreCheck(e, 1) || (e && e.button)) {return;}
+				self.axis = axis = null;
+				onStopDelayedCall.pause();
+				self.isPressed = true;
+				e = _getEvent(e); // note: may need to preventDefault(?) Won't side-scroll on iOS Safari if we do, though.
+				prevDeltaX = prevDeltaY = 0;
+				self.startX = self.x = e.clientX;
+				self.startY = self.y = e.clientY;
+				self._vx.reset(); // otherwise the t2 may be stale if the user touches and flicks super fast and releases in less than 2 requestAnimationFrame ticks, causing velocity to be 0.
+				self._vy.reset();
+				_addListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, passive, true);
+				self.deltaX = self.deltaY = 0;
+				onPress && onPress(self);
+			},
+			_onRelease = self.onRelease = e => {
+				if (_ignoreCheck(e, 1)) {return;}
+				_removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);
+				let isTrackingDrag = !isNaN(self.y - self.startY),
+					wasDragging = self.isDragging,
+					isDragNotClick = wasDragging && (Math.abs(self.x - self.startX) > 3 || Math.abs(self.y - self.startY) > 3), // some touch devices need some wiggle room in terms of sensing clicks - the finger may move a few pixels.
+					eventData = _getEvent(e);
+				if (!isDragNotClick && isTrackingDrag) {
+					self._vx.reset();
+					self._vy.reset();
+					//if (preventDefault && allowClicks && self.isPressed) { // check isPressed because in a rare edge case, the inputObserver in ScrollTrigger may stopPropagation() on the press/drag, so the onRelease may get fired without the onPress/onDrag ever getting called, thus it could trigger a click to occur on a link after scroll-dragging it.
+					if (preventDefault && allowClicks) {
+						gsap.delayedCall(0.08, () => { // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular "click" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the "real"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the "real" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.
+							if (_getTime() - onClickTime > 300 && !e.defaultPrevented) {
+								if (e.target.click) { //some browsers (like mobile Safari) don't properly trigger the click event
+									e.target.click();
+								} else if (ownerDoc.createEvent) {
+									let syntheticEvent = ownerDoc.createEvent("MouseEvents");
+									syntheticEvent.initMouseEvent("click", true, true, _win, 1, eventData.screenX, eventData.screenY, eventData.clientX, eventData.clientY, false, false, false, false, 0, null);
+									e.target.dispatchEvent(syntheticEvent);
+								}
+							}
+						});
+					}
+				}
+				self.isDragging = self.isGesturing = self.isPressed = false;
+				onStop && wasDragging && !isNormalizer && onStopDelayedCall.restart(true);
+				onDragEnd && wasDragging && onDragEnd(self);
+				onRelease && onRelease(self, isDragNotClick);
+			},
+			_onGestureStart = e => e.touches && e.touches.length > 1 && (self.isGesturing = true) && onGestureStart(e, self.isDragging),
+			_onGestureEnd = () => (self.isGesturing = false) || onGestureEnd(self),
+			onScroll = e => {
+				if (_ignoreCheck(e)) {return;}
+				let x = scrollFuncX(),
+					y = scrollFuncY();
+				onDelta((x - scrollX) * scrollSpeed, (y - scrollY) * scrollSpeed, 1);
+				scrollX = x;
+				scrollY = y;
+				onStop && onStopDelayedCall.restart(true);
+			},
+			_onWheel = e => {
+				if (_ignoreCheck(e)) {return;}
+				e = _getEvent(e, preventDefault);
+				onWheel && (wheeled = true);
+				let multiplier = (e.deltaMode === 1 ? lineHeight : e.deltaMode === 2 ? _win.innerHeight : 1) * wheelSpeed;
+				onDelta(e.deltaX * multiplier, e.deltaY * multiplier, 0);
+				onStop && !isNormalizer && onStopDelayedCall.restart(true);
+			},
+			_onMove = e => {
+				if (_ignoreCheck(e)) {return;}
+				let x = e.clientX,
+					y = e.clientY,
+					dx = x - self.x,
+					dy = y - self.y;
+				self.x = x;
+				self.y = y;
+				moved = true;
+				onStop && onStopDelayedCall.restart(true);
+				(dx || dy) && onTouchOrPointerDelta(dx, dy);
+			},
+			_onHover = e => {self.event = e; onHover(self);},
+			_onHoverEnd = e => {self.event = e; onHoverEnd(self);},
+			_onClick = e => _ignoreCheck(e) || (_getEvent(e, preventDefault) && onClick(self));
+
+		onStopDelayedCall = self._dc = gsap.delayedCall(onStopDelay || 0.25, onStopFunc).pause();
+
+		self.deltaX = self.deltaY = 0;
+		self._vx = _getVelocityProp(0, 50, true);
+		self._vy = _getVelocityProp(0, 50, true);
+		self.scrollX = scrollFuncX;
+		self.scrollY = scrollFuncY;
+		self.isDragging = self.isGesturing = self.isPressed = false;
+		_context(this);
+		self.enable = e => {
+			if (!self.isEnabled) {
+				_addListener(isViewport ? ownerDoc : target, "scroll", _onScroll);
+				type.indexOf("scroll") >= 0 && _addListener(isViewport ? ownerDoc : target, "scroll", onScroll, passive, capture);
+				type.indexOf("wheel") >= 0 && _addListener(target, "wheel", _onWheel, passive, capture);
+				if ((type.indexOf("touch") >= 0 && _isTouch) || type.indexOf("pointer") >= 0) {
+					_addListener(target, _eventTypes[0], _onPress, passive, capture);
+					_addListener(ownerDoc, _eventTypes[2], _onRelease);
+					_addListener(ownerDoc, _eventTypes[3], _onRelease);
+					allowClicks && _addListener(target, "click", clickCapture, true, true);
+					onClick && _addListener(target, "click", _onClick);
+					onGestureStart && _addListener(ownerDoc, "gesturestart", _onGestureStart);
+					onGestureEnd && _addListener(ownerDoc, "gestureend", _onGestureEnd);
+					onHover && _addListener(target, _pointerType + "enter", _onHover);
+					onHoverEnd && _addListener(target, _pointerType + "leave", _onHoverEnd);
+					onMove && _addListener(target, _pointerType + "move", _onMove);
+				}
+				self.isEnabled = true;
+				e && e.type && _onPress(e);
+				onEnable && onEnable(self);
+			}
+			return self;
+		};
+		self.disable = () => {
+			if (self.isEnabled) {
+				// only remove the _onScroll listener if there aren't any others that rely on the functionality.
+				_observers.filter(o => o !== self && _isViewport(o.target)).length || _removeListener(isViewport ? ownerDoc : target, "scroll", _onScroll);
+				if (self.isPressed) {
+					self._vx.reset();
+					self._vy.reset();
+					_removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);
+				}
+				_removeListener(isViewport ? ownerDoc : target, "scroll", onScroll, capture);
+				_removeListener(target, "wheel", _onWheel, capture);
+				_removeListener(target, _eventTypes[0], _onPress, capture);
+				_removeListener(ownerDoc, _eventTypes[2], _onRelease);
+				_removeListener(ownerDoc, _eventTypes[3], _onRelease);
+				_removeListener(target, "click", clickCapture, true);
+				_removeListener(target, "click", _onClick);
+				_removeListener(ownerDoc, "gesturestart", _onGestureStart);
+				_removeListener(ownerDoc, "gestureend", _onGestureEnd);
+				_removeListener(target, _pointerType + "enter", _onHover);
+				_removeListener(target, _pointerType + "leave", _onHoverEnd);
+				_removeListener(target, _pointerType + "move", _onMove);
+				self.isEnabled = self.isPressed = self.isDragging = false;
+				onDisable && onDisable(self);
+			}
+		};
+
+		self.kill = self.revert = () => {
+			self.disable();
+			let i = _observers.indexOf(self);
+			i >= 0 && _observers.splice(i, 1);
+			_normalizer === self && (_normalizer = 0);
+		};
+
+		_observers.push(self);
+		isNormalizer && _isViewport(target) && (_normalizer = self);
+
+		self.enable(event);
+	}
+
+	get velocityX() {
+		return this._vx.getVelocity();
+	}
+	get velocityY() {
+		return this._vy.getVelocity();
+	}
+
+}
+
+Observer.version = "3.12.5";
+Observer.create = vars => new Observer(vars);
+Observer.register = _initCore;
+Observer.getAll = () => _observers.slice();
+Observer.getById = id => _observers.filter(o => o.vars.id === id)[0];
+
+_getGSAP() && gsap.registerPlugin(Observer);
+
+export { Observer, _getProxyProp, _getScrollFunc, _getTarget, _getVelocityProp, _horizontal, _isViewport, _proxies, _scrollers, _vertical, Observer as default };
diff --git a/dist/Observer.d.ts b/dist/Observer.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..a974db1786b0d4d6ce12f62e28e0291e77a11221
--- /dev/null
+++ b/dist/Observer.d.ts
@@ -0,0 +1,425 @@
+/*!
+ * Observer 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _coreInitted, _win, _doc, _docEl, _body, _isTouch, _pointerType, ScrollTrigger, _root, _normalizer, _eventTypes, _context,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_startup = 1,
+	_observers = [],
+	_scrollers = [],
+	_proxies = [],
+	_getTime = Date.now,
+	_bridge = (name, value) => value,
+	_integrate = () => {
+		let core = ScrollTrigger.core,
+			data = core.bridge || {},
+			scrollers = core._scrollers,
+			proxies = core._proxies;
+		scrollers.push(..._scrollers);
+		proxies.push(..._proxies);
+		_scrollers = scrollers;
+		_proxies = proxies;
+		_bridge = (name, value) => data[name](value);
+	},
+	_getProxyProp = (element, property) => ~_proxies.indexOf(element) && _proxies[_proxies.indexOf(element) + 1][property],
+	_isViewport = el => !!~_root.indexOf(el),
+	_addListener = (element, type, func, passive, capture) => element.addEventListener(type, func, {passive: passive !== false, capture: !!capture}),
+	_removeListener = (element, type, func, capture) => element.removeEventListener(type, func, !!capture),
+	_scrollLeft = "scrollLeft",
+	_scrollTop = "scrollTop",
+	_onScroll = () => (_normalizer && _normalizer.isPressed) || _scrollers.cache++,
+	_scrollCacheFunc = (f, doNotCache) => {
+		let cachingFunc = value => { // since reading the scrollTop/scrollLeft/pageOffsetY/pageOffsetX can trigger a layout, this function allows us to cache the value so it only gets read fresh after a "scroll" event fires (or while we're refreshing because that can lengthen the page and alter the scroll position). when "soft" is true, that means don't actually set the scroll, but cache the new value instead (useful in ScrollSmoother)
+			if (value || value === 0) {
+				_startup && (_win.history.scrollRestoration = "manual"); // otherwise the new position will get overwritten by the browser onload.
+				let isNormalizing = _normalizer && _normalizer.isPressed;
+				value = cachingFunc.v = Math.round(value) || (_normalizer && _normalizer.iOS ? 1 : 0); //TODO: iOS Bug: if you allow it to go to 0, Safari can start to report super strange (wildly inaccurate) touch positions!
+				f(value);
+				cachingFunc.cacheID = _scrollers.cache;
+				isNormalizing && _bridge("ss", value); // set scroll (notify ScrollTrigger so it can dispatch a "scrollStart" event if necessary
+			} else if (doNotCache || _scrollers.cache !== cachingFunc.cacheID || _bridge("ref")) {
+				cachingFunc.cacheID = _scrollers.cache;
+				cachingFunc.v = f();
+			}
+			return cachingFunc.v + cachingFunc.offset;
+		};
+		cachingFunc.offset = 0;
+		return f && cachingFunc;
+	},
+	_horizontal = {s: _scrollLeft, p: "left", p2: "Left", os: "right", os2: "Right", d: "width", d2: "Width", a: "x", sc: _scrollCacheFunc(function(value) { return arguments.length ? _win.scrollTo(value, _vertical.sc()) : _win.pageXOffset || _doc[_scrollLeft] || _docEl[_scrollLeft] || _body[_scrollLeft] || 0})},
+	_vertical = {s: _scrollTop, p: "top", p2: "Top", os: "bottom", os2: "Bottom", d: "height", d2: "Height", a: "y", op: _horizontal, sc: _scrollCacheFunc(function(value) { return arguments.length ? _win.scrollTo(_horizontal.sc(), value) : _win.pageYOffset || _doc[_scrollTop] || _docEl[_scrollTop] || _body[_scrollTop] || 0})},
+	_getTarget = (t, self) => ((self && self._ctx && self._ctx.selector) || gsap.utils.toArray)(t)[0] || (typeof(t) === "string" && gsap.config().nullTargetWarn !== false ? console.warn("Element not found:", t) : null),
+
+	_getScrollFunc = (element, {s, sc}) => { // we store the scroller functions in an alternating sequenced Array like [element, verticalScrollFunc, horizontalScrollFunc, ...] so that we can minimize memory, maximize performance, and we also record the last position as a ".rec" property in order to revert to that after refreshing to ensure things don't shift around.
+		_isViewport(element) && (element = _doc.scrollingElement || _docEl);
+		let i = _scrollers.indexOf(element),
+			offset = sc === _vertical.sc ? 1 : 2;
+		!~i && (i = _scrollers.push(element) - 1);
+		_scrollers[i + offset] || _addListener(element, "scroll", _onScroll); // clear the cache when a scroll occurs
+		let prev = _scrollers[i + offset],
+			func = prev || (_scrollers[i + offset] = _scrollCacheFunc(_getProxyProp(element, s), true) || (_isViewport(element) ? sc : _scrollCacheFunc(function(value) { return arguments.length ? (element[s] = value) : element[s]; })));
+		func.target = element;
+		prev || (func.smooth = gsap.getProperty(element, "scrollBehavior") === "smooth"); // only set it the first time (don't reset every time a scrollFunc is requested because perhaps it happens during a refresh() when it's disabled in ScrollTrigger.
+		return func;
+	},
+	_getVelocityProp = (value, minTimeRefresh, useDelta) => {
+		let v1 = value,
+			v2 = value,
+			t1 = _getTime(),
+			t2 = t1,
+			min = minTimeRefresh || 50,
+			dropToZeroTime = Math.max(500, min * 3),
+			update = (value, force) => {
+				let t = _getTime();
+				if (force || t - t1 > min) {
+					v2 = v1;
+					v1 = value;
+					t2 = t1;
+					t1 = t;
+				} else if (useDelta) {
+					v1 += value;
+				} else { // not totally necessary, but makes it a bit more accurate by adjusting the v1 value according to the new slope. This way we're not just ignoring the incoming data. Removing for now because it doesn't seem to make much practical difference and it's probably not worth the kb.
+					v1 = v2 + (value - v2) / (t - t2) * (t1 - t2);
+				}
+			},
+			reset = () => { v2 = v1 = useDelta ? 0 : v1; t2 = t1 = 0; },
+			getVelocity = latestValue => {
+				let tOld = t2,
+					vOld = v2,
+					t = _getTime();
+				(latestValue || latestValue === 0) && latestValue !== v1 && update(latestValue);
+				return (t1 === t2 || t - t2 > dropToZeroTime) ? 0 : (v1 + (useDelta ? vOld : -vOld)) / ((useDelta ? t : t1) - tOld) * 1000;
+			};
+		return {update, reset, getVelocity};
+	},
+	_getEvent = (e, preventDefault) => {
+		preventDefault && !e._gsapAllow && e.preventDefault();
+		return e.changedTouches ? e.changedTouches[0] : e;
+	},
+	_getAbsoluteMax = a => {
+		let max = Math.max(...a),
+			min = Math.min(...a);
+		return Math.abs(max) >= Math.abs(min) ? max : min;
+	},
+	_setScrollTrigger = () => {
+		ScrollTrigger = gsap.core.globals().ScrollTrigger;
+		ScrollTrigger && ScrollTrigger.core && _integrate();
+	},
+	_initCore = core => {
+		gsap = core || _getGSAP();
+		if (!_coreInitted && gsap && typeof(document) !== "undefined" && document.body) {
+			_win = window;
+			_doc = document;
+			_docEl = _doc.documentElement;
+			_body = _doc.body;
+			_root = [_win, _doc, _docEl, _body];
+			gsap.utils.clamp;
+			_context = gsap.core.context || function() {};
+			_pointerType = "onpointerenter" in _body ? "pointer" : "mouse";
+			// isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.
+			_isTouch = Observer.isTouch = _win.matchMedia && _win.matchMedia("(hover: none), (pointer: coarse)").matches ? 1 : ("ontouchstart" in _win || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0) ? 2 : 0;
+			_eventTypes = Observer.eventTypes = ("ontouchstart" in _docEl ? "touchstart,touchmove,touchcancel,touchend" : !("onpointerdown" in _docEl) ? "mousedown,mousemove,mouseup,mouseup" : "pointerdown,pointermove,pointercancel,pointerup").split(",");
+			setTimeout(() => _startup = 0, 500);
+			_setScrollTrigger();
+			_coreInitted = 1;
+		}
+		return _coreInitted;
+	};
+
+_horizontal.op = _vertical;
+_scrollers.cache = 0;
+
+class Observer {
+	constructor(vars) {
+		this.init(vars);
+	}
+
+	init(vars) {
+		_coreInitted || _initCore(gsap) || console.warn("Please gsap.registerPlugin(Observer)");
+		ScrollTrigger || _setScrollTrigger();
+		let {tolerance, dragMinimum, type, target, lineHeight, debounce, preventDefault, onStop, onStopDelay, ignore, wheelSpeed, event, onDragStart, onDragEnd, onDrag, onPress, onRelease, onRight, onLeft, onUp, onDown, onChangeX, onChangeY, onChange, onToggleX, onToggleY, onHover, onHoverEnd, onMove, ignoreCheck, isNormalizer, onGestureStart, onGestureEnd, onWheel, onEnable, onDisable, onClick, scrollSpeed, capture, allowClicks, lockAxis, onLockAxis} = vars;
+		this.target = target = _getTarget(target) || _docEl;
+		this.vars = vars;
+		ignore && (ignore = gsap.utils.toArray(ignore));
+		tolerance = tolerance || 1e-9;
+		dragMinimum = dragMinimum || 0;
+		wheelSpeed = wheelSpeed || 1;
+		scrollSpeed = scrollSpeed || 1;
+		type = type || "wheel,touch,pointer";
+		debounce = debounce !== false;
+		lineHeight || (lineHeight = parseFloat(_win.getComputedStyle(_body).lineHeight) || 22); // note: browser may report "normal", so default to 22.
+		let id, onStopDelayedCall, dragged, moved, wheeled, locked, axis,
+			self = this,
+			prevDeltaX = 0,
+			prevDeltaY = 0,
+			passive = vars.passive || !preventDefault,
+			scrollFuncX = _getScrollFunc(target, _horizontal),
+			scrollFuncY = _getScrollFunc(target, _vertical),
+			scrollX = scrollFuncX(),
+			scrollY = scrollFuncY(),
+			limitToTouch = ~type.indexOf("touch") && !~type.indexOf("pointer") && _eventTypes[0] === "pointerdown", // for devices that accommodate mouse events and touch events, we need to distinguish.
+			isViewport = _isViewport(target),
+			ownerDoc = target.ownerDocument || _doc,
+			deltaX = [0, 0, 0], // wheel, scroll, pointer/touch
+			deltaY = [0, 0, 0],
+			onClickTime = 0,
+			clickCapture = () => onClickTime = _getTime(),
+			_ignoreCheck = (e, isPointerOrTouch) => (self.event = e) && (ignore && ~ignore.indexOf(e.target)) || (isPointerOrTouch && limitToTouch && e.pointerType !== "touch") || (ignoreCheck && ignoreCheck(e, isPointerOrTouch)),
+			onStopFunc = () => {
+				self._vx.reset();
+				self._vy.reset();
+				onStopDelayedCall.pause();
+				onStop && onStop(self);
+			},
+			update = () => {
+				let dx = self.deltaX = _getAbsoluteMax(deltaX),
+					dy = self.deltaY = _getAbsoluteMax(deltaY),
+					changedX = Math.abs(dx) >= tolerance,
+					changedY = Math.abs(dy) >= tolerance;
+				onChange && (changedX || changedY) && onChange(self, dx, dy, deltaX, deltaY); // in ScrollTrigger.normalizeScroll(), we need to know if it was touch/pointer so we need access to the deltaX/deltaY Arrays before we clear them out.
+				if (changedX) {
+					onRight && self.deltaX > 0 && onRight(self);
+					onLeft && self.deltaX < 0 && onLeft(self);
+					onChangeX && onChangeX(self);
+					onToggleX && ((self.deltaX < 0) !== (prevDeltaX < 0)) && onToggleX(self);
+					prevDeltaX = self.deltaX;
+					deltaX[0] = deltaX[1] = deltaX[2] = 0;
+				}
+				if (changedY) {
+					onDown && self.deltaY > 0 && onDown(self);
+					onUp && self.deltaY < 0 && onUp(self);
+					onChangeY && onChangeY(self);
+					onToggleY && ((self.deltaY < 0) !== (prevDeltaY < 0)) && onToggleY(self);
+					prevDeltaY = self.deltaY;
+					deltaY[0] = deltaY[1] = deltaY[2] = 0;
+				}
+				if (moved || dragged) {
+					onMove && onMove(self);
+					if (dragged) {
+						onDrag(self);
+						dragged = false;
+					}
+					moved = false;
+				}
+				locked && !(locked = false) && onLockAxis && onLockAxis(self);
+				if (wheeled) {
+					onWheel(self);
+					wheeled = false;
+				}
+				id = 0;
+			},
+			onDelta = (x, y, index) => {
+				deltaX[index] += x;
+				deltaY[index] += y;
+				self._vx.update(x);
+				self._vy.update(y);
+				debounce ? id || (id = requestAnimationFrame(update)) : update();
+			},
+			onTouchOrPointerDelta = (x, y) => {
+				if (lockAxis && !axis) {
+					self.axis = axis = Math.abs(x) > Math.abs(y) ? "x" : "y";
+					locked = true;
+				}
+				if (axis !== "y") {
+					deltaX[2] += x;
+					self._vx.update(x, true); // update the velocity as frequently as possible instead of in the debounced function so that very quick touch-scrolls (flicks) feel natural. If it's the mouse/touch/pointer, force it so that we get snappy/accurate momentum scroll.
+				}
+				if (axis !== "x") {
+					deltaY[2] += y;
+					self._vy.update(y, true);
+				}
+				debounce ? id || (id = requestAnimationFrame(update)) : update();
+			},
+			_onDrag = e => {
+				if (_ignoreCheck(e, 1)) {return;}
+				e = _getEvent(e, preventDefault);
+				let x = e.clientX,
+					y = e.clientY,
+					dx = x - self.x,
+					dy = y - self.y,
+					isDragging = self.isDragging;
+				self.x = x;
+				self.y = y;
+				if (isDragging || Math.abs(self.startX - x) >= dragMinimum || Math.abs(self.startY - y) >= dragMinimum) {
+					onDrag && (dragged = true);
+					isDragging || (self.isDragging = true);
+					onTouchOrPointerDelta(dx, dy);
+					isDragging || onDragStart && onDragStart(self);
+				}
+			},
+			_onPress = self.onPress = e => {
+				if (_ignoreCheck(e, 1) || (e && e.button)) {return;}
+				self.axis = axis = null;
+				onStopDelayedCall.pause();
+				self.isPressed = true;
+				e = _getEvent(e); // note: may need to preventDefault(?) Won't side-scroll on iOS Safari if we do, though.
+				prevDeltaX = prevDeltaY = 0;
+				self.startX = self.x = e.clientX;
+				self.startY = self.y = e.clientY;
+				self._vx.reset(); // otherwise the t2 may be stale if the user touches and flicks super fast and releases in less than 2 requestAnimationFrame ticks, causing velocity to be 0.
+				self._vy.reset();
+				_addListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, passive, true);
+				self.deltaX = self.deltaY = 0;
+				onPress && onPress(self);
+			},
+			_onRelease = self.onRelease = e => {
+				if (_ignoreCheck(e, 1)) {return;}
+				_removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);
+				let isTrackingDrag = !isNaN(self.y - self.startY),
+					wasDragging = self.isDragging,
+					isDragNotClick = wasDragging && (Math.abs(self.x - self.startX) > 3 || Math.abs(self.y - self.startY) > 3), // some touch devices need some wiggle room in terms of sensing clicks - the finger may move a few pixels.
+					eventData = _getEvent(e);
+				if (!isDragNotClick && isTrackingDrag) {
+					self._vx.reset();
+					self._vy.reset();
+					//if (preventDefault && allowClicks && self.isPressed) { // check isPressed because in a rare edge case, the inputObserver in ScrollTrigger may stopPropagation() on the press/drag, so the onRelease may get fired without the onPress/onDrag ever getting called, thus it could trigger a click to occur on a link after scroll-dragging it.
+					if (preventDefault && allowClicks) {
+						gsap.delayedCall(0.08, () => { // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular "click" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the "real"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the "real" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.
+							if (_getTime() - onClickTime > 300 && !e.defaultPrevented) {
+								if (e.target.click) { //some browsers (like mobile Safari) don't properly trigger the click event
+									e.target.click();
+								} else if (ownerDoc.createEvent) {
+									let syntheticEvent = ownerDoc.createEvent("MouseEvents");
+									syntheticEvent.initMouseEvent("click", true, true, _win, 1, eventData.screenX, eventData.screenY, eventData.clientX, eventData.clientY, false, false, false, false, 0, null);
+									e.target.dispatchEvent(syntheticEvent);
+								}
+							}
+						});
+					}
+				}
+				self.isDragging = self.isGesturing = self.isPressed = false;
+				onStop && wasDragging && !isNormalizer && onStopDelayedCall.restart(true);
+				onDragEnd && wasDragging && onDragEnd(self);
+				onRelease && onRelease(self, isDragNotClick);
+			},
+			_onGestureStart = e => e.touches && e.touches.length > 1 && (self.isGesturing = true) && onGestureStart(e, self.isDragging),
+			_onGestureEnd = () => (self.isGesturing = false) || onGestureEnd(self),
+			onScroll = e => {
+				if (_ignoreCheck(e)) {return;}
+				let x = scrollFuncX(),
+					y = scrollFuncY();
+				onDelta((x - scrollX) * scrollSpeed, (y - scrollY) * scrollSpeed, 1);
+				scrollX = x;
+				scrollY = y;
+				onStop && onStopDelayedCall.restart(true);
+			},
+			_onWheel = e => {
+				if (_ignoreCheck(e)) {return;}
+				e = _getEvent(e, preventDefault);
+				onWheel && (wheeled = true);
+				let multiplier = (e.deltaMode === 1 ? lineHeight : e.deltaMode === 2 ? _win.innerHeight : 1) * wheelSpeed;
+				onDelta(e.deltaX * multiplier, e.deltaY * multiplier, 0);
+				onStop && !isNormalizer && onStopDelayedCall.restart(true);
+			},
+			_onMove = e => {
+				if (_ignoreCheck(e)) {return;}
+				let x = e.clientX,
+					y = e.clientY,
+					dx = x - self.x,
+					dy = y - self.y;
+				self.x = x;
+				self.y = y;
+				moved = true;
+				onStop && onStopDelayedCall.restart(true);
+				(dx || dy) && onTouchOrPointerDelta(dx, dy);
+			},
+			_onHover = e => {self.event = e; onHover(self);},
+			_onHoverEnd = e => {self.event = e; onHoverEnd(self);},
+			_onClick = e => _ignoreCheck(e) || (_getEvent(e, preventDefault) && onClick(self));
+
+		onStopDelayedCall = self._dc = gsap.delayedCall(onStopDelay || 0.25, onStopFunc).pause();
+
+		self.deltaX = self.deltaY = 0;
+		self._vx = _getVelocityProp(0, 50, true);
+		self._vy = _getVelocityProp(0, 50, true);
+		self.scrollX = scrollFuncX;
+		self.scrollY = scrollFuncY;
+		self.isDragging = self.isGesturing = self.isPressed = false;
+		_context(this);
+		self.enable = e => {
+			if (!self.isEnabled) {
+				_addListener(isViewport ? ownerDoc : target, "scroll", _onScroll);
+				type.indexOf("scroll") >= 0 && _addListener(isViewport ? ownerDoc : target, "scroll", onScroll, passive, capture);
+				type.indexOf("wheel") >= 0 && _addListener(target, "wheel", _onWheel, passive, capture);
+				if ((type.indexOf("touch") >= 0 && _isTouch) || type.indexOf("pointer") >= 0) {
+					_addListener(target, _eventTypes[0], _onPress, passive, capture);
+					_addListener(ownerDoc, _eventTypes[2], _onRelease);
+					_addListener(ownerDoc, _eventTypes[3], _onRelease);
+					allowClicks && _addListener(target, "click", clickCapture, true, true);
+					onClick && _addListener(target, "click", _onClick);
+					onGestureStart && _addListener(ownerDoc, "gesturestart", _onGestureStart);
+					onGestureEnd && _addListener(ownerDoc, "gestureend", _onGestureEnd);
+					onHover && _addListener(target, _pointerType + "enter", _onHover);
+					onHoverEnd && _addListener(target, _pointerType + "leave", _onHoverEnd);
+					onMove && _addListener(target, _pointerType + "move", _onMove);
+				}
+				self.isEnabled = true;
+				e && e.type && _onPress(e);
+				onEnable && onEnable(self);
+			}
+			return self;
+		};
+		self.disable = () => {
+			if (self.isEnabled) {
+				// only remove the _onScroll listener if there aren't any others that rely on the functionality.
+				_observers.filter(o => o !== self && _isViewport(o.target)).length || _removeListener(isViewport ? ownerDoc : target, "scroll", _onScroll);
+				if (self.isPressed) {
+					self._vx.reset();
+					self._vy.reset();
+					_removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);
+				}
+				_removeListener(isViewport ? ownerDoc : target, "scroll", onScroll, capture);
+				_removeListener(target, "wheel", _onWheel, capture);
+				_removeListener(target, _eventTypes[0], _onPress, capture);
+				_removeListener(ownerDoc, _eventTypes[2], _onRelease);
+				_removeListener(ownerDoc, _eventTypes[3], _onRelease);
+				_removeListener(target, "click", clickCapture, true);
+				_removeListener(target, "click", _onClick);
+				_removeListener(ownerDoc, "gesturestart", _onGestureStart);
+				_removeListener(ownerDoc, "gestureend", _onGestureEnd);
+				_removeListener(target, _pointerType + "enter", _onHover);
+				_removeListener(target, _pointerType + "leave", _onHoverEnd);
+				_removeListener(target, _pointerType + "move", _onMove);
+				self.isEnabled = self.isPressed = self.isDragging = false;
+				onDisable && onDisable(self);
+			}
+		};
+
+		self.kill = self.revert = () => {
+			self.disable();
+			let i = _observers.indexOf(self);
+			i >= 0 && _observers.splice(i, 1);
+			_normalizer === self && (_normalizer = 0);
+		};
+
+		_observers.push(self);
+		isNormalizer && _isViewport(target) && (_normalizer = self);
+
+		self.enable(event);
+	}
+
+	get velocityX() {
+		return this._vx.getVelocity();
+	}
+	get velocityY() {
+		return this._vy.getVelocity();
+	}
+
+}
+
+Observer.version = "3.12.5";
+Observer.create = vars => new Observer(vars);
+Observer.register = _initCore;
+Observer.getAll = () => _observers.slice();
+Observer.getById = id => _observers.filter(o => o.vars.id === id)[0];
+
+_getGSAP() && gsap.registerPlugin(Observer);
+
+export { Observer, _getProxyProp, _getScrollFunc, _getTarget, _getVelocityProp, _horizontal, _isViewport, _proxies, _scrollers, _vertical, Observer as default };
diff --git a/dist/Observer.js b/dist/Observer.js
deleted file mode 100644
index 4c32d43e0dc3a0649713056b58454a05519ec1b7..0000000000000000000000000000000000000000
diff --git a/dist/Observer.min.js b/dist/Observer.min.js
deleted file mode 100644
index 10daacab44a6f143fb12e660d836f72769ac5026..0000000000000000000000000000000000000000
diff --git a/dist/Observer.min.js.map b/dist/Observer.min.js.map
deleted file mode 100644
index 3e4c5db8047da93db468688ef02f7bde3570f4fd..0000000000000000000000000000000000000000
diff --git a/dist/Observer.mjs b/dist/Observer.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..a974db1786b0d4d6ce12f62e28e0291e77a11221
--- /dev/null
+++ b/dist/Observer.mjs
@@ -0,0 +1,425 @@
+/*!
+ * Observer 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _coreInitted, _win, _doc, _docEl, _body, _isTouch, _pointerType, ScrollTrigger, _root, _normalizer, _eventTypes, _context,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_startup = 1,
+	_observers = [],
+	_scrollers = [],
+	_proxies = [],
+	_getTime = Date.now,
+	_bridge = (name, value) => value,
+	_integrate = () => {
+		let core = ScrollTrigger.core,
+			data = core.bridge || {},
+			scrollers = core._scrollers,
+			proxies = core._proxies;
+		scrollers.push(..._scrollers);
+		proxies.push(..._proxies);
+		_scrollers = scrollers;
+		_proxies = proxies;
+		_bridge = (name, value) => data[name](value);
+	},
+	_getProxyProp = (element, property) => ~_proxies.indexOf(element) && _proxies[_proxies.indexOf(element) + 1][property],
+	_isViewport = el => !!~_root.indexOf(el),
+	_addListener = (element, type, func, passive, capture) => element.addEventListener(type, func, {passive: passive !== false, capture: !!capture}),
+	_removeListener = (element, type, func, capture) => element.removeEventListener(type, func, !!capture),
+	_scrollLeft = "scrollLeft",
+	_scrollTop = "scrollTop",
+	_onScroll = () => (_normalizer && _normalizer.isPressed) || _scrollers.cache++,
+	_scrollCacheFunc = (f, doNotCache) => {
+		let cachingFunc = value => { // since reading the scrollTop/scrollLeft/pageOffsetY/pageOffsetX can trigger a layout, this function allows us to cache the value so it only gets read fresh after a "scroll" event fires (or while we're refreshing because that can lengthen the page and alter the scroll position). when "soft" is true, that means don't actually set the scroll, but cache the new value instead (useful in ScrollSmoother)
+			if (value || value === 0) {
+				_startup && (_win.history.scrollRestoration = "manual"); // otherwise the new position will get overwritten by the browser onload.
+				let isNormalizing = _normalizer && _normalizer.isPressed;
+				value = cachingFunc.v = Math.round(value) || (_normalizer && _normalizer.iOS ? 1 : 0); //TODO: iOS Bug: if you allow it to go to 0, Safari can start to report super strange (wildly inaccurate) touch positions!
+				f(value);
+				cachingFunc.cacheID = _scrollers.cache;
+				isNormalizing && _bridge("ss", value); // set scroll (notify ScrollTrigger so it can dispatch a "scrollStart" event if necessary
+			} else if (doNotCache || _scrollers.cache !== cachingFunc.cacheID || _bridge("ref")) {
+				cachingFunc.cacheID = _scrollers.cache;
+				cachingFunc.v = f();
+			}
+			return cachingFunc.v + cachingFunc.offset;
+		};
+		cachingFunc.offset = 0;
+		return f && cachingFunc;
+	},
+	_horizontal = {s: _scrollLeft, p: "left", p2: "Left", os: "right", os2: "Right", d: "width", d2: "Width", a: "x", sc: _scrollCacheFunc(function(value) { return arguments.length ? _win.scrollTo(value, _vertical.sc()) : _win.pageXOffset || _doc[_scrollLeft] || _docEl[_scrollLeft] || _body[_scrollLeft] || 0})},
+	_vertical = {s: _scrollTop, p: "top", p2: "Top", os: "bottom", os2: "Bottom", d: "height", d2: "Height", a: "y", op: _horizontal, sc: _scrollCacheFunc(function(value) { return arguments.length ? _win.scrollTo(_horizontal.sc(), value) : _win.pageYOffset || _doc[_scrollTop] || _docEl[_scrollTop] || _body[_scrollTop] || 0})},
+	_getTarget = (t, self) => ((self && self._ctx && self._ctx.selector) || gsap.utils.toArray)(t)[0] || (typeof(t) === "string" && gsap.config().nullTargetWarn !== false ? console.warn("Element not found:", t) : null),
+
+	_getScrollFunc = (element, {s, sc}) => { // we store the scroller functions in an alternating sequenced Array like [element, verticalScrollFunc, horizontalScrollFunc, ...] so that we can minimize memory, maximize performance, and we also record the last position as a ".rec" property in order to revert to that after refreshing to ensure things don't shift around.
+		_isViewport(element) && (element = _doc.scrollingElement || _docEl);
+		let i = _scrollers.indexOf(element),
+			offset = sc === _vertical.sc ? 1 : 2;
+		!~i && (i = _scrollers.push(element) - 1);
+		_scrollers[i + offset] || _addListener(element, "scroll", _onScroll); // clear the cache when a scroll occurs
+		let prev = _scrollers[i + offset],
+			func = prev || (_scrollers[i + offset] = _scrollCacheFunc(_getProxyProp(element, s), true) || (_isViewport(element) ? sc : _scrollCacheFunc(function(value) { return arguments.length ? (element[s] = value) : element[s]; })));
+		func.target = element;
+		prev || (func.smooth = gsap.getProperty(element, "scrollBehavior") === "smooth"); // only set it the first time (don't reset every time a scrollFunc is requested because perhaps it happens during a refresh() when it's disabled in ScrollTrigger.
+		return func;
+	},
+	_getVelocityProp = (value, minTimeRefresh, useDelta) => {
+		let v1 = value,
+			v2 = value,
+			t1 = _getTime(),
+			t2 = t1,
+			min = minTimeRefresh || 50,
+			dropToZeroTime = Math.max(500, min * 3),
+			update = (value, force) => {
+				let t = _getTime();
+				if (force || t - t1 > min) {
+					v2 = v1;
+					v1 = value;
+					t2 = t1;
+					t1 = t;
+				} else if (useDelta) {
+					v1 += value;
+				} else { // not totally necessary, but makes it a bit more accurate by adjusting the v1 value according to the new slope. This way we're not just ignoring the incoming data. Removing for now because it doesn't seem to make much practical difference and it's probably not worth the kb.
+					v1 = v2 + (value - v2) / (t - t2) * (t1 - t2);
+				}
+			},
+			reset = () => { v2 = v1 = useDelta ? 0 : v1; t2 = t1 = 0; },
+			getVelocity = latestValue => {
+				let tOld = t2,
+					vOld = v2,
+					t = _getTime();
+				(latestValue || latestValue === 0) && latestValue !== v1 && update(latestValue);
+				return (t1 === t2 || t - t2 > dropToZeroTime) ? 0 : (v1 + (useDelta ? vOld : -vOld)) / ((useDelta ? t : t1) - tOld) * 1000;
+			};
+		return {update, reset, getVelocity};
+	},
+	_getEvent = (e, preventDefault) => {
+		preventDefault && !e._gsapAllow && e.preventDefault();
+		return e.changedTouches ? e.changedTouches[0] : e;
+	},
+	_getAbsoluteMax = a => {
+		let max = Math.max(...a),
+			min = Math.min(...a);
+		return Math.abs(max) >= Math.abs(min) ? max : min;
+	},
+	_setScrollTrigger = () => {
+		ScrollTrigger = gsap.core.globals().ScrollTrigger;
+		ScrollTrigger && ScrollTrigger.core && _integrate();
+	},
+	_initCore = core => {
+		gsap = core || _getGSAP();
+		if (!_coreInitted && gsap && typeof(document) !== "undefined" && document.body) {
+			_win = window;
+			_doc = document;
+			_docEl = _doc.documentElement;
+			_body = _doc.body;
+			_root = [_win, _doc, _docEl, _body];
+			gsap.utils.clamp;
+			_context = gsap.core.context || function() {};
+			_pointerType = "onpointerenter" in _body ? "pointer" : "mouse";
+			// isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.
+			_isTouch = Observer.isTouch = _win.matchMedia && _win.matchMedia("(hover: none), (pointer: coarse)").matches ? 1 : ("ontouchstart" in _win || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0) ? 2 : 0;
+			_eventTypes = Observer.eventTypes = ("ontouchstart" in _docEl ? "touchstart,touchmove,touchcancel,touchend" : !("onpointerdown" in _docEl) ? "mousedown,mousemove,mouseup,mouseup" : "pointerdown,pointermove,pointercancel,pointerup").split(",");
+			setTimeout(() => _startup = 0, 500);
+			_setScrollTrigger();
+			_coreInitted = 1;
+		}
+		return _coreInitted;
+	};
+
+_horizontal.op = _vertical;
+_scrollers.cache = 0;
+
+class Observer {
+	constructor(vars) {
+		this.init(vars);
+	}
+
+	init(vars) {
+		_coreInitted || _initCore(gsap) || console.warn("Please gsap.registerPlugin(Observer)");
+		ScrollTrigger || _setScrollTrigger();
+		let {tolerance, dragMinimum, type, target, lineHeight, debounce, preventDefault, onStop, onStopDelay, ignore, wheelSpeed, event, onDragStart, onDragEnd, onDrag, onPress, onRelease, onRight, onLeft, onUp, onDown, onChangeX, onChangeY, onChange, onToggleX, onToggleY, onHover, onHoverEnd, onMove, ignoreCheck, isNormalizer, onGestureStart, onGestureEnd, onWheel, onEnable, onDisable, onClick, scrollSpeed, capture, allowClicks, lockAxis, onLockAxis} = vars;
+		this.target = target = _getTarget(target) || _docEl;
+		this.vars = vars;
+		ignore && (ignore = gsap.utils.toArray(ignore));
+		tolerance = tolerance || 1e-9;
+		dragMinimum = dragMinimum || 0;
+		wheelSpeed = wheelSpeed || 1;
+		scrollSpeed = scrollSpeed || 1;
+		type = type || "wheel,touch,pointer";
+		debounce = debounce !== false;
+		lineHeight || (lineHeight = parseFloat(_win.getComputedStyle(_body).lineHeight) || 22); // note: browser may report "normal", so default to 22.
+		let id, onStopDelayedCall, dragged, moved, wheeled, locked, axis,
+			self = this,
+			prevDeltaX = 0,
+			prevDeltaY = 0,
+			passive = vars.passive || !preventDefault,
+			scrollFuncX = _getScrollFunc(target, _horizontal),
+			scrollFuncY = _getScrollFunc(target, _vertical),
+			scrollX = scrollFuncX(),
+			scrollY = scrollFuncY(),
+			limitToTouch = ~type.indexOf("touch") && !~type.indexOf("pointer") && _eventTypes[0] === "pointerdown", // for devices that accommodate mouse events and touch events, we need to distinguish.
+			isViewport = _isViewport(target),
+			ownerDoc = target.ownerDocument || _doc,
+			deltaX = [0, 0, 0], // wheel, scroll, pointer/touch
+			deltaY = [0, 0, 0],
+			onClickTime = 0,
+			clickCapture = () => onClickTime = _getTime(),
+			_ignoreCheck = (e, isPointerOrTouch) => (self.event = e) && (ignore && ~ignore.indexOf(e.target)) || (isPointerOrTouch && limitToTouch && e.pointerType !== "touch") || (ignoreCheck && ignoreCheck(e, isPointerOrTouch)),
+			onStopFunc = () => {
+				self._vx.reset();
+				self._vy.reset();
+				onStopDelayedCall.pause();
+				onStop && onStop(self);
+			},
+			update = () => {
+				let dx = self.deltaX = _getAbsoluteMax(deltaX),
+					dy = self.deltaY = _getAbsoluteMax(deltaY),
+					changedX = Math.abs(dx) >= tolerance,
+					changedY = Math.abs(dy) >= tolerance;
+				onChange && (changedX || changedY) && onChange(self, dx, dy, deltaX, deltaY); // in ScrollTrigger.normalizeScroll(), we need to know if it was touch/pointer so we need access to the deltaX/deltaY Arrays before we clear them out.
+				if (changedX) {
+					onRight && self.deltaX > 0 && onRight(self);
+					onLeft && self.deltaX < 0 && onLeft(self);
+					onChangeX && onChangeX(self);
+					onToggleX && ((self.deltaX < 0) !== (prevDeltaX < 0)) && onToggleX(self);
+					prevDeltaX = self.deltaX;
+					deltaX[0] = deltaX[1] = deltaX[2] = 0;
+				}
+				if (changedY) {
+					onDown && self.deltaY > 0 && onDown(self);
+					onUp && self.deltaY < 0 && onUp(self);
+					onChangeY && onChangeY(self);
+					onToggleY && ((self.deltaY < 0) !== (prevDeltaY < 0)) && onToggleY(self);
+					prevDeltaY = self.deltaY;
+					deltaY[0] = deltaY[1] = deltaY[2] = 0;
+				}
+				if (moved || dragged) {
+					onMove && onMove(self);
+					if (dragged) {
+						onDrag(self);
+						dragged = false;
+					}
+					moved = false;
+				}
+				locked && !(locked = false) && onLockAxis && onLockAxis(self);
+				if (wheeled) {
+					onWheel(self);
+					wheeled = false;
+				}
+				id = 0;
+			},
+			onDelta = (x, y, index) => {
+				deltaX[index] += x;
+				deltaY[index] += y;
+				self._vx.update(x);
+				self._vy.update(y);
+				debounce ? id || (id = requestAnimationFrame(update)) : update();
+			},
+			onTouchOrPointerDelta = (x, y) => {
+				if (lockAxis && !axis) {
+					self.axis = axis = Math.abs(x) > Math.abs(y) ? "x" : "y";
+					locked = true;
+				}
+				if (axis !== "y") {
+					deltaX[2] += x;
+					self._vx.update(x, true); // update the velocity as frequently as possible instead of in the debounced function so that very quick touch-scrolls (flicks) feel natural. If it's the mouse/touch/pointer, force it so that we get snappy/accurate momentum scroll.
+				}
+				if (axis !== "x") {
+					deltaY[2] += y;
+					self._vy.update(y, true);
+				}
+				debounce ? id || (id = requestAnimationFrame(update)) : update();
+			},
+			_onDrag = e => {
+				if (_ignoreCheck(e, 1)) {return;}
+				e = _getEvent(e, preventDefault);
+				let x = e.clientX,
+					y = e.clientY,
+					dx = x - self.x,
+					dy = y - self.y,
+					isDragging = self.isDragging;
+				self.x = x;
+				self.y = y;
+				if (isDragging || Math.abs(self.startX - x) >= dragMinimum || Math.abs(self.startY - y) >= dragMinimum) {
+					onDrag && (dragged = true);
+					isDragging || (self.isDragging = true);
+					onTouchOrPointerDelta(dx, dy);
+					isDragging || onDragStart && onDragStart(self);
+				}
+			},
+			_onPress = self.onPress = e => {
+				if (_ignoreCheck(e, 1) || (e && e.button)) {return;}
+				self.axis = axis = null;
+				onStopDelayedCall.pause();
+				self.isPressed = true;
+				e = _getEvent(e); // note: may need to preventDefault(?) Won't side-scroll on iOS Safari if we do, though.
+				prevDeltaX = prevDeltaY = 0;
+				self.startX = self.x = e.clientX;
+				self.startY = self.y = e.clientY;
+				self._vx.reset(); // otherwise the t2 may be stale if the user touches and flicks super fast and releases in less than 2 requestAnimationFrame ticks, causing velocity to be 0.
+				self._vy.reset();
+				_addListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, passive, true);
+				self.deltaX = self.deltaY = 0;
+				onPress && onPress(self);
+			},
+			_onRelease = self.onRelease = e => {
+				if (_ignoreCheck(e, 1)) {return;}
+				_removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);
+				let isTrackingDrag = !isNaN(self.y - self.startY),
+					wasDragging = self.isDragging,
+					isDragNotClick = wasDragging && (Math.abs(self.x - self.startX) > 3 || Math.abs(self.y - self.startY) > 3), // some touch devices need some wiggle room in terms of sensing clicks - the finger may move a few pixels.
+					eventData = _getEvent(e);
+				if (!isDragNotClick && isTrackingDrag) {
+					self._vx.reset();
+					self._vy.reset();
+					//if (preventDefault && allowClicks && self.isPressed) { // check isPressed because in a rare edge case, the inputObserver in ScrollTrigger may stopPropagation() on the press/drag, so the onRelease may get fired without the onPress/onDrag ever getting called, thus it could trigger a click to occur on a link after scroll-dragging it.
+					if (preventDefault && allowClicks) {
+						gsap.delayedCall(0.08, () => { // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular "click" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the "real"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the "real" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.
+							if (_getTime() - onClickTime > 300 && !e.defaultPrevented) {
+								if (e.target.click) { //some browsers (like mobile Safari) don't properly trigger the click event
+									e.target.click();
+								} else if (ownerDoc.createEvent) {
+									let syntheticEvent = ownerDoc.createEvent("MouseEvents");
+									syntheticEvent.initMouseEvent("click", true, true, _win, 1, eventData.screenX, eventData.screenY, eventData.clientX, eventData.clientY, false, false, false, false, 0, null);
+									e.target.dispatchEvent(syntheticEvent);
+								}
+							}
+						});
+					}
+				}
+				self.isDragging = self.isGesturing = self.isPressed = false;
+				onStop && wasDragging && !isNormalizer && onStopDelayedCall.restart(true);
+				onDragEnd && wasDragging && onDragEnd(self);
+				onRelease && onRelease(self, isDragNotClick);
+			},
+			_onGestureStart = e => e.touches && e.touches.length > 1 && (self.isGesturing = true) && onGestureStart(e, self.isDragging),
+			_onGestureEnd = () => (self.isGesturing = false) || onGestureEnd(self),
+			onScroll = e => {
+				if (_ignoreCheck(e)) {return;}
+				let x = scrollFuncX(),
+					y = scrollFuncY();
+				onDelta((x - scrollX) * scrollSpeed, (y - scrollY) * scrollSpeed, 1);
+				scrollX = x;
+				scrollY = y;
+				onStop && onStopDelayedCall.restart(true);
+			},
+			_onWheel = e => {
+				if (_ignoreCheck(e)) {return;}
+				e = _getEvent(e, preventDefault);
+				onWheel && (wheeled = true);
+				let multiplier = (e.deltaMode === 1 ? lineHeight : e.deltaMode === 2 ? _win.innerHeight : 1) * wheelSpeed;
+				onDelta(e.deltaX * multiplier, e.deltaY * multiplier, 0);
+				onStop && !isNormalizer && onStopDelayedCall.restart(true);
+			},
+			_onMove = e => {
+				if (_ignoreCheck(e)) {return;}
+				let x = e.clientX,
+					y = e.clientY,
+					dx = x - self.x,
+					dy = y - self.y;
+				self.x = x;
+				self.y = y;
+				moved = true;
+				onStop && onStopDelayedCall.restart(true);
+				(dx || dy) && onTouchOrPointerDelta(dx, dy);
+			},
+			_onHover = e => {self.event = e; onHover(self);},
+			_onHoverEnd = e => {self.event = e; onHoverEnd(self);},
+			_onClick = e => _ignoreCheck(e) || (_getEvent(e, preventDefault) && onClick(self));
+
+		onStopDelayedCall = self._dc = gsap.delayedCall(onStopDelay || 0.25, onStopFunc).pause();
+
+		self.deltaX = self.deltaY = 0;
+		self._vx = _getVelocityProp(0, 50, true);
+		self._vy = _getVelocityProp(0, 50, true);
+		self.scrollX = scrollFuncX;
+		self.scrollY = scrollFuncY;
+		self.isDragging = self.isGesturing = self.isPressed = false;
+		_context(this);
+		self.enable = e => {
+			if (!self.isEnabled) {
+				_addListener(isViewport ? ownerDoc : target, "scroll", _onScroll);
+				type.indexOf("scroll") >= 0 && _addListener(isViewport ? ownerDoc : target, "scroll", onScroll, passive, capture);
+				type.indexOf("wheel") >= 0 && _addListener(target, "wheel", _onWheel, passive, capture);
+				if ((type.indexOf("touch") >= 0 && _isTouch) || type.indexOf("pointer") >= 0) {
+					_addListener(target, _eventTypes[0], _onPress, passive, capture);
+					_addListener(ownerDoc, _eventTypes[2], _onRelease);
+					_addListener(ownerDoc, _eventTypes[3], _onRelease);
+					allowClicks && _addListener(target, "click", clickCapture, true, true);
+					onClick && _addListener(target, "click", _onClick);
+					onGestureStart && _addListener(ownerDoc, "gesturestart", _onGestureStart);
+					onGestureEnd && _addListener(ownerDoc, "gestureend", _onGestureEnd);
+					onHover && _addListener(target, _pointerType + "enter", _onHover);
+					onHoverEnd && _addListener(target, _pointerType + "leave", _onHoverEnd);
+					onMove && _addListener(target, _pointerType + "move", _onMove);
+				}
+				self.isEnabled = true;
+				e && e.type && _onPress(e);
+				onEnable && onEnable(self);
+			}
+			return self;
+		};
+		self.disable = () => {
+			if (self.isEnabled) {
+				// only remove the _onScroll listener if there aren't any others that rely on the functionality.
+				_observers.filter(o => o !== self && _isViewport(o.target)).length || _removeListener(isViewport ? ownerDoc : target, "scroll", _onScroll);
+				if (self.isPressed) {
+					self._vx.reset();
+					self._vy.reset();
+					_removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);
+				}
+				_removeListener(isViewport ? ownerDoc : target, "scroll", onScroll, capture);
+				_removeListener(target, "wheel", _onWheel, capture);
+				_removeListener(target, _eventTypes[0], _onPress, capture);
+				_removeListener(ownerDoc, _eventTypes[2], _onRelease);
+				_removeListener(ownerDoc, _eventTypes[3], _onRelease);
+				_removeListener(target, "click", clickCapture, true);
+				_removeListener(target, "click", _onClick);
+				_removeListener(ownerDoc, "gesturestart", _onGestureStart);
+				_removeListener(ownerDoc, "gestureend", _onGestureEnd);
+				_removeListener(target, _pointerType + "enter", _onHover);
+				_removeListener(target, _pointerType + "leave", _onHoverEnd);
+				_removeListener(target, _pointerType + "move", _onMove);
+				self.isEnabled = self.isPressed = self.isDragging = false;
+				onDisable && onDisable(self);
+			}
+		};
+
+		self.kill = self.revert = () => {
+			self.disable();
+			let i = _observers.indexOf(self);
+			i >= 0 && _observers.splice(i, 1);
+			_normalizer === self && (_normalizer = 0);
+		};
+
+		_observers.push(self);
+		isNormalizer && _isViewport(target) && (_normalizer = self);
+
+		self.enable(event);
+	}
+
+	get velocityX() {
+		return this._vx.getVelocity();
+	}
+	get velocityY() {
+		return this._vy.getVelocity();
+	}
+
+}
+
+Observer.version = "3.12.5";
+Observer.create = vars => new Observer(vars);
+Observer.register = _initCore;
+Observer.getAll = () => _observers.slice();
+Observer.getById = id => _observers.filter(o => o.vars.id === id)[0];
+
+_getGSAP() && gsap.registerPlugin(Observer);
+
+export { Observer, _getProxyProp, _getScrollFunc, _getTarget, _getVelocityProp, _horizontal, _isViewport, _proxies, _scrollers, _vertical, Observer as default };
diff --git a/dist/PixiPlugin.cjs b/dist/PixiPlugin.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..8eb4901ace6cfe060e03084fbfae72582f622003
--- /dev/null
+++ b/dist/PixiPlugin.cjs
@@ -0,0 +1,338 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+/*!
+ * PixiPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _splitColor, _coreInitted, _PIXI, PropTween, _getSetter, _isV4,
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_isFunction = value => typeof(value) === "function",
+	_warn = message => console.warn(message),
+	_idMatrix = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],
+	_lumR = 0.212671,
+	_lumG = 0.715160,
+	_lumB = 0.072169,
+	_filterClass = name => _isFunction(_PIXI[name]) ? _PIXI[name] : _PIXI.filters[name], // in PIXI 7.1, filters moved from PIXI.filters to just PIXI
+	_applyMatrix = (m, m2) => {
+		let temp = [],
+			i = 0,
+			z = 0,
+			y, x;
+		for (y = 0; y < 4; y++) {
+			for (x = 0; x < 5; x++) {
+				z = (x === 4) ? m[i + 4] : 0;
+				temp[i + x] = m[i]   * m2[x] + m[i+1] * m2[x + 5] +	m[i+2] * m2[x + 10] + m[i+3] * m2[x + 15] +	z;
+			}
+			i += 5;
+		}
+		return temp;
+	},
+	_setSaturation = (m, n) => {
+		let inv = 1 - n,
+			r = inv * _lumR,
+			g = inv * _lumG,
+			b = inv * _lumB;
+		return _applyMatrix([r + n, g, b, 0, 0, r, g + n, b, 0, 0, r, g, b + n, 0, 0, 0, 0, 0, 1, 0], m);
+	},
+	_colorize = (m, color, amount) => {
+		let c = _splitColor(color),
+			r = c[0] / 255,
+			g = c[1] / 255,
+			b = c[2] / 255,
+			inv = 1 - amount;
+		return _applyMatrix([inv + amount * r * _lumR, amount * r * _lumG, amount * r * _lumB, 0, 0, amount * g * _lumR, inv + amount * g * _lumG, amount * g * _lumB, 0, 0, amount * b * _lumR, amount * b * _lumG, inv + amount * b * _lumB, 0, 0, 0, 0, 0, 1, 0], m);
+	},
+	_setHue = (m, n) => {
+		n *= Math.PI / 180;
+		let c = Math.cos(n),
+			s = Math.sin(n);
+		return _applyMatrix([(_lumR + (c * (1 - _lumR))) + (s * (-_lumR)), (_lumG + (c * (-_lumG))) + (s * (-_lumG)), (_lumB + (c * (-_lumB))) + (s * (1 - _lumB)), 0, 0, (_lumR + (c * (-_lumR))) + (s * 0.143), (_lumG + (c * (1 - _lumG))) + (s * 0.14), (_lumB + (c * (-_lumB))) + (s * -0.283), 0, 0, (_lumR + (c * (-_lumR))) + (s * (-(1 - _lumR))), (_lumG + (c * (-_lumG))) + (s * _lumG), (_lumB + (c * (1 - _lumB))) + (s * _lumB), 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], m);
+	},
+	_setContrast = (m, n) => _applyMatrix([n,0,0,0,0.5 * (1 - n), 0,n,0,0,0.5 * (1 - n), 0,0,n,0,0.5 * (1 - n), 0,0,0,1,0], m),
+	_getFilter = (target, type) => {
+		let filterClass = _filterClass(type),
+			filters = target.filters || [],
+			i = filters.length,
+			filter;
+		filterClass || _warn(type + " not found. PixiPlugin.registerPIXI(PIXI)");
+		while (--i > -1) {
+			if (filters[i] instanceof filterClass) {
+				return filters[i];
+			}
+		}
+		filter = new filterClass();
+		if (type === "BlurFilter") {
+			filter.blur = 0;
+		}
+		filters.push(filter);
+		target.filters = filters;
+		return filter;
+	},
+	_addColorMatrixFilterCacheTween = (p, plugin, cache, vars) => { //we cache the ColorMatrixFilter components in a _gsColorMatrixFilter object attached to the target object so that it's easy to grab the current value at any time.
+		plugin.add(cache, p, cache[p], vars[p]);
+		plugin._props.push(p);
+	},
+	_applyBrightnessToMatrix = (brightness, matrix) => {
+		let filterClass = _filterClass("ColorMatrixFilter"),
+			temp = new filterClass();
+		temp.matrix = matrix;
+		temp.brightness(brightness, true);
+		return temp.matrix;
+	},
+	_copy = obj => {
+		let copy = {},
+			p;
+		for (p in obj) {
+			copy[p] = obj[p];
+		}
+		return copy;
+	},
+	_CMFdefaults = {contrast:1, saturation:1, colorizeAmount:0, colorize:"rgb(255,255,255)", hue:0, brightness:1},
+	_parseColorMatrixFilter = (target, v, pg) => {
+		let filter = _getFilter(target, "ColorMatrixFilter"),
+			cache = target._gsColorMatrixFilter = target._gsColorMatrixFilter || _copy(_CMFdefaults),
+			combine = v.combineCMF && !("colorMatrixFilter" in v && !v.colorMatrixFilter),
+			i, matrix, startMatrix;
+		startMatrix = filter.matrix;
+		if (v.resolution) {
+			filter.resolution = v.resolution;
+		}
+		if (v.matrix && v.matrix.length === startMatrix.length) {
+			matrix = v.matrix;
+			if (cache.contrast !== 1) {
+				_addColorMatrixFilterCacheTween("contrast", pg, cache, _CMFdefaults);
+			}
+			if (cache.hue) {
+				_addColorMatrixFilterCacheTween("hue", pg, cache, _CMFdefaults);
+			}
+			if (cache.brightness !== 1) {
+				_addColorMatrixFilterCacheTween("brightness", pg, cache, _CMFdefaults);
+			}
+			if (cache.colorizeAmount) {
+				_addColorMatrixFilterCacheTween("colorize", pg, cache, _CMFdefaults);
+				_addColorMatrixFilterCacheTween("colorizeAmount", pg, cache, _CMFdefaults);
+			}
+			if (cache.saturation !== 1) {
+				_addColorMatrixFilterCacheTween("saturation", pg, cache, _CMFdefaults);
+			}
+
+		} else {
+			matrix = _idMatrix.slice();
+			if (v.contrast != null) {
+				matrix = _setContrast(matrix, +v.contrast);
+				_addColorMatrixFilterCacheTween("contrast", pg, cache, v);
+			} else if (cache.contrast !== 1) {
+				if (combine) {
+					matrix = _setContrast(matrix, cache.contrast);
+				} else {
+					_addColorMatrixFilterCacheTween("contrast", pg, cache, _CMFdefaults);
+				}
+			}
+			if (v.hue != null) {
+				matrix = _setHue(matrix, +v.hue);
+				_addColorMatrixFilterCacheTween("hue", pg, cache, v);
+			} else if (cache.hue) {
+				if (combine) {
+					matrix = _setHue(matrix, cache.hue);
+				} else {
+					_addColorMatrixFilterCacheTween("hue", pg, cache, _CMFdefaults);
+				}
+			}
+			if (v.brightness != null) {
+				matrix = _applyBrightnessToMatrix(+v.brightness, matrix);
+				_addColorMatrixFilterCacheTween("brightness", pg, cache, v);
+			} else if (cache.brightness !== 1) {
+				if (combine) {
+					matrix = _applyBrightnessToMatrix(cache.brightness, matrix);
+				} else {
+					_addColorMatrixFilterCacheTween("brightness", pg, cache, _CMFdefaults);
+				}
+			}
+			if (v.colorize != null) {
+				v.colorizeAmount = ("colorizeAmount" in v) ? +v.colorizeAmount : 1;
+				matrix = _colorize(matrix, v.colorize, v.colorizeAmount);
+				_addColorMatrixFilterCacheTween("colorize", pg, cache, v);
+				_addColorMatrixFilterCacheTween("colorizeAmount", pg, cache, v);
+			} else if (cache.colorizeAmount) {
+				if (combine) {
+					matrix = _colorize(matrix, cache.colorize, cache.colorizeAmount);
+				} else {
+					_addColorMatrixFilterCacheTween("colorize", pg, cache, _CMFdefaults);
+					_addColorMatrixFilterCacheTween("colorizeAmount", pg, cache, _CMFdefaults);
+				}
+			}
+			if (v.saturation != null) {
+				matrix = _setSaturation(matrix, +v.saturation);
+				_addColorMatrixFilterCacheTween("saturation", pg, cache, v);
+			} else if (cache.saturation !== 1) {
+				if (combine) {
+					matrix = _setSaturation(matrix, cache.saturation);
+				} else {
+					_addColorMatrixFilterCacheTween("saturation", pg, cache, _CMFdefaults);
+				}
+			}
+		}
+		i = matrix.length;
+		while (--i > -1) {
+			if (matrix[i] !== startMatrix[i]) {
+				pg.add(startMatrix, i, startMatrix[i], matrix[i], "colorMatrixFilter");
+			}
+		}
+		pg._props.push("colorMatrixFilter");
+	},
+	_renderColor = (ratio, {t, p, color, set}) => {
+		set(t, p, color[0] << 16 | color[1] << 8 | color[2]);
+	},
+	_renderDirtyCache = (ratio, {g}) => {
+		if (g) { //in order for PixiJS to actually redraw GraphicsData, we've gotta increment the "dirty" and "clearDirty" values. If we don't do this, the values will be tween properly, but not rendered.
+			g.dirty++;
+			g.clearDirty++;
+		}
+	},
+	_renderAutoAlpha = (ratio, data) => {
+		data.t.visible = !!data.t.alpha;
+	},
+	_addColorTween = (target, p, value, plugin) => {
+		let currentValue = target[p],
+			startColor = _splitColor(_isFunction(currentValue) ? target[ ((p.indexOf("set") || !_isFunction(target["get" + p.substr(3)])) ? p : "get" + p.substr(3)) ]() : currentValue),
+			endColor = _splitColor(value);
+		plugin._pt = new PropTween(plugin._pt, target, p, 0, 0, _renderColor, {t:target, p:p, color:startColor, set:_getSetter(target, p)});
+		plugin.add(startColor, 0, startColor[0], endColor[0]);
+		plugin.add(startColor, 1, startColor[1], endColor[1]);
+		plugin.add(startColor, 2, startColor[2], endColor[2]);
+	},
+
+	_colorProps = {tint:1, lineColor:1, fillColor:1},
+	_xyContexts = "position,scale,skew,pivot,anchor,tilePosition,tileScale".split(","),
+	_contexts = {x:"position", y:"position", tileX:"tilePosition", tileY:"tilePosition"},
+	_colorMatrixFilterProps = {colorMatrixFilter:1, saturation:1, contrast:1, hue:1, colorize:1, colorizeAmount:1, brightness:1, combineCMF:1},
+	_DEG2RAD = Math.PI / 180,
+	_isString = value => typeof(value) === "string",
+	_degreesToRadians = value => (_isString(value) && value.charAt(1) === "=") ? value.substr(0, 2) + (parseFloat(value.substr(2)) * _DEG2RAD) : value * _DEG2RAD,
+	_renderPropWithEnd = (ratio, data) => data.set(data.t, data.p, ratio === 1 ? data.e : (Math.round((data.s + data.c * ratio) * 100000) / 100000), data),
+	_addRotationalPropTween = (plugin, target, property, startNum, endValue, radians) => {
+		let cap = 360 * (radians ? _DEG2RAD : 1),
+			isString = _isString(endValue),
+			relative = (isString && endValue.charAt(1) === "=") ? +(endValue.charAt(0) + "1") : 0,
+			endNum = parseFloat(relative ? endValue.substr(2) : endValue) * (radians ? _DEG2RAD : 1),
+			change = relative ? endNum * relative : endNum - startNum,
+			finalValue = startNum + change,
+			direction, pt;
+		if (isString) {
+			direction = endValue.split("_")[1];
+			if (direction === "short") {
+				change %= cap;
+				if (change !== change % (cap / 2)) {
+					change += (change < 0) ? cap : -cap;
+				}
+			}
+			if (direction === "cw" && change < 0) {
+				change = ((change + cap * 1e10) % cap) - ~~(change / cap) * cap;
+			} else if (direction === "ccw" && change > 0) {
+				change = ((change - cap * 1e10) % cap) - ~~(change / cap) * cap;
+			}
+		}
+		plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
+		pt.e = finalValue;
+		return pt;
+	},
+	_initCore = () => {
+		if (!_coreInitted) {
+			gsap = _getGSAP();
+			_PIXI = _coreInitted = _PIXI || (_windowExists() && window.PIXI);
+			_isV4 = _PIXI && _PIXI.VERSION && _PIXI.VERSION.charAt(0) === "4";
+			_splitColor = color => gsap.utils.splitColor((color + "").substr(0,2) === "0x" ? "#" + color.substr(2) : color); // some colors in PIXI are reported as "0xFF4421" instead of "#FF4421".
+		}
+	}, i, p;
+
+//context setup...
+for (i = 0; i < _xyContexts.length; i++) {
+	p = _xyContexts[i];
+	_contexts[p + "X"] = p;
+	_contexts[p + "Y"] = p;
+}
+
+
+const PixiPlugin = {
+	version: "3.12.5",
+	name: "pixi",
+	register(core, Plugin, propTween) {
+		gsap = core;
+		PropTween = propTween;
+		_getSetter = Plugin.getSetter;
+		_initCore();
+	},
+	headless: true, // doesn't need window
+	registerPIXI(pixi) {
+		_PIXI = pixi;
+	},
+	init(target, values, tween, index, targets) {
+		_PIXI || _initCore();
+		if (!_PIXI) {
+			_warn("PIXI was not found. PixiPlugin.registerPIXI(PIXI);");
+			return false;
+		}
+		let context, axis, value, colorMatrix, filter, p, padding, i, data;
+		for (p in values) {
+			context = _contexts[p];
+			value = values[p];
+			if (context) {
+				axis = ~p.charAt(p.length-1).toLowerCase().indexOf("x") ? "x" : "y";
+				this.add(target[context], axis, target[context][axis], (context === "skew") ? _degreesToRadians(value) : value, 0, 0, 0, 0, 0, 1);
+			} else if (p === "scale" || p === "anchor" || p === "pivot" || p === "tileScale") {
+				this.add(target[p], "x", target[p].x, value);
+				this.add(target[p], "y", target[p].y, value);
+			} else if (p === "rotation" || p === "angle") { //PIXI expects rotation in radians, but as a convenience we let folks define it in degrees and we do the conversion.
+				_addRotationalPropTween(this, target, p, target[p], value, p === "rotation");
+			} else if (_colorMatrixFilterProps[p]) {
+				if (!colorMatrix) {
+					_parseColorMatrixFilter(target, values.colorMatrixFilter || values, this);
+					colorMatrix = true;
+				}
+			} else if (p === "blur" || p === "blurX" || p === "blurY" || p === "blurPadding") {
+				filter = _getFilter(target, "BlurFilter");
+				this.add(filter, p, filter[p], value);
+				if (values.blurPadding !== 0) {
+					padding = values.blurPadding || Math.max(filter[p], value) * 2;
+					i = target.filters.length;
+					while (--i > -1) {
+						target.filters[i].padding = Math.max(target.filters[i].padding, padding); //if we don't expand the padding on all the filters, it can look clipped.
+					}
+				}
+			} else if (_colorProps[p]) {
+				if ((p === "lineColor" || p === "fillColor") && target instanceof _PIXI.Graphics) {
+					data = (target.geometry || target).graphicsData; //"geometry" was introduced in PIXI version 5
+					this._pt = new PropTween(this._pt, target, p, 0, 0, _renderDirtyCache, {g: target.geometry || target});
+					i = data.length;
+					while (--i > -1) {
+						_addColorTween(_isV4 ? data[i] : data[i][p.substr(0, 4) + "Style"], _isV4 ? p : "color", value, this);
+					}
+				} else {
+					_addColorTween(target, p, value, this);
+				}
+			} else if (p === "autoAlpha") {
+				this._pt = new PropTween(this._pt, target, "visible", 0, 0, _renderAutoAlpha);
+				this.add(target, "alpha", target.alpha, value);
+				this._props.push("alpha", "visible");
+			} else if (p !== "resolution") {
+				this.add(target, p, "get", value);
+			}
+			this._props.push(p);
+		}
+	}
+};
+
+_getGSAP() && gsap.registerPlugin(PixiPlugin);
+
+exports.PixiPlugin = PixiPlugin;
+exports.default = PixiPlugin;
diff --git a/src/PixiPlugin.js b/dist/PixiPlugin.d.cts
similarity index 99%
rename from src/PixiPlugin.js
rename to dist/PixiPlugin.d.cts
index 0f09d1e1065afa7526fa8b833c3ab5c57c50b5b6..87dd18abdfc04b9b216442e73965f11db229984a 100644
--- a/src/PixiPlugin.js
+++ b/dist/PixiPlugin.d.cts
@@ -259,7 +259,7 @@ for (i = 0; i < _xyContexts.length; i++) {
 }
 
 
-export const PixiPlugin = {
+const PixiPlugin = {
 	version: "3.12.5",
 	name: "pixi",
 	register(core, Plugin, propTween) {
@@ -330,4 +330,4 @@ export const PixiPlugin = {
 
 _getGSAP() && gsap.registerPlugin(PixiPlugin);
 
-export { PixiPlugin as default };
\ No newline at end of file
+export { PixiPlugin, PixiPlugin as default };
diff --git a/dist/PixiPlugin.d.mts b/dist/PixiPlugin.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..87dd18abdfc04b9b216442e73965f11db229984a
--- /dev/null
+++ b/dist/PixiPlugin.d.mts
@@ -0,0 +1,333 @@
+/*!
+ * PixiPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _splitColor, _coreInitted, _PIXI, PropTween, _getSetter, _isV4,
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_isFunction = value => typeof(value) === "function",
+	_warn = message => console.warn(message),
+	_idMatrix = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],
+	_lumR = 0.212671,
+	_lumG = 0.715160,
+	_lumB = 0.072169,
+	_filterClass = name => _isFunction(_PIXI[name]) ? _PIXI[name] : _PIXI.filters[name], // in PIXI 7.1, filters moved from PIXI.filters to just PIXI
+	_applyMatrix = (m, m2) => {
+		let temp = [],
+			i = 0,
+			z = 0,
+			y, x;
+		for (y = 0; y < 4; y++) {
+			for (x = 0; x < 5; x++) {
+				z = (x === 4) ? m[i + 4] : 0;
+				temp[i + x] = m[i]   * m2[x] + m[i+1] * m2[x + 5] +	m[i+2] * m2[x + 10] + m[i+3] * m2[x + 15] +	z;
+			}
+			i += 5;
+		}
+		return temp;
+	},
+	_setSaturation = (m, n) => {
+		let inv = 1 - n,
+			r = inv * _lumR,
+			g = inv * _lumG,
+			b = inv * _lumB;
+		return _applyMatrix([r + n, g, b, 0, 0, r, g + n, b, 0, 0, r, g, b + n, 0, 0, 0, 0, 0, 1, 0], m);
+	},
+	_colorize = (m, color, amount) => {
+		let c = _splitColor(color),
+			r = c[0] / 255,
+			g = c[1] / 255,
+			b = c[2] / 255,
+			inv = 1 - amount;
+		return _applyMatrix([inv + amount * r * _lumR, amount * r * _lumG, amount * r * _lumB, 0, 0, amount * g * _lumR, inv + amount * g * _lumG, amount * g * _lumB, 0, 0, amount * b * _lumR, amount * b * _lumG, inv + amount * b * _lumB, 0, 0, 0, 0, 0, 1, 0], m);
+	},
+	_setHue = (m, n) => {
+		n *= Math.PI / 180;
+		let c = Math.cos(n),
+			s = Math.sin(n);
+		return _applyMatrix([(_lumR + (c * (1 - _lumR))) + (s * (-_lumR)), (_lumG + (c * (-_lumG))) + (s * (-_lumG)), (_lumB + (c * (-_lumB))) + (s * (1 - _lumB)), 0, 0, (_lumR + (c * (-_lumR))) + (s * 0.143), (_lumG + (c * (1 - _lumG))) + (s * 0.14), (_lumB + (c * (-_lumB))) + (s * -0.283), 0, 0, (_lumR + (c * (-_lumR))) + (s * (-(1 - _lumR))), (_lumG + (c * (-_lumG))) + (s * _lumG), (_lumB + (c * (1 - _lumB))) + (s * _lumB), 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], m);
+	},
+	_setContrast = (m, n) => _applyMatrix([n,0,0,0,0.5 * (1 - n), 0,n,0,0,0.5 * (1 - n), 0,0,n,0,0.5 * (1 - n), 0,0,0,1,0], m),
+	_getFilter = (target, type) => {
+		let filterClass = _filterClass(type),
+			filters = target.filters || [],
+			i = filters.length,
+			filter;
+		filterClass || _warn(type + " not found. PixiPlugin.registerPIXI(PIXI)");
+		while (--i > -1) {
+			if (filters[i] instanceof filterClass) {
+				return filters[i];
+			}
+		}
+		filter = new filterClass();
+		if (type === "BlurFilter") {
+			filter.blur = 0;
+		}
+		filters.push(filter);
+		target.filters = filters;
+		return filter;
+	},
+	_addColorMatrixFilterCacheTween = (p, plugin, cache, vars) => { //we cache the ColorMatrixFilter components in a _gsColorMatrixFilter object attached to the target object so that it's easy to grab the current value at any time.
+		plugin.add(cache, p, cache[p], vars[p]);
+		plugin._props.push(p);
+	},
+	_applyBrightnessToMatrix = (brightness, matrix) => {
+		let filterClass = _filterClass("ColorMatrixFilter"),
+			temp = new filterClass();
+		temp.matrix = matrix;
+		temp.brightness(brightness, true);
+		return temp.matrix;
+	},
+	_copy = obj => {
+		let copy = {},
+			p;
+		for (p in obj) {
+			copy[p] = obj[p];
+		}
+		return copy;
+	},
+	_CMFdefaults = {contrast:1, saturation:1, colorizeAmount:0, colorize:"rgb(255,255,255)", hue:0, brightness:1},
+	_parseColorMatrixFilter = (target, v, pg) => {
+		let filter = _getFilter(target, "ColorMatrixFilter"),
+			cache = target._gsColorMatrixFilter = target._gsColorMatrixFilter || _copy(_CMFdefaults),
+			combine = v.combineCMF && !("colorMatrixFilter" in v && !v.colorMatrixFilter),
+			i, matrix, startMatrix;
+		startMatrix = filter.matrix;
+		if (v.resolution) {
+			filter.resolution = v.resolution;
+		}
+		if (v.matrix && v.matrix.length === startMatrix.length) {
+			matrix = v.matrix;
+			if (cache.contrast !== 1) {
+				_addColorMatrixFilterCacheTween("contrast", pg, cache, _CMFdefaults);
+			}
+			if (cache.hue) {
+				_addColorMatrixFilterCacheTween("hue", pg, cache, _CMFdefaults);
+			}
+			if (cache.brightness !== 1) {
+				_addColorMatrixFilterCacheTween("brightness", pg, cache, _CMFdefaults);
+			}
+			if (cache.colorizeAmount) {
+				_addColorMatrixFilterCacheTween("colorize", pg, cache, _CMFdefaults);
+				_addColorMatrixFilterCacheTween("colorizeAmount", pg, cache, _CMFdefaults);
+			}
+			if (cache.saturation !== 1) {
+				_addColorMatrixFilterCacheTween("saturation", pg, cache, _CMFdefaults);
+			}
+
+		} else {
+			matrix = _idMatrix.slice();
+			if (v.contrast != null) {
+				matrix = _setContrast(matrix, +v.contrast);
+				_addColorMatrixFilterCacheTween("contrast", pg, cache, v);
+			} else if (cache.contrast !== 1) {
+				if (combine) {
+					matrix = _setContrast(matrix, cache.contrast);
+				} else {
+					_addColorMatrixFilterCacheTween("contrast", pg, cache, _CMFdefaults);
+				}
+			}
+			if (v.hue != null) {
+				matrix = _setHue(matrix, +v.hue);
+				_addColorMatrixFilterCacheTween("hue", pg, cache, v);
+			} else if (cache.hue) {
+				if (combine) {
+					matrix = _setHue(matrix, cache.hue);
+				} else {
+					_addColorMatrixFilterCacheTween("hue", pg, cache, _CMFdefaults);
+				}
+			}
+			if (v.brightness != null) {
+				matrix = _applyBrightnessToMatrix(+v.brightness, matrix);
+				_addColorMatrixFilterCacheTween("brightness", pg, cache, v);
+			} else if (cache.brightness !== 1) {
+				if (combine) {
+					matrix = _applyBrightnessToMatrix(cache.brightness, matrix);
+				} else {
+					_addColorMatrixFilterCacheTween("brightness", pg, cache, _CMFdefaults);
+				}
+			}
+			if (v.colorize != null) {
+				v.colorizeAmount = ("colorizeAmount" in v) ? +v.colorizeAmount : 1;
+				matrix = _colorize(matrix, v.colorize, v.colorizeAmount);
+				_addColorMatrixFilterCacheTween("colorize", pg, cache, v);
+				_addColorMatrixFilterCacheTween("colorizeAmount", pg, cache, v);
+			} else if (cache.colorizeAmount) {
+				if (combine) {
+					matrix = _colorize(matrix, cache.colorize, cache.colorizeAmount);
+				} else {
+					_addColorMatrixFilterCacheTween("colorize", pg, cache, _CMFdefaults);
+					_addColorMatrixFilterCacheTween("colorizeAmount", pg, cache, _CMFdefaults);
+				}
+			}
+			if (v.saturation != null) {
+				matrix = _setSaturation(matrix, +v.saturation);
+				_addColorMatrixFilterCacheTween("saturation", pg, cache, v);
+			} else if (cache.saturation !== 1) {
+				if (combine) {
+					matrix = _setSaturation(matrix, cache.saturation);
+				} else {
+					_addColorMatrixFilterCacheTween("saturation", pg, cache, _CMFdefaults);
+				}
+			}
+		}
+		i = matrix.length;
+		while (--i > -1) {
+			if (matrix[i] !== startMatrix[i]) {
+				pg.add(startMatrix, i, startMatrix[i], matrix[i], "colorMatrixFilter");
+			}
+		}
+		pg._props.push("colorMatrixFilter");
+	},
+	_renderColor = (ratio, {t, p, color, set}) => {
+		set(t, p, color[0] << 16 | color[1] << 8 | color[2]);
+	},
+	_renderDirtyCache = (ratio, {g}) => {
+		if (g) { //in order for PixiJS to actually redraw GraphicsData, we've gotta increment the "dirty" and "clearDirty" values. If we don't do this, the values will be tween properly, but not rendered.
+			g.dirty++;
+			g.clearDirty++;
+		}
+	},
+	_renderAutoAlpha = (ratio, data) => {
+		data.t.visible = !!data.t.alpha;
+	},
+	_addColorTween = (target, p, value, plugin) => {
+		let currentValue = target[p],
+			startColor = _splitColor(_isFunction(currentValue) ? target[ ((p.indexOf("set") || !_isFunction(target["get" + p.substr(3)])) ? p : "get" + p.substr(3)) ]() : currentValue),
+			endColor = _splitColor(value);
+		plugin._pt = new PropTween(plugin._pt, target, p, 0, 0, _renderColor, {t:target, p:p, color:startColor, set:_getSetter(target, p)});
+		plugin.add(startColor, 0, startColor[0], endColor[0]);
+		plugin.add(startColor, 1, startColor[1], endColor[1]);
+		plugin.add(startColor, 2, startColor[2], endColor[2]);
+	},
+
+	_colorProps = {tint:1, lineColor:1, fillColor:1},
+	_xyContexts = "position,scale,skew,pivot,anchor,tilePosition,tileScale".split(","),
+	_contexts = {x:"position", y:"position", tileX:"tilePosition", tileY:"tilePosition"},
+	_colorMatrixFilterProps = {colorMatrixFilter:1, saturation:1, contrast:1, hue:1, colorize:1, colorizeAmount:1, brightness:1, combineCMF:1},
+	_DEG2RAD = Math.PI / 180,
+	_isString = value => typeof(value) === "string",
+	_degreesToRadians = value => (_isString(value) && value.charAt(1) === "=") ? value.substr(0, 2) + (parseFloat(value.substr(2)) * _DEG2RAD) : value * _DEG2RAD,
+	_renderPropWithEnd = (ratio, data) => data.set(data.t, data.p, ratio === 1 ? data.e : (Math.round((data.s + data.c * ratio) * 100000) / 100000), data),
+	_addRotationalPropTween = (plugin, target, property, startNum, endValue, radians) => {
+		let cap = 360 * (radians ? _DEG2RAD : 1),
+			isString = _isString(endValue),
+			relative = (isString && endValue.charAt(1) === "=") ? +(endValue.charAt(0) + "1") : 0,
+			endNum = parseFloat(relative ? endValue.substr(2) : endValue) * (radians ? _DEG2RAD : 1),
+			change = relative ? endNum * relative : endNum - startNum,
+			finalValue = startNum + change,
+			direction, pt;
+		if (isString) {
+			direction = endValue.split("_")[1];
+			if (direction === "short") {
+				change %= cap;
+				if (change !== change % (cap / 2)) {
+					change += (change < 0) ? cap : -cap;
+				}
+			}
+			if (direction === "cw" && change < 0) {
+				change = ((change + cap * 1e10) % cap) - ~~(change / cap) * cap;
+			} else if (direction === "ccw" && change > 0) {
+				change = ((change - cap * 1e10) % cap) - ~~(change / cap) * cap;
+			}
+		}
+		plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
+		pt.e = finalValue;
+		return pt;
+	},
+	_initCore = () => {
+		if (!_coreInitted) {
+			gsap = _getGSAP();
+			_PIXI = _coreInitted = _PIXI || (_windowExists() && window.PIXI);
+			_isV4 = _PIXI && _PIXI.VERSION && _PIXI.VERSION.charAt(0) === "4";
+			_splitColor = color => gsap.utils.splitColor((color + "").substr(0,2) === "0x" ? "#" + color.substr(2) : color); // some colors in PIXI are reported as "0xFF4421" instead of "#FF4421".
+		}
+	}, i, p;
+
+//context setup...
+for (i = 0; i < _xyContexts.length; i++) {
+	p = _xyContexts[i];
+	_contexts[p + "X"] = p;
+	_contexts[p + "Y"] = p;
+}
+
+
+const PixiPlugin = {
+	version: "3.12.5",
+	name: "pixi",
+	register(core, Plugin, propTween) {
+		gsap = core;
+		PropTween = propTween;
+		_getSetter = Plugin.getSetter;
+		_initCore();
+	},
+	headless: true, // doesn't need window
+	registerPIXI(pixi) {
+		_PIXI = pixi;
+	},
+	init(target, values, tween, index, targets) {
+		_PIXI || _initCore();
+		if (!_PIXI) {
+			_warn("PIXI was not found. PixiPlugin.registerPIXI(PIXI);");
+			return false;
+		}
+		let context, axis, value, colorMatrix, filter, p, padding, i, data;
+		for (p in values) {
+			context = _contexts[p];
+			value = values[p];
+			if (context) {
+				axis = ~p.charAt(p.length-1).toLowerCase().indexOf("x") ? "x" : "y";
+				this.add(target[context], axis, target[context][axis], (context === "skew") ? _degreesToRadians(value) : value, 0, 0, 0, 0, 0, 1);
+			} else if (p === "scale" || p === "anchor" || p === "pivot" || p === "tileScale") {
+				this.add(target[p], "x", target[p].x, value);
+				this.add(target[p], "y", target[p].y, value);
+			} else if (p === "rotation" || p === "angle") { //PIXI expects rotation in radians, but as a convenience we let folks define it in degrees and we do the conversion.
+				_addRotationalPropTween(this, target, p, target[p], value, p === "rotation");
+			} else if (_colorMatrixFilterProps[p]) {
+				if (!colorMatrix) {
+					_parseColorMatrixFilter(target, values.colorMatrixFilter || values, this);
+					colorMatrix = true;
+				}
+			} else if (p === "blur" || p === "blurX" || p === "blurY" || p === "blurPadding") {
+				filter = _getFilter(target, "BlurFilter");
+				this.add(filter, p, filter[p], value);
+				if (values.blurPadding !== 0) {
+					padding = values.blurPadding || Math.max(filter[p], value) * 2;
+					i = target.filters.length;
+					while (--i > -1) {
+						target.filters[i].padding = Math.max(target.filters[i].padding, padding); //if we don't expand the padding on all the filters, it can look clipped.
+					}
+				}
+			} else if (_colorProps[p]) {
+				if ((p === "lineColor" || p === "fillColor") && target instanceof _PIXI.Graphics) {
+					data = (target.geometry || target).graphicsData; //"geometry" was introduced in PIXI version 5
+					this._pt = new PropTween(this._pt, target, p, 0, 0, _renderDirtyCache, {g: target.geometry || target});
+					i = data.length;
+					while (--i > -1) {
+						_addColorTween(_isV4 ? data[i] : data[i][p.substr(0, 4) + "Style"], _isV4 ? p : "color", value, this);
+					}
+				} else {
+					_addColorTween(target, p, value, this);
+				}
+			} else if (p === "autoAlpha") {
+				this._pt = new PropTween(this._pt, target, "visible", 0, 0, _renderAutoAlpha);
+				this.add(target, "alpha", target.alpha, value);
+				this._props.push("alpha", "visible");
+			} else if (p !== "resolution") {
+				this.add(target, p, "get", value);
+			}
+			this._props.push(p);
+		}
+	}
+};
+
+_getGSAP() && gsap.registerPlugin(PixiPlugin);
+
+export { PixiPlugin, PixiPlugin as default };
diff --git a/dist/PixiPlugin.d.ts b/dist/PixiPlugin.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..87dd18abdfc04b9b216442e73965f11db229984a
--- /dev/null
+++ b/dist/PixiPlugin.d.ts
@@ -0,0 +1,333 @@
+/*!
+ * PixiPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _splitColor, _coreInitted, _PIXI, PropTween, _getSetter, _isV4,
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_isFunction = value => typeof(value) === "function",
+	_warn = message => console.warn(message),
+	_idMatrix = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],
+	_lumR = 0.212671,
+	_lumG = 0.715160,
+	_lumB = 0.072169,
+	_filterClass = name => _isFunction(_PIXI[name]) ? _PIXI[name] : _PIXI.filters[name], // in PIXI 7.1, filters moved from PIXI.filters to just PIXI
+	_applyMatrix = (m, m2) => {
+		let temp = [],
+			i = 0,
+			z = 0,
+			y, x;
+		for (y = 0; y < 4; y++) {
+			for (x = 0; x < 5; x++) {
+				z = (x === 4) ? m[i + 4] : 0;
+				temp[i + x] = m[i]   * m2[x] + m[i+1] * m2[x + 5] +	m[i+2] * m2[x + 10] + m[i+3] * m2[x + 15] +	z;
+			}
+			i += 5;
+		}
+		return temp;
+	},
+	_setSaturation = (m, n) => {
+		let inv = 1 - n,
+			r = inv * _lumR,
+			g = inv * _lumG,
+			b = inv * _lumB;
+		return _applyMatrix([r + n, g, b, 0, 0, r, g + n, b, 0, 0, r, g, b + n, 0, 0, 0, 0, 0, 1, 0], m);
+	},
+	_colorize = (m, color, amount) => {
+		let c = _splitColor(color),
+			r = c[0] / 255,
+			g = c[1] / 255,
+			b = c[2] / 255,
+			inv = 1 - amount;
+		return _applyMatrix([inv + amount * r * _lumR, amount * r * _lumG, amount * r * _lumB, 0, 0, amount * g * _lumR, inv + amount * g * _lumG, amount * g * _lumB, 0, 0, amount * b * _lumR, amount * b * _lumG, inv + amount * b * _lumB, 0, 0, 0, 0, 0, 1, 0], m);
+	},
+	_setHue = (m, n) => {
+		n *= Math.PI / 180;
+		let c = Math.cos(n),
+			s = Math.sin(n);
+		return _applyMatrix([(_lumR + (c * (1 - _lumR))) + (s * (-_lumR)), (_lumG + (c * (-_lumG))) + (s * (-_lumG)), (_lumB + (c * (-_lumB))) + (s * (1 - _lumB)), 0, 0, (_lumR + (c * (-_lumR))) + (s * 0.143), (_lumG + (c * (1 - _lumG))) + (s * 0.14), (_lumB + (c * (-_lumB))) + (s * -0.283), 0, 0, (_lumR + (c * (-_lumR))) + (s * (-(1 - _lumR))), (_lumG + (c * (-_lumG))) + (s * _lumG), (_lumB + (c * (1 - _lumB))) + (s * _lumB), 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], m);
+	},
+	_setContrast = (m, n) => _applyMatrix([n,0,0,0,0.5 * (1 - n), 0,n,0,0,0.5 * (1 - n), 0,0,n,0,0.5 * (1 - n), 0,0,0,1,0], m),
+	_getFilter = (target, type) => {
+		let filterClass = _filterClass(type),
+			filters = target.filters || [],
+			i = filters.length,
+			filter;
+		filterClass || _warn(type + " not found. PixiPlugin.registerPIXI(PIXI)");
+		while (--i > -1) {
+			if (filters[i] instanceof filterClass) {
+				return filters[i];
+			}
+		}
+		filter = new filterClass();
+		if (type === "BlurFilter") {
+			filter.blur = 0;
+		}
+		filters.push(filter);
+		target.filters = filters;
+		return filter;
+	},
+	_addColorMatrixFilterCacheTween = (p, plugin, cache, vars) => { //we cache the ColorMatrixFilter components in a _gsColorMatrixFilter object attached to the target object so that it's easy to grab the current value at any time.
+		plugin.add(cache, p, cache[p], vars[p]);
+		plugin._props.push(p);
+	},
+	_applyBrightnessToMatrix = (brightness, matrix) => {
+		let filterClass = _filterClass("ColorMatrixFilter"),
+			temp = new filterClass();
+		temp.matrix = matrix;
+		temp.brightness(brightness, true);
+		return temp.matrix;
+	},
+	_copy = obj => {
+		let copy = {},
+			p;
+		for (p in obj) {
+			copy[p] = obj[p];
+		}
+		return copy;
+	},
+	_CMFdefaults = {contrast:1, saturation:1, colorizeAmount:0, colorize:"rgb(255,255,255)", hue:0, brightness:1},
+	_parseColorMatrixFilter = (target, v, pg) => {
+		let filter = _getFilter(target, "ColorMatrixFilter"),
+			cache = target._gsColorMatrixFilter = target._gsColorMatrixFilter || _copy(_CMFdefaults),
+			combine = v.combineCMF && !("colorMatrixFilter" in v && !v.colorMatrixFilter),
+			i, matrix, startMatrix;
+		startMatrix = filter.matrix;
+		if (v.resolution) {
+			filter.resolution = v.resolution;
+		}
+		if (v.matrix && v.matrix.length === startMatrix.length) {
+			matrix = v.matrix;
+			if (cache.contrast !== 1) {
+				_addColorMatrixFilterCacheTween("contrast", pg, cache, _CMFdefaults);
+			}
+			if (cache.hue) {
+				_addColorMatrixFilterCacheTween("hue", pg, cache, _CMFdefaults);
+			}
+			if (cache.brightness !== 1) {
+				_addColorMatrixFilterCacheTween("brightness", pg, cache, _CMFdefaults);
+			}
+			if (cache.colorizeAmount) {
+				_addColorMatrixFilterCacheTween("colorize", pg, cache, _CMFdefaults);
+				_addColorMatrixFilterCacheTween("colorizeAmount", pg, cache, _CMFdefaults);
+			}
+			if (cache.saturation !== 1) {
+				_addColorMatrixFilterCacheTween("saturation", pg, cache, _CMFdefaults);
+			}
+
+		} else {
+			matrix = _idMatrix.slice();
+			if (v.contrast != null) {
+				matrix = _setContrast(matrix, +v.contrast);
+				_addColorMatrixFilterCacheTween("contrast", pg, cache, v);
+			} else if (cache.contrast !== 1) {
+				if (combine) {
+					matrix = _setContrast(matrix, cache.contrast);
+				} else {
+					_addColorMatrixFilterCacheTween("contrast", pg, cache, _CMFdefaults);
+				}
+			}
+			if (v.hue != null) {
+				matrix = _setHue(matrix, +v.hue);
+				_addColorMatrixFilterCacheTween("hue", pg, cache, v);
+			} else if (cache.hue) {
+				if (combine) {
+					matrix = _setHue(matrix, cache.hue);
+				} else {
+					_addColorMatrixFilterCacheTween("hue", pg, cache, _CMFdefaults);
+				}
+			}
+			if (v.brightness != null) {
+				matrix = _applyBrightnessToMatrix(+v.brightness, matrix);
+				_addColorMatrixFilterCacheTween("brightness", pg, cache, v);
+			} else if (cache.brightness !== 1) {
+				if (combine) {
+					matrix = _applyBrightnessToMatrix(cache.brightness, matrix);
+				} else {
+					_addColorMatrixFilterCacheTween("brightness", pg, cache, _CMFdefaults);
+				}
+			}
+			if (v.colorize != null) {
+				v.colorizeAmount = ("colorizeAmount" in v) ? +v.colorizeAmount : 1;
+				matrix = _colorize(matrix, v.colorize, v.colorizeAmount);
+				_addColorMatrixFilterCacheTween("colorize", pg, cache, v);
+				_addColorMatrixFilterCacheTween("colorizeAmount", pg, cache, v);
+			} else if (cache.colorizeAmount) {
+				if (combine) {
+					matrix = _colorize(matrix, cache.colorize, cache.colorizeAmount);
+				} else {
+					_addColorMatrixFilterCacheTween("colorize", pg, cache, _CMFdefaults);
+					_addColorMatrixFilterCacheTween("colorizeAmount", pg, cache, _CMFdefaults);
+				}
+			}
+			if (v.saturation != null) {
+				matrix = _setSaturation(matrix, +v.saturation);
+				_addColorMatrixFilterCacheTween("saturation", pg, cache, v);
+			} else if (cache.saturation !== 1) {
+				if (combine) {
+					matrix = _setSaturation(matrix, cache.saturation);
+				} else {
+					_addColorMatrixFilterCacheTween("saturation", pg, cache, _CMFdefaults);
+				}
+			}
+		}
+		i = matrix.length;
+		while (--i > -1) {
+			if (matrix[i] !== startMatrix[i]) {
+				pg.add(startMatrix, i, startMatrix[i], matrix[i], "colorMatrixFilter");
+			}
+		}
+		pg._props.push("colorMatrixFilter");
+	},
+	_renderColor = (ratio, {t, p, color, set}) => {
+		set(t, p, color[0] << 16 | color[1] << 8 | color[2]);
+	},
+	_renderDirtyCache = (ratio, {g}) => {
+		if (g) { //in order for PixiJS to actually redraw GraphicsData, we've gotta increment the "dirty" and "clearDirty" values. If we don't do this, the values will be tween properly, but not rendered.
+			g.dirty++;
+			g.clearDirty++;
+		}
+	},
+	_renderAutoAlpha = (ratio, data) => {
+		data.t.visible = !!data.t.alpha;
+	},
+	_addColorTween = (target, p, value, plugin) => {
+		let currentValue = target[p],
+			startColor = _splitColor(_isFunction(currentValue) ? target[ ((p.indexOf("set") || !_isFunction(target["get" + p.substr(3)])) ? p : "get" + p.substr(3)) ]() : currentValue),
+			endColor = _splitColor(value);
+		plugin._pt = new PropTween(plugin._pt, target, p, 0, 0, _renderColor, {t:target, p:p, color:startColor, set:_getSetter(target, p)});
+		plugin.add(startColor, 0, startColor[0], endColor[0]);
+		plugin.add(startColor, 1, startColor[1], endColor[1]);
+		plugin.add(startColor, 2, startColor[2], endColor[2]);
+	},
+
+	_colorProps = {tint:1, lineColor:1, fillColor:1},
+	_xyContexts = "position,scale,skew,pivot,anchor,tilePosition,tileScale".split(","),
+	_contexts = {x:"position", y:"position", tileX:"tilePosition", tileY:"tilePosition"},
+	_colorMatrixFilterProps = {colorMatrixFilter:1, saturation:1, contrast:1, hue:1, colorize:1, colorizeAmount:1, brightness:1, combineCMF:1},
+	_DEG2RAD = Math.PI / 180,
+	_isString = value => typeof(value) === "string",
+	_degreesToRadians = value => (_isString(value) && value.charAt(1) === "=") ? value.substr(0, 2) + (parseFloat(value.substr(2)) * _DEG2RAD) : value * _DEG2RAD,
+	_renderPropWithEnd = (ratio, data) => data.set(data.t, data.p, ratio === 1 ? data.e : (Math.round((data.s + data.c * ratio) * 100000) / 100000), data),
+	_addRotationalPropTween = (plugin, target, property, startNum, endValue, radians) => {
+		let cap = 360 * (radians ? _DEG2RAD : 1),
+			isString = _isString(endValue),
+			relative = (isString && endValue.charAt(1) === "=") ? +(endValue.charAt(0) + "1") : 0,
+			endNum = parseFloat(relative ? endValue.substr(2) : endValue) * (radians ? _DEG2RAD : 1),
+			change = relative ? endNum * relative : endNum - startNum,
+			finalValue = startNum + change,
+			direction, pt;
+		if (isString) {
+			direction = endValue.split("_")[1];
+			if (direction === "short") {
+				change %= cap;
+				if (change !== change % (cap / 2)) {
+					change += (change < 0) ? cap : -cap;
+				}
+			}
+			if (direction === "cw" && change < 0) {
+				change = ((change + cap * 1e10) % cap) - ~~(change / cap) * cap;
+			} else if (direction === "ccw" && change > 0) {
+				change = ((change - cap * 1e10) % cap) - ~~(change / cap) * cap;
+			}
+		}
+		plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
+		pt.e = finalValue;
+		return pt;
+	},
+	_initCore = () => {
+		if (!_coreInitted) {
+			gsap = _getGSAP();
+			_PIXI = _coreInitted = _PIXI || (_windowExists() && window.PIXI);
+			_isV4 = _PIXI && _PIXI.VERSION && _PIXI.VERSION.charAt(0) === "4";
+			_splitColor = color => gsap.utils.splitColor((color + "").substr(0,2) === "0x" ? "#" + color.substr(2) : color); // some colors in PIXI are reported as "0xFF4421" instead of "#FF4421".
+		}
+	}, i, p;
+
+//context setup...
+for (i = 0; i < _xyContexts.length; i++) {
+	p = _xyContexts[i];
+	_contexts[p + "X"] = p;
+	_contexts[p + "Y"] = p;
+}
+
+
+const PixiPlugin = {
+	version: "3.12.5",
+	name: "pixi",
+	register(core, Plugin, propTween) {
+		gsap = core;
+		PropTween = propTween;
+		_getSetter = Plugin.getSetter;
+		_initCore();
+	},
+	headless: true, // doesn't need window
+	registerPIXI(pixi) {
+		_PIXI = pixi;
+	},
+	init(target, values, tween, index, targets) {
+		_PIXI || _initCore();
+		if (!_PIXI) {
+			_warn("PIXI was not found. PixiPlugin.registerPIXI(PIXI);");
+			return false;
+		}
+		let context, axis, value, colorMatrix, filter, p, padding, i, data;
+		for (p in values) {
+			context = _contexts[p];
+			value = values[p];
+			if (context) {
+				axis = ~p.charAt(p.length-1).toLowerCase().indexOf("x") ? "x" : "y";
+				this.add(target[context], axis, target[context][axis], (context === "skew") ? _degreesToRadians(value) : value, 0, 0, 0, 0, 0, 1);
+			} else if (p === "scale" || p === "anchor" || p === "pivot" || p === "tileScale") {
+				this.add(target[p], "x", target[p].x, value);
+				this.add(target[p], "y", target[p].y, value);
+			} else if (p === "rotation" || p === "angle") { //PIXI expects rotation in radians, but as a convenience we let folks define it in degrees and we do the conversion.
+				_addRotationalPropTween(this, target, p, target[p], value, p === "rotation");
+			} else if (_colorMatrixFilterProps[p]) {
+				if (!colorMatrix) {
+					_parseColorMatrixFilter(target, values.colorMatrixFilter || values, this);
+					colorMatrix = true;
+				}
+			} else if (p === "blur" || p === "blurX" || p === "blurY" || p === "blurPadding") {
+				filter = _getFilter(target, "BlurFilter");
+				this.add(filter, p, filter[p], value);
+				if (values.blurPadding !== 0) {
+					padding = values.blurPadding || Math.max(filter[p], value) * 2;
+					i = target.filters.length;
+					while (--i > -1) {
+						target.filters[i].padding = Math.max(target.filters[i].padding, padding); //if we don't expand the padding on all the filters, it can look clipped.
+					}
+				}
+			} else if (_colorProps[p]) {
+				if ((p === "lineColor" || p === "fillColor") && target instanceof _PIXI.Graphics) {
+					data = (target.geometry || target).graphicsData; //"geometry" was introduced in PIXI version 5
+					this._pt = new PropTween(this._pt, target, p, 0, 0, _renderDirtyCache, {g: target.geometry || target});
+					i = data.length;
+					while (--i > -1) {
+						_addColorTween(_isV4 ? data[i] : data[i][p.substr(0, 4) + "Style"], _isV4 ? p : "color", value, this);
+					}
+				} else {
+					_addColorTween(target, p, value, this);
+				}
+			} else if (p === "autoAlpha") {
+				this._pt = new PropTween(this._pt, target, "visible", 0, 0, _renderAutoAlpha);
+				this.add(target, "alpha", target.alpha, value);
+				this._props.push("alpha", "visible");
+			} else if (p !== "resolution") {
+				this.add(target, p, "get", value);
+			}
+			this._props.push(p);
+		}
+	}
+};
+
+_getGSAP() && gsap.registerPlugin(PixiPlugin);
+
+export { PixiPlugin, PixiPlugin as default };
diff --git a/dist/PixiPlugin.js b/dist/PixiPlugin.js
deleted file mode 100644
index 1c7e41a69f278c86437d758d6f2dc0c0ae37baf7..0000000000000000000000000000000000000000
diff --git a/dist/PixiPlugin.min.js b/dist/PixiPlugin.min.js
deleted file mode 100644
index 44888ce4d97eace945a0eb99ae8a336cafa73883..0000000000000000000000000000000000000000
diff --git a/dist/PixiPlugin.min.js.map b/dist/PixiPlugin.min.js.map
deleted file mode 100644
index 6d3cea194b1eb4466f5102b37580c24739c0c694..0000000000000000000000000000000000000000
diff --git a/dist/PixiPlugin.mjs b/dist/PixiPlugin.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..87dd18abdfc04b9b216442e73965f11db229984a
--- /dev/null
+++ b/dist/PixiPlugin.mjs
@@ -0,0 +1,333 @@
+/*!
+ * PixiPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _splitColor, _coreInitted, _PIXI, PropTween, _getSetter, _isV4,
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_isFunction = value => typeof(value) === "function",
+	_warn = message => console.warn(message),
+	_idMatrix = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],
+	_lumR = 0.212671,
+	_lumG = 0.715160,
+	_lumB = 0.072169,
+	_filterClass = name => _isFunction(_PIXI[name]) ? _PIXI[name] : _PIXI.filters[name], // in PIXI 7.1, filters moved from PIXI.filters to just PIXI
+	_applyMatrix = (m, m2) => {
+		let temp = [],
+			i = 0,
+			z = 0,
+			y, x;
+		for (y = 0; y < 4; y++) {
+			for (x = 0; x < 5; x++) {
+				z = (x === 4) ? m[i + 4] : 0;
+				temp[i + x] = m[i]   * m2[x] + m[i+1] * m2[x + 5] +	m[i+2] * m2[x + 10] + m[i+3] * m2[x + 15] +	z;
+			}
+			i += 5;
+		}
+		return temp;
+	},
+	_setSaturation = (m, n) => {
+		let inv = 1 - n,
+			r = inv * _lumR,
+			g = inv * _lumG,
+			b = inv * _lumB;
+		return _applyMatrix([r + n, g, b, 0, 0, r, g + n, b, 0, 0, r, g, b + n, 0, 0, 0, 0, 0, 1, 0], m);
+	},
+	_colorize = (m, color, amount) => {
+		let c = _splitColor(color),
+			r = c[0] / 255,
+			g = c[1] / 255,
+			b = c[2] / 255,
+			inv = 1 - amount;
+		return _applyMatrix([inv + amount * r * _lumR, amount * r * _lumG, amount * r * _lumB, 0, 0, amount * g * _lumR, inv + amount * g * _lumG, amount * g * _lumB, 0, 0, amount * b * _lumR, amount * b * _lumG, inv + amount * b * _lumB, 0, 0, 0, 0, 0, 1, 0], m);
+	},
+	_setHue = (m, n) => {
+		n *= Math.PI / 180;
+		let c = Math.cos(n),
+			s = Math.sin(n);
+		return _applyMatrix([(_lumR + (c * (1 - _lumR))) + (s * (-_lumR)), (_lumG + (c * (-_lumG))) + (s * (-_lumG)), (_lumB + (c * (-_lumB))) + (s * (1 - _lumB)), 0, 0, (_lumR + (c * (-_lumR))) + (s * 0.143), (_lumG + (c * (1 - _lumG))) + (s * 0.14), (_lumB + (c * (-_lumB))) + (s * -0.283), 0, 0, (_lumR + (c * (-_lumR))) + (s * (-(1 - _lumR))), (_lumG + (c * (-_lumG))) + (s * _lumG), (_lumB + (c * (1 - _lumB))) + (s * _lumB), 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], m);
+	},
+	_setContrast = (m, n) => _applyMatrix([n,0,0,0,0.5 * (1 - n), 0,n,0,0,0.5 * (1 - n), 0,0,n,0,0.5 * (1 - n), 0,0,0,1,0], m),
+	_getFilter = (target, type) => {
+		let filterClass = _filterClass(type),
+			filters = target.filters || [],
+			i = filters.length,
+			filter;
+		filterClass || _warn(type + " not found. PixiPlugin.registerPIXI(PIXI)");
+		while (--i > -1) {
+			if (filters[i] instanceof filterClass) {
+				return filters[i];
+			}
+		}
+		filter = new filterClass();
+		if (type === "BlurFilter") {
+			filter.blur = 0;
+		}
+		filters.push(filter);
+		target.filters = filters;
+		return filter;
+	},
+	_addColorMatrixFilterCacheTween = (p, plugin, cache, vars) => { //we cache the ColorMatrixFilter components in a _gsColorMatrixFilter object attached to the target object so that it's easy to grab the current value at any time.
+		plugin.add(cache, p, cache[p], vars[p]);
+		plugin._props.push(p);
+	},
+	_applyBrightnessToMatrix = (brightness, matrix) => {
+		let filterClass = _filterClass("ColorMatrixFilter"),
+			temp = new filterClass();
+		temp.matrix = matrix;
+		temp.brightness(brightness, true);
+		return temp.matrix;
+	},
+	_copy = obj => {
+		let copy = {},
+			p;
+		for (p in obj) {
+			copy[p] = obj[p];
+		}
+		return copy;
+	},
+	_CMFdefaults = {contrast:1, saturation:1, colorizeAmount:0, colorize:"rgb(255,255,255)", hue:0, brightness:1},
+	_parseColorMatrixFilter = (target, v, pg) => {
+		let filter = _getFilter(target, "ColorMatrixFilter"),
+			cache = target._gsColorMatrixFilter = target._gsColorMatrixFilter || _copy(_CMFdefaults),
+			combine = v.combineCMF && !("colorMatrixFilter" in v && !v.colorMatrixFilter),
+			i, matrix, startMatrix;
+		startMatrix = filter.matrix;
+		if (v.resolution) {
+			filter.resolution = v.resolution;
+		}
+		if (v.matrix && v.matrix.length === startMatrix.length) {
+			matrix = v.matrix;
+			if (cache.contrast !== 1) {
+				_addColorMatrixFilterCacheTween("contrast", pg, cache, _CMFdefaults);
+			}
+			if (cache.hue) {
+				_addColorMatrixFilterCacheTween("hue", pg, cache, _CMFdefaults);
+			}
+			if (cache.brightness !== 1) {
+				_addColorMatrixFilterCacheTween("brightness", pg, cache, _CMFdefaults);
+			}
+			if (cache.colorizeAmount) {
+				_addColorMatrixFilterCacheTween("colorize", pg, cache, _CMFdefaults);
+				_addColorMatrixFilterCacheTween("colorizeAmount", pg, cache, _CMFdefaults);
+			}
+			if (cache.saturation !== 1) {
+				_addColorMatrixFilterCacheTween("saturation", pg, cache, _CMFdefaults);
+			}
+
+		} else {
+			matrix = _idMatrix.slice();
+			if (v.contrast != null) {
+				matrix = _setContrast(matrix, +v.contrast);
+				_addColorMatrixFilterCacheTween("contrast", pg, cache, v);
+			} else if (cache.contrast !== 1) {
+				if (combine) {
+					matrix = _setContrast(matrix, cache.contrast);
+				} else {
+					_addColorMatrixFilterCacheTween("contrast", pg, cache, _CMFdefaults);
+				}
+			}
+			if (v.hue != null) {
+				matrix = _setHue(matrix, +v.hue);
+				_addColorMatrixFilterCacheTween("hue", pg, cache, v);
+			} else if (cache.hue) {
+				if (combine) {
+					matrix = _setHue(matrix, cache.hue);
+				} else {
+					_addColorMatrixFilterCacheTween("hue", pg, cache, _CMFdefaults);
+				}
+			}
+			if (v.brightness != null) {
+				matrix = _applyBrightnessToMatrix(+v.brightness, matrix);
+				_addColorMatrixFilterCacheTween("brightness", pg, cache, v);
+			} else if (cache.brightness !== 1) {
+				if (combine) {
+					matrix = _applyBrightnessToMatrix(cache.brightness, matrix);
+				} else {
+					_addColorMatrixFilterCacheTween("brightness", pg, cache, _CMFdefaults);
+				}
+			}
+			if (v.colorize != null) {
+				v.colorizeAmount = ("colorizeAmount" in v) ? +v.colorizeAmount : 1;
+				matrix = _colorize(matrix, v.colorize, v.colorizeAmount);
+				_addColorMatrixFilterCacheTween("colorize", pg, cache, v);
+				_addColorMatrixFilterCacheTween("colorizeAmount", pg, cache, v);
+			} else if (cache.colorizeAmount) {
+				if (combine) {
+					matrix = _colorize(matrix, cache.colorize, cache.colorizeAmount);
+				} else {
+					_addColorMatrixFilterCacheTween("colorize", pg, cache, _CMFdefaults);
+					_addColorMatrixFilterCacheTween("colorizeAmount", pg, cache, _CMFdefaults);
+				}
+			}
+			if (v.saturation != null) {
+				matrix = _setSaturation(matrix, +v.saturation);
+				_addColorMatrixFilterCacheTween("saturation", pg, cache, v);
+			} else if (cache.saturation !== 1) {
+				if (combine) {
+					matrix = _setSaturation(matrix, cache.saturation);
+				} else {
+					_addColorMatrixFilterCacheTween("saturation", pg, cache, _CMFdefaults);
+				}
+			}
+		}
+		i = matrix.length;
+		while (--i > -1) {
+			if (matrix[i] !== startMatrix[i]) {
+				pg.add(startMatrix, i, startMatrix[i], matrix[i], "colorMatrixFilter");
+			}
+		}
+		pg._props.push("colorMatrixFilter");
+	},
+	_renderColor = (ratio, {t, p, color, set}) => {
+		set(t, p, color[0] << 16 | color[1] << 8 | color[2]);
+	},
+	_renderDirtyCache = (ratio, {g}) => {
+		if (g) { //in order for PixiJS to actually redraw GraphicsData, we've gotta increment the "dirty" and "clearDirty" values. If we don't do this, the values will be tween properly, but not rendered.
+			g.dirty++;
+			g.clearDirty++;
+		}
+	},
+	_renderAutoAlpha = (ratio, data) => {
+		data.t.visible = !!data.t.alpha;
+	},
+	_addColorTween = (target, p, value, plugin) => {
+		let currentValue = target[p],
+			startColor = _splitColor(_isFunction(currentValue) ? target[ ((p.indexOf("set") || !_isFunction(target["get" + p.substr(3)])) ? p : "get" + p.substr(3)) ]() : currentValue),
+			endColor = _splitColor(value);
+		plugin._pt = new PropTween(plugin._pt, target, p, 0, 0, _renderColor, {t:target, p:p, color:startColor, set:_getSetter(target, p)});
+		plugin.add(startColor, 0, startColor[0], endColor[0]);
+		plugin.add(startColor, 1, startColor[1], endColor[1]);
+		plugin.add(startColor, 2, startColor[2], endColor[2]);
+	},
+
+	_colorProps = {tint:1, lineColor:1, fillColor:1},
+	_xyContexts = "position,scale,skew,pivot,anchor,tilePosition,tileScale".split(","),
+	_contexts = {x:"position", y:"position", tileX:"tilePosition", tileY:"tilePosition"},
+	_colorMatrixFilterProps = {colorMatrixFilter:1, saturation:1, contrast:1, hue:1, colorize:1, colorizeAmount:1, brightness:1, combineCMF:1},
+	_DEG2RAD = Math.PI / 180,
+	_isString = value => typeof(value) === "string",
+	_degreesToRadians = value => (_isString(value) && value.charAt(1) === "=") ? value.substr(0, 2) + (parseFloat(value.substr(2)) * _DEG2RAD) : value * _DEG2RAD,
+	_renderPropWithEnd = (ratio, data) => data.set(data.t, data.p, ratio === 1 ? data.e : (Math.round((data.s + data.c * ratio) * 100000) / 100000), data),
+	_addRotationalPropTween = (plugin, target, property, startNum, endValue, radians) => {
+		let cap = 360 * (radians ? _DEG2RAD : 1),
+			isString = _isString(endValue),
+			relative = (isString && endValue.charAt(1) === "=") ? +(endValue.charAt(0) + "1") : 0,
+			endNum = parseFloat(relative ? endValue.substr(2) : endValue) * (radians ? _DEG2RAD : 1),
+			change = relative ? endNum * relative : endNum - startNum,
+			finalValue = startNum + change,
+			direction, pt;
+		if (isString) {
+			direction = endValue.split("_")[1];
+			if (direction === "short") {
+				change %= cap;
+				if (change !== change % (cap / 2)) {
+					change += (change < 0) ? cap : -cap;
+				}
+			}
+			if (direction === "cw" && change < 0) {
+				change = ((change + cap * 1e10) % cap) - ~~(change / cap) * cap;
+			} else if (direction === "ccw" && change > 0) {
+				change = ((change - cap * 1e10) % cap) - ~~(change / cap) * cap;
+			}
+		}
+		plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
+		pt.e = finalValue;
+		return pt;
+	},
+	_initCore = () => {
+		if (!_coreInitted) {
+			gsap = _getGSAP();
+			_PIXI = _coreInitted = _PIXI || (_windowExists() && window.PIXI);
+			_isV4 = _PIXI && _PIXI.VERSION && _PIXI.VERSION.charAt(0) === "4";
+			_splitColor = color => gsap.utils.splitColor((color + "").substr(0,2) === "0x" ? "#" + color.substr(2) : color); // some colors in PIXI are reported as "0xFF4421" instead of "#FF4421".
+		}
+	}, i, p;
+
+//context setup...
+for (i = 0; i < _xyContexts.length; i++) {
+	p = _xyContexts[i];
+	_contexts[p + "X"] = p;
+	_contexts[p + "Y"] = p;
+}
+
+
+const PixiPlugin = {
+	version: "3.12.5",
+	name: "pixi",
+	register(core, Plugin, propTween) {
+		gsap = core;
+		PropTween = propTween;
+		_getSetter = Plugin.getSetter;
+		_initCore();
+	},
+	headless: true, // doesn't need window
+	registerPIXI(pixi) {
+		_PIXI = pixi;
+	},
+	init(target, values, tween, index, targets) {
+		_PIXI || _initCore();
+		if (!_PIXI) {
+			_warn("PIXI was not found. PixiPlugin.registerPIXI(PIXI);");
+			return false;
+		}
+		let context, axis, value, colorMatrix, filter, p, padding, i, data;
+		for (p in values) {
+			context = _contexts[p];
+			value = values[p];
+			if (context) {
+				axis = ~p.charAt(p.length-1).toLowerCase().indexOf("x") ? "x" : "y";
+				this.add(target[context], axis, target[context][axis], (context === "skew") ? _degreesToRadians(value) : value, 0, 0, 0, 0, 0, 1);
+			} else if (p === "scale" || p === "anchor" || p === "pivot" || p === "tileScale") {
+				this.add(target[p], "x", target[p].x, value);
+				this.add(target[p], "y", target[p].y, value);
+			} else if (p === "rotation" || p === "angle") { //PIXI expects rotation in radians, but as a convenience we let folks define it in degrees and we do the conversion.
+				_addRotationalPropTween(this, target, p, target[p], value, p === "rotation");
+			} else if (_colorMatrixFilterProps[p]) {
+				if (!colorMatrix) {
+					_parseColorMatrixFilter(target, values.colorMatrixFilter || values, this);
+					colorMatrix = true;
+				}
+			} else if (p === "blur" || p === "blurX" || p === "blurY" || p === "blurPadding") {
+				filter = _getFilter(target, "BlurFilter");
+				this.add(filter, p, filter[p], value);
+				if (values.blurPadding !== 0) {
+					padding = values.blurPadding || Math.max(filter[p], value) * 2;
+					i = target.filters.length;
+					while (--i > -1) {
+						target.filters[i].padding = Math.max(target.filters[i].padding, padding); //if we don't expand the padding on all the filters, it can look clipped.
+					}
+				}
+			} else if (_colorProps[p]) {
+				if ((p === "lineColor" || p === "fillColor") && target instanceof _PIXI.Graphics) {
+					data = (target.geometry || target).graphicsData; //"geometry" was introduced in PIXI version 5
+					this._pt = new PropTween(this._pt, target, p, 0, 0, _renderDirtyCache, {g: target.geometry || target});
+					i = data.length;
+					while (--i > -1) {
+						_addColorTween(_isV4 ? data[i] : data[i][p.substr(0, 4) + "Style"], _isV4 ? p : "color", value, this);
+					}
+				} else {
+					_addColorTween(target, p, value, this);
+				}
+			} else if (p === "autoAlpha") {
+				this._pt = new PropTween(this._pt, target, "visible", 0, 0, _renderAutoAlpha);
+				this.add(target, "alpha", target.alpha, value);
+				this._props.push("alpha", "visible");
+			} else if (p !== "resolution") {
+				this.add(target, p, "get", value);
+			}
+			this._props.push(p);
+		}
+	}
+};
+
+_getGSAP() && gsap.registerPlugin(PixiPlugin);
+
+export { PixiPlugin, PixiPlugin as default };
diff --git a/dist/ScrollToPlugin.cjs b/dist/ScrollToPlugin.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..c38cfa472073bb5a63ea72579a5f2b4a3b95182b
--- /dev/null
+++ b/dist/ScrollToPlugin.cjs
@@ -0,0 +1,196 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+/*!
+ * ScrollToPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _coreInitted, _window, _docEl, _body, _toArray, _config, ScrollTrigger,
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_isString = value => typeof(value) === "string",
+	_isFunction = value => typeof(value) === "function",
+	_max = (element, axis) => {
+		let dim = (axis === "x") ? "Width" : "Height",
+			scroll = "scroll" + dim,
+			client = "client" + dim;
+		return (element === _window || element === _docEl || element === _body) ? Math.max(_docEl[scroll], _body[scroll]) - (_window["inner" + dim] || _docEl[client] || _body[client]) : element[scroll] - element["offset" + dim];
+	},
+	_buildGetter = (e, axis) => { //pass in an element and an axis ("x" or "y") and it'll return a getter function for the scroll position of that element (like scrollTop or scrollLeft, although if the element is the window, it'll use the pageXOffset/pageYOffset or the documentElement's scrollTop/scrollLeft or document.body's. Basically this streamlines things and makes a very fast getter across browsers.
+		let p = "scroll" + ((axis === "x") ? "Left" : "Top");
+		if (e === _window) {
+			if (e.pageXOffset != null) {
+				p = "page" + axis.toUpperCase() + "Offset";
+			} else {
+				e = _docEl[p] != null ? _docEl : _body;
+			}
+		}
+		return () => e[p];
+	},
+	_clean = (value, index, target, targets) => {
+		_isFunction(value) && (value = value(index, target, targets));
+		if (typeof(value) !== "object") {
+			return _isString(value) && value !== "max" && value.charAt(1) !== "=" ? {x: value, y: value} : {y: value}; //if we don't receive an object as the parameter, assume the user intends "y".
+		} else if (value.nodeType) {
+			return {y: value, x: value};
+		} else {
+			let result = {}, p;
+			for (p in value) {
+				result[p] = p !== "onAutoKill" && _isFunction(value[p]) ? value[p](index, target, targets) : value[p];
+			}
+			return result;
+		}
+	},
+	_getOffset = (element, container) => {
+		element = _toArray(element)[0];
+		if (!element || !element.getBoundingClientRect) {
+			return console.warn("scrollTo target doesn't exist. Using 0") || {x:0, y:0};
+		}
+		let rect = element.getBoundingClientRect(),
+			isRoot = (!container || container === _window || container === _body),
+			cRect = isRoot ? {top:_docEl.clientTop - (_window.pageYOffset || _docEl.scrollTop || _body.scrollTop || 0), left:_docEl.clientLeft - (_window.pageXOffset || _docEl.scrollLeft || _body.scrollLeft || 0)} : container.getBoundingClientRect(),
+			offsets = {x: rect.left - cRect.left, y: rect.top - cRect.top};
+		if (!isRoot && container) { //only add the current scroll position if it's not the window/body.
+			offsets.x += _buildGetter(container, "x")();
+			offsets.y += _buildGetter(container, "y")();
+		}
+		return offsets;
+	},
+	_parseVal = (value, target, axis, currentVal, offset) => !isNaN(value) && typeof(value) !== "object" ? parseFloat(value) - offset : (_isString(value) && value.charAt(1) === "=") ? parseFloat(value.substr(2)) * (value.charAt(0) === "-" ? -1 : 1) + currentVal - offset : (value === "max") ? _max(target, axis) - offset : Math.min(_max(target, axis), _getOffset(value, target)[axis] - offset),
+	_initCore = () => {
+		gsap = _getGSAP();
+		if (_windowExists() && gsap && typeof(document) !== "undefined" && document.body) {
+			_window = window;
+			_body = document.body;
+			_docEl = document.documentElement;
+			_toArray = gsap.utils.toArray;
+			gsap.config({autoKillThreshold:7});
+			_config = gsap.config();
+			_coreInitted = 1;
+		}
+	};
+
+
+const ScrollToPlugin = {
+	version: "3.12.5",
+	name: "scrollTo",
+	rawVars: 1,
+	register(core) {
+		gsap = core;
+		_initCore();
+	},
+	init(target, value, tween, index, targets) {
+		_coreInitted || _initCore();
+		let data = this,
+			snapType = gsap.getProperty(target, "scrollSnapType");
+		data.isWin = (target === _window);
+		data.target = target;
+		data.tween = tween;
+		value = _clean(value, index, target, targets);
+		data.vars = value;
+		data.autoKill = !!value.autoKill;
+		data.getX = _buildGetter(target, "x");
+		data.getY = _buildGetter(target, "y");
+		data.x = data.xPrev = data.getX();
+		data.y = data.yPrev = data.getY();
+		ScrollTrigger || (ScrollTrigger = gsap.core.globals().ScrollTrigger);
+		gsap.getProperty(target, "scrollBehavior") === "smooth" && gsap.set(target, {scrollBehavior: "auto"});
+		if (snapType && snapType !== "none") { // disable scroll snapping to avoid strange behavior
+			data.snap = 1;
+			data.snapInline = target.style.scrollSnapType;
+			target.style.scrollSnapType = "none";
+		}
+		if (value.x != null) {
+			data.add(data, "x", data.x, _parseVal(value.x, target, "x", data.x, value.offsetX || 0), index, targets);
+			data._props.push("scrollTo_x");
+		} else {
+			data.skipX = 1;
+		}
+		if (value.y != null) {
+			data.add(data, "y", data.y, _parseVal(value.y, target, "y", data.y, value.offsetY || 0), index, targets);
+			data._props.push("scrollTo_y");
+		} else {
+			data.skipY = 1;
+		}
+	},
+	render(ratio, data) {
+		let pt = data._pt,
+			{ target, tween, autoKill, xPrev, yPrev, isWin, snap, snapInline } = data,
+			x, y, yDif, xDif, threshold;
+		while (pt) {
+			pt.r(ratio, pt.d);
+			pt = pt._next;
+		}
+		x = (isWin || !data.skipX) ? data.getX() : xPrev;
+		y = (isWin || !data.skipY) ? data.getY() : yPrev;
+		yDif = y - yPrev;
+		xDif = x - xPrev;
+		threshold = _config.autoKillThreshold;
+		if (data.x < 0) { //can't scroll to a position less than 0! Might happen if someone uses a Back.easeOut or Elastic.easeOut when scrolling back to the top of the page (for example)
+			data.x = 0;
+		}
+		if (data.y < 0) {
+			data.y = 0;
+		}
+		if (autoKill) {
+			//note: iOS has a bug that throws off the scroll by several pixels, so we need to check if it's within 7 pixels of the previous one that we set instead of just looking for an exact match.
+			if (!data.skipX && (xDif > threshold || xDif < -threshold) && x < _max(target, "x")) {
+				data.skipX = 1; //if the user scrolls separately, we should stop tweening!
+			}
+			if (!data.skipY && (yDif > threshold || yDif < -threshold) && y < _max(target, "y")) {
+				data.skipY = 1; //if the user scrolls separately, we should stop tweening!
+			}
+			if (data.skipX && data.skipY) {
+				tween.kill();
+				data.vars.onAutoKill && data.vars.onAutoKill.apply(tween, data.vars.onAutoKillParams || []);
+			}
+		}
+		if (isWin) {
+			_window.scrollTo((!data.skipX) ? data.x : x, (!data.skipY) ? data.y : y);
+		} else {
+			data.skipY || (target.scrollTop = data.y);
+			data.skipX || (target.scrollLeft = data.x);
+		}
+		if (snap && (ratio === 1 || ratio === 0)) {
+			y = target.scrollTop;
+			x = target.scrollLeft;
+			snapInline ? (target.style.scrollSnapType = snapInline) : target.style.removeProperty("scroll-snap-type");
+			target.scrollTop = y + 1; // bug in Safari causes the element to totally reset its scroll position when scroll-snap-type changes, so we need to set it to a slightly different value and then back again to work around this bug.
+			target.scrollLeft = x + 1;
+			target.scrollTop = y;
+			target.scrollLeft = x;
+		}
+		data.xPrev = data.x;
+		data.yPrev = data.y;
+		ScrollTrigger && ScrollTrigger.update();
+	},
+	kill(property) {
+		let both = (property === "scrollTo"),
+			i = this._props.indexOf(property);
+		if (both || property === "scrollTo_x") {
+			this.skipX = 1;
+		}
+		if (both || property === "scrollTo_y") {
+			this.skipY = 1;
+		}
+		i > -1 && this._props.splice(i, 1);
+		return !this._props.length;
+	}
+};
+
+ScrollToPlugin.max = _max;
+ScrollToPlugin.getOffset = _getOffset;
+ScrollToPlugin.buildGetter = _buildGetter;
+
+_getGSAP() && gsap.registerPlugin(ScrollToPlugin);
+
+exports.ScrollToPlugin = ScrollToPlugin;
+exports.default = ScrollToPlugin;
diff --git a/src/ScrollToPlugin.js b/dist/ScrollToPlugin.d.cts
similarity index 99%
rename from src/ScrollToPlugin.js
rename to dist/ScrollToPlugin.d.cts
index 36d8fc4b20d768a3394a8672333bf9254bb6a17a..c1ed7101e454720d3d603b6fe26214dda24053ba 100644
--- a/src/ScrollToPlugin.js
+++ b/dist/ScrollToPlugin.d.cts
@@ -75,7 +75,7 @@ let gsap, _coreInitted, _window, _docEl, _body, _toArray, _config, ScrollTrigger
 	};
 
 
-export const ScrollToPlugin = {
+const ScrollToPlugin = {
 	version: "3.12.5",
 	name: "scrollTo",
 	rawVars: 1,
@@ -188,4 +188,4 @@ ScrollToPlugin.buildGetter = _buildGetter;
 
 _getGSAP() && gsap.registerPlugin(ScrollToPlugin);
 
-export { ScrollToPlugin as default };
\ No newline at end of file
+export { ScrollToPlugin, ScrollToPlugin as default };
diff --git a/dist/ScrollToPlugin.d.mts b/dist/ScrollToPlugin.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..c1ed7101e454720d3d603b6fe26214dda24053ba
--- /dev/null
+++ b/dist/ScrollToPlugin.d.mts
@@ -0,0 +1,191 @@
+/*!
+ * ScrollToPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _coreInitted, _window, _docEl, _body, _toArray, _config, ScrollTrigger,
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_isString = value => typeof(value) === "string",
+	_isFunction = value => typeof(value) === "function",
+	_max = (element, axis) => {
+		let dim = (axis === "x") ? "Width" : "Height",
+			scroll = "scroll" + dim,
+			client = "client" + dim;
+		return (element === _window || element === _docEl || element === _body) ? Math.max(_docEl[scroll], _body[scroll]) - (_window["inner" + dim] || _docEl[client] || _body[client]) : element[scroll] - element["offset" + dim];
+	},
+	_buildGetter = (e, axis) => { //pass in an element and an axis ("x" or "y") and it'll return a getter function for the scroll position of that element (like scrollTop or scrollLeft, although if the element is the window, it'll use the pageXOffset/pageYOffset or the documentElement's scrollTop/scrollLeft or document.body's. Basically this streamlines things and makes a very fast getter across browsers.
+		let p = "scroll" + ((axis === "x") ? "Left" : "Top");
+		if (e === _window) {
+			if (e.pageXOffset != null) {
+				p = "page" + axis.toUpperCase() + "Offset";
+			} else {
+				e = _docEl[p] != null ? _docEl : _body;
+			}
+		}
+		return () => e[p];
+	},
+	_clean = (value, index, target, targets) => {
+		_isFunction(value) && (value = value(index, target, targets));
+		if (typeof(value) !== "object") {
+			return _isString(value) && value !== "max" && value.charAt(1) !== "=" ? {x: value, y: value} : {y: value}; //if we don't receive an object as the parameter, assume the user intends "y".
+		} else if (value.nodeType) {
+			return {y: value, x: value};
+		} else {
+			let result = {}, p;
+			for (p in value) {
+				result[p] = p !== "onAutoKill" && _isFunction(value[p]) ? value[p](index, target, targets) : value[p];
+			}
+			return result;
+		}
+	},
+	_getOffset = (element, container) => {
+		element = _toArray(element)[0];
+		if (!element || !element.getBoundingClientRect) {
+			return console.warn("scrollTo target doesn't exist. Using 0") || {x:0, y:0};
+		}
+		let rect = element.getBoundingClientRect(),
+			isRoot = (!container || container === _window || container === _body),
+			cRect = isRoot ? {top:_docEl.clientTop - (_window.pageYOffset || _docEl.scrollTop || _body.scrollTop || 0), left:_docEl.clientLeft - (_window.pageXOffset || _docEl.scrollLeft || _body.scrollLeft || 0)} : container.getBoundingClientRect(),
+			offsets = {x: rect.left - cRect.left, y: rect.top - cRect.top};
+		if (!isRoot && container) { //only add the current scroll position if it's not the window/body.
+			offsets.x += _buildGetter(container, "x")();
+			offsets.y += _buildGetter(container, "y")();
+		}
+		return offsets;
+	},
+	_parseVal = (value, target, axis, currentVal, offset) => !isNaN(value) && typeof(value) !== "object" ? parseFloat(value) - offset : (_isString(value) && value.charAt(1) === "=") ? parseFloat(value.substr(2)) * (value.charAt(0) === "-" ? -1 : 1) + currentVal - offset : (value === "max") ? _max(target, axis) - offset : Math.min(_max(target, axis), _getOffset(value, target)[axis] - offset),
+	_initCore = () => {
+		gsap = _getGSAP();
+		if (_windowExists() && gsap && typeof(document) !== "undefined" && document.body) {
+			_window = window;
+			_body = document.body;
+			_docEl = document.documentElement;
+			_toArray = gsap.utils.toArray;
+			gsap.config({autoKillThreshold:7});
+			_config = gsap.config();
+			_coreInitted = 1;
+		}
+	};
+
+
+const ScrollToPlugin = {
+	version: "3.12.5",
+	name: "scrollTo",
+	rawVars: 1,
+	register(core) {
+		gsap = core;
+		_initCore();
+	},
+	init(target, value, tween, index, targets) {
+		_coreInitted || _initCore();
+		let data = this,
+			snapType = gsap.getProperty(target, "scrollSnapType");
+		data.isWin = (target === _window);
+		data.target = target;
+		data.tween = tween;
+		value = _clean(value, index, target, targets);
+		data.vars = value;
+		data.autoKill = !!value.autoKill;
+		data.getX = _buildGetter(target, "x");
+		data.getY = _buildGetter(target, "y");
+		data.x = data.xPrev = data.getX();
+		data.y = data.yPrev = data.getY();
+		ScrollTrigger || (ScrollTrigger = gsap.core.globals().ScrollTrigger);
+		gsap.getProperty(target, "scrollBehavior") === "smooth" && gsap.set(target, {scrollBehavior: "auto"});
+		if (snapType && snapType !== "none") { // disable scroll snapping to avoid strange behavior
+			data.snap = 1;
+			data.snapInline = target.style.scrollSnapType;
+			target.style.scrollSnapType = "none";
+		}
+		if (value.x != null) {
+			data.add(data, "x", data.x, _parseVal(value.x, target, "x", data.x, value.offsetX || 0), index, targets);
+			data._props.push("scrollTo_x");
+		} else {
+			data.skipX = 1;
+		}
+		if (value.y != null) {
+			data.add(data, "y", data.y, _parseVal(value.y, target, "y", data.y, value.offsetY || 0), index, targets);
+			data._props.push("scrollTo_y");
+		} else {
+			data.skipY = 1;
+		}
+	},
+	render(ratio, data) {
+		let pt = data._pt,
+			{ target, tween, autoKill, xPrev, yPrev, isWin, snap, snapInline } = data,
+			x, y, yDif, xDif, threshold;
+		while (pt) {
+			pt.r(ratio, pt.d);
+			pt = pt._next;
+		}
+		x = (isWin || !data.skipX) ? data.getX() : xPrev;
+		y = (isWin || !data.skipY) ? data.getY() : yPrev;
+		yDif = y - yPrev;
+		xDif = x - xPrev;
+		threshold = _config.autoKillThreshold;
+		if (data.x < 0) { //can't scroll to a position less than 0! Might happen if someone uses a Back.easeOut or Elastic.easeOut when scrolling back to the top of the page (for example)
+			data.x = 0;
+		}
+		if (data.y < 0) {
+			data.y = 0;
+		}
+		if (autoKill) {
+			//note: iOS has a bug that throws off the scroll by several pixels, so we need to check if it's within 7 pixels of the previous one that we set instead of just looking for an exact match.
+			if (!data.skipX && (xDif > threshold || xDif < -threshold) && x < _max(target, "x")) {
+				data.skipX = 1; //if the user scrolls separately, we should stop tweening!
+			}
+			if (!data.skipY && (yDif > threshold || yDif < -threshold) && y < _max(target, "y")) {
+				data.skipY = 1; //if the user scrolls separately, we should stop tweening!
+			}
+			if (data.skipX && data.skipY) {
+				tween.kill();
+				data.vars.onAutoKill && data.vars.onAutoKill.apply(tween, data.vars.onAutoKillParams || []);
+			}
+		}
+		if (isWin) {
+			_window.scrollTo((!data.skipX) ? data.x : x, (!data.skipY) ? data.y : y);
+		} else {
+			data.skipY || (target.scrollTop = data.y);
+			data.skipX || (target.scrollLeft = data.x);
+		}
+		if (snap && (ratio === 1 || ratio === 0)) {
+			y = target.scrollTop;
+			x = target.scrollLeft;
+			snapInline ? (target.style.scrollSnapType = snapInline) : target.style.removeProperty("scroll-snap-type");
+			target.scrollTop = y + 1; // bug in Safari causes the element to totally reset its scroll position when scroll-snap-type changes, so we need to set it to a slightly different value and then back again to work around this bug.
+			target.scrollLeft = x + 1;
+			target.scrollTop = y;
+			target.scrollLeft = x;
+		}
+		data.xPrev = data.x;
+		data.yPrev = data.y;
+		ScrollTrigger && ScrollTrigger.update();
+	},
+	kill(property) {
+		let both = (property === "scrollTo"),
+			i = this._props.indexOf(property);
+		if (both || property === "scrollTo_x") {
+			this.skipX = 1;
+		}
+		if (both || property === "scrollTo_y") {
+			this.skipY = 1;
+		}
+		i > -1 && this._props.splice(i, 1);
+		return !this._props.length;
+	}
+};
+
+ScrollToPlugin.max = _max;
+ScrollToPlugin.getOffset = _getOffset;
+ScrollToPlugin.buildGetter = _buildGetter;
+
+_getGSAP() && gsap.registerPlugin(ScrollToPlugin);
+
+export { ScrollToPlugin, ScrollToPlugin as default };
diff --git a/dist/ScrollToPlugin.d.ts b/dist/ScrollToPlugin.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..c1ed7101e454720d3d603b6fe26214dda24053ba
--- /dev/null
+++ b/dist/ScrollToPlugin.d.ts
@@ -0,0 +1,191 @@
+/*!
+ * ScrollToPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _coreInitted, _window, _docEl, _body, _toArray, _config, ScrollTrigger,
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_isString = value => typeof(value) === "string",
+	_isFunction = value => typeof(value) === "function",
+	_max = (element, axis) => {
+		let dim = (axis === "x") ? "Width" : "Height",
+			scroll = "scroll" + dim,
+			client = "client" + dim;
+		return (element === _window || element === _docEl || element === _body) ? Math.max(_docEl[scroll], _body[scroll]) - (_window["inner" + dim] || _docEl[client] || _body[client]) : element[scroll] - element["offset" + dim];
+	},
+	_buildGetter = (e, axis) => { //pass in an element and an axis ("x" or "y") and it'll return a getter function for the scroll position of that element (like scrollTop or scrollLeft, although if the element is the window, it'll use the pageXOffset/pageYOffset or the documentElement's scrollTop/scrollLeft or document.body's. Basically this streamlines things and makes a very fast getter across browsers.
+		let p = "scroll" + ((axis === "x") ? "Left" : "Top");
+		if (e === _window) {
+			if (e.pageXOffset != null) {
+				p = "page" + axis.toUpperCase() + "Offset";
+			} else {
+				e = _docEl[p] != null ? _docEl : _body;
+			}
+		}
+		return () => e[p];
+	},
+	_clean = (value, index, target, targets) => {
+		_isFunction(value) && (value = value(index, target, targets));
+		if (typeof(value) !== "object") {
+			return _isString(value) && value !== "max" && value.charAt(1) !== "=" ? {x: value, y: value} : {y: value}; //if we don't receive an object as the parameter, assume the user intends "y".
+		} else if (value.nodeType) {
+			return {y: value, x: value};
+		} else {
+			let result = {}, p;
+			for (p in value) {
+				result[p] = p !== "onAutoKill" && _isFunction(value[p]) ? value[p](index, target, targets) : value[p];
+			}
+			return result;
+		}
+	},
+	_getOffset = (element, container) => {
+		element = _toArray(element)[0];
+		if (!element || !element.getBoundingClientRect) {
+			return console.warn("scrollTo target doesn't exist. Using 0") || {x:0, y:0};
+		}
+		let rect = element.getBoundingClientRect(),
+			isRoot = (!container || container === _window || container === _body),
+			cRect = isRoot ? {top:_docEl.clientTop - (_window.pageYOffset || _docEl.scrollTop || _body.scrollTop || 0), left:_docEl.clientLeft - (_window.pageXOffset || _docEl.scrollLeft || _body.scrollLeft || 0)} : container.getBoundingClientRect(),
+			offsets = {x: rect.left - cRect.left, y: rect.top - cRect.top};
+		if (!isRoot && container) { //only add the current scroll position if it's not the window/body.
+			offsets.x += _buildGetter(container, "x")();
+			offsets.y += _buildGetter(container, "y")();
+		}
+		return offsets;
+	},
+	_parseVal = (value, target, axis, currentVal, offset) => !isNaN(value) && typeof(value) !== "object" ? parseFloat(value) - offset : (_isString(value) && value.charAt(1) === "=") ? parseFloat(value.substr(2)) * (value.charAt(0) === "-" ? -1 : 1) + currentVal - offset : (value === "max") ? _max(target, axis) - offset : Math.min(_max(target, axis), _getOffset(value, target)[axis] - offset),
+	_initCore = () => {
+		gsap = _getGSAP();
+		if (_windowExists() && gsap && typeof(document) !== "undefined" && document.body) {
+			_window = window;
+			_body = document.body;
+			_docEl = document.documentElement;
+			_toArray = gsap.utils.toArray;
+			gsap.config({autoKillThreshold:7});
+			_config = gsap.config();
+			_coreInitted = 1;
+		}
+	};
+
+
+const ScrollToPlugin = {
+	version: "3.12.5",
+	name: "scrollTo",
+	rawVars: 1,
+	register(core) {
+		gsap = core;
+		_initCore();
+	},
+	init(target, value, tween, index, targets) {
+		_coreInitted || _initCore();
+		let data = this,
+			snapType = gsap.getProperty(target, "scrollSnapType");
+		data.isWin = (target === _window);
+		data.target = target;
+		data.tween = tween;
+		value = _clean(value, index, target, targets);
+		data.vars = value;
+		data.autoKill = !!value.autoKill;
+		data.getX = _buildGetter(target, "x");
+		data.getY = _buildGetter(target, "y");
+		data.x = data.xPrev = data.getX();
+		data.y = data.yPrev = data.getY();
+		ScrollTrigger || (ScrollTrigger = gsap.core.globals().ScrollTrigger);
+		gsap.getProperty(target, "scrollBehavior") === "smooth" && gsap.set(target, {scrollBehavior: "auto"});
+		if (snapType && snapType !== "none") { // disable scroll snapping to avoid strange behavior
+			data.snap = 1;
+			data.snapInline = target.style.scrollSnapType;
+			target.style.scrollSnapType = "none";
+		}
+		if (value.x != null) {
+			data.add(data, "x", data.x, _parseVal(value.x, target, "x", data.x, value.offsetX || 0), index, targets);
+			data._props.push("scrollTo_x");
+		} else {
+			data.skipX = 1;
+		}
+		if (value.y != null) {
+			data.add(data, "y", data.y, _parseVal(value.y, target, "y", data.y, value.offsetY || 0), index, targets);
+			data._props.push("scrollTo_y");
+		} else {
+			data.skipY = 1;
+		}
+	},
+	render(ratio, data) {
+		let pt = data._pt,
+			{ target, tween, autoKill, xPrev, yPrev, isWin, snap, snapInline } = data,
+			x, y, yDif, xDif, threshold;
+		while (pt) {
+			pt.r(ratio, pt.d);
+			pt = pt._next;
+		}
+		x = (isWin || !data.skipX) ? data.getX() : xPrev;
+		y = (isWin || !data.skipY) ? data.getY() : yPrev;
+		yDif = y - yPrev;
+		xDif = x - xPrev;
+		threshold = _config.autoKillThreshold;
+		if (data.x < 0) { //can't scroll to a position less than 0! Might happen if someone uses a Back.easeOut or Elastic.easeOut when scrolling back to the top of the page (for example)
+			data.x = 0;
+		}
+		if (data.y < 0) {
+			data.y = 0;
+		}
+		if (autoKill) {
+			//note: iOS has a bug that throws off the scroll by several pixels, so we need to check if it's within 7 pixels of the previous one that we set instead of just looking for an exact match.
+			if (!data.skipX && (xDif > threshold || xDif < -threshold) && x < _max(target, "x")) {
+				data.skipX = 1; //if the user scrolls separately, we should stop tweening!
+			}
+			if (!data.skipY && (yDif > threshold || yDif < -threshold) && y < _max(target, "y")) {
+				data.skipY = 1; //if the user scrolls separately, we should stop tweening!
+			}
+			if (data.skipX && data.skipY) {
+				tween.kill();
+				data.vars.onAutoKill && data.vars.onAutoKill.apply(tween, data.vars.onAutoKillParams || []);
+			}
+		}
+		if (isWin) {
+			_window.scrollTo((!data.skipX) ? data.x : x, (!data.skipY) ? data.y : y);
+		} else {
+			data.skipY || (target.scrollTop = data.y);
+			data.skipX || (target.scrollLeft = data.x);
+		}
+		if (snap && (ratio === 1 || ratio === 0)) {
+			y = target.scrollTop;
+			x = target.scrollLeft;
+			snapInline ? (target.style.scrollSnapType = snapInline) : target.style.removeProperty("scroll-snap-type");
+			target.scrollTop = y + 1; // bug in Safari causes the element to totally reset its scroll position when scroll-snap-type changes, so we need to set it to a slightly different value and then back again to work around this bug.
+			target.scrollLeft = x + 1;
+			target.scrollTop = y;
+			target.scrollLeft = x;
+		}
+		data.xPrev = data.x;
+		data.yPrev = data.y;
+		ScrollTrigger && ScrollTrigger.update();
+	},
+	kill(property) {
+		let both = (property === "scrollTo"),
+			i = this._props.indexOf(property);
+		if (both || property === "scrollTo_x") {
+			this.skipX = 1;
+		}
+		if (both || property === "scrollTo_y") {
+			this.skipY = 1;
+		}
+		i > -1 && this._props.splice(i, 1);
+		return !this._props.length;
+	}
+};
+
+ScrollToPlugin.max = _max;
+ScrollToPlugin.getOffset = _getOffset;
+ScrollToPlugin.buildGetter = _buildGetter;
+
+_getGSAP() && gsap.registerPlugin(ScrollToPlugin);
+
+export { ScrollToPlugin, ScrollToPlugin as default };
diff --git a/dist/ScrollToPlugin.js b/dist/ScrollToPlugin.js
deleted file mode 100644
index c9683dfcab24633a98ca212d62d87d7268944888..0000000000000000000000000000000000000000
diff --git a/dist/ScrollToPlugin.min.js b/dist/ScrollToPlugin.min.js
deleted file mode 100644
index bfc1809807cfa95fb3c5a61b419328f34c781a80..0000000000000000000000000000000000000000
diff --git a/dist/ScrollToPlugin.min.js.map b/dist/ScrollToPlugin.min.js.map
deleted file mode 100644
index 869ea754af56ba785bdb2f1816e5125f388a75d6..0000000000000000000000000000000000000000
diff --git a/dist/ScrollToPlugin.mjs b/dist/ScrollToPlugin.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..c1ed7101e454720d3d603b6fe26214dda24053ba
--- /dev/null
+++ b/dist/ScrollToPlugin.mjs
@@ -0,0 +1,191 @@
+/*!
+ * ScrollToPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _coreInitted, _window, _docEl, _body, _toArray, _config, ScrollTrigger,
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_isString = value => typeof(value) === "string",
+	_isFunction = value => typeof(value) === "function",
+	_max = (element, axis) => {
+		let dim = (axis === "x") ? "Width" : "Height",
+			scroll = "scroll" + dim,
+			client = "client" + dim;
+		return (element === _window || element === _docEl || element === _body) ? Math.max(_docEl[scroll], _body[scroll]) - (_window["inner" + dim] || _docEl[client] || _body[client]) : element[scroll] - element["offset" + dim];
+	},
+	_buildGetter = (e, axis) => { //pass in an element and an axis ("x" or "y") and it'll return a getter function for the scroll position of that element (like scrollTop or scrollLeft, although if the element is the window, it'll use the pageXOffset/pageYOffset or the documentElement's scrollTop/scrollLeft or document.body's. Basically this streamlines things and makes a very fast getter across browsers.
+		let p = "scroll" + ((axis === "x") ? "Left" : "Top");
+		if (e === _window) {
+			if (e.pageXOffset != null) {
+				p = "page" + axis.toUpperCase() + "Offset";
+			} else {
+				e = _docEl[p] != null ? _docEl : _body;
+			}
+		}
+		return () => e[p];
+	},
+	_clean = (value, index, target, targets) => {
+		_isFunction(value) && (value = value(index, target, targets));
+		if (typeof(value) !== "object") {
+			return _isString(value) && value !== "max" && value.charAt(1) !== "=" ? {x: value, y: value} : {y: value}; //if we don't receive an object as the parameter, assume the user intends "y".
+		} else if (value.nodeType) {
+			return {y: value, x: value};
+		} else {
+			let result = {}, p;
+			for (p in value) {
+				result[p] = p !== "onAutoKill" && _isFunction(value[p]) ? value[p](index, target, targets) : value[p];
+			}
+			return result;
+		}
+	},
+	_getOffset = (element, container) => {
+		element = _toArray(element)[0];
+		if (!element || !element.getBoundingClientRect) {
+			return console.warn("scrollTo target doesn't exist. Using 0") || {x:0, y:0};
+		}
+		let rect = element.getBoundingClientRect(),
+			isRoot = (!container || container === _window || container === _body),
+			cRect = isRoot ? {top:_docEl.clientTop - (_window.pageYOffset || _docEl.scrollTop || _body.scrollTop || 0), left:_docEl.clientLeft - (_window.pageXOffset || _docEl.scrollLeft || _body.scrollLeft || 0)} : container.getBoundingClientRect(),
+			offsets = {x: rect.left - cRect.left, y: rect.top - cRect.top};
+		if (!isRoot && container) { //only add the current scroll position if it's not the window/body.
+			offsets.x += _buildGetter(container, "x")();
+			offsets.y += _buildGetter(container, "y")();
+		}
+		return offsets;
+	},
+	_parseVal = (value, target, axis, currentVal, offset) => !isNaN(value) && typeof(value) !== "object" ? parseFloat(value) - offset : (_isString(value) && value.charAt(1) === "=") ? parseFloat(value.substr(2)) * (value.charAt(0) === "-" ? -1 : 1) + currentVal - offset : (value === "max") ? _max(target, axis) - offset : Math.min(_max(target, axis), _getOffset(value, target)[axis] - offset),
+	_initCore = () => {
+		gsap = _getGSAP();
+		if (_windowExists() && gsap && typeof(document) !== "undefined" && document.body) {
+			_window = window;
+			_body = document.body;
+			_docEl = document.documentElement;
+			_toArray = gsap.utils.toArray;
+			gsap.config({autoKillThreshold:7});
+			_config = gsap.config();
+			_coreInitted = 1;
+		}
+	};
+
+
+const ScrollToPlugin = {
+	version: "3.12.5",
+	name: "scrollTo",
+	rawVars: 1,
+	register(core) {
+		gsap = core;
+		_initCore();
+	},
+	init(target, value, tween, index, targets) {
+		_coreInitted || _initCore();
+		let data = this,
+			snapType = gsap.getProperty(target, "scrollSnapType");
+		data.isWin = (target === _window);
+		data.target = target;
+		data.tween = tween;
+		value = _clean(value, index, target, targets);
+		data.vars = value;
+		data.autoKill = !!value.autoKill;
+		data.getX = _buildGetter(target, "x");
+		data.getY = _buildGetter(target, "y");
+		data.x = data.xPrev = data.getX();
+		data.y = data.yPrev = data.getY();
+		ScrollTrigger || (ScrollTrigger = gsap.core.globals().ScrollTrigger);
+		gsap.getProperty(target, "scrollBehavior") === "smooth" && gsap.set(target, {scrollBehavior: "auto"});
+		if (snapType && snapType !== "none") { // disable scroll snapping to avoid strange behavior
+			data.snap = 1;
+			data.snapInline = target.style.scrollSnapType;
+			target.style.scrollSnapType = "none";
+		}
+		if (value.x != null) {
+			data.add(data, "x", data.x, _parseVal(value.x, target, "x", data.x, value.offsetX || 0), index, targets);
+			data._props.push("scrollTo_x");
+		} else {
+			data.skipX = 1;
+		}
+		if (value.y != null) {
+			data.add(data, "y", data.y, _parseVal(value.y, target, "y", data.y, value.offsetY || 0), index, targets);
+			data._props.push("scrollTo_y");
+		} else {
+			data.skipY = 1;
+		}
+	},
+	render(ratio, data) {
+		let pt = data._pt,
+			{ target, tween, autoKill, xPrev, yPrev, isWin, snap, snapInline } = data,
+			x, y, yDif, xDif, threshold;
+		while (pt) {
+			pt.r(ratio, pt.d);
+			pt = pt._next;
+		}
+		x = (isWin || !data.skipX) ? data.getX() : xPrev;
+		y = (isWin || !data.skipY) ? data.getY() : yPrev;
+		yDif = y - yPrev;
+		xDif = x - xPrev;
+		threshold = _config.autoKillThreshold;
+		if (data.x < 0) { //can't scroll to a position less than 0! Might happen if someone uses a Back.easeOut or Elastic.easeOut when scrolling back to the top of the page (for example)
+			data.x = 0;
+		}
+		if (data.y < 0) {
+			data.y = 0;
+		}
+		if (autoKill) {
+			//note: iOS has a bug that throws off the scroll by several pixels, so we need to check if it's within 7 pixels of the previous one that we set instead of just looking for an exact match.
+			if (!data.skipX && (xDif > threshold || xDif < -threshold) && x < _max(target, "x")) {
+				data.skipX = 1; //if the user scrolls separately, we should stop tweening!
+			}
+			if (!data.skipY && (yDif > threshold || yDif < -threshold) && y < _max(target, "y")) {
+				data.skipY = 1; //if the user scrolls separately, we should stop tweening!
+			}
+			if (data.skipX && data.skipY) {
+				tween.kill();
+				data.vars.onAutoKill && data.vars.onAutoKill.apply(tween, data.vars.onAutoKillParams || []);
+			}
+		}
+		if (isWin) {
+			_window.scrollTo((!data.skipX) ? data.x : x, (!data.skipY) ? data.y : y);
+		} else {
+			data.skipY || (target.scrollTop = data.y);
+			data.skipX || (target.scrollLeft = data.x);
+		}
+		if (snap && (ratio === 1 || ratio === 0)) {
+			y = target.scrollTop;
+			x = target.scrollLeft;
+			snapInline ? (target.style.scrollSnapType = snapInline) : target.style.removeProperty("scroll-snap-type");
+			target.scrollTop = y + 1; // bug in Safari causes the element to totally reset its scroll position when scroll-snap-type changes, so we need to set it to a slightly different value and then back again to work around this bug.
+			target.scrollLeft = x + 1;
+			target.scrollTop = y;
+			target.scrollLeft = x;
+		}
+		data.xPrev = data.x;
+		data.yPrev = data.y;
+		ScrollTrigger && ScrollTrigger.update();
+	},
+	kill(property) {
+		let both = (property === "scrollTo"),
+			i = this._props.indexOf(property);
+		if (both || property === "scrollTo_x") {
+			this.skipX = 1;
+		}
+		if (both || property === "scrollTo_y") {
+			this.skipY = 1;
+		}
+		i > -1 && this._props.splice(i, 1);
+		return !this._props.length;
+	}
+};
+
+ScrollToPlugin.max = _max;
+ScrollToPlugin.getOffset = _getOffset;
+ScrollToPlugin.buildGetter = _buildGetter;
+
+_getGSAP() && gsap.registerPlugin(ScrollToPlugin);
+
+export { ScrollToPlugin, ScrollToPlugin as default };
diff --git a/dist/ScrollTrigger.cjs b/dist/ScrollTrigger.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..5c6e8d411fe8c9db72d361953a29f2dbc964331f
--- /dev/null
+++ b/dist/ScrollTrigger.cjs
@@ -0,0 +1,1773 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+const Observer = require('./Observer.cjs');
+
+/*!
+ * ScrollTrigger 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let gsap, _coreInitted, _win, _doc, _docEl, _body, _root, _resizeDelay, _toArray, _clamp, _time2, _syncInterval, _refreshing, _pointerIsDown, _transformProp, _i, _prevWidth, _prevHeight, _autoRefresh, _sort, _suppressOverwrites, _ignoreResize, _normalizer, _ignoreMobileResize, _baseScreenHeight, _baseScreenWidth, _fixIOSBug, _context, _scrollRestoration, _div100vh, _100vh, _isReverted, _clampingMax,
+	_limitCallbacks, // if true, we'll only trigger callbacks if the active state toggles, so if you scroll immediately past both the start and end positions of a ScrollTrigger (thus inactive to inactive), neither its onEnter nor onLeave will be called. This is useful during startup.
+	_startup = 1,
+	_getTime = Date.now,
+	_time1 = _getTime(),
+	_lastScrollTime = 0,
+	_enabled = 0,
+	_parseClamp = (value, type, self) => {
+		let clamp = (_isString(value) && (value.substr(0, 6) === "clamp(" || value.indexOf("max") > -1));
+		self["_" + type + "Clamp"] = clamp;
+		return clamp ? value.substr(6, value.length - 7) : value;
+	},
+	_keepClamp = (value, clamp) => clamp && (!_isString(value) || value.substr(0, 6) !== "clamp(") ? "clamp(" + value + ")" : value,
+	_rafBugFix = () => _enabled && requestAnimationFrame(_rafBugFix), // in some browsers (like Firefox), screen repaints weren't consistent unless we had SOMETHING queued up in requestAnimationFrame()! So this just creates a super simple loop to keep it alive and smooth out repaints.
+	_pointerDownHandler = () => _pointerIsDown = 1,
+	_pointerUpHandler = () => _pointerIsDown = 0,
+	_passThrough = v => v,
+	_round = value => Math.round(value * 100000) / 100000 || 0,
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_isViewport = e => !!~_root.indexOf(e),
+	_getViewportDimension = dimensionProperty => (dimensionProperty === "Height" ? _100vh : _win["inner" + dimensionProperty]) || _docEl["client" + dimensionProperty] || _body["client" + dimensionProperty],
+	_getBoundsFunc = element => Observer._getProxyProp(element, "getBoundingClientRect") || (_isViewport(element) ? () => {_winOffsets.width = _win.innerWidth; _winOffsets.height = _100vh; return _winOffsets;} : () => _getBounds(element)),
+	_getSizeFunc = (scroller, isViewport, {d, d2, a}) => (a = Observer._getProxyProp(scroller, "getBoundingClientRect")) ? () => a()[d] : () => (isViewport ? _getViewportDimension(d2) : scroller["client" + d2]) || 0,
+	_getOffsetsFunc = (element, isViewport) => !isViewport || ~Observer._proxies.indexOf(element) ? _getBoundsFunc(element) : () => _winOffsets,
+	_maxScroll = (element, {s, d2, d, a}) => Math.max(0, (s = "scroll" + d2) && (a = Observer._getProxyProp(element, s)) ? a() - _getBoundsFunc(element)()[d] : _isViewport(element) ? (_docEl[s] || _body[s]) - _getViewportDimension(d2) : element[s] - element["offset" + d2]),
+	_iterateAutoRefresh = (func, events) => {
+		for (let i = 0; i < _autoRefresh.length; i += 3) {
+			(!events || ~events.indexOf(_autoRefresh[i+1])) && func(_autoRefresh[i], _autoRefresh[i+1], _autoRefresh[i+2]);
+		}
+	},
+	_isString = value => typeof(value) === "string",
+	_isFunction = value => typeof(value) === "function",
+	_isNumber = value => typeof(value) === "number",
+	_isObject = value => typeof(value) === "object",
+	_endAnimation = (animation, reversed, pause) => animation && animation.progress(reversed ? 0 : 1) && pause && animation.pause(),
+	_callback = (self, func) => {
+		if (self.enabled) {
+			let result = self._ctx ? self._ctx.add(() => func(self)) : func(self);
+			result && result.totalTime && (self.callbackAnimation = result);
+		}
+	},
+	_abs = Math.abs,
+	_left = "left",
+	_top = "top",
+	_right = "right",
+	_bottom = "bottom",
+	_width = "width",
+	_height = "height",
+	_Right = "Right",
+	_Left = "Left",
+	_Top = "Top",
+	_Bottom = "Bottom",
+	_padding = "padding",
+	_margin = "margin",
+	_Width = "Width",
+	_Height = "Height",
+	_px = "px",
+	_getComputedStyle = element => _win.getComputedStyle(element),
+	_makePositionable = element => { // if the element already has position: absolute or fixed, leave that, otherwise make it position: relative
+		let position = _getComputedStyle(element).position;
+		element.style.position = (position === "absolute" || position === "fixed") ? position : "relative";
+	},
+	_setDefaults = (obj, defaults) => {
+		for (let p in defaults) {
+			(p in obj) || (obj[p] = defaults[p]);
+		}
+		return obj;
+	},
+	_getBounds = (element, withoutTransforms) => {
+		let tween = withoutTransforms && _getComputedStyle(element)[_transformProp] !== "matrix(1, 0, 0, 1, 0, 0)" && gsap.to(element, {x: 0, y: 0, xPercent: 0, yPercent: 0, rotation: 0, rotationX: 0, rotationY: 0, scale: 1, skewX: 0, skewY: 0}).progress(1),
+			bounds = element.getBoundingClientRect();
+		tween && tween.progress(0).kill();
+		return bounds;
+	},
+	_getSize = (element, {d2}) => element["offset" + d2] || element["client" + d2] || 0,
+	_getLabelRatioArray = timeline => {
+		let a = [],
+			labels = timeline.labels,
+			duration = timeline.duration(),
+			p;
+		for (p in labels) {
+			a.push(labels[p] / duration);
+		}
+		return a;
+	},
+	_getClosestLabel = animation => value => gsap.utils.snap(_getLabelRatioArray(animation), value),
+	_snapDirectional = snapIncrementOrArray => {
+		let snap = gsap.utils.snap(snapIncrementOrArray),
+			a = Array.isArray(snapIncrementOrArray) && snapIncrementOrArray.slice(0).sort((a, b) => a - b);
+		return a ? (value, direction, threshold= 1e-3) => {
+			let i;
+			if (!direction) {
+				return snap(value);
+			}
+			if (direction > 0) {
+				value -= threshold; // to avoid rounding errors. If we're too strict, it might snap forward, then immediately again, and again.
+				for (i = 0; i < a.length; i++) {
+					if (a[i] >= value) {
+						return a[i];
+					}
+				}
+				return a[i-1];
+			} else {
+				i = a.length;
+				value += threshold;
+				while (i--) {
+					if (a[i] <= value) {
+						return a[i];
+					}
+				}
+			}
+			return a[0];
+		} : (value, direction, threshold= 1e-3) => {
+			let snapped = snap(value);
+			return !direction || Math.abs(snapped - value) < threshold || ((snapped - value < 0) === direction < 0) ? snapped : snap(direction < 0 ? value - snapIncrementOrArray : value + snapIncrementOrArray);
+		};
+	},
+	_getLabelAtDirection = timeline => (value, st) => _snapDirectional(_getLabelRatioArray(timeline))(value, st.direction),
+	_multiListener = (func, element, types, callback) => types.split(",").forEach(type => func(element, type, callback)),
+	_addListener = (element, type, func, nonPassive, capture) => element.addEventListener(type, func, {passive: !nonPassive, capture: !!capture}),
+	_removeListener = (element, type, func, capture) => element.removeEventListener(type, func, !!capture),
+	_wheelListener = (func, el, scrollFunc) => {
+		scrollFunc = scrollFunc && scrollFunc.wheelHandler;
+		if (scrollFunc) {
+			func(el, "wheel", scrollFunc);
+			func(el, "touchmove", scrollFunc);
+		}
+	},
+	_markerDefaults = {startColor: "green", endColor: "red", indent: 0, fontSize: "16px", fontWeight:"normal"},
+	_defaults = {toggleActions: "play", anticipatePin: 0},
+	_keywords = {top: 0, left: 0, center: 0.5, bottom: 1, right: 1},
+	_offsetToPx = (value, size) => {
+		if (_isString(value)) {
+			let eqIndex = value.indexOf("="),
+				relative = ~eqIndex ? +(value.charAt(eqIndex-1) + 1) * parseFloat(value.substr(eqIndex + 1)) : 0;
+			if (~eqIndex) {
+				(value.indexOf("%") > eqIndex) && (relative *= size / 100);
+				value = value.substr(0, eqIndex-1);
+			}
+			value = relative + ((value in _keywords) ? _keywords[value] * size : ~value.indexOf("%") ? parseFloat(value) * size / 100 : parseFloat(value) || 0);
+		}
+		return value;
+	},
+	_createMarker = (type, name, container, direction, {startColor, endColor, fontSize, indent, fontWeight}, offset, matchWidthEl, containerAnimation) => {
+		let e = _doc.createElement("div"),
+			useFixedPosition = _isViewport(container) || Observer._getProxyProp(container, "pinType") === "fixed",
+			isScroller = type.indexOf("scroller") !== -1,
+			parent = useFixedPosition ? _body : container,
+			isStart = type.indexOf("start") !== -1,
+			color = isStart ? startColor : endColor,
+			css = "border-color:" + color + ";font-size:" + fontSize + ";color:" + color + ";font-weight:" + fontWeight + ";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";
+		css += "position:" + ((isScroller || containerAnimation) && useFixedPosition ? "fixed;" : "absolute;");
+		(isScroller || containerAnimation || !useFixedPosition) && (css += (direction === Observer._vertical ? _right : _bottom) + ":" + (offset + parseFloat(indent)) + "px;");
+		matchWidthEl && (css += "box-sizing:border-box;text-align:left;width:" + matchWidthEl.offsetWidth + "px;");
+		e._isStart = isStart;
+		e.setAttribute("class", "gsap-marker-" + type + (name ? " marker-" + name : ""));
+		e.style.cssText = css;
+		e.innerText = name || name === 0 ? type + "-" + name : type;
+		parent.children[0] ? parent.insertBefore(e, parent.children[0]) : parent.appendChild(e);
+		e._offset = e["offset" + direction.op.d2];
+		_positionMarker(e, 0, direction, isStart);
+		return e;
+	},
+	_positionMarker = (marker, start, direction, flipped) => {
+		let vars = {display: "block"},
+			side = direction[flipped ? "os2" : "p2"],
+			oppositeSide = direction[flipped ? "p2" : "os2"];
+		marker._isFlipped = flipped;
+		vars[direction.a + "Percent"] = flipped ? -100 : 0;
+		vars[direction.a] = flipped ? "1px" : 0;
+		vars["border" + side + _Width] = 1;
+		vars["border" + oppositeSide + _Width] = 0;
+		vars[direction.p] = start + "px";
+		gsap.set(marker, vars);
+	},
+	_triggers = [],
+	_ids = {},
+	_rafID,
+	_sync = () => _getTime() - _lastScrollTime > 34 && (_rafID || (_rafID = requestAnimationFrame(_updateAll))),
+	_onScroll = () => { // previously, we tried to optimize performance by batching/deferring to the next requestAnimationFrame(), but discovered that Safari has a few bugs that make this unworkable (especially on iOS). See https://codepen.io/GreenSock/pen/16c435b12ef09c38125204818e7b45fc?editors=0010 and https://codepen.io/GreenSock/pen/JjOxYpQ/3dd65ccec5a60f1d862c355d84d14562?editors=0010 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503?editors=0010
+		if (!_normalizer || !_normalizer.isPressed || _normalizer.startX > _body.clientWidth) { // if the user is dragging the scrollbar, allow it.
+			Observer._scrollers.cache++;
+			if (_normalizer) {
+				_rafID || (_rafID = requestAnimationFrame(_updateAll));
+			} else {
+				_updateAll(); // Safari in particular (on desktop) NEEDS the immediate update rather than waiting for a requestAnimationFrame() whereas iOS seems to benefit from waiting for the requestAnimationFrame() tick, at least when normalizing. See https://codepen.io/GreenSock/pen/qBYozqO?editors=0110
+			}
+			_lastScrollTime || _dispatch("scrollStart");
+			_lastScrollTime = _getTime();
+		}
+	},
+	_setBaseDimensions = () => {
+		_baseScreenWidth = _win.innerWidth;
+		_baseScreenHeight = _win.innerHeight;
+	},
+	_onResize = () => {
+		Observer._scrollers.cache++;
+		!_refreshing && !_ignoreResize && !_doc.fullscreenElement && !_doc.webkitFullscreenElement && (!_ignoreMobileResize || _baseScreenWidth !== _win.innerWidth || Math.abs(_win.innerHeight - _baseScreenHeight) > _win.innerHeight * 0.25) && _resizeDelay.restart(true);
+	}, // ignore resizes triggered by refresh()
+	_listeners = {},
+	_emptyArray = [],
+	_softRefresh = () => _removeListener(ScrollTrigger, "scrollEnd", _softRefresh) || _refreshAll(true),
+	_dispatch = type => (_listeners[type] && _listeners[type].map(f => f())) || _emptyArray,
+	_savedStyles = [], // when ScrollTrigger.saveStyles() is called, the inline styles are recorded in this Array in a sequential format like [element, cssText, gsCache, media]. This keeps it very memory-efficient and fast to iterate through.
+	_revertRecorded = media => {
+		for (let i = 0; i < _savedStyles.length; i+=5) {
+			if (!media || _savedStyles[i+4] && _savedStyles[i+4].query === media) {
+				_savedStyles[i].style.cssText = _savedStyles[i+1];
+				_savedStyles[i].getBBox && _savedStyles[i].setAttribute("transform", _savedStyles[i+2] || "");
+				_savedStyles[i+3].uncache = 1;
+			}
+		}
+	},
+	_revertAll = (kill, media) => {
+		let trigger;
+		for (_i = 0; _i < _triggers.length; _i++) {
+			trigger = _triggers[_i];
+			if (trigger && (!media || trigger._ctx === media)) {
+				if (kill) {
+					trigger.kill(1);
+				} else {
+					trigger.revert(true, true);
+				}
+			}
+		}
+		_isReverted = true;
+		media && _revertRecorded(media);
+		media || _dispatch("revert");
+	},
+	_clearScrollMemory = (scrollRestoration, force) => { // zero-out all the recorded scroll positions. Don't use _triggers because if, for example, .matchMedia() is used to create some ScrollTriggers and then the user resizes and it removes ALL ScrollTriggers, and then go back to a size where there are ScrollTriggers, it would have kept the position(s) saved from the initial state.
+		Observer._scrollers.cache++;
+		(force || !_refreshingAll) && Observer._scrollers.forEach(obj => _isFunction(obj) && obj.cacheID++ && (obj.rec = 0));
+		_isString(scrollRestoration) && (_win.history.scrollRestoration = _scrollRestoration = scrollRestoration);
+	},
+	_refreshingAll,
+	_refreshID = 0,
+	_queueRefreshID,
+	_queueRefreshAll = () => { // we don't want to call _refreshAll() every time we create a new ScrollTrigger (for performance reasons) - it's better to batch them. Some frameworks dynamically load content and we can't rely on the window's "load" or "DOMContentLoaded" events to trigger it.
+		if (_queueRefreshID !== _refreshID) {
+			let id = _queueRefreshID = _refreshID;
+			requestAnimationFrame(() => id === _refreshID && _refreshAll(true));
+		}
+	},
+	_refresh100vh = () => {
+		_body.appendChild(_div100vh);
+		_100vh = (!_normalizer && _div100vh.offsetHeight) || _win.innerHeight;
+		_body.removeChild(_div100vh);
+	},
+	_hideAllMarkers = hide => _toArray(".gsap-marker-start, .gsap-marker-end, .gsap-marker-scroller-start, .gsap-marker-scroller-end").forEach(el => el.style.display = hide ? "none" : "block"),
+	_refreshAll = (force, skipRevert) => {
+		if (_lastScrollTime && !force && !_isReverted) {
+			_addListener(ScrollTrigger, "scrollEnd", _softRefresh);
+			return;
+		}
+		_refresh100vh();
+		_refreshingAll = ScrollTrigger.isRefreshing = true;
+		Observer._scrollers.forEach(obj => _isFunction(obj) && ++obj.cacheID && (obj.rec = obj())); // force the clearing of the cache because some browsers take a little while to dispatch the "scroll" event and the user may have changed the scroll position and then called ScrollTrigger.refresh() right away
+		let refreshInits = _dispatch("refreshInit");
+		_sort && ScrollTrigger.sort();
+		skipRevert || _revertAll();
+		Observer._scrollers.forEach(obj => {
+			if (_isFunction(obj)) {
+				obj.smooth && (obj.target.style.scrollBehavior = "auto"); // smooth scrolling interferes
+				obj(0);
+			}
+		});
+		_triggers.slice(0).forEach(t => t.refresh()); // don't loop with _i because during a refresh() someone could call ScrollTrigger.update() which would iterate through _i resulting in a skip.
+		_isReverted = false;
+		_triggers.forEach((t) => { // nested pins (pinnedContainer) with pinSpacing may expand the container, so we must accommodate that here.
+			if (t._subPinOffset && t.pin) {
+				let prop = t.vars.horizontal ? "offsetWidth" : "offsetHeight",
+					original = t.pin[prop];
+				t.revert(true, 1);
+				t.adjustPinSpacing(t.pin[prop] - original);
+				t.refresh();
+			}
+		});
+		_clampingMax = 1; // pinSpacing might be propping a page open, thus when we .setPositions() to clamp a ScrollTrigger's end we should leave the pinSpacing alone. That's what this flag is for.
+		_hideAllMarkers(true);
+		_triggers.forEach(t => { // the scroller's max scroll position may change after all the ScrollTriggers refreshed (like pinning could push it down), so we need to loop back and correct any with end: "max". Same for anything with a clamped end
+			let max = _maxScroll(t.scroller, t._dir),
+				endClamp = t.vars.end === "max" || (t._endClamp && t.end > max),
+				startClamp = t._startClamp && t.start >= max;
+			(endClamp || startClamp) && t.setPositions(startClamp ? max - 1 : t.start, endClamp ? Math.max(startClamp ? max : t.start + 1, max) : t.end, true);
+		});
+		_hideAllMarkers(false);
+		_clampingMax = 0;
+		refreshInits.forEach(result => result && result.render && result.render(-1)); // if the onRefreshInit() returns an animation (typically a gsap.set()), revert it. This makes it easy to put things in a certain spot before refreshing for measurement purposes, and then put things back.
+		Observer._scrollers.forEach(obj => {
+			if (_isFunction(obj)) {
+				obj.smooth && requestAnimationFrame(() => obj.target.style.scrollBehavior = "smooth");
+				obj.rec && obj(obj.rec);
+			}
+		});
+		_clearScrollMemory(_scrollRestoration, 1);
+		_resizeDelay.pause();
+		_refreshID++;
+		_refreshingAll = 2;
+		_updateAll(2);
+		_triggers.forEach(t => _isFunction(t.vars.onRefresh) && t.vars.onRefresh(t));
+		_refreshingAll = ScrollTrigger.isRefreshing = false;
+		_dispatch("refresh");
+	},
+	_lastScroll = 0,
+	_direction = 1,
+	_primary,
+	_updateAll = (force) => {
+		if (force === 2 || (!_refreshingAll && !_isReverted)) { // _isReverted could be true if, for example, a matchMedia() is in the process of executing. We don't want to update during the time everything is reverted.
+			ScrollTrigger.isUpdating = true;
+			_primary && _primary.update(0); // ScrollSmoother uses refreshPriority -9999 to become the primary that gets updated before all others because it affects the scroll position.
+			let l = _triggers.length,
+				time = _getTime(),
+				recordVelocity = time - _time1 >= 50,
+				scroll = l && _triggers[0].scroll();
+			_direction = _lastScroll > scroll ? -1 : 1;
+			_refreshingAll || (_lastScroll = scroll);
+			if (recordVelocity) {
+				if (_lastScrollTime && !_pointerIsDown && time - _lastScrollTime > 200) {
+					_lastScrollTime = 0;
+					_dispatch("scrollEnd");
+				}
+				_time2 = _time1;
+				_time1 = time;
+			}
+			if (_direction < 0) {
+				_i = l;
+				while (_i-- > 0) {
+					_triggers[_i] && _triggers[_i].update(0, recordVelocity);
+				}
+				_direction = 1;
+			} else {
+				for (_i = 0; _i < l; _i++) {
+					_triggers[_i] && _triggers[_i].update(0, recordVelocity);
+				}
+			}
+			ScrollTrigger.isUpdating = false;
+		}
+		_rafID = 0;
+	},
+	_propNamesToCopy = [_left, _top, _bottom, _right, _margin + _Bottom, _margin + _Right, _margin + _Top, _margin + _Left, "display", "flexShrink", "float", "zIndex", "gridColumnStart", "gridColumnEnd", "gridRowStart", "gridRowEnd", "gridArea", "justifySelf", "alignSelf", "placeSelf", "order"],
+	_stateProps = _propNamesToCopy.concat([_width, _height, "boxSizing", "max" + _Width, "max" + _Height, "position", _margin, _padding, _padding + _Top, _padding + _Right, _padding + _Bottom, _padding + _Left]),
+	_swapPinOut = (pin, spacer, state) => {
+		_setState(state);
+		let cache = pin._gsap;
+		if (cache.spacerIsNative) {
+			_setState(cache.spacerState);
+		} else if (pin._gsap.swappedIn) {
+			let parent = spacer.parentNode;
+			if (parent) {
+				parent.insertBefore(pin, spacer);
+				parent.removeChild(spacer);
+			}
+		}
+		pin._gsap.swappedIn = false;
+	},
+	_swapPinIn = (pin, spacer, cs, spacerState) => {
+		if (!pin._gsap.swappedIn) {
+			let i = _propNamesToCopy.length,
+				spacerStyle = spacer.style,
+				pinStyle = pin.style,
+				p;
+			while (i--) {
+				p = _propNamesToCopy[i];
+				spacerStyle[p] = cs[p];
+			}
+			spacerStyle.position = cs.position === "absolute" ? "absolute" : "relative";
+			(cs.display === "inline") && (spacerStyle.display = "inline-block");
+			pinStyle[_bottom] = pinStyle[_right] = "auto";
+			spacerStyle.flexBasis = cs.flexBasis || "auto";
+			spacerStyle.overflow = "visible";
+			spacerStyle.boxSizing = "border-box";
+			spacerStyle[_width] = _getSize(pin, Observer._horizontal) + _px;
+			spacerStyle[_height] = _getSize(pin, Observer._vertical) + _px;
+			spacerStyle[_padding] = pinStyle[_margin] = pinStyle[_top] = pinStyle[_left] = "0";
+			_setState(spacerState);
+			pinStyle[_width] = pinStyle["max" + _Width] = cs[_width];
+			pinStyle[_height] = pinStyle["max" + _Height] = cs[_height];
+			pinStyle[_padding] = cs[_padding];
+			if (pin.parentNode !== spacer) {
+				pin.parentNode.insertBefore(spacer, pin);
+				spacer.appendChild(pin);
+			}
+			pin._gsap.swappedIn = true;
+		}
+	},
+	_capsExp = /([A-Z])/g,
+	_setState = state => {
+		if (state) {
+			let style = state.t.style,
+				l = state.length,
+				i = 0,
+				p, value;
+			(state.t._gsap || gsap.core.getCache(state.t)).uncache = 1; // otherwise transforms may be off
+			for (; i < l; i +=2) {
+				value = state[i+1];
+				p = state[i];
+				if (value) {
+					style[p] = value;
+				} else if (style[p]) {
+					style.removeProperty(p.replace(_capsExp, "-$1").toLowerCase());
+				}
+			}
+		}
+	},
+	_getState = element => { // returns an Array with alternating values like [property, value, property, value] and a "t" property pointing to the target (element). Makes it fast and cheap.
+		let l = _stateProps.length,
+			style = element.style,
+			state = [],
+			i = 0;
+		for (; i < l; i++) {
+			state.push(_stateProps[i], style[_stateProps[i]]);
+		}
+		state.t = element;
+		return state;
+	},
+	_copyState = (state, override, omitOffsets) => {
+		let result = [],
+			l = state.length,
+			i = omitOffsets ? 8 : 0, // skip top, left, right, bottom if omitOffsets is true
+			p;
+		for (; i < l; i += 2) {
+			p = state[i];
+			result.push(p, (p in override) ? override[p] : state[i+1]);
+		}
+		result.t = state.t;
+		return result;
+	},
+	_winOffsets = {left:0, top:0},
+	// // potential future feature (?) Allow users to calculate where a trigger hits (scroll position) like getScrollPosition("#id", "top bottom")
+	// _getScrollPosition = (trigger, position, {scroller, containerAnimation, horizontal}) => {
+	// 	scroller = _getTarget(scroller || _win);
+	// 	let direction = horizontal ? _horizontal : _vertical,
+	// 		isViewport = _isViewport(scroller);
+	// 	_getSizeFunc(scroller, isViewport, direction);
+	// 	return _parsePosition(position, _getTarget(trigger), _getSizeFunc(scroller, isViewport, direction)(), direction, _getScrollFunc(scroller, direction)(), 0, 0, 0, _getOffsetsFunc(scroller, isViewport)(), isViewport ? 0 : parseFloat(_getComputedStyle(scroller)["border" + direction.p2 + _Width]) || 0, 0, containerAnimation ? containerAnimation.duration() : _maxScroll(scroller), containerAnimation);
+	// },
+	_parsePosition = (value, trigger, scrollerSize, direction, scroll, marker, markerScroller, self, scrollerBounds, borderWidth, useFixedPosition, scrollerMax, containerAnimation, clampZeroProp) => {
+		_isFunction(value) && (value = value(self));
+		if (_isString(value) && value.substr(0,3) === "max") {
+			value = scrollerMax + (value.charAt(4) === "=" ? _offsetToPx("0" + value.substr(3), scrollerSize) : 0);
+		}
+		let time = containerAnimation ? containerAnimation.time() : 0,
+			p1, p2, element;
+		containerAnimation && containerAnimation.seek(0);
+		isNaN(value) || (value = +value); // convert a string number like "45" to an actual number
+		if (!_isNumber(value)) {
+			_isFunction(trigger) && (trigger = trigger(self));
+			let offsets = (value || "0").split(" "),
+				bounds, localOffset, globalOffset, display;
+			element = Observer._getTarget(trigger, self) || _body;
+			bounds = _getBounds(element) || {};
+			if ((!bounds || (!bounds.left && !bounds.top)) && _getComputedStyle(element).display === "none") { // if display is "none", it won't report getBoundingClientRect() properly
+				display = element.style.display;
+				element.style.display = "block";
+				bounds = _getBounds(element);
+				display ? (element.style.display = display) : element.style.removeProperty("display");
+			}
+			localOffset = _offsetToPx(offsets[0], bounds[direction.d]);
+			globalOffset = _offsetToPx(offsets[1] || "0", scrollerSize);
+			value = bounds[direction.p] - scrollerBounds[direction.p] - borderWidth + localOffset + scroll - globalOffset;
+			markerScroller && _positionMarker(markerScroller, globalOffset, direction, (scrollerSize - globalOffset < 20 || (markerScroller._isStart && globalOffset > 20)));
+			scrollerSize -= scrollerSize - globalOffset; // adjust for the marker
+		} else {
+			containerAnimation && (value = gsap.utils.mapRange(containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, 0, scrollerMax, value));
+			markerScroller && _positionMarker(markerScroller, scrollerSize, direction, true);
+		}
+		if (clampZeroProp) {
+			self[clampZeroProp] = value || -0.001;
+			value < 0 && (value = 0);
+		}
+		if (marker) {
+			let position = value + scrollerSize,
+				isStart = marker._isStart;
+			p1 = "scroll" + direction.d2;
+			_positionMarker(marker, position, direction, (isStart && position > 20) || (!isStart && (useFixedPosition ? Math.max(_body[p1], _docEl[p1]) : marker.parentNode[p1]) <= position + 1));
+			if (useFixedPosition) {
+				scrollerBounds = _getBounds(markerScroller);
+				useFixedPosition && (marker.style[direction.op.p] = (scrollerBounds[direction.op.p] - direction.op.m - marker._offset) + _px);
+			}
+		}
+		if (containerAnimation && element) {
+			p1 = _getBounds(element);
+			containerAnimation.seek(scrollerMax);
+			p2 = _getBounds(element);
+			containerAnimation._caScrollDist = p1[direction.p] - p2[direction.p];
+			value = value / (containerAnimation._caScrollDist) * scrollerMax;
+		}
+		containerAnimation && containerAnimation.seek(time);
+		return containerAnimation ? value : Math.round(value);
+	},
+	_prefixExp = /(webkit|moz|length|cssText|inset)/i,
+	_reparent = (element, parent, top, left) => {
+		if (element.parentNode !== parent) {
+			let style = element.style,
+				p, cs;
+			if (parent === _body) {
+				element._stOrig = style.cssText; // record original inline styles so we can revert them later
+				cs = _getComputedStyle(element);
+				for (p in cs) { // must copy all relevant styles to ensure that nothing changes visually when we reparent to the <body>. Skip the vendor prefixed ones.
+					if (!+p && !_prefixExp.test(p) && cs[p] && typeof style[p] === "string" && p !== "0") {
+						style[p] = cs[p];
+					}
+				}
+				style.top = top;
+				style.left = left;
+			} else {
+				style.cssText = element._stOrig;
+			}
+			gsap.core.getCache(element).uncache = 1;
+			parent.appendChild(element);
+		}
+	},
+	_interruptionTracker = (getValueFunc, initialValue, onInterrupt) => {
+		let last1 = initialValue,
+			last2 = last1;
+		return value => {
+			let current = Math.round(getValueFunc()); // round because in some [very uncommon] Windows environments, scroll can get reported with decimals even though it was set without.
+			if (current !== last1 && current !== last2 && Math.abs(current - last1) > 3 && Math.abs(current - last2) > 3) { // if the user scrolls, kill the tween. iOS Safari intermittently misreports the scroll position, it may be the most recently-set one or the one before that! When Safari is zoomed (CMD-+), it often misreports as 1 pixel off too! So if we set the scroll position to 125, for example, it'll actually report it as 124.
+				value = current;
+				onInterrupt && onInterrupt();
+			}
+			last2 = last1;
+			last1 = value;
+			return value;
+		};
+	},
+	_shiftMarker = (marker, direction, value) => {
+		let vars = {};
+		vars[direction.p] = "+=" + value;
+		gsap.set(marker, vars);
+	},
+	// _mergeAnimations = animations => {
+	// 	let tl = gsap.timeline({smoothChildTiming: true}).startTime(Math.min(...animations.map(a => a.globalTime(0))));
+	// 	animations.forEach(a => {let time = a.totalTime(); tl.add(a); a.totalTime(time); });
+	// 	tl.smoothChildTiming = false;
+	// 	return tl;
+	// },
+
+	// returns a function that can be used to tween the scroll position in the direction provided, and when doing so it'll add a .tween property to the FUNCTION itself, and remove it when the tween completes or gets killed. This gives us a way to have multiple ScrollTriggers use a central function for any given scroller and see if there's a scroll tween running (which would affect if/how things get updated)
+	_getTweenCreator = (scroller, direction) => {
+		let getScroll = Observer._getScrollFunc(scroller, direction),
+			prop = "_scroll" + direction.p2, // add a tweenable property to the scroller that's a getter/setter function, like _scrollTop or _scrollLeft. This way, if someone does gsap.killTweensOf(scroller) it'll kill the scroll tween.
+			getTween = (scrollTo, vars, initialValue, change1, change2) => {
+				let tween = getTween.tween,
+					onComplete = vars.onComplete,
+					modifiers = {};
+				initialValue = initialValue || getScroll();
+				let checkForInterruption = _interruptionTracker(getScroll, initialValue, () => {
+					tween.kill();
+					getTween.tween = 0;
+				});
+				change2 = (change1 && change2) || 0; // if change1 is 0, we set that to the difference and ignore change2. Otherwise, there would be a compound effect.
+				change1 = change1 || (scrollTo - initialValue);
+				tween && tween.kill();
+				vars[prop] = scrollTo;
+				vars.inherit = false;
+				vars.modifiers = modifiers;
+				modifiers[prop] = () => checkForInterruption(initialValue + change1 * tween.ratio + change2 * tween.ratio * tween.ratio);
+				vars.onUpdate = () => {
+					Observer._scrollers.cache++;
+					getTween.tween && _updateAll(); // if it was interrupted/killed, like in a context.revert(), don't force an updateAll()
+				};
+				vars.onComplete = () => {
+					getTween.tween = 0;
+					onComplete && onComplete.call(tween);
+				};
+				tween = getTween.tween = gsap.to(scroller, vars);
+				return tween;
+			};
+		scroller[prop] = getScroll;
+		getScroll.wheelHandler = () => getTween.tween && getTween.tween.kill() && (getTween.tween = 0);
+		_addListener(scroller, "wheel", getScroll.wheelHandler); // Windows machines handle mousewheel scrolling in chunks (like "3 lines per scroll") meaning the typical strategy for cancelling the scroll isn't as sensitive. It's much more likely to match one of the previous 2 scroll event positions. So we kill any snapping as soon as there's a wheel event.
+		ScrollTrigger.isTouch && _addListener(scroller, "touchmove", getScroll.wheelHandler);
+		return getTween;
+	};
+
+
+
+
+class ScrollTrigger {
+
+	constructor(vars, animation) {
+		_coreInitted || ScrollTrigger.register(gsap) || console.warn("Please gsap.registerPlugin(ScrollTrigger)");
+		_context(this);
+		this.init(vars, animation);
+	}
+
+	init(vars, animation) {
+		this.progress = this.start = 0;
+		this.vars && this.kill(true, true); // in case it's being initted again
+		if (!_enabled) {
+			this.update = this.refresh = this.kill = _passThrough;
+			return;
+		}
+		vars = _setDefaults((_isString(vars) || _isNumber(vars) || vars.nodeType) ? {trigger: vars} : vars, _defaults);
+		let {onUpdate, toggleClass, id, onToggle, onRefresh, scrub, trigger, pin, pinSpacing, invalidateOnRefresh, anticipatePin, onScrubComplete, onSnapComplete, once, snap, pinReparent, pinSpacer, containerAnimation, fastScrollEnd, preventOverlaps} = vars,
+			direction = vars.horizontal || (vars.containerAnimation && vars.horizontal !== false) ? Observer._horizontal : Observer._vertical,
+			isToggle = !scrub && scrub !== 0,
+			scroller = Observer._getTarget(vars.scroller || _win),
+			scrollerCache = gsap.core.getCache(scroller),
+			isViewport = _isViewport(scroller),
+			useFixedPosition = ("pinType" in vars ? vars.pinType : Observer._getProxyProp(scroller, "pinType") || (isViewport && "fixed")) === "fixed",
+			callbacks = [vars.onEnter, vars.onLeave, vars.onEnterBack, vars.onLeaveBack],
+			toggleActions = isToggle && vars.toggleActions.split(" "),
+			markers = "markers" in vars ? vars.markers : _defaults.markers,
+			borderWidth = isViewport ? 0 : parseFloat(_getComputedStyle(scroller)["border" + direction.p2 + _Width]) || 0,
+			self = this,
+			onRefreshInit = vars.onRefreshInit && (() => vars.onRefreshInit(self)),
+			getScrollerSize = _getSizeFunc(scroller, isViewport, direction),
+			getScrollerOffsets = _getOffsetsFunc(scroller, isViewport),
+			lastSnap = 0,
+			lastRefresh = 0,
+			prevProgress = 0,
+			scrollFunc = Observer._getScrollFunc(scroller, direction),
+			tweenTo, pinCache, snapFunc, scroll1, scroll2, start, end, markerStart, markerEnd, markerStartTrigger, markerEndTrigger, markerVars, executingOnRefresh,
+			change, pinOriginalState, pinActiveState, pinState, spacer, offset, pinGetter, pinSetter, pinStart, pinChange, spacingStart, spacerState, markerStartSetter, pinMoves,
+			markerEndSetter, cs, snap1, snap2, scrubTween, scrubSmooth, snapDurClamp, snapDelayedCall, prevScroll, prevAnimProgress, caMarkerSetter, customRevertReturn;
+
+		// for the sake of efficiency, _startClamp/_endClamp serve like a truthy value indicating that clamping was enabled on the start/end, and ALSO store the actual pre-clamped numeric value. We tap into that in ScrollSmoother for speed effects. So for example, if start="clamp(top bottom)" results in a start of -100 naturally, it would get clamped to 0 but -100 would be stored in _startClamp.
+		self._startClamp = self._endClamp = false;
+		self._dir = direction;
+		anticipatePin *= 45;
+		self.scroller = scroller;
+		self.scroll = containerAnimation ? containerAnimation.time.bind(containerAnimation) : scrollFunc;
+		scroll1 = scrollFunc();
+		self.vars = vars;
+		animation = animation || vars.animation;
+		if ("refreshPriority" in vars) {
+			_sort = 1;
+			vars.refreshPriority === -9999 && (_primary = self); // used by ScrollSmoother
+		}
+		scrollerCache.tweenScroll = scrollerCache.tweenScroll || {
+			top: _getTweenCreator(scroller, Observer._vertical),
+			left: _getTweenCreator(scroller, Observer._horizontal)
+		};
+		self.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];
+		self.scrubDuration = value => {
+			scrubSmooth = _isNumber(value) && value;
+			if (!scrubSmooth) {
+				scrubTween && scrubTween.progress(1).kill();
+				scrubTween = 0;
+			} else {
+				scrubTween ? scrubTween.duration(value) : (scrubTween = gsap.to(animation, {ease: "expo", totalProgress: "+=0", inherit: false, duration: scrubSmooth, paused: true, onComplete: () => onScrubComplete && onScrubComplete(self)}));
+			}
+		};
+		if (animation) {
+			animation.vars.lazy = false;
+			(animation._initted && !self.isReverted) || (animation.vars.immediateRender !== false && vars.immediateRender !== false && animation.duration() && animation.render(0, true, true)); // special case: if this ScrollTrigger gets re-initted, a from() tween with a stagger could get initted initially and then reverted on the re-init which means it'll need to get rendered again here to properly display things. Otherwise, See https://gsap.com/forums/topic/36777-scrollsmoother-splittext-nextjs/ and https://codepen.io/GreenSock/pen/eYPyPpd?editors=0010
+			self.animation = animation.pause();
+			animation.scrollTrigger = self;
+			self.scrubDuration(scrub);
+			snap1 = 0;
+			id || (id = animation.vars.id);
+		}
+
+		if (snap) {
+			// TODO: potential idea: use legitimate CSS scroll snapping by pushing invisible elements into the DOM that serve as snap positions, and toggle the document.scrollingElement.style.scrollSnapType onToggle. See https://codepen.io/GreenSock/pen/JjLrgWM for a quick proof of concept.
+			if (!_isObject(snap) || snap.push) {
+				snap = {snapTo: snap};
+			}
+			("scrollBehavior" in _body.style) && gsap.set(isViewport ? [_body, _docEl] : scroller, {scrollBehavior: "auto"}); // smooth scrolling doesn't work with snap.
+			Observer._scrollers.forEach(o => _isFunction(o) && o.target === (isViewport ? _doc.scrollingElement || _docEl : scroller) && (o.smooth = false)); // note: set smooth to false on both the vertical and horizontal scroll getters/setters
+			snapFunc = _isFunction(snap.snapTo) ? snap.snapTo : snap.snapTo === "labels" ? _getClosestLabel(animation) : snap.snapTo === "labelsDirectional" ? _getLabelAtDirection(animation) : snap.directional !== false ? (value, st) => _snapDirectional(snap.snapTo)(value, _getTime() - lastRefresh < 500 ? 0 : st.direction) : gsap.utils.snap(snap.snapTo);
+			snapDurClamp = snap.duration || {min: 0.1, max: 2};
+			snapDurClamp = _isObject(snapDurClamp) ? _clamp(snapDurClamp.min, snapDurClamp.max) : _clamp(snapDurClamp, snapDurClamp);
+			snapDelayedCall = gsap.delayedCall(snap.delay || (scrubSmooth / 2) || 0.1, () => {
+				let scroll = scrollFunc(),
+					refreshedRecently = _getTime() - lastRefresh < 500,
+					tween = tweenTo.tween;
+				if ((refreshedRecently || Math.abs(self.getVelocity()) < 10) && !tween && !_pointerIsDown && lastSnap !== scroll) {
+					let progress = (scroll - start) / change, // don't use self.progress because this might run between the refresh() and when the scroll position updates and self.progress is set properly in the update() method.
+						totalProgress = animation && !isToggle ? animation.totalProgress() : progress,
+						velocity = refreshedRecently ? 0 : ((totalProgress - snap2) / (_getTime() - _time2) * 1000) || 0,
+						change1 = gsap.utils.clamp(-progress, 1 - progress, _abs(velocity / 2) * velocity / 0.185),
+						naturalEnd = progress + (snap.inertia === false ? 0 : change1),
+						endValue, endScroll,
+						{ onStart, onInterrupt, onComplete } = snap;
+					endValue = snapFunc(naturalEnd, self);
+					_isNumber(endValue) || (endValue = naturalEnd); // in case the function didn't return a number, fall back to using the naturalEnd
+					endScroll = Math.round(start + endValue * change);
+					if (scroll <= end && scroll >= start && endScroll !== scroll) {
+						if (tween && !tween._initted && tween.data <= _abs(endScroll - scroll)) { // there's an overlapping snap! So we must figure out which one is closer and let that tween live.
+							return;
+						}
+						if (snap.inertia === false) {
+							change1 = endValue - progress;
+						}
+						tweenTo(endScroll, {
+							duration: snapDurClamp(_abs( (Math.max(_abs(naturalEnd - totalProgress), _abs(endValue - totalProgress)) * 0.185 / velocity / 0.05) || 0)),
+							ease: snap.ease || "power3",
+							data: _abs(endScroll - scroll), // record the distance so that if another snap tween occurs (conflict) we can prioritize the closest snap.
+							onInterrupt: () => snapDelayedCall.restart(true) && onInterrupt && onInterrupt(self),
+							onComplete() {
+								self.update();
+								lastSnap = scrollFunc();
+								if (animation) { // the resolution of the scrollbar is limited, so we should correct the scrubbed animation's playhead at the end to match EXACTLY where it was supposed to snap
+									scrubTween ? scrubTween.resetTo("totalProgress", endValue, animation._tTime / animation._tDur) : animation.progress(endValue);
+								}
+								snap1 = snap2 = animation && !isToggle ? animation.totalProgress() : self.progress;
+								onSnapComplete && onSnapComplete(self);
+								onComplete && onComplete(self);
+							}
+						}, scroll, change1 * change, endScroll - scroll - change1 * change);
+						onStart && onStart(self, tweenTo.tween);
+					}
+				} else if (self.isActive && lastSnap !== scroll) {
+					snapDelayedCall.restart(true);
+				}
+			}).pause();
+		}
+		id && (_ids[id] = self);
+		trigger = self.trigger = Observer._getTarget(trigger || (pin !== true && pin));
+
+		// if a trigger has some kind of scroll-related effect applied that could contaminate the "y" or "x" position (like a ScrollSmoother effect), we needed a way to temporarily revert it, so we use the stRevert property of the gsCache. It can return another function that we'll call at the end so it can return to its normal state.
+		customRevertReturn = trigger && trigger._gsap && trigger._gsap.stRevert;
+		customRevertReturn && (customRevertReturn = customRevertReturn(self));
+
+		pin = pin === true ? trigger : Observer._getTarget(pin);
+		_isString(toggleClass) && (toggleClass = {targets: trigger, className: toggleClass});
+		if (pin) {
+			(pinSpacing === false || pinSpacing === _margin) || (pinSpacing = !pinSpacing && pin.parentNode && pin.parentNode.style && _getComputedStyle(pin.parentNode).display === "flex" ? false : _padding); // if the parent is display: flex, don't apply pinSpacing by default. We should check that pin.parentNode is an element (not shadow dom window)
+			self.pin = pin;
+			pinCache = gsap.core.getCache(pin);
+			if (!pinCache.spacer) { // record the spacer and pinOriginalState on the cache in case someone tries pinning the same element with MULTIPLE ScrollTriggers - we don't want to have multiple spacers or record the "original" pin state after it has already been affected by another ScrollTrigger.
+				if (pinSpacer) {
+					pinSpacer = Observer._getTarget(pinSpacer);
+					pinSpacer && !pinSpacer.nodeType && (pinSpacer = pinSpacer.current || pinSpacer.nativeElement); // for React & Angular
+					pinCache.spacerIsNative = !!pinSpacer;
+					pinSpacer && (pinCache.spacerState = _getState(pinSpacer));
+				}
+				pinCache.spacer = spacer = pinSpacer || _doc.createElement("div");
+				spacer.classList.add("pin-spacer");
+				id && spacer.classList.add("pin-spacer-" + id);
+				pinCache.pinState = pinOriginalState = _getState(pin);
+			} else {
+				pinOriginalState = pinCache.pinState;
+			}
+			vars.force3D !== false && gsap.set(pin, {force3D: true});
+			self.spacer = spacer = pinCache.spacer;
+			cs = _getComputedStyle(pin);
+			spacingStart = cs[pinSpacing + direction.os2];
+			pinGetter = gsap.getProperty(pin);
+			pinSetter = gsap.quickSetter(pin, direction.a, _px);
+			// pin.firstChild && !_maxScroll(pin, direction) && (pin.style.overflow = "hidden"); // protects from collapsing margins, but can have unintended consequences as demonstrated here: https://codepen.io/GreenSock/pen/1e42c7a73bfa409d2cf1e184e7a4248d so it was removed in favor of just telling people to set up their CSS to avoid the collapsing margins (overflow: hidden | auto is just one option. Another is border-top: 1px solid transparent).
+			_swapPinIn(pin, spacer, cs);
+			pinState = _getState(pin);
+		}
+		if (markers) {
+			markerVars = _isObject(markers) ? _setDefaults(markers, _markerDefaults) : _markerDefaults;
+			markerStartTrigger = _createMarker("scroller-start", id, scroller, direction, markerVars, 0);
+			markerEndTrigger = _createMarker("scroller-end", id, scroller, direction, markerVars, 0, markerStartTrigger);
+			offset = markerStartTrigger["offset" + direction.op.d2];
+			let content = Observer._getTarget(Observer._getProxyProp(scroller, "content") || scroller);
+			markerStart = this.markerStart = _createMarker("start", id, content, direction, markerVars, offset, 0, containerAnimation);
+			markerEnd = this.markerEnd = _createMarker("end", id, content, direction, markerVars, offset, 0, containerAnimation);
+			containerAnimation && (caMarkerSetter = gsap.quickSetter([markerStart, markerEnd], direction.a, _px));
+			if ((!useFixedPosition && !(Observer._proxies.length && Observer._getProxyProp(scroller, "fixedMarkers") === true))) {
+				_makePositionable(isViewport ? _body : scroller);
+				gsap.set([markerStartTrigger, markerEndTrigger], {force3D: true});
+				markerStartSetter = gsap.quickSetter(markerStartTrigger, direction.a, _px);
+				markerEndSetter = gsap.quickSetter(markerEndTrigger, direction.a, _px);
+			}
+		}
+
+		if (containerAnimation) {
+			let oldOnUpdate = containerAnimation.vars.onUpdate,
+				oldParams = containerAnimation.vars.onUpdateParams;
+			containerAnimation.eventCallback("onUpdate", () => {
+				self.update(0, 0, 1);
+				oldOnUpdate && oldOnUpdate.apply(containerAnimation, oldParams || []);
+			});
+		}
+
+		self.previous = () => _triggers[_triggers.indexOf(self) - 1];
+		self.next = () => _triggers[_triggers.indexOf(self) + 1];
+
+		self.revert = (revert, temp) => {
+			if (!temp) { return self.kill(true); } // for compatibility with gsap.context() and gsap.matchMedia() which call revert()
+			let r = revert !== false || !self.enabled,
+				prevRefreshing = _refreshing;
+			if (r !== self.isReverted) {
+				if (r) {
+					prevScroll = Math.max(scrollFunc(), self.scroll.rec || 0); // record the scroll so we can revert later (repositioning/pinning things can affect scroll position). In the static refresh() method, we first record all the scroll positions as a reference.
+					prevProgress = self.progress;
+					prevAnimProgress = animation && animation.progress();
+				}
+				markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(m => m.style.display = r ? "none" : "block");
+				if (r) {
+					_refreshing = self;
+					self.update(r); // make sure the pin is back in its original position so that all the measurements are correct. do this BEFORE swapping the pin out
+				}
+				if (pin && (!pinReparent || !self.isActive)) {
+					if (r) {
+						_swapPinOut(pin, spacer, pinOriginalState);
+					} else {
+						_swapPinIn(pin, spacer, _getComputedStyle(pin), spacerState);
+					}
+				}
+				r || self.update(r); // when we're restoring, the update should run AFTER swapping the pin into its pin-spacer.
+				_refreshing = prevRefreshing; // restore. We set it to true during the update() so that things fire properly in there.
+				self.isReverted = r;
+			}
+		};
+
+		self.refresh = (soft, force, position, pinOffset) => { // position is typically only defined if it's coming from setPositions() - it's a way to skip the normal parsing. pinOffset is also only from setPositions() and is mostly related to fancy stuff we need to do in ScrollSmoother with effects
+			if ((_refreshing || !self.enabled) && !force) {
+				return;
+			}
+			if (pin && soft && _lastScrollTime) {
+				_addListener(ScrollTrigger, "scrollEnd", _softRefresh);
+				return;
+			}
+			!_refreshingAll && onRefreshInit && onRefreshInit(self);
+			_refreshing = self;
+			if (tweenTo.tween && !position) { // we skip this if a position is passed in because typically that's from .setPositions() and it's best to allow in-progress snapping to continue.
+				tweenTo.tween.kill();
+				tweenTo.tween = 0;
+			}
+			scrubTween && scrubTween.pause();
+			invalidateOnRefresh && animation && animation.revert({kill: false}).invalidate();
+			self.isReverted || self.revert(true, true);
+			self._subPinOffset = false; // we'll set this to true in the sub-pins if we find any
+			let size = getScrollerSize(),
+				scrollerBounds = getScrollerOffsets(),
+				max = containerAnimation ? containerAnimation.duration() : _maxScroll(scroller, direction),
+				isFirstRefresh = change <= 0.01,
+				offset = 0,
+				otherPinOffset = pinOffset || 0,
+				parsedEnd = _isObject(position) ? position.end : vars.end,
+				parsedEndTrigger = vars.endTrigger || trigger,
+				parsedStart = _isObject(position) ? position.start : (vars.start || (vars.start === 0 || !trigger ? 0 : (pin ? "0 0" : "0 100%"))),
+				pinnedContainer = self.pinnedContainer = vars.pinnedContainer && Observer._getTarget(vars.pinnedContainer, self),
+				triggerIndex = (trigger && Math.max(0, _triggers.indexOf(self))) || 0,
+				i = triggerIndex,
+				cs, bounds, scroll, isVertical, override, curTrigger, curPin, oppositeScroll, initted, revertedPins, forcedOverflow, markerStartOffset, markerEndOffset;
+			if (markers && _isObject(position)) { // if we alter the start/end positions with .setPositions(), it generally feeds in absolute NUMBERS which don't convey information about where to line up the markers, so to keep it intuitive, we record how far the trigger positions shift after applying the new numbers and then offset by that much in the opposite direction. We do the same to the associated trigger markers too of course.
+				markerStartOffset = gsap.getProperty(markerStartTrigger, direction.p);
+				markerEndOffset = gsap.getProperty(markerEndTrigger, direction.p);
+			}
+			while (i--) { // user might try to pin the same element more than once, so we must find any prior triggers with the same pin, revert them, and determine how long they're pinning so that we can offset things appropriately. Make sure we revert from last to first so that things "rewind" properly.
+				curTrigger = _triggers[i];
+				curTrigger.end || curTrigger.refresh(0, 1) || (_refreshing = self); // if it's a timeline-based trigger that hasn't been fully initialized yet because it's waiting for 1 tick, just force the refresh() here, otherwise if it contains a pin that's supposed to affect other ScrollTriggers further down the page, they won't be adjusted properly.
+				curPin = curTrigger.pin;
+				if (curPin && (curPin === trigger || curPin === pin || curPin === pinnedContainer) && !curTrigger.isReverted) {
+					revertedPins || (revertedPins = []);
+					revertedPins.unshift(curTrigger); // we'll revert from first to last to make sure things reach their end state properly
+					curTrigger.revert(true, true);
+				}
+				if (curTrigger !== _triggers[i]) { // in case it got removed.
+					triggerIndex--;
+					i--;
+				}
+			}
+			_isFunction(parsedStart) && (parsedStart = parsedStart(self));
+			parsedStart = _parseClamp(parsedStart, "start", self);
+			start = _parsePosition(parsedStart, trigger, size, direction, scrollFunc(), markerStart, markerStartTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._startClamp && "_startClamp") || (pin ? -0.001 : 0);
+			_isFunction(parsedEnd) && (parsedEnd = parsedEnd(self));
+			if (_isString(parsedEnd) && !parsedEnd.indexOf("+=")) {
+				if (~parsedEnd.indexOf(" ")) {
+					parsedEnd = (_isString(parsedStart) ? parsedStart.split(" ")[0] : "") + parsedEnd;
+				} else {
+					offset = _offsetToPx(parsedEnd.substr(2), size);
+					parsedEnd = _isString(parsedStart) ? parsedStart : (containerAnimation ? gsap.utils.mapRange(0, containerAnimation.duration(), containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, start) : start) + offset; // _parsePosition won't factor in the offset if the start is a number, so do it here.
+					parsedEndTrigger = trigger;
+				}
+			}
+			parsedEnd = _parseClamp(parsedEnd, "end", self);
+			end = Math.max(start, _parsePosition(parsedEnd || (parsedEndTrigger ? "100% 0" : max), parsedEndTrigger, size, direction, scrollFunc() + offset, markerEnd, markerEndTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._endClamp && "_endClamp")) || -0.001;
+
+			offset = 0;
+			i = triggerIndex;
+			while (i--) {
+				curTrigger = _triggers[i];
+				curPin = curTrigger.pin;
+				if (curPin && curTrigger.start - curTrigger._pinPush <= start && !containerAnimation && curTrigger.end > 0) {
+					cs = curTrigger.end - (self._startClamp ? Math.max(0, curTrigger.start) : curTrigger.start);
+					if (((curPin === trigger && curTrigger.start - curTrigger._pinPush < start) || curPin === pinnedContainer) && isNaN(parsedStart)) { // numeric start values shouldn't be offset at all - treat them as absolute
+						offset += cs * (1 - curTrigger.progress);
+					}
+					curPin === pin && (otherPinOffset += cs);
+				}
+			}
+			start += offset;
+			end += offset;
+			self._startClamp && (self._startClamp += offset);
+
+			if (self._endClamp && !_refreshingAll) {
+				self._endClamp = end || -0.001;
+				end = Math.min(end, _maxScroll(scroller, direction));
+			}
+			change = (end - start) || ((start -= 0.01) && 0.001);
+
+			if (isFirstRefresh) { // on the very first refresh(), the prevProgress couldn't have been accurate yet because the start/end were never calculated, so we set it here. Before 3.11.5, it could lead to an inaccurate scroll position restoration with snapping.
+				prevProgress = gsap.utils.clamp(0, 1, gsap.utils.normalize(start, end, prevScroll));
+			}
+			self._pinPush = otherPinOffset;
+			if (markerStart && offset) { // offset the markers if necessary
+				cs = {};
+				cs[direction.a] = "+=" + offset;
+				pinnedContainer && (cs[direction.p] = "-=" + scrollFunc());
+				gsap.set([markerStart, markerEnd], cs);
+			}
+
+			if (pin && !(_clampingMax && self.end >= _maxScroll(scroller, direction))) {
+				cs = _getComputedStyle(pin);
+				isVertical = direction === Observer._vertical;
+				scroll = scrollFunc(); // recalculate because the triggers can affect the scroll
+				pinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;
+				if (!max && end > 1) { // makes sure the scroller has a scrollbar, otherwise if something has width: 100%, for example, it would be too big (exclude the scrollbar). See https://gsap.com/forums/topic/25182-scrolltrigger-width-of-page-increase-where-markers-are-set-to-false/
+					forcedOverflow = (isViewport ? (_doc.scrollingElement || _docEl) : scroller).style;
+					forcedOverflow = {style: forcedOverflow, value: forcedOverflow["overflow" + direction.a.toUpperCase()]};
+					if (isViewport && _getComputedStyle(_body)["overflow" + direction.a.toUpperCase()] !== "scroll") { // avoid an extra scrollbar if BOTH <html> and <body> have overflow set to "scroll"
+						forcedOverflow.style["overflow" + direction.a.toUpperCase()] = "scroll";
+					}
+				}
+				_swapPinIn(pin, spacer, cs);
+				pinState = _getState(pin);
+				// transforms will interfere with the top/left/right/bottom placement, so remove them temporarily. getBoundingClientRect() factors in transforms.
+				bounds = _getBounds(pin, true);
+				oppositeScroll = useFixedPosition && Observer._getScrollFunc(scroller, isVertical ? Observer._horizontal : Observer._vertical)();
+				if (pinSpacing) {
+					spacerState = [pinSpacing + direction.os2, change + otherPinOffset + _px];
+					spacerState.t = spacer;
+					i = (pinSpacing === _padding) ? _getSize(pin, direction) + change + otherPinOffset : 0;
+					if (i) {
+						spacerState.push(direction.d, i + _px); // for box-sizing: border-box (must include padding).
+						spacer.style.flexBasis !== "auto" && (spacer.style.flexBasis = i + _px);
+					}
+					_setState(spacerState);
+					if (pinnedContainer) { // in ScrollTrigger.refresh(), we need to re-evaluate the pinContainer's size because this pinSpacing may stretch it out, but we can't just add the exact distance because depending on layout, it may not push things down or it may only do so partially.
+						_triggers.forEach(t => {
+							if (t.pin === pinnedContainer && t.vars.pinSpacing !== false) {
+								t._subPinOffset = true;
+							}
+						});
+					}
+					useFixedPosition && scrollFunc(prevScroll);
+				} else {
+					i = _getSize(pin, direction);
+					i && spacer.style.flexBasis !== "auto" && (spacer.style.flexBasis = i + _px);
+				}
+				if (useFixedPosition) {
+					override = {
+						top: (bounds.top + (isVertical ? scroll - start : oppositeScroll)) + _px,
+						left: (bounds.left + (isVertical ? oppositeScroll : scroll - start)) + _px,
+						boxSizing: "border-box",
+						position: "fixed"
+					};
+					override[_width] = override["max" + _Width] = Math.ceil(bounds.width) + _px;
+					override[_height] = override["max" + _Height] = Math.ceil(bounds.height) + _px;
+					override[_margin] = override[_margin + _Top] = override[_margin + _Right] = override[_margin + _Bottom] = override[_margin + _Left] = "0";
+					override[_padding] = cs[_padding];
+					override[_padding + _Top] = cs[_padding + _Top];
+					override[_padding + _Right] = cs[_padding + _Right];
+					override[_padding + _Bottom] = cs[_padding + _Bottom];
+					override[_padding + _Left] = cs[_padding + _Left];
+					pinActiveState = _copyState(pinOriginalState, override, pinReparent);
+					_refreshingAll && scrollFunc(0);
+				}
+				if (animation) { // the animation might be affecting the transform, so we must jump to the end, check the value, and compensate accordingly. Otherwise, when it becomes unpinned, the pinSetter() will get set to a value that doesn't include whatever the animation did.
+					initted = animation._initted; // if not, we must invalidate() after this step, otherwise it could lock in starting values prematurely.
+					_suppressOverwrites(1);
+					animation.render(animation.duration(), true, true);
+					pinChange = pinGetter(direction.a) - pinStart + change + otherPinOffset;
+					pinMoves = Math.abs(change - pinChange) > 1;
+					useFixedPosition && pinMoves && pinActiveState.splice(pinActiveState.length - 2, 2); // transform is the last property/value set in the state Array. Since the animation is controlling that, we should omit it.
+					animation.render(0, true, true);
+					initted || animation.invalidate(true);
+					animation.parent || animation.totalTime(animation.totalTime()); // if, for example, a toggleAction called play() and then refresh() happens and when we render(1) above, it would cause the animation to complete and get removed from its parent, so this makes sure it gets put back in.
+					_suppressOverwrites(0);
+				} else {
+					pinChange = change;
+				}
+				forcedOverflow && (forcedOverflow.value ? (forcedOverflow.style["overflow" + direction.a.toUpperCase()] = forcedOverflow.value) : forcedOverflow.style.removeProperty("overflow-" + direction.a));
+			} else if (trigger && scrollFunc() && !containerAnimation) { // it may be INSIDE a pinned element, so walk up the tree and look for any elements with _pinOffset to compensate because anything with pinSpacing that's already scrolled would throw off the measurements in getBoundingClientRect()
+				bounds = trigger.parentNode;
+				while (bounds && bounds !== _body) {
+					if (bounds._pinOffset) {
+						start -= bounds._pinOffset;
+						end -= bounds._pinOffset;
+					}
+					bounds = bounds.parentNode;
+				}
+			}
+			revertedPins && revertedPins.forEach(t => t.revert(false, true));
+			self.start = start;
+			self.end = end;
+			scroll1 = scroll2 = _refreshingAll ? prevScroll : scrollFunc(); // reset velocity
+			if (!containerAnimation && !_refreshingAll) {
+				scroll1 < prevScroll && scrollFunc(prevScroll);
+				self.scroll.rec = 0;
+			}
+			self.revert(false, true);
+			lastRefresh = _getTime();
+			if (snapDelayedCall) {
+				lastSnap = -1; // just so snapping gets re-enabled, clear out any recorded last value
+				// self.isActive && scrollFunc(start + change * prevProgress); // previously this line was here to ensure that when snapping kicks in, it's from the previous progress but in some cases that's not desirable, like an all-page ScrollTrigger when new content gets added to the page, that'd totally change the progress.
+				snapDelayedCall.restart(true);
+			}
+			_refreshing = 0;
+			animation && isToggle && (animation._initted || prevAnimProgress) && animation.progress() !== prevAnimProgress && animation.progress(prevAnimProgress || 0, true).render(animation.time(), true, true); // must force a re-render because if saveStyles() was used on the target(s), the styles could have been wiped out during the refresh().
+			if (isFirstRefresh || prevProgress !== self.progress || containerAnimation || invalidateOnRefresh) { // ensures that the direction is set properly (when refreshing, progress is set back to 0 initially, then back again to wherever it needs to be) and that callbacks are triggered.
+				animation && !isToggle && animation.totalProgress(containerAnimation && start < -0.001 && !prevProgress ? gsap.utils.normalize(start, end, 0) : prevProgress, true); // to avoid issues where animation callbacks like onStart aren't triggered.
+				self.progress = isFirstRefresh || ((scroll1 - start) / change === prevProgress) ? 0 : prevProgress;
+			}
+			pin && pinSpacing && (spacer._pinOffset = Math.round(self.progress * pinChange));
+			scrubTween && scrubTween.invalidate();
+
+			if (!isNaN(markerStartOffset)) { // numbers were passed in for the position which are absolute, so instead of just putting the markers at the very bottom of the viewport, we figure out how far they shifted down (it's safe to assume they were originally positioned in closer relation to the trigger element with values like "top", "center", a percentage or whatever, so we offset that much in the opposite direction to basically revert them to the relative position thy were at previously.
+				markerStartOffset -= gsap.getProperty(markerStartTrigger, direction.p);
+				markerEndOffset -= gsap.getProperty(markerEndTrigger, direction.p);
+				_shiftMarker(markerStartTrigger, direction, markerStartOffset);
+				_shiftMarker(markerStart, direction, markerStartOffset - (pinOffset || 0));
+				_shiftMarker(markerEndTrigger, direction, markerEndOffset);
+				_shiftMarker(markerEnd, direction, markerEndOffset - (pinOffset || 0));
+			}
+
+			isFirstRefresh && !_refreshingAll && self.update(); // edge case - when you reload a page when it's already scrolled down, some browsers fire a "scroll" event before DOMContentLoaded, triggering an updateAll(). If we don't update the self.progress as part of refresh(), then when it happens next, it may record prevProgress as 0 when it really shouldn't, potentially causing a callback in an animation to fire again.
+
+			if (onRefresh && !_refreshingAll && !executingOnRefresh) { // when refreshing all, we do extra work to correct pinnedContainer sizes and ensure things don't exceed the maxScroll, so we should do all the refreshes at the end after all that work so that the start/end values are corrected.
+				executingOnRefresh = true;
+				onRefresh(self);
+				executingOnRefresh = false;
+			}
+		};
+
+		self.getVelocity = () => ((scrollFunc() - scroll2) / (_getTime() - _time2) * 1000) || 0;
+
+		self.endAnimation = () => {
+			_endAnimation(self.callbackAnimation);
+			if (animation) {
+				scrubTween ? scrubTween.progress(1) : (!animation.paused() ? _endAnimation(animation, animation.reversed()) : isToggle || _endAnimation(animation, self.direction < 0, 1));
+			}
+		};
+
+		self.labelToScroll = label => animation && animation.labels && ((start || self.refresh() || start) + (animation.labels[label] / animation.duration()) * change) || 0;
+
+		self.getTrailing = name => {
+			let i = _triggers.indexOf(self),
+				a = self.direction > 0 ? _triggers.slice(0, i).reverse() : _triggers.slice(i+1);
+			return (_isString(name) ? a.filter(t => t.vars.preventOverlaps === name) : a).filter(t => self.direction > 0 ? t.end <= start : t.start >= end);
+		};
+
+
+		self.update = (reset, recordVelocity, forceFake) => {
+			if (containerAnimation && !forceFake && !reset) {
+				return;
+			}
+			let scroll = _refreshingAll === true ? prevScroll : self.scroll(),
+				p = reset ? 0 : (scroll - start) / change,
+				clipped = p < 0 ? 0 : p > 1 ? 1 : p || 0,
+				prevProgress = self.progress,
+				isActive, wasActive, toggleState, action, stateChanged, toggled, isAtMax, isTakingAction;
+			if (recordVelocity) {
+				scroll2 = scroll1;
+				scroll1 = containerAnimation ? scrollFunc() : scroll;
+				if (snap) {
+					snap2 = snap1;
+					snap1 = animation && !isToggle ? animation.totalProgress() : clipped;
+				}
+			}
+			// anticipate the pinning a few ticks ahead of time based on velocity to avoid a visual glitch due to the fact that most browsers do scrolling on a separate thread (not synced with requestAnimationFrame).
+			if (anticipatePin && pin && !_refreshing && !_startup && _lastScrollTime) {
+				if (!clipped && start < scroll + ((scroll - scroll2) / (_getTime() - _time2)) * anticipatePin) {
+					clipped = 0.0001;
+				} else if (clipped === 1 && end > scroll + ((scroll - scroll2) / (_getTime() - _time2)) * anticipatePin) {
+					clipped = 0.9999;
+				}
+			}
+			if (clipped !== prevProgress && self.enabled) {
+				isActive = self.isActive = !!clipped && clipped < 1;
+				wasActive = !!prevProgress && prevProgress < 1;
+				toggled = isActive !== wasActive;
+				stateChanged = toggled || !!clipped !== !!prevProgress; // could go from start all the way to end, thus it didn't toggle but it did change state in a sense (may need to fire a callback)
+				self.direction = clipped > prevProgress ? 1 : -1;
+				self.progress = clipped;
+
+				if (stateChanged && !_refreshing) {
+					toggleState = clipped && !prevProgress ? 0 : clipped === 1 ? 1 : prevProgress === 1 ? 2 : 3; // 0 = enter, 1 = leave, 2 = enterBack, 3 = leaveBack (we prioritize the FIRST encounter, thus if you scroll really fast past the onEnter and onLeave in one tick, it'd prioritize onEnter.
+					if (isToggle) {
+						action = (!toggled && toggleActions[toggleState + 1] !== "none" && toggleActions[toggleState + 1]) || toggleActions[toggleState]; // if it didn't toggle, that means it shot right past and since we prioritize the "enter" action, we should switch to the "leave" in this case (but only if one is defined)
+						isTakingAction = animation && (action === "complete" || action === "reset" || action in animation);
+					}
+				}
+
+				preventOverlaps && (toggled || isTakingAction) && (isTakingAction || scrub || !animation) && (_isFunction(preventOverlaps) ? preventOverlaps(self) : self.getTrailing(preventOverlaps).forEach(t => t.endAnimation()));
+
+				if (!isToggle) {
+					if (scrubTween && !_refreshing && !_startup) {
+						(scrubTween._dp._time - scrubTween._start !== scrubTween._time) && scrubTween.render(scrubTween._dp._time - scrubTween._start); // if there's a scrub on both the container animation and this one (or a ScrollSmoother), the update order would cause this one not to have rendered yet, so it wouldn't make any progress before we .restart() it heading toward the new progress so it'd appear stuck thus we force a render here.
+						if (scrubTween.resetTo) {
+							scrubTween.resetTo("totalProgress", clipped, animation._tTime / animation._tDur);
+						} else { // legacy support (courtesy), before 3.10.0
+							scrubTween.vars.totalProgress = clipped;
+							scrubTween.invalidate().restart();
+						}
+					} else if (animation) {
+						animation.totalProgress(clipped, !!(_refreshing && (lastRefresh || reset)));
+					}
+				}
+				if (pin) {
+					reset && pinSpacing && (spacer.style[pinSpacing + direction.os2] = spacingStart);
+					if (!useFixedPosition) {
+						pinSetter(_round(pinStart + pinChange * clipped));
+					} else if (stateChanged) {
+						isAtMax = !reset && clipped > prevProgress && end + 1 > scroll && scroll + 1 >= _maxScroll(scroller, direction); // if it's at the VERY end of the page, don't switch away from position: fixed because it's pointless and it could cause a brief flash when the user scrolls back up (when it gets pinned again)
+						if (pinReparent) {
+							if (!reset && (isActive || isAtMax)) {
+								let bounds = _getBounds(pin, true),
+									offset = scroll - start;
+								_reparent(pin, _body, (bounds.top + (direction === Observer._vertical ? offset : 0)) + _px, (bounds.left + (direction === Observer._vertical ? 0 : offset)) + _px);
+							} else {
+								_reparent(pin, spacer);
+							}
+						}
+						_setState(isActive || isAtMax ? pinActiveState : pinState);
+						(pinMoves && clipped < 1 && isActive) || pinSetter(pinStart + (clipped === 1 && !isAtMax ? pinChange : 0));
+					}
+				}
+				snap && !tweenTo.tween && !_refreshing && !_startup && snapDelayedCall.restart(true);
+				toggleClass && (toggled || (once && clipped && (clipped < 1 || !_limitCallbacks))) && _toArray(toggleClass.targets).forEach(el => el.classList[isActive || once ? "add" : "remove"](toggleClass.className)); // classes could affect positioning, so do it even if reset or refreshing is true.
+				onUpdate && !isToggle && !reset && onUpdate(self);
+				if (stateChanged && !_refreshing) {
+					if (isToggle) {
+						if (isTakingAction) {
+							if (action === "complete") {
+								animation.pause().totalProgress(1);
+							} else if (action === "reset") {
+								animation.restart(true).pause();
+							} else if (action === "restart") {
+								animation.restart(true);
+							} else {
+								animation[action]();
+							}
+						}
+						onUpdate && onUpdate(self);
+					}
+					if (toggled || !_limitCallbacks) { // on startup, the page could be scrolled and we don't want to fire callbacks that didn't toggle. For example onEnter shouldn't fire if the ScrollTrigger isn't actually entered.
+						onToggle && toggled && _callback(self, onToggle);
+						callbacks[toggleState] && _callback(self, callbacks[toggleState]);
+						once && (clipped === 1 ? self.kill(false, 1) : (callbacks[toggleState] = 0)); // a callback shouldn't be called again if once is true.
+						if (!toggled) { // it's possible to go completely past, like from before the start to after the end (or vice-versa) in which case BOTH callbacks should be fired in that order
+							toggleState = clipped === 1 ? 1 : 3;
+							callbacks[toggleState] && _callback(self, callbacks[toggleState]);
+						}
+					}
+					if (fastScrollEnd && !isActive && Math.abs(self.getVelocity()) > (_isNumber(fastScrollEnd) ? fastScrollEnd : 2500)) {
+						_endAnimation(self.callbackAnimation);
+						scrubTween ? scrubTween.progress(1) : _endAnimation(animation, action === "reverse" ? 1 : !clipped, 1);
+					}
+				} else if (isToggle && onUpdate && !_refreshing) {
+					onUpdate(self);
+				}
+			}
+			// update absolutely-positioned markers (only if the scroller isn't the viewport)
+			if (markerEndSetter) {
+				let n = containerAnimation ? scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0) : scroll;
+				markerStartSetter(n + (markerStartTrigger._isFlipped ? 1 : 0));
+				markerEndSetter(n);
+			}
+			caMarkerSetter && caMarkerSetter(-scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0));
+		};
+
+		self.enable = (reset, refresh) => {
+			if (!self.enabled) {
+				self.enabled = true;
+				_addListener(scroller, "resize", _onResize);
+				isViewport || _addListener(scroller, "scroll", _onScroll);
+				onRefreshInit && _addListener(ScrollTrigger, "refreshInit", onRefreshInit);
+				if (reset !== false) {
+					self.progress = prevProgress = 0;
+					scroll1 = scroll2 = lastSnap = scrollFunc();
+				}
+				refresh !== false && self.refresh();
+			}
+		};
+
+		self.getTween = snap => snap && tweenTo ? tweenTo.tween : scrubTween;
+
+		self.setPositions = (newStart, newEnd, keepClamp, pinOffset) => { // doesn't persist after refresh()! Intended to be a way to override values that were set during refresh(), like you could set it in onRefresh()
+			if (containerAnimation) { // convert ratios into scroll positions. Remember, start/end values on ScrollTriggers that have a containerAnimation refer to the time (in seconds), NOT scroll positions.
+				let st = containerAnimation.scrollTrigger,
+					duration = containerAnimation.duration(),
+					change = st.end - st.start;
+				newStart = st.start + change * newStart / duration;
+				newEnd = st.start + change * newEnd / duration;
+			}
+			self.refresh(false, false, {start: _keepClamp(newStart, keepClamp && !!self._startClamp), end: _keepClamp(newEnd, keepClamp && !!self._endClamp)}, pinOffset);
+			self.update();
+		};
+
+		self.adjustPinSpacing = amount => {
+			if (spacerState && amount) {
+				let i = spacerState.indexOf(direction.d) + 1;
+				spacerState[i] = (parseFloat(spacerState[i]) + amount) + _px;
+				spacerState[1] = (parseFloat(spacerState[1]) + amount) + _px;
+				_setState(spacerState);
+			}
+		};
+
+		self.disable = (reset, allowAnimation) => {
+			if (self.enabled) {
+				reset !== false && self.revert(true, true);
+				self.enabled = self.isActive = false;
+				allowAnimation || (scrubTween && scrubTween.pause());
+				prevScroll = 0;
+				pinCache && (pinCache.uncache = 1);
+				onRefreshInit && _removeListener(ScrollTrigger, "refreshInit", onRefreshInit);
+				if (snapDelayedCall) {
+					snapDelayedCall.pause();
+					tweenTo.tween && tweenTo.tween.kill() && (tweenTo.tween = 0);
+				}
+				if (!isViewport) {
+					let i = _triggers.length;
+					while (i--) {
+						if (_triggers[i].scroller === scroller && _triggers[i] !== self) {
+							return; //don't remove the listeners if there are still other triggers referencing it.
+						}
+					}
+					_removeListener(scroller, "resize", _onResize);
+					isViewport || _removeListener(scroller, "scroll", _onScroll);
+				}
+			}
+		};
+
+		self.kill = (revert, allowAnimation) => {
+			self.disable(revert, allowAnimation);
+			scrubTween && !allowAnimation && scrubTween.kill();
+			id && (delete _ids[id]);
+			let i = _triggers.indexOf(self);
+			i >= 0 && _triggers.splice(i, 1);
+			i === _i && _direction > 0 && _i--; // if we're in the middle of a refresh() or update(), splicing would cause skips in the index, so adjust...
+
+			// if no other ScrollTrigger instances of the same scroller are found, wipe out any recorded scroll position. Otherwise, in a single page application, for example, it could maintain scroll position when it really shouldn't.
+			i = 0;
+			_triggers.forEach(t => t.scroller === self.scroller && (i = 1));
+			i || _refreshingAll || (self.scroll.rec = 0);
+
+			if (animation) {
+				animation.scrollTrigger = null;
+				revert && animation.revert({kill: false});
+				allowAnimation || animation.kill();
+			}
+			markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(m => m.parentNode && m.parentNode.removeChild(m));
+			_primary === self && (_primary = 0);
+			if (pin) {
+				pinCache && (pinCache.uncache = 1);
+				i = 0;
+				_triggers.forEach(t => t.pin === pin && i++);
+				i || (pinCache.spacer = 0); // if there aren't any more ScrollTriggers with the same pin, remove the spacer, otherwise it could be contaminated with old/stale values if the user re-creates a ScrollTrigger for the same element.
+			}
+			vars.onKill && vars.onKill(self);
+		};
+
+		_triggers.push(self);
+		self.enable(false, false);
+		customRevertReturn && customRevertReturn(self);
+
+		if (animation && animation.add && !change) { // if the animation is a timeline, it may not have been populated yet, so it wouldn't render at the proper place on the first refresh(), thus we should schedule one for the next tick. If "change" is defined, we know it must be re-enabling, thus we can refresh() right away.
+			let updateFunc = self.update; // some browsers may fire a scroll event BEFORE a tick elapses and/or the DOMContentLoaded fires. So there's a chance update() will be called BEFORE a refresh() has happened on a Timeline-attached ScrollTrigger which means the start/end won't be calculated yet. We don't want to add conditional logic inside the update() method (like check to see if end is defined and if not, force a refresh()) because that's a function that gets hit a LOT (performance). So we swap out the real update() method for this one that'll re-attach it the first time it gets called and of course forces a refresh().
+			self.update = () => {
+				self.update = updateFunc;
+				start || end || self.refresh();
+			};
+			gsap.delayedCall(0.01, self.update);
+			change = 0.01;
+			start = end = 0;
+		} else {
+			self.refresh();
+		}
+		pin && _queueRefreshAll(); // pinning could affect the positions of other things, so make sure we queue a full refresh()
+	}
+
+
+	static register(core) {
+		if (!_coreInitted) {
+			gsap = core || _getGSAP();
+			_windowExists() && window.document && ScrollTrigger.enable();
+			_coreInitted = _enabled;
+		}
+		return _coreInitted;
+	}
+
+	static defaults(config) {
+		if (config) {
+			for (let p in config) {
+				_defaults[p] = config[p];
+			}
+		}
+		return _defaults;
+	}
+
+	static disable(reset, kill) {
+		_enabled = 0;
+		_triggers.forEach(trigger => trigger[kill ? "kill" : "disable"](reset));
+		_removeListener(_win, "wheel", _onScroll);
+		_removeListener(_doc, "scroll", _onScroll);
+		clearInterval(_syncInterval);
+		_removeListener(_doc, "touchcancel", _passThrough);
+		_removeListener(_body, "touchstart", _passThrough);
+		_multiListener(_removeListener, _doc, "pointerdown,touchstart,mousedown", _pointerDownHandler);
+		_multiListener(_removeListener, _doc, "pointerup,touchend,mouseup", _pointerUpHandler);
+		_resizeDelay.kill();
+		_iterateAutoRefresh(_removeListener);
+		for (let i = 0; i < Observer._scrollers.length; i+=3) {
+			_wheelListener(_removeListener, Observer._scrollers[i], Observer._scrollers[i+1]);
+			_wheelListener(_removeListener, Observer._scrollers[i], Observer._scrollers[i+2]);
+		}
+	}
+
+	static enable() {
+		_win = window;
+		_doc = document;
+		_docEl = _doc.documentElement;
+		_body = _doc.body;
+		if (gsap) {
+			_toArray = gsap.utils.toArray;
+			_clamp = gsap.utils.clamp;
+			_context = gsap.core.context || _passThrough;
+			_suppressOverwrites = gsap.core.suppressOverwrites || _passThrough;
+			_scrollRestoration = _win.history.scrollRestoration || "auto";
+			_lastScroll = _win.pageYOffset;
+			gsap.core.globals("ScrollTrigger", ScrollTrigger); // must register the global manually because in Internet Explorer, functions (classes) don't have a "name" property.
+			if (_body) {
+				_enabled = 1;
+				_div100vh = document.createElement("div"); // to solve mobile browser address bar show/hide resizing, we shouldn't rely on window.innerHeight. Instead, use a <div> with its height set to 100vh and measure that since that's what the scrolling is based on anyway and it's not affected by address bar showing/hiding.
+				_div100vh.style.height = "100vh";
+				_div100vh.style.position = "absolute";
+				_refresh100vh();
+				_rafBugFix();
+				Observer.Observer.register(gsap);
+				// isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.
+				ScrollTrigger.isTouch = Observer.Observer.isTouch;
+				_fixIOSBug = Observer.Observer.isTouch && /(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent); // since 2017, iOS has had a bug that causes event.clientX/Y to be inaccurate when a scroll occurs, thus we must alternate ignoring every other touchmove event to work around it. See https://bugs.webkit.org/show_bug.cgi?id=181954 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503
+				_ignoreMobileResize = Observer.Observer.isTouch === 1;
+				_addListener(_win, "wheel", _onScroll); // mostly for 3rd party smooth scrolling libraries.
+				_root = [_win, _doc, _docEl, _body];
+				if (gsap.matchMedia) {
+					ScrollTrigger.matchMedia = vars => {
+						let mm = gsap.matchMedia(),
+							p;
+						for (p in vars) {
+							mm.add(p, vars[p]);
+						}
+						return mm;
+					};
+					gsap.addEventListener("matchMediaInit", () => _revertAll());
+					gsap.addEventListener("matchMediaRevert", () => _revertRecorded());
+					gsap.addEventListener("matchMedia", () => {
+						_refreshAll(0, 1);
+						_dispatch("matchMedia");
+					});
+					gsap.matchMedia("(orientation: portrait)", () => { // when orientation changes, we should take new base measurements for the ignoreMobileResize feature.
+						_setBaseDimensions();
+						return _setBaseDimensions;
+					});
+				} else {
+					console.warn("Requires GSAP 3.11.0 or later");
+				}
+				_setBaseDimensions();
+				_addListener(_doc, "scroll", _onScroll); // some browsers (like Chrome), the window stops dispatching scroll events on the window if you scroll really fast, but it's consistent on the document!
+				let bodyStyle = _body.style,
+					border = bodyStyle.borderTopStyle,
+					AnimationProto = gsap.core.Animation.prototype,
+					bounds, i;
+				AnimationProto.revert || Object.defineProperty(AnimationProto, "revert", { value: function() { return this.time(-0.01, true); }}); // only for backwards compatibility (Animation.revert() was added after 3.10.4)
+				bodyStyle.borderTopStyle = "solid"; // works around an issue where a margin of a child element could throw off the bounds of the _body, making it seem like there's a margin when there actually isn't. The border ensures that the bounds are accurate.
+				bounds = _getBounds(_body);
+				Observer._vertical.m = Math.round(bounds.top + Observer._vertical.sc()) || 0; // accommodate the offset of the <body> caused by margins and/or padding
+				Observer._horizontal.m = Math.round(bounds.left + Observer._horizontal.sc()) || 0;
+				border ? (bodyStyle.borderTopStyle = border) : bodyStyle.removeProperty("border-top-style");
+				// TODO: (?) maybe move to leveraging the velocity mechanism in Observer and skip intervals.
+				_syncInterval = setInterval(_sync, 250);
+				gsap.delayedCall(0.5, () => _startup = 0);
+				_addListener(_doc, "touchcancel", _passThrough); // some older Android devices intermittently stop dispatching "touchmove" events if we don't listen for "touchcancel" on the document.
+				_addListener(_body, "touchstart", _passThrough); //works around Safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/
+				_multiListener(_addListener, _doc, "pointerdown,touchstart,mousedown", _pointerDownHandler);
+				_multiListener(_addListener, _doc, "pointerup,touchend,mouseup", _pointerUpHandler);
+				_transformProp = gsap.utils.checkPrefix("transform");
+				_stateProps.push(_transformProp);
+				_coreInitted = _getTime();
+				_resizeDelay = gsap.delayedCall(0.2, _refreshAll).pause();
+				_autoRefresh = [_doc, "visibilitychange", () => {
+					let w = _win.innerWidth,
+						h = _win.innerHeight;
+					if (_doc.hidden) {
+						_prevWidth = w;
+						_prevHeight = h;
+					} else if (_prevWidth !== w || _prevHeight !== h) {
+						_onResize();
+					}
+				}, _doc, "DOMContentLoaded", _refreshAll, _win, "load", _refreshAll, _win, "resize", _onResize];
+				_iterateAutoRefresh(_addListener);
+				_triggers.forEach(trigger => trigger.enable(0, 1));
+				for (i = 0; i < Observer._scrollers.length; i+=3) {
+					_wheelListener(_removeListener, Observer._scrollers[i], Observer._scrollers[i+1]);
+					_wheelListener(_removeListener, Observer._scrollers[i], Observer._scrollers[i+2]);
+				}
+			}
+		}
+	}
+
+	static config(vars) {
+		("limitCallbacks" in vars) && (_limitCallbacks = !!vars.limitCallbacks);
+		let ms = vars.syncInterval;
+		ms && clearInterval(_syncInterval) || ((_syncInterval = ms) && setInterval(_sync, ms));
+		("ignoreMobileResize" in vars) && (_ignoreMobileResize = ScrollTrigger.isTouch === 1 && vars.ignoreMobileResize);
+		if ("autoRefreshEvents" in vars) {
+			_iterateAutoRefresh(_removeListener) || _iterateAutoRefresh(_addListener, vars.autoRefreshEvents || "none");
+			_ignoreResize = (vars.autoRefreshEvents + "").indexOf("resize") === -1;
+		}
+	}
+
+	static scrollerProxy(target, vars) {
+		let t = Observer._getTarget(target),
+			i = Observer._scrollers.indexOf(t),
+			isViewport = _isViewport(t);
+		if (~i) {
+			Observer._scrollers.splice(i, isViewport ? 6 : 2);
+		}
+		if (vars) {
+			isViewport ? Observer._proxies.unshift(_win, vars, _body, vars, _docEl, vars) : Observer._proxies.unshift(t, vars);
+		}
+	}
+
+	static clearMatchMedia(query) {
+		_triggers.forEach(t => t._ctx && t._ctx.query === query && t._ctx.kill(true, true));
+	}
+
+	static isInViewport(element, ratio, horizontal) {
+		let bounds = (_isString(element) ? Observer._getTarget(element) : element).getBoundingClientRect(),
+			offset = bounds[horizontal ? _width : _height] * ratio || 0;
+		return horizontal ? bounds.right - offset > 0 && bounds.left + offset < _win.innerWidth : bounds.bottom - offset > 0 && bounds.top + offset < _win.innerHeight;
+	}
+
+	static positionInViewport(element, referencePoint, horizontal) {
+		_isString(element) && (element = Observer._getTarget(element));
+		let bounds = element.getBoundingClientRect(),
+			size = bounds[horizontal ? _width : _height],
+			offset = referencePoint == null ? size / 2 : ((referencePoint in _keywords) ? _keywords[referencePoint] * size : ~referencePoint.indexOf("%") ? parseFloat(referencePoint) * size / 100 : parseFloat(referencePoint) || 0);
+		return horizontal ? (bounds.left + offset) / _win.innerWidth : (bounds.top + offset) / _win.innerHeight;
+	}
+
+	static killAll(allowListeners) {
+		_triggers.slice(0).forEach(t => t.vars.id !== "ScrollSmoother" && t.kill());
+		if (allowListeners !== true) {
+			let listeners = _listeners.killAll || [];
+			_listeners = {};
+			listeners.forEach(f => f());
+		}
+	}
+
+}
+
+ScrollTrigger.version = "3.12.5";
+ScrollTrigger.saveStyles = targets => targets ? _toArray(targets).forEach(target => { // saved styles are recorded in a consecutive alternating Array, like [element, cssText, transform attribute, cache, matchMedia, ...]
+	if (target && target.style) {
+		let i = _savedStyles.indexOf(target);
+		i >= 0 && _savedStyles.splice(i, 5);
+		_savedStyles.push(target, target.style.cssText, target.getBBox && target.getAttribute("transform"), gsap.core.getCache(target), _context());
+	}
+}) : _savedStyles;
+ScrollTrigger.revert = (soft, media) => _revertAll(!soft, media);
+ScrollTrigger.create = (vars, animation) => new ScrollTrigger(vars, animation);
+ScrollTrigger.refresh = safe => safe ? _onResize() : (_coreInitted || ScrollTrigger.register()) && _refreshAll(true);
+ScrollTrigger.update = force => ++Observer._scrollers.cache && _updateAll(force === true ? 2 : 0);
+ScrollTrigger.clearScrollMemory = _clearScrollMemory;
+ScrollTrigger.maxScroll = (element, horizontal) => _maxScroll(element, horizontal ? Observer._horizontal : Observer._vertical);
+ScrollTrigger.getScrollFunc = (element, horizontal) => Observer._getScrollFunc(Observer._getTarget(element), horizontal ? Observer._horizontal : Observer._vertical);
+ScrollTrigger.getById = id => _ids[id];
+ScrollTrigger.getAll = () => _triggers.filter(t => t.vars.id !== "ScrollSmoother"); // it's common for people to ScrollTrigger.getAll(t => t.kill()) on page routes, for example, and we don't want it to ruin smooth scrolling by killing the main ScrollSmoother one.
+ScrollTrigger.isScrolling = () => !!_lastScrollTime;
+ScrollTrigger.snapDirectional = _snapDirectional;
+ScrollTrigger.addEventListener = (type, callback) => {
+	let a = _listeners[type] || (_listeners[type] = []);
+	~a.indexOf(callback) || a.push(callback);
+};
+ScrollTrigger.removeEventListener = (type, callback) => {
+	let a = _listeners[type],
+		i = a && a.indexOf(callback);
+	i >= 0 && a.splice(i, 1);
+};
+ScrollTrigger.batch = (targets, vars) => {
+	let result = [],
+		varsCopy = {},
+		interval = vars.interval || 0.016,
+		batchMax = vars.batchMax || 1e9,
+		proxyCallback = (type, callback) => {
+			let elements = [],
+				triggers = [],
+				delay = gsap.delayedCall(interval, () => {callback(elements, triggers); elements = []; triggers = [];}).pause();
+			return self => {
+				elements.length || delay.restart(true);
+				elements.push(self.trigger);
+				triggers.push(self);
+				batchMax <= elements.length && delay.progress(1);
+			};
+		},
+		p;
+	for (p in vars) {
+		varsCopy[p] = (p.substr(0, 2) === "on" && _isFunction(vars[p]) && p !== "onRefreshInit") ? proxyCallback(p, vars[p]) : vars[p];
+	}
+	if (_isFunction(batchMax)) {
+		batchMax = batchMax();
+		_addListener(ScrollTrigger, "refresh", () => batchMax = vars.batchMax());
+	}
+	_toArray(targets).forEach(target => {
+		let config = {};
+		for (p in varsCopy) {
+			config[p] = varsCopy[p];
+		}
+		config.trigger = target;
+		result.push(ScrollTrigger.create(config));
+	});
+	return result;
+};
+
+
+// to reduce file size. clamps the scroll and also returns a duration multiplier so that if the scroll gets chopped shorter, the duration gets curtailed as well (otherwise if you're very close to the top of the page, for example, and swipe up really fast, it'll suddenly slow down and take a long time to reach the top).
+let _clampScrollAndGetDurationMultiplier = (scrollFunc, current, end, max) => {
+		current > max ? scrollFunc(max) : current < 0 && scrollFunc(0);
+		return end > max ? (max - current) / (end - current) : end < 0 ? current / (current - end) : 1;
+	},
+	_allowNativePanning = (target, direction) => {
+		if (direction === true) {
+			target.style.removeProperty("touch-action");
+		} else {
+			target.style.touchAction = direction === true ? "auto" : direction ? "pan-" + direction + (Observer.Observer.isTouch ? " pinch-zoom" : "") : "none"; // note: Firefox doesn't support it pinch-zoom properly, at least in addition to a pan-x or pan-y.
+		}
+		target === _docEl && _allowNativePanning(_body, direction);
+	},
+	_overflow = {auto: 1, scroll: 1},
+	_nestedScroll = ({event, target, axis}) => {
+		let node = (event.changedTouches ? event.changedTouches[0] : event).target,
+			cache = node._gsap || gsap.core.getCache(node),
+			time = _getTime(), cs;
+		if (!cache._isScrollT || time - cache._isScrollT > 2000) { // cache for 2 seconds to improve performance.
+			while (node && node !== _body && ((node.scrollHeight <= node.clientHeight && node.scrollWidth <= node.clientWidth) || !(_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]))) node = node.parentNode;
+			cache._isScroll = node && node !== target && !_isViewport(node) && (_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]);
+			cache._isScrollT = time;
+		}
+		if (cache._isScroll || axis === "x") {
+			event.stopPropagation();
+			event._gsapAllow = true;
+		}
+	},
+	// capture events on scrollable elements INSIDE the <body> and allow those by calling stopPropagation() when we find a scrollable ancestor
+	_inputObserver = (target, type, inputs, nested) => Observer.Observer.create({
+		target: target,
+		capture: true,
+		debounce: false,
+		lockAxis: true,
+		type: type,
+		onWheel: (nested = nested && _nestedScroll),
+		onPress: nested,
+		onDrag: nested,
+		onScroll: nested,
+		onEnable: () => inputs && _addListener(_doc, Observer.Observer.eventTypes[0], _captureInputs, false, true),
+		onDisable: () => _removeListener(_doc, Observer.Observer.eventTypes[0], _captureInputs, true)
+	}),
+	_inputExp = /(input|label|select|textarea)/i,
+	_inputIsFocused,
+	_captureInputs = e => {
+		let isInput = _inputExp.test(e.target.tagName);
+		if (isInput || _inputIsFocused) {
+			e._gsapAllow = true;
+			_inputIsFocused = isInput;
+		}
+	},
+	_getScrollNormalizer = vars => {
+		_isObject(vars) || (vars = {});
+		vars.preventDefault = vars.isNormalizer = vars.allowClicks = true;
+		vars.type || (vars.type = "wheel,touch");
+		vars.debounce = !!vars.debounce;
+		vars.id = vars.id || "normalizer";
+		let {normalizeScrollX, momentum, allowNestedScroll, onRelease} = vars,
+			self, maxY,
+			target = Observer._getTarget(vars.target) || _docEl,
+			smoother = gsap.core.globals().ScrollSmoother,
+			smootherInstance = smoother && smoother.get(),
+			content = _fixIOSBug && ((vars.content && Observer._getTarget(vars.content)) || (smootherInstance && vars.content !== false && !smootherInstance.smooth() && smootherInstance.content())),
+			scrollFuncY = Observer._getScrollFunc(target, Observer._vertical),
+			scrollFuncX = Observer._getScrollFunc(target, Observer._horizontal),
+			scale = 1,
+			initialScale = (Observer.Observer.isTouch && _win.visualViewport ? _win.visualViewport.scale * _win.visualViewport.width : _win.outerWidth) / _win.innerWidth,
+			wheelRefresh = 0,
+			resolveMomentumDuration = _isFunction(momentum) ? () => momentum(self) : () => momentum || 2.8,
+			lastRefreshID, skipTouchMove,
+			inputObserver = _inputObserver(target, vars.type, true, allowNestedScroll),
+			resumeTouchMove = () => skipTouchMove = false,
+			scrollClampX = _passThrough,
+			scrollClampY = _passThrough,
+			updateClamps = () => {
+				maxY = _maxScroll(target, Observer._vertical);
+				scrollClampY = _clamp(_fixIOSBug ? 1 : 0, maxY);
+				normalizeScrollX && (scrollClampX = _clamp(0, _maxScroll(target, Observer._horizontal)));
+				lastRefreshID = _refreshID;
+			},
+			removeContentOffset = () => {
+				content._gsap.y = _round(parseFloat(content._gsap.y) + scrollFuncY.offset) + "px";
+				content.style.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " + parseFloat(content._gsap.y) + ", 0, 1)";
+				scrollFuncY.offset = scrollFuncY.cacheID = 0;
+			},
+			ignoreDrag = () => {
+				if (skipTouchMove) {
+					requestAnimationFrame(resumeTouchMove);
+					let offset = _round(self.deltaY / 2),
+						scroll = scrollClampY(scrollFuncY.v - offset);
+					if (content && scroll !== scrollFuncY.v + scrollFuncY.offset) {
+						scrollFuncY.offset = scroll - scrollFuncY.v;
+						let y = _round((parseFloat(content && content._gsap.y) || 0) - scrollFuncY.offset);
+						content.style.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " + y + ", 0, 1)";
+						content._gsap.y = y + "px";
+						scrollFuncY.cacheID = Observer._scrollers.cache;
+						_updateAll();
+					}
+					return true;
+				}
+				scrollFuncY.offset && removeContentOffset();
+				skipTouchMove = true;
+			},
+			tween, startScrollX, startScrollY, onStopDelayedCall,
+			onResize = () => { // if the window resizes, like on an iPhone which Apple FORCES the address bar to show/hide even if we event.preventDefault(), it may be scrolling too far now that the address bar is showing, so we must dynamically adjust the momentum tween.
+				updateClamps();
+				if (tween.isActive() && tween.vars.scrollY > maxY) {
+					scrollFuncY() > maxY ? tween.progress(1) && scrollFuncY(maxY) : tween.resetTo("scrollY", maxY);
+				}
+			};
+		content && gsap.set(content, {y: "+=0"}); // to ensure there's a cache (element._gsap)
+		vars.ignoreCheck = e => (_fixIOSBug && e.type === "touchmove" && ignoreDrag()) || (scale > 1.05 && e.type !== "touchstart") || self.isGesturing || (e.touches && e.touches.length > 1);
+		vars.onPress = () => {
+			skipTouchMove = false;
+			let prevScale = scale;
+			scale = _round(((_win.visualViewport && _win.visualViewport.scale) || 1) / initialScale);
+			tween.pause();
+			prevScale !== scale && _allowNativePanning(target, scale > 1.01 ? true : normalizeScrollX ? false : "x");
+			startScrollX = scrollFuncX();
+			startScrollY = scrollFuncY();
+			updateClamps();
+			lastRefreshID = _refreshID;
+		};
+		vars.onRelease = vars.onGestureStart = (self, wasDragging) => {
+			scrollFuncY.offset && removeContentOffset();
+			if (!wasDragging) {
+				onStopDelayedCall.restart(true);
+			} else {
+				Observer._scrollers.cache++; // make sure we're pulling the non-cached value
+				// alternate algorithm: durX = Math.min(6, Math.abs(self.velocityX / 800)),	dur = Math.max(durX, Math.min(6, Math.abs(self.velocityY / 800))); dur = dur * (0.4 + (1 - _power4In(dur / 6)) * 0.6)) * (momentumSpeed || 1)
+				let dur = resolveMomentumDuration(),
+					currentScroll, endScroll;
+				if (normalizeScrollX) {
+					currentScroll = scrollFuncX();
+					endScroll = currentScroll + (dur * 0.05 * -self.velocityX) / 0.227; // the constant .227 is from power4(0.05). velocity is inverted because scrolling goes in the opposite direction.
+					dur *= _clampScrollAndGetDurationMultiplier(scrollFuncX, currentScroll, endScroll, _maxScroll(target, Observer._horizontal));
+					tween.vars.scrollX = scrollClampX(endScroll);
+				}
+				currentScroll = scrollFuncY();
+				endScroll = currentScroll + (dur * 0.05 * -self.velocityY) / 0.227; // the constant .227 is from power4(0.05)
+				dur *= _clampScrollAndGetDurationMultiplier(scrollFuncY, currentScroll, endScroll, _maxScroll(target, Observer._vertical));
+				tween.vars.scrollY = scrollClampY(endScroll);
+				tween.invalidate().duration(dur).play(0.01);
+				if (_fixIOSBug && tween.vars.scrollY >= maxY || currentScroll >= maxY-1) { // iOS bug: it'll show the address bar but NOT fire the window "resize" event until the animation is done but we must protect against overshoot so we leverage an onUpdate to do so.
+					gsap.to({}, {onUpdate: onResize, duration: dur});
+				}
+			}
+			onRelease && onRelease(self);
+		};
+		vars.onWheel = () => {
+			tween._ts && tween.pause();
+			if (_getTime() - wheelRefresh > 1000) { // after 1 second, refresh the clamps otherwise that'll only happen when ScrollTrigger.refresh() is called or for touch-scrolling.
+				lastRefreshID = 0;
+				wheelRefresh = _getTime();
+			}
+		};
+		vars.onChange = (self, dx, dy, xArray, yArray) => {
+			_refreshID !== lastRefreshID && updateClamps();
+			dx && normalizeScrollX && scrollFuncX(scrollClampX(xArray[2] === dx ? startScrollX + (self.startX - self.x) : scrollFuncX() + dx - xArray[1])); // for more precision, we track pointer/touch movement from the start, otherwise it'll drift.
+			if (dy) {
+				scrollFuncY.offset && removeContentOffset();
+				let isTouch = yArray[2] === dy,
+					y = isTouch ? startScrollY + self.startY - self.y : scrollFuncY() + dy - yArray[1],
+					yClamped = scrollClampY(y);
+				isTouch && y !== yClamped && (startScrollY += yClamped - y);
+				scrollFuncY(yClamped);
+			}
+			(dy || dx) && _updateAll();
+		};
+		vars.onEnable = () => {
+			_allowNativePanning(target, normalizeScrollX ? false : "x");
+			ScrollTrigger.addEventListener("refresh", onResize);
+			_addListener(_win, "resize", onResize);
+			if (scrollFuncY.smooth) {
+				scrollFuncY.target.style.scrollBehavior = "auto";
+				scrollFuncY.smooth = scrollFuncX.smooth = false;
+			}
+			inputObserver.enable();
+		};
+		vars.onDisable = () => {
+			_allowNativePanning(target, true);
+			_removeListener(_win, "resize", onResize);
+			ScrollTrigger.removeEventListener("refresh", onResize);
+			inputObserver.kill();
+		};
+		vars.lockAxis = vars.lockAxis !== false;
+		self = new Observer.Observer(vars);
+		self.iOS = _fixIOSBug; // used in the Observer getCachedScroll() function to work around an iOS bug that wreaks havoc with TouchEvent.clientY if we allow scroll to go all the way back to 0.
+		_fixIOSBug && !scrollFuncY() && scrollFuncY(1); // iOS bug causes event.clientY values to freak out (wildly inaccurate) if the scroll position is exactly 0.
+		_fixIOSBug && gsap.ticker.add(_passThrough); // prevent the ticker from sleeping
+		onStopDelayedCall = self._dc;
+		tween = gsap.to(self, {ease: "power4", paused: true, inherit: false, scrollX: normalizeScrollX ? "+=0.1" : "+=0", scrollY: "+=0.1", modifiers: {scrollY: _interruptionTracker(scrollFuncY, scrollFuncY(), () => tween.pause())	}, onUpdate: _updateAll, onComplete: onStopDelayedCall.vars.onComplete}); // we need the modifier to sense if the scroll position is altered outside of the momentum tween (like with a scrollTo tween) so we can pause() it to prevent conflicts.
+		return self;
+	};
+
+ScrollTrigger.sort = func => _triggers.sort(func || ((a, b) => (a.vars.refreshPriority || 0) * -1e6 + a.start - (b.start + (b.vars.refreshPriority || 0) * -1e6)));
+ScrollTrigger.observe = vars => new Observer.Observer(vars);
+ScrollTrigger.normalizeScroll = vars => {
+	if (typeof(vars) === "undefined") {
+		return _normalizer;
+	}
+	if (vars === true && _normalizer) {
+		return _normalizer.enable();
+	}
+	if (vars === false) {
+		_normalizer && _normalizer.kill();
+		_normalizer = vars;
+		return;
+	}
+	let normalizer = vars instanceof Observer.Observer ? vars : _getScrollNormalizer(vars);
+	_normalizer && _normalizer.target === normalizer.target && _normalizer.kill();
+	_isViewport(normalizer.target) && (_normalizer = normalizer);
+	return normalizer;
+};
+
+
+ScrollTrigger.core = { // smaller file size way to leverage in ScrollSmoother and Observer
+	_getVelocityProp: Observer._getVelocityProp,
+	_inputObserver,
+	_scrollers: Observer._scrollers,
+	_proxies: Observer._proxies,
+	bridge: {
+		// when normalizeScroll sets the scroll position (ss = setScroll)
+		ss: () => {
+			_lastScrollTime || _dispatch("scrollStart");
+			_lastScrollTime = _getTime();
+		},
+		// a way to get the _refreshing value in Observer
+		ref: () => _refreshing
+	}
+};
+
+_getGSAP() && gsap.registerPlugin(ScrollTrigger);
+
+exports.ScrollTrigger = ScrollTrigger;
+exports.default = ScrollTrigger;
diff --git a/dist/ScrollTrigger.d.cts b/dist/ScrollTrigger.d.cts
new file mode 100644
index 0000000000000000000000000000000000000000..5781afbb4e17d05b7daf356b7eac40d31bcfed6f
--- /dev/null
+++ b/dist/ScrollTrigger.d.cts
@@ -0,0 +1,1768 @@
+import { _scrollers, Observer, _vertical, _horizontal, _getTarget, _proxies, _getScrollFunc, _getVelocityProp, _getProxyProp } from './Observer.cjs';
+
+/*!
+ * ScrollTrigger 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let gsap, _coreInitted, _win, _doc, _docEl, _body, _root, _resizeDelay, _toArray, _clamp, _time2, _syncInterval, _refreshing, _pointerIsDown, _transformProp, _i, _prevWidth, _prevHeight, _autoRefresh, _sort, _suppressOverwrites, _ignoreResize, _normalizer, _ignoreMobileResize, _baseScreenHeight, _baseScreenWidth, _fixIOSBug, _context, _scrollRestoration, _div100vh, _100vh, _isReverted, _clampingMax,
+	_limitCallbacks, // if true, we'll only trigger callbacks if the active state toggles, so if you scroll immediately past both the start and end positions of a ScrollTrigger (thus inactive to inactive), neither its onEnter nor onLeave will be called. This is useful during startup.
+	_startup = 1,
+	_getTime = Date.now,
+	_time1 = _getTime(),
+	_lastScrollTime = 0,
+	_enabled = 0,
+	_parseClamp = (value, type, self) => {
+		let clamp = (_isString(value) && (value.substr(0, 6) === "clamp(" || value.indexOf("max") > -1));
+		self["_" + type + "Clamp"] = clamp;
+		return clamp ? value.substr(6, value.length - 7) : value;
+	},
+	_keepClamp = (value, clamp) => clamp && (!_isString(value) || value.substr(0, 6) !== "clamp(") ? "clamp(" + value + ")" : value,
+	_rafBugFix = () => _enabled && requestAnimationFrame(_rafBugFix), // in some browsers (like Firefox), screen repaints weren't consistent unless we had SOMETHING queued up in requestAnimationFrame()! So this just creates a super simple loop to keep it alive and smooth out repaints.
+	_pointerDownHandler = () => _pointerIsDown = 1,
+	_pointerUpHandler = () => _pointerIsDown = 0,
+	_passThrough = v => v,
+	_round = value => Math.round(value * 100000) / 100000 || 0,
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_isViewport = e => !!~_root.indexOf(e),
+	_getViewportDimension = dimensionProperty => (dimensionProperty === "Height" ? _100vh : _win["inner" + dimensionProperty]) || _docEl["client" + dimensionProperty] || _body["client" + dimensionProperty],
+	_getBoundsFunc = element => _getProxyProp(element, "getBoundingClientRect") || (_isViewport(element) ? () => {_winOffsets.width = _win.innerWidth; _winOffsets.height = _100vh; return _winOffsets;} : () => _getBounds(element)),
+	_getSizeFunc = (scroller, isViewport, {d, d2, a}) => (a = _getProxyProp(scroller, "getBoundingClientRect")) ? () => a()[d] : () => (isViewport ? _getViewportDimension(d2) : scroller["client" + d2]) || 0,
+	_getOffsetsFunc = (element, isViewport) => !isViewport || ~_proxies.indexOf(element) ? _getBoundsFunc(element) : () => _winOffsets,
+	_maxScroll = (element, {s, d2, d, a}) => Math.max(0, (s = "scroll" + d2) && (a = _getProxyProp(element, s)) ? a() - _getBoundsFunc(element)()[d] : _isViewport(element) ? (_docEl[s] || _body[s]) - _getViewportDimension(d2) : element[s] - element["offset" + d2]),
+	_iterateAutoRefresh = (func, events) => {
+		for (let i = 0; i < _autoRefresh.length; i += 3) {
+			(!events || ~events.indexOf(_autoRefresh[i+1])) && func(_autoRefresh[i], _autoRefresh[i+1], _autoRefresh[i+2]);
+		}
+	},
+	_isString = value => typeof(value) === "string",
+	_isFunction = value => typeof(value) === "function",
+	_isNumber = value => typeof(value) === "number",
+	_isObject = value => typeof(value) === "object",
+	_endAnimation = (animation, reversed, pause) => animation && animation.progress(reversed ? 0 : 1) && pause && animation.pause(),
+	_callback = (self, func) => {
+		if (self.enabled) {
+			let result = self._ctx ? self._ctx.add(() => func(self)) : func(self);
+			result && result.totalTime && (self.callbackAnimation = result);
+		}
+	},
+	_abs = Math.abs,
+	_left = "left",
+	_top = "top",
+	_right = "right",
+	_bottom = "bottom",
+	_width = "width",
+	_height = "height",
+	_Right = "Right",
+	_Left = "Left",
+	_Top = "Top",
+	_Bottom = "Bottom",
+	_padding = "padding",
+	_margin = "margin",
+	_Width = "Width",
+	_Height = "Height",
+	_px = "px",
+	_getComputedStyle = element => _win.getComputedStyle(element),
+	_makePositionable = element => { // if the element already has position: absolute or fixed, leave that, otherwise make it position: relative
+		let position = _getComputedStyle(element).position;
+		element.style.position = (position === "absolute" || position === "fixed") ? position : "relative";
+	},
+	_setDefaults = (obj, defaults) => {
+		for (let p in defaults) {
+			(p in obj) || (obj[p] = defaults[p]);
+		}
+		return obj;
+	},
+	_getBounds = (element, withoutTransforms) => {
+		let tween = withoutTransforms && _getComputedStyle(element)[_transformProp] !== "matrix(1, 0, 0, 1, 0, 0)" && gsap.to(element, {x: 0, y: 0, xPercent: 0, yPercent: 0, rotation: 0, rotationX: 0, rotationY: 0, scale: 1, skewX: 0, skewY: 0}).progress(1),
+			bounds = element.getBoundingClientRect();
+		tween && tween.progress(0).kill();
+		return bounds;
+	},
+	_getSize = (element, {d2}) => element["offset" + d2] || element["client" + d2] || 0,
+	_getLabelRatioArray = timeline => {
+		let a = [],
+			labels = timeline.labels,
+			duration = timeline.duration(),
+			p;
+		for (p in labels) {
+			a.push(labels[p] / duration);
+		}
+		return a;
+	},
+	_getClosestLabel = animation => value => gsap.utils.snap(_getLabelRatioArray(animation), value),
+	_snapDirectional = snapIncrementOrArray => {
+		let snap = gsap.utils.snap(snapIncrementOrArray),
+			a = Array.isArray(snapIncrementOrArray) && snapIncrementOrArray.slice(0).sort((a, b) => a - b);
+		return a ? (value, direction, threshold= 1e-3) => {
+			let i;
+			if (!direction) {
+				return snap(value);
+			}
+			if (direction > 0) {
+				value -= threshold; // to avoid rounding errors. If we're too strict, it might snap forward, then immediately again, and again.
+				for (i = 0; i < a.length; i++) {
+					if (a[i] >= value) {
+						return a[i];
+					}
+				}
+				return a[i-1];
+			} else {
+				i = a.length;
+				value += threshold;
+				while (i--) {
+					if (a[i] <= value) {
+						return a[i];
+					}
+				}
+			}
+			return a[0];
+		} : (value, direction, threshold= 1e-3) => {
+			let snapped = snap(value);
+			return !direction || Math.abs(snapped - value) < threshold || ((snapped - value < 0) === direction < 0) ? snapped : snap(direction < 0 ? value - snapIncrementOrArray : value + snapIncrementOrArray);
+		};
+	},
+	_getLabelAtDirection = timeline => (value, st) => _snapDirectional(_getLabelRatioArray(timeline))(value, st.direction),
+	_multiListener = (func, element, types, callback) => types.split(",").forEach(type => func(element, type, callback)),
+	_addListener = (element, type, func, nonPassive, capture) => element.addEventListener(type, func, {passive: !nonPassive, capture: !!capture}),
+	_removeListener = (element, type, func, capture) => element.removeEventListener(type, func, !!capture),
+	_wheelListener = (func, el, scrollFunc) => {
+		scrollFunc = scrollFunc && scrollFunc.wheelHandler;
+		if (scrollFunc) {
+			func(el, "wheel", scrollFunc);
+			func(el, "touchmove", scrollFunc);
+		}
+	},
+	_markerDefaults = {startColor: "green", endColor: "red", indent: 0, fontSize: "16px", fontWeight:"normal"},
+	_defaults = {toggleActions: "play", anticipatePin: 0},
+	_keywords = {top: 0, left: 0, center: 0.5, bottom: 1, right: 1},
+	_offsetToPx = (value, size) => {
+		if (_isString(value)) {
+			let eqIndex = value.indexOf("="),
+				relative = ~eqIndex ? +(value.charAt(eqIndex-1) + 1) * parseFloat(value.substr(eqIndex + 1)) : 0;
+			if (~eqIndex) {
+				(value.indexOf("%") > eqIndex) && (relative *= size / 100);
+				value = value.substr(0, eqIndex-1);
+			}
+			value = relative + ((value in _keywords) ? _keywords[value] * size : ~value.indexOf("%") ? parseFloat(value) * size / 100 : parseFloat(value) || 0);
+		}
+		return value;
+	},
+	_createMarker = (type, name, container, direction, {startColor, endColor, fontSize, indent, fontWeight}, offset, matchWidthEl, containerAnimation) => {
+		let e = _doc.createElement("div"),
+			useFixedPosition = _isViewport(container) || _getProxyProp(container, "pinType") === "fixed",
+			isScroller = type.indexOf("scroller") !== -1,
+			parent = useFixedPosition ? _body : container,
+			isStart = type.indexOf("start") !== -1,
+			color = isStart ? startColor : endColor,
+			css = "border-color:" + color + ";font-size:" + fontSize + ";color:" + color + ";font-weight:" + fontWeight + ";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";
+		css += "position:" + ((isScroller || containerAnimation) && useFixedPosition ? "fixed;" : "absolute;");
+		(isScroller || containerAnimation || !useFixedPosition) && (css += (direction === _vertical ? _right : _bottom) + ":" + (offset + parseFloat(indent)) + "px;");
+		matchWidthEl && (css += "box-sizing:border-box;text-align:left;width:" + matchWidthEl.offsetWidth + "px;");
+		e._isStart = isStart;
+		e.setAttribute("class", "gsap-marker-" + type + (name ? " marker-" + name : ""));
+		e.style.cssText = css;
+		e.innerText = name || name === 0 ? type + "-" + name : type;
+		parent.children[0] ? parent.insertBefore(e, parent.children[0]) : parent.appendChild(e);
+		e._offset = e["offset" + direction.op.d2];
+		_positionMarker(e, 0, direction, isStart);
+		return e;
+	},
+	_positionMarker = (marker, start, direction, flipped) => {
+		let vars = {display: "block"},
+			side = direction[flipped ? "os2" : "p2"],
+			oppositeSide = direction[flipped ? "p2" : "os2"];
+		marker._isFlipped = flipped;
+		vars[direction.a + "Percent"] = flipped ? -100 : 0;
+		vars[direction.a] = flipped ? "1px" : 0;
+		vars["border" + side + _Width] = 1;
+		vars["border" + oppositeSide + _Width] = 0;
+		vars[direction.p] = start + "px";
+		gsap.set(marker, vars);
+	},
+	_triggers = [],
+	_ids = {},
+	_rafID,
+	_sync = () => _getTime() - _lastScrollTime > 34 && (_rafID || (_rafID = requestAnimationFrame(_updateAll))),
+	_onScroll = () => { // previously, we tried to optimize performance by batching/deferring to the next requestAnimationFrame(), but discovered that Safari has a few bugs that make this unworkable (especially on iOS). See https://codepen.io/GreenSock/pen/16c435b12ef09c38125204818e7b45fc?editors=0010 and https://codepen.io/GreenSock/pen/JjOxYpQ/3dd65ccec5a60f1d862c355d84d14562?editors=0010 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503?editors=0010
+		if (!_normalizer || !_normalizer.isPressed || _normalizer.startX > _body.clientWidth) { // if the user is dragging the scrollbar, allow it.
+			_scrollers.cache++;
+			if (_normalizer) {
+				_rafID || (_rafID = requestAnimationFrame(_updateAll));
+			} else {
+				_updateAll(); // Safari in particular (on desktop) NEEDS the immediate update rather than waiting for a requestAnimationFrame() whereas iOS seems to benefit from waiting for the requestAnimationFrame() tick, at least when normalizing. See https://codepen.io/GreenSock/pen/qBYozqO?editors=0110
+			}
+			_lastScrollTime || _dispatch("scrollStart");
+			_lastScrollTime = _getTime();
+		}
+	},
+	_setBaseDimensions = () => {
+		_baseScreenWidth = _win.innerWidth;
+		_baseScreenHeight = _win.innerHeight;
+	},
+	_onResize = () => {
+		_scrollers.cache++;
+		!_refreshing && !_ignoreResize && !_doc.fullscreenElement && !_doc.webkitFullscreenElement && (!_ignoreMobileResize || _baseScreenWidth !== _win.innerWidth || Math.abs(_win.innerHeight - _baseScreenHeight) > _win.innerHeight * 0.25) && _resizeDelay.restart(true);
+	}, // ignore resizes triggered by refresh()
+	_listeners = {},
+	_emptyArray = [],
+	_softRefresh = () => _removeListener(ScrollTrigger, "scrollEnd", _softRefresh) || _refreshAll(true),
+	_dispatch = type => (_listeners[type] && _listeners[type].map(f => f())) || _emptyArray,
+	_savedStyles = [], // when ScrollTrigger.saveStyles() is called, the inline styles are recorded in this Array in a sequential format like [element, cssText, gsCache, media]. This keeps it very memory-efficient and fast to iterate through.
+	_revertRecorded = media => {
+		for (let i = 0; i < _savedStyles.length; i+=5) {
+			if (!media || _savedStyles[i+4] && _savedStyles[i+4].query === media) {
+				_savedStyles[i].style.cssText = _savedStyles[i+1];
+				_savedStyles[i].getBBox && _savedStyles[i].setAttribute("transform", _savedStyles[i+2] || "");
+				_savedStyles[i+3].uncache = 1;
+			}
+		}
+	},
+	_revertAll = (kill, media) => {
+		let trigger;
+		for (_i = 0; _i < _triggers.length; _i++) {
+			trigger = _triggers[_i];
+			if (trigger && (!media || trigger._ctx === media)) {
+				if (kill) {
+					trigger.kill(1);
+				} else {
+					trigger.revert(true, true);
+				}
+			}
+		}
+		_isReverted = true;
+		media && _revertRecorded(media);
+		media || _dispatch("revert");
+	},
+	_clearScrollMemory = (scrollRestoration, force) => { // zero-out all the recorded scroll positions. Don't use _triggers because if, for example, .matchMedia() is used to create some ScrollTriggers and then the user resizes and it removes ALL ScrollTriggers, and then go back to a size where there are ScrollTriggers, it would have kept the position(s) saved from the initial state.
+		_scrollers.cache++;
+		(force || !_refreshingAll) && _scrollers.forEach(obj => _isFunction(obj) && obj.cacheID++ && (obj.rec = 0));
+		_isString(scrollRestoration) && (_win.history.scrollRestoration = _scrollRestoration = scrollRestoration);
+	},
+	_refreshingAll,
+	_refreshID = 0,
+	_queueRefreshID,
+	_queueRefreshAll = () => { // we don't want to call _refreshAll() every time we create a new ScrollTrigger (for performance reasons) - it's better to batch them. Some frameworks dynamically load content and we can't rely on the window's "load" or "DOMContentLoaded" events to trigger it.
+		if (_queueRefreshID !== _refreshID) {
+			let id = _queueRefreshID = _refreshID;
+			requestAnimationFrame(() => id === _refreshID && _refreshAll(true));
+		}
+	},
+	_refresh100vh = () => {
+		_body.appendChild(_div100vh);
+		_100vh = (!_normalizer && _div100vh.offsetHeight) || _win.innerHeight;
+		_body.removeChild(_div100vh);
+	},
+	_hideAllMarkers = hide => _toArray(".gsap-marker-start, .gsap-marker-end, .gsap-marker-scroller-start, .gsap-marker-scroller-end").forEach(el => el.style.display = hide ? "none" : "block"),
+	_refreshAll = (force, skipRevert) => {
+		if (_lastScrollTime && !force && !_isReverted) {
+			_addListener(ScrollTrigger, "scrollEnd", _softRefresh);
+			return;
+		}
+		_refresh100vh();
+		_refreshingAll = ScrollTrigger.isRefreshing = true;
+		_scrollers.forEach(obj => _isFunction(obj) && ++obj.cacheID && (obj.rec = obj())); // force the clearing of the cache because some browsers take a little while to dispatch the "scroll" event and the user may have changed the scroll position and then called ScrollTrigger.refresh() right away
+		let refreshInits = _dispatch("refreshInit");
+		_sort && ScrollTrigger.sort();
+		skipRevert || _revertAll();
+		_scrollers.forEach(obj => {
+			if (_isFunction(obj)) {
+				obj.smooth && (obj.target.style.scrollBehavior = "auto"); // smooth scrolling interferes
+				obj(0);
+			}
+		});
+		_triggers.slice(0).forEach(t => t.refresh()); // don't loop with _i because during a refresh() someone could call ScrollTrigger.update() which would iterate through _i resulting in a skip.
+		_isReverted = false;
+		_triggers.forEach((t) => { // nested pins (pinnedContainer) with pinSpacing may expand the container, so we must accommodate that here.
+			if (t._subPinOffset && t.pin) {
+				let prop = t.vars.horizontal ? "offsetWidth" : "offsetHeight",
+					original = t.pin[prop];
+				t.revert(true, 1);
+				t.adjustPinSpacing(t.pin[prop] - original);
+				t.refresh();
+			}
+		});
+		_clampingMax = 1; // pinSpacing might be propping a page open, thus when we .setPositions() to clamp a ScrollTrigger's end we should leave the pinSpacing alone. That's what this flag is for.
+		_hideAllMarkers(true);
+		_triggers.forEach(t => { // the scroller's max scroll position may change after all the ScrollTriggers refreshed (like pinning could push it down), so we need to loop back and correct any with end: "max". Same for anything with a clamped end
+			let max = _maxScroll(t.scroller, t._dir),
+				endClamp = t.vars.end === "max" || (t._endClamp && t.end > max),
+				startClamp = t._startClamp && t.start >= max;
+			(endClamp || startClamp) && t.setPositions(startClamp ? max - 1 : t.start, endClamp ? Math.max(startClamp ? max : t.start + 1, max) : t.end, true);
+		});
+		_hideAllMarkers(false);
+		_clampingMax = 0;
+		refreshInits.forEach(result => result && result.render && result.render(-1)); // if the onRefreshInit() returns an animation (typically a gsap.set()), revert it. This makes it easy to put things in a certain spot before refreshing for measurement purposes, and then put things back.
+		_scrollers.forEach(obj => {
+			if (_isFunction(obj)) {
+				obj.smooth && requestAnimationFrame(() => obj.target.style.scrollBehavior = "smooth");
+				obj.rec && obj(obj.rec);
+			}
+		});
+		_clearScrollMemory(_scrollRestoration, 1);
+		_resizeDelay.pause();
+		_refreshID++;
+		_refreshingAll = 2;
+		_updateAll(2);
+		_triggers.forEach(t => _isFunction(t.vars.onRefresh) && t.vars.onRefresh(t));
+		_refreshingAll = ScrollTrigger.isRefreshing = false;
+		_dispatch("refresh");
+	},
+	_lastScroll = 0,
+	_direction = 1,
+	_primary,
+	_updateAll = (force) => {
+		if (force === 2 || (!_refreshingAll && !_isReverted)) { // _isReverted could be true if, for example, a matchMedia() is in the process of executing. We don't want to update during the time everything is reverted.
+			ScrollTrigger.isUpdating = true;
+			_primary && _primary.update(0); // ScrollSmoother uses refreshPriority -9999 to become the primary that gets updated before all others because it affects the scroll position.
+			let l = _triggers.length,
+				time = _getTime(),
+				recordVelocity = time - _time1 >= 50,
+				scroll = l && _triggers[0].scroll();
+			_direction = _lastScroll > scroll ? -1 : 1;
+			_refreshingAll || (_lastScroll = scroll);
+			if (recordVelocity) {
+				if (_lastScrollTime && !_pointerIsDown && time - _lastScrollTime > 200) {
+					_lastScrollTime = 0;
+					_dispatch("scrollEnd");
+				}
+				_time2 = _time1;
+				_time1 = time;
+			}
+			if (_direction < 0) {
+				_i = l;
+				while (_i-- > 0) {
+					_triggers[_i] && _triggers[_i].update(0, recordVelocity);
+				}
+				_direction = 1;
+			} else {
+				for (_i = 0; _i < l; _i++) {
+					_triggers[_i] && _triggers[_i].update(0, recordVelocity);
+				}
+			}
+			ScrollTrigger.isUpdating = false;
+		}
+		_rafID = 0;
+	},
+	_propNamesToCopy = [_left, _top, _bottom, _right, _margin + _Bottom, _margin + _Right, _margin + _Top, _margin + _Left, "display", "flexShrink", "float", "zIndex", "gridColumnStart", "gridColumnEnd", "gridRowStart", "gridRowEnd", "gridArea", "justifySelf", "alignSelf", "placeSelf", "order"],
+	_stateProps = _propNamesToCopy.concat([_width, _height, "boxSizing", "max" + _Width, "max" + _Height, "position", _margin, _padding, _padding + _Top, _padding + _Right, _padding + _Bottom, _padding + _Left]),
+	_swapPinOut = (pin, spacer, state) => {
+		_setState(state);
+		let cache = pin._gsap;
+		if (cache.spacerIsNative) {
+			_setState(cache.spacerState);
+		} else if (pin._gsap.swappedIn) {
+			let parent = spacer.parentNode;
+			if (parent) {
+				parent.insertBefore(pin, spacer);
+				parent.removeChild(spacer);
+			}
+		}
+		pin._gsap.swappedIn = false;
+	},
+	_swapPinIn = (pin, spacer, cs, spacerState) => {
+		if (!pin._gsap.swappedIn) {
+			let i = _propNamesToCopy.length,
+				spacerStyle = spacer.style,
+				pinStyle = pin.style,
+				p;
+			while (i--) {
+				p = _propNamesToCopy[i];
+				spacerStyle[p] = cs[p];
+			}
+			spacerStyle.position = cs.position === "absolute" ? "absolute" : "relative";
+			(cs.display === "inline") && (spacerStyle.display = "inline-block");
+			pinStyle[_bottom] = pinStyle[_right] = "auto";
+			spacerStyle.flexBasis = cs.flexBasis || "auto";
+			spacerStyle.overflow = "visible";
+			spacerStyle.boxSizing = "border-box";
+			spacerStyle[_width] = _getSize(pin, _horizontal) + _px;
+			spacerStyle[_height] = _getSize(pin, _vertical) + _px;
+			spacerStyle[_padding] = pinStyle[_margin] = pinStyle[_top] = pinStyle[_left] = "0";
+			_setState(spacerState);
+			pinStyle[_width] = pinStyle["max" + _Width] = cs[_width];
+			pinStyle[_height] = pinStyle["max" + _Height] = cs[_height];
+			pinStyle[_padding] = cs[_padding];
+			if (pin.parentNode !== spacer) {
+				pin.parentNode.insertBefore(spacer, pin);
+				spacer.appendChild(pin);
+			}
+			pin._gsap.swappedIn = true;
+		}
+	},
+	_capsExp = /([A-Z])/g,
+	_setState = state => {
+		if (state) {
+			let style = state.t.style,
+				l = state.length,
+				i = 0,
+				p, value;
+			(state.t._gsap || gsap.core.getCache(state.t)).uncache = 1; // otherwise transforms may be off
+			for (; i < l; i +=2) {
+				value = state[i+1];
+				p = state[i];
+				if (value) {
+					style[p] = value;
+				} else if (style[p]) {
+					style.removeProperty(p.replace(_capsExp, "-$1").toLowerCase());
+				}
+			}
+		}
+	},
+	_getState = element => { // returns an Array with alternating values like [property, value, property, value] and a "t" property pointing to the target (element). Makes it fast and cheap.
+		let l = _stateProps.length,
+			style = element.style,
+			state = [],
+			i = 0;
+		for (; i < l; i++) {
+			state.push(_stateProps[i], style[_stateProps[i]]);
+		}
+		state.t = element;
+		return state;
+	},
+	_copyState = (state, override, omitOffsets) => {
+		let result = [],
+			l = state.length,
+			i = omitOffsets ? 8 : 0, // skip top, left, right, bottom if omitOffsets is true
+			p;
+		for (; i < l; i += 2) {
+			p = state[i];
+			result.push(p, (p in override) ? override[p] : state[i+1]);
+		}
+		result.t = state.t;
+		return result;
+	},
+	_winOffsets = {left:0, top:0},
+	// // potential future feature (?) Allow users to calculate where a trigger hits (scroll position) like getScrollPosition("#id", "top bottom")
+	// _getScrollPosition = (trigger, position, {scroller, containerAnimation, horizontal}) => {
+	// 	scroller = _getTarget(scroller || _win);
+	// 	let direction = horizontal ? _horizontal : _vertical,
+	// 		isViewport = _isViewport(scroller);
+	// 	_getSizeFunc(scroller, isViewport, direction);
+	// 	return _parsePosition(position, _getTarget(trigger), _getSizeFunc(scroller, isViewport, direction)(), direction, _getScrollFunc(scroller, direction)(), 0, 0, 0, _getOffsetsFunc(scroller, isViewport)(), isViewport ? 0 : parseFloat(_getComputedStyle(scroller)["border" + direction.p2 + _Width]) || 0, 0, containerAnimation ? containerAnimation.duration() : _maxScroll(scroller), containerAnimation);
+	// },
+	_parsePosition = (value, trigger, scrollerSize, direction, scroll, marker, markerScroller, self, scrollerBounds, borderWidth, useFixedPosition, scrollerMax, containerAnimation, clampZeroProp) => {
+		_isFunction(value) && (value = value(self));
+		if (_isString(value) && value.substr(0,3) === "max") {
+			value = scrollerMax + (value.charAt(4) === "=" ? _offsetToPx("0" + value.substr(3), scrollerSize) : 0);
+		}
+		let time = containerAnimation ? containerAnimation.time() : 0,
+			p1, p2, element;
+		containerAnimation && containerAnimation.seek(0);
+		isNaN(value) || (value = +value); // convert a string number like "45" to an actual number
+		if (!_isNumber(value)) {
+			_isFunction(trigger) && (trigger = trigger(self));
+			let offsets = (value || "0").split(" "),
+				bounds, localOffset, globalOffset, display;
+			element = _getTarget(trigger, self) || _body;
+			bounds = _getBounds(element) || {};
+			if ((!bounds || (!bounds.left && !bounds.top)) && _getComputedStyle(element).display === "none") { // if display is "none", it won't report getBoundingClientRect() properly
+				display = element.style.display;
+				element.style.display = "block";
+				bounds = _getBounds(element);
+				display ? (element.style.display = display) : element.style.removeProperty("display");
+			}
+			localOffset = _offsetToPx(offsets[0], bounds[direction.d]);
+			globalOffset = _offsetToPx(offsets[1] || "0", scrollerSize);
+			value = bounds[direction.p] - scrollerBounds[direction.p] - borderWidth + localOffset + scroll - globalOffset;
+			markerScroller && _positionMarker(markerScroller, globalOffset, direction, (scrollerSize - globalOffset < 20 || (markerScroller._isStart && globalOffset > 20)));
+			scrollerSize -= scrollerSize - globalOffset; // adjust for the marker
+		} else {
+			containerAnimation && (value = gsap.utils.mapRange(containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, 0, scrollerMax, value));
+			markerScroller && _positionMarker(markerScroller, scrollerSize, direction, true);
+		}
+		if (clampZeroProp) {
+			self[clampZeroProp] = value || -0.001;
+			value < 0 && (value = 0);
+		}
+		if (marker) {
+			let position = value + scrollerSize,
+				isStart = marker._isStart;
+			p1 = "scroll" + direction.d2;
+			_positionMarker(marker, position, direction, (isStart && position > 20) || (!isStart && (useFixedPosition ? Math.max(_body[p1], _docEl[p1]) : marker.parentNode[p1]) <= position + 1));
+			if (useFixedPosition) {
+				scrollerBounds = _getBounds(markerScroller);
+				useFixedPosition && (marker.style[direction.op.p] = (scrollerBounds[direction.op.p] - direction.op.m - marker._offset) + _px);
+			}
+		}
+		if (containerAnimation && element) {
+			p1 = _getBounds(element);
+			containerAnimation.seek(scrollerMax);
+			p2 = _getBounds(element);
+			containerAnimation._caScrollDist = p1[direction.p] - p2[direction.p];
+			value = value / (containerAnimation._caScrollDist) * scrollerMax;
+		}
+		containerAnimation && containerAnimation.seek(time);
+		return containerAnimation ? value : Math.round(value);
+	},
+	_prefixExp = /(webkit|moz|length|cssText|inset)/i,
+	_reparent = (element, parent, top, left) => {
+		if (element.parentNode !== parent) {
+			let style = element.style,
+				p, cs;
+			if (parent === _body) {
+				element._stOrig = style.cssText; // record original inline styles so we can revert them later
+				cs = _getComputedStyle(element);
+				for (p in cs) { // must copy all relevant styles to ensure that nothing changes visually when we reparent to the <body>. Skip the vendor prefixed ones.
+					if (!+p && !_prefixExp.test(p) && cs[p] && typeof style[p] === "string" && p !== "0") {
+						style[p] = cs[p];
+					}
+				}
+				style.top = top;
+				style.left = left;
+			} else {
+				style.cssText = element._stOrig;
+			}
+			gsap.core.getCache(element).uncache = 1;
+			parent.appendChild(element);
+		}
+	},
+	_interruptionTracker = (getValueFunc, initialValue, onInterrupt) => {
+		let last1 = initialValue,
+			last2 = last1;
+		return value => {
+			let current = Math.round(getValueFunc()); // round because in some [very uncommon] Windows environments, scroll can get reported with decimals even though it was set without.
+			if (current !== last1 && current !== last2 && Math.abs(current - last1) > 3 && Math.abs(current - last2) > 3) { // if the user scrolls, kill the tween. iOS Safari intermittently misreports the scroll position, it may be the most recently-set one or the one before that! When Safari is zoomed (CMD-+), it often misreports as 1 pixel off too! So if we set the scroll position to 125, for example, it'll actually report it as 124.
+				value = current;
+				onInterrupt && onInterrupt();
+			}
+			last2 = last1;
+			last1 = value;
+			return value;
+		};
+	},
+	_shiftMarker = (marker, direction, value) => {
+		let vars = {};
+		vars[direction.p] = "+=" + value;
+		gsap.set(marker, vars);
+	},
+	// _mergeAnimations = animations => {
+	// 	let tl = gsap.timeline({smoothChildTiming: true}).startTime(Math.min(...animations.map(a => a.globalTime(0))));
+	// 	animations.forEach(a => {let time = a.totalTime(); tl.add(a); a.totalTime(time); });
+	// 	tl.smoothChildTiming = false;
+	// 	return tl;
+	// },
+
+	// returns a function that can be used to tween the scroll position in the direction provided, and when doing so it'll add a .tween property to the FUNCTION itself, and remove it when the tween completes or gets killed. This gives us a way to have multiple ScrollTriggers use a central function for any given scroller and see if there's a scroll tween running (which would affect if/how things get updated)
+	_getTweenCreator = (scroller, direction) => {
+		let getScroll = _getScrollFunc(scroller, direction),
+			prop = "_scroll" + direction.p2, // add a tweenable property to the scroller that's a getter/setter function, like _scrollTop or _scrollLeft. This way, if someone does gsap.killTweensOf(scroller) it'll kill the scroll tween.
+			getTween = (scrollTo, vars, initialValue, change1, change2) => {
+				let tween = getTween.tween,
+					onComplete = vars.onComplete,
+					modifiers = {};
+				initialValue = initialValue || getScroll();
+				let checkForInterruption = _interruptionTracker(getScroll, initialValue, () => {
+					tween.kill();
+					getTween.tween = 0;
+				});
+				change2 = (change1 && change2) || 0; // if change1 is 0, we set that to the difference and ignore change2. Otherwise, there would be a compound effect.
+				change1 = change1 || (scrollTo - initialValue);
+				tween && tween.kill();
+				vars[prop] = scrollTo;
+				vars.inherit = false;
+				vars.modifiers = modifiers;
+				modifiers[prop] = () => checkForInterruption(initialValue + change1 * tween.ratio + change2 * tween.ratio * tween.ratio);
+				vars.onUpdate = () => {
+					_scrollers.cache++;
+					getTween.tween && _updateAll(); // if it was interrupted/killed, like in a context.revert(), don't force an updateAll()
+				};
+				vars.onComplete = () => {
+					getTween.tween = 0;
+					onComplete && onComplete.call(tween);
+				};
+				tween = getTween.tween = gsap.to(scroller, vars);
+				return tween;
+			};
+		scroller[prop] = getScroll;
+		getScroll.wheelHandler = () => getTween.tween && getTween.tween.kill() && (getTween.tween = 0);
+		_addListener(scroller, "wheel", getScroll.wheelHandler); // Windows machines handle mousewheel scrolling in chunks (like "3 lines per scroll") meaning the typical strategy for cancelling the scroll isn't as sensitive. It's much more likely to match one of the previous 2 scroll event positions. So we kill any snapping as soon as there's a wheel event.
+		ScrollTrigger.isTouch && _addListener(scroller, "touchmove", getScroll.wheelHandler);
+		return getTween;
+	};
+
+
+
+
+class ScrollTrigger {
+
+	constructor(vars, animation) {
+		_coreInitted || ScrollTrigger.register(gsap) || console.warn("Please gsap.registerPlugin(ScrollTrigger)");
+		_context(this);
+		this.init(vars, animation);
+	}
+
+	init(vars, animation) {
+		this.progress = this.start = 0;
+		this.vars && this.kill(true, true); // in case it's being initted again
+		if (!_enabled) {
+			this.update = this.refresh = this.kill = _passThrough;
+			return;
+		}
+		vars = _setDefaults((_isString(vars) || _isNumber(vars) || vars.nodeType) ? {trigger: vars} : vars, _defaults);
+		let {onUpdate, toggleClass, id, onToggle, onRefresh, scrub, trigger, pin, pinSpacing, invalidateOnRefresh, anticipatePin, onScrubComplete, onSnapComplete, once, snap, pinReparent, pinSpacer, containerAnimation, fastScrollEnd, preventOverlaps} = vars,
+			direction = vars.horizontal || (vars.containerAnimation && vars.horizontal !== false) ? _horizontal : _vertical,
+			isToggle = !scrub && scrub !== 0,
+			scroller = _getTarget(vars.scroller || _win),
+			scrollerCache = gsap.core.getCache(scroller),
+			isViewport = _isViewport(scroller),
+			useFixedPosition = ("pinType" in vars ? vars.pinType : _getProxyProp(scroller, "pinType") || (isViewport && "fixed")) === "fixed",
+			callbacks = [vars.onEnter, vars.onLeave, vars.onEnterBack, vars.onLeaveBack],
+			toggleActions = isToggle && vars.toggleActions.split(" "),
+			markers = "markers" in vars ? vars.markers : _defaults.markers,
+			borderWidth = isViewport ? 0 : parseFloat(_getComputedStyle(scroller)["border" + direction.p2 + _Width]) || 0,
+			self = this,
+			onRefreshInit = vars.onRefreshInit && (() => vars.onRefreshInit(self)),
+			getScrollerSize = _getSizeFunc(scroller, isViewport, direction),
+			getScrollerOffsets = _getOffsetsFunc(scroller, isViewport),
+			lastSnap = 0,
+			lastRefresh = 0,
+			prevProgress = 0,
+			scrollFunc = _getScrollFunc(scroller, direction),
+			tweenTo, pinCache, snapFunc, scroll1, scroll2, start, end, markerStart, markerEnd, markerStartTrigger, markerEndTrigger, markerVars, executingOnRefresh,
+			change, pinOriginalState, pinActiveState, pinState, spacer, offset, pinGetter, pinSetter, pinStart, pinChange, spacingStart, spacerState, markerStartSetter, pinMoves,
+			markerEndSetter, cs, snap1, snap2, scrubTween, scrubSmooth, snapDurClamp, snapDelayedCall, prevScroll, prevAnimProgress, caMarkerSetter, customRevertReturn;
+
+		// for the sake of efficiency, _startClamp/_endClamp serve like a truthy value indicating that clamping was enabled on the start/end, and ALSO store the actual pre-clamped numeric value. We tap into that in ScrollSmoother for speed effects. So for example, if start="clamp(top bottom)" results in a start of -100 naturally, it would get clamped to 0 but -100 would be stored in _startClamp.
+		self._startClamp = self._endClamp = false;
+		self._dir = direction;
+		anticipatePin *= 45;
+		self.scroller = scroller;
+		self.scroll = containerAnimation ? containerAnimation.time.bind(containerAnimation) : scrollFunc;
+		scroll1 = scrollFunc();
+		self.vars = vars;
+		animation = animation || vars.animation;
+		if ("refreshPriority" in vars) {
+			_sort = 1;
+			vars.refreshPriority === -9999 && (_primary = self); // used by ScrollSmoother
+		}
+		scrollerCache.tweenScroll = scrollerCache.tweenScroll || {
+			top: _getTweenCreator(scroller, _vertical),
+			left: _getTweenCreator(scroller, _horizontal)
+		};
+		self.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];
+		self.scrubDuration = value => {
+			scrubSmooth = _isNumber(value) && value;
+			if (!scrubSmooth) {
+				scrubTween && scrubTween.progress(1).kill();
+				scrubTween = 0;
+			} else {
+				scrubTween ? scrubTween.duration(value) : (scrubTween = gsap.to(animation, {ease: "expo", totalProgress: "+=0", inherit: false, duration: scrubSmooth, paused: true, onComplete: () => onScrubComplete && onScrubComplete(self)}));
+			}
+		};
+		if (animation) {
+			animation.vars.lazy = false;
+			(animation._initted && !self.isReverted) || (animation.vars.immediateRender !== false && vars.immediateRender !== false && animation.duration() && animation.render(0, true, true)); // special case: if this ScrollTrigger gets re-initted, a from() tween with a stagger could get initted initially and then reverted on the re-init which means it'll need to get rendered again here to properly display things. Otherwise, See https://gsap.com/forums/topic/36777-scrollsmoother-splittext-nextjs/ and https://codepen.io/GreenSock/pen/eYPyPpd?editors=0010
+			self.animation = animation.pause();
+			animation.scrollTrigger = self;
+			self.scrubDuration(scrub);
+			snap1 = 0;
+			id || (id = animation.vars.id);
+		}
+
+		if (snap) {
+			// TODO: potential idea: use legitimate CSS scroll snapping by pushing invisible elements into the DOM that serve as snap positions, and toggle the document.scrollingElement.style.scrollSnapType onToggle. See https://codepen.io/GreenSock/pen/JjLrgWM for a quick proof of concept.
+			if (!_isObject(snap) || snap.push) {
+				snap = {snapTo: snap};
+			}
+			("scrollBehavior" in _body.style) && gsap.set(isViewport ? [_body, _docEl] : scroller, {scrollBehavior: "auto"}); // smooth scrolling doesn't work with snap.
+			_scrollers.forEach(o => _isFunction(o) && o.target === (isViewport ? _doc.scrollingElement || _docEl : scroller) && (o.smooth = false)); // note: set smooth to false on both the vertical and horizontal scroll getters/setters
+			snapFunc = _isFunction(snap.snapTo) ? snap.snapTo : snap.snapTo === "labels" ? _getClosestLabel(animation) : snap.snapTo === "labelsDirectional" ? _getLabelAtDirection(animation) : snap.directional !== false ? (value, st) => _snapDirectional(snap.snapTo)(value, _getTime() - lastRefresh < 500 ? 0 : st.direction) : gsap.utils.snap(snap.snapTo);
+			snapDurClamp = snap.duration || {min: 0.1, max: 2};
+			snapDurClamp = _isObject(snapDurClamp) ? _clamp(snapDurClamp.min, snapDurClamp.max) : _clamp(snapDurClamp, snapDurClamp);
+			snapDelayedCall = gsap.delayedCall(snap.delay || (scrubSmooth / 2) || 0.1, () => {
+				let scroll = scrollFunc(),
+					refreshedRecently = _getTime() - lastRefresh < 500,
+					tween = tweenTo.tween;
+				if ((refreshedRecently || Math.abs(self.getVelocity()) < 10) && !tween && !_pointerIsDown && lastSnap !== scroll) {
+					let progress = (scroll - start) / change, // don't use self.progress because this might run between the refresh() and when the scroll position updates and self.progress is set properly in the update() method.
+						totalProgress = animation && !isToggle ? animation.totalProgress() : progress,
+						velocity = refreshedRecently ? 0 : ((totalProgress - snap2) / (_getTime() - _time2) * 1000) || 0,
+						change1 = gsap.utils.clamp(-progress, 1 - progress, _abs(velocity / 2) * velocity / 0.185),
+						naturalEnd = progress + (snap.inertia === false ? 0 : change1),
+						endValue, endScroll,
+						{ onStart, onInterrupt, onComplete } = snap;
+					endValue = snapFunc(naturalEnd, self);
+					_isNumber(endValue) || (endValue = naturalEnd); // in case the function didn't return a number, fall back to using the naturalEnd
+					endScroll = Math.round(start + endValue * change);
+					if (scroll <= end && scroll >= start && endScroll !== scroll) {
+						if (tween && !tween._initted && tween.data <= _abs(endScroll - scroll)) { // there's an overlapping snap! So we must figure out which one is closer and let that tween live.
+							return;
+						}
+						if (snap.inertia === false) {
+							change1 = endValue - progress;
+						}
+						tweenTo(endScroll, {
+							duration: snapDurClamp(_abs( (Math.max(_abs(naturalEnd - totalProgress), _abs(endValue - totalProgress)) * 0.185 / velocity / 0.05) || 0)),
+							ease: snap.ease || "power3",
+							data: _abs(endScroll - scroll), // record the distance so that if another snap tween occurs (conflict) we can prioritize the closest snap.
+							onInterrupt: () => snapDelayedCall.restart(true) && onInterrupt && onInterrupt(self),
+							onComplete() {
+								self.update();
+								lastSnap = scrollFunc();
+								if (animation) { // the resolution of the scrollbar is limited, so we should correct the scrubbed animation's playhead at the end to match EXACTLY where it was supposed to snap
+									scrubTween ? scrubTween.resetTo("totalProgress", endValue, animation._tTime / animation._tDur) : animation.progress(endValue);
+								}
+								snap1 = snap2 = animation && !isToggle ? animation.totalProgress() : self.progress;
+								onSnapComplete && onSnapComplete(self);
+								onComplete && onComplete(self);
+							}
+						}, scroll, change1 * change, endScroll - scroll - change1 * change);
+						onStart && onStart(self, tweenTo.tween);
+					}
+				} else if (self.isActive && lastSnap !== scroll) {
+					snapDelayedCall.restart(true);
+				}
+			}).pause();
+		}
+		id && (_ids[id] = self);
+		trigger = self.trigger = _getTarget(trigger || (pin !== true && pin));
+
+		// if a trigger has some kind of scroll-related effect applied that could contaminate the "y" or "x" position (like a ScrollSmoother effect), we needed a way to temporarily revert it, so we use the stRevert property of the gsCache. It can return another function that we'll call at the end so it can return to its normal state.
+		customRevertReturn = trigger && trigger._gsap && trigger._gsap.stRevert;
+		customRevertReturn && (customRevertReturn = customRevertReturn(self));
+
+		pin = pin === true ? trigger : _getTarget(pin);
+		_isString(toggleClass) && (toggleClass = {targets: trigger, className: toggleClass});
+		if (pin) {
+			(pinSpacing === false || pinSpacing === _margin) || (pinSpacing = !pinSpacing && pin.parentNode && pin.parentNode.style && _getComputedStyle(pin.parentNode).display === "flex" ? false : _padding); // if the parent is display: flex, don't apply pinSpacing by default. We should check that pin.parentNode is an element (not shadow dom window)
+			self.pin = pin;
+			pinCache = gsap.core.getCache(pin);
+			if (!pinCache.spacer) { // record the spacer and pinOriginalState on the cache in case someone tries pinning the same element with MULTIPLE ScrollTriggers - we don't want to have multiple spacers or record the "original" pin state after it has already been affected by another ScrollTrigger.
+				if (pinSpacer) {
+					pinSpacer = _getTarget(pinSpacer);
+					pinSpacer && !pinSpacer.nodeType && (pinSpacer = pinSpacer.current || pinSpacer.nativeElement); // for React & Angular
+					pinCache.spacerIsNative = !!pinSpacer;
+					pinSpacer && (pinCache.spacerState = _getState(pinSpacer));
+				}
+				pinCache.spacer = spacer = pinSpacer || _doc.createElement("div");
+				spacer.classList.add("pin-spacer");
+				id && spacer.classList.add("pin-spacer-" + id);
+				pinCache.pinState = pinOriginalState = _getState(pin);
+			} else {
+				pinOriginalState = pinCache.pinState;
+			}
+			vars.force3D !== false && gsap.set(pin, {force3D: true});
+			self.spacer = spacer = pinCache.spacer;
+			cs = _getComputedStyle(pin);
+			spacingStart = cs[pinSpacing + direction.os2];
+			pinGetter = gsap.getProperty(pin);
+			pinSetter = gsap.quickSetter(pin, direction.a, _px);
+			// pin.firstChild && !_maxScroll(pin, direction) && (pin.style.overflow = "hidden"); // protects from collapsing margins, but can have unintended consequences as demonstrated here: https://codepen.io/GreenSock/pen/1e42c7a73bfa409d2cf1e184e7a4248d so it was removed in favor of just telling people to set up their CSS to avoid the collapsing margins (overflow: hidden | auto is just one option. Another is border-top: 1px solid transparent).
+			_swapPinIn(pin, spacer, cs);
+			pinState = _getState(pin);
+		}
+		if (markers) {
+			markerVars = _isObject(markers) ? _setDefaults(markers, _markerDefaults) : _markerDefaults;
+			markerStartTrigger = _createMarker("scroller-start", id, scroller, direction, markerVars, 0);
+			markerEndTrigger = _createMarker("scroller-end", id, scroller, direction, markerVars, 0, markerStartTrigger);
+			offset = markerStartTrigger["offset" + direction.op.d2];
+			let content = _getTarget(_getProxyProp(scroller, "content") || scroller);
+			markerStart = this.markerStart = _createMarker("start", id, content, direction, markerVars, offset, 0, containerAnimation);
+			markerEnd = this.markerEnd = _createMarker("end", id, content, direction, markerVars, offset, 0, containerAnimation);
+			containerAnimation && (caMarkerSetter = gsap.quickSetter([markerStart, markerEnd], direction.a, _px));
+			if ((!useFixedPosition && !(_proxies.length && _getProxyProp(scroller, "fixedMarkers") === true))) {
+				_makePositionable(isViewport ? _body : scroller);
+				gsap.set([markerStartTrigger, markerEndTrigger], {force3D: true});
+				markerStartSetter = gsap.quickSetter(markerStartTrigger, direction.a, _px);
+				markerEndSetter = gsap.quickSetter(markerEndTrigger, direction.a, _px);
+			}
+		}
+
+		if (containerAnimation) {
+			let oldOnUpdate = containerAnimation.vars.onUpdate,
+				oldParams = containerAnimation.vars.onUpdateParams;
+			containerAnimation.eventCallback("onUpdate", () => {
+				self.update(0, 0, 1);
+				oldOnUpdate && oldOnUpdate.apply(containerAnimation, oldParams || []);
+			});
+		}
+
+		self.previous = () => _triggers[_triggers.indexOf(self) - 1];
+		self.next = () => _triggers[_triggers.indexOf(self) + 1];
+
+		self.revert = (revert, temp) => {
+			if (!temp) { return self.kill(true); } // for compatibility with gsap.context() and gsap.matchMedia() which call revert()
+			let r = revert !== false || !self.enabled,
+				prevRefreshing = _refreshing;
+			if (r !== self.isReverted) {
+				if (r) {
+					prevScroll = Math.max(scrollFunc(), self.scroll.rec || 0); // record the scroll so we can revert later (repositioning/pinning things can affect scroll position). In the static refresh() method, we first record all the scroll positions as a reference.
+					prevProgress = self.progress;
+					prevAnimProgress = animation && animation.progress();
+				}
+				markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(m => m.style.display = r ? "none" : "block");
+				if (r) {
+					_refreshing = self;
+					self.update(r); // make sure the pin is back in its original position so that all the measurements are correct. do this BEFORE swapping the pin out
+				}
+				if (pin && (!pinReparent || !self.isActive)) {
+					if (r) {
+						_swapPinOut(pin, spacer, pinOriginalState);
+					} else {
+						_swapPinIn(pin, spacer, _getComputedStyle(pin), spacerState);
+					}
+				}
+				r || self.update(r); // when we're restoring, the update should run AFTER swapping the pin into its pin-spacer.
+				_refreshing = prevRefreshing; // restore. We set it to true during the update() so that things fire properly in there.
+				self.isReverted = r;
+			}
+		};
+
+		self.refresh = (soft, force, position, pinOffset) => { // position is typically only defined if it's coming from setPositions() - it's a way to skip the normal parsing. pinOffset is also only from setPositions() and is mostly related to fancy stuff we need to do in ScrollSmoother with effects
+			if ((_refreshing || !self.enabled) && !force) {
+				return;
+			}
+			if (pin && soft && _lastScrollTime) {
+				_addListener(ScrollTrigger, "scrollEnd", _softRefresh);
+				return;
+			}
+			!_refreshingAll && onRefreshInit && onRefreshInit(self);
+			_refreshing = self;
+			if (tweenTo.tween && !position) { // we skip this if a position is passed in because typically that's from .setPositions() and it's best to allow in-progress snapping to continue.
+				tweenTo.tween.kill();
+				tweenTo.tween = 0;
+			}
+			scrubTween && scrubTween.pause();
+			invalidateOnRefresh && animation && animation.revert({kill: false}).invalidate();
+			self.isReverted || self.revert(true, true);
+			self._subPinOffset = false; // we'll set this to true in the sub-pins if we find any
+			let size = getScrollerSize(),
+				scrollerBounds = getScrollerOffsets(),
+				max = containerAnimation ? containerAnimation.duration() : _maxScroll(scroller, direction),
+				isFirstRefresh = change <= 0.01,
+				offset = 0,
+				otherPinOffset = pinOffset || 0,
+				parsedEnd = _isObject(position) ? position.end : vars.end,
+				parsedEndTrigger = vars.endTrigger || trigger,
+				parsedStart = _isObject(position) ? position.start : (vars.start || (vars.start === 0 || !trigger ? 0 : (pin ? "0 0" : "0 100%"))),
+				pinnedContainer = self.pinnedContainer = vars.pinnedContainer && _getTarget(vars.pinnedContainer, self),
+				triggerIndex = (trigger && Math.max(0, _triggers.indexOf(self))) || 0,
+				i = triggerIndex,
+				cs, bounds, scroll, isVertical, override, curTrigger, curPin, oppositeScroll, initted, revertedPins, forcedOverflow, markerStartOffset, markerEndOffset;
+			if (markers && _isObject(position)) { // if we alter the start/end positions with .setPositions(), it generally feeds in absolute NUMBERS which don't convey information about where to line up the markers, so to keep it intuitive, we record how far the trigger positions shift after applying the new numbers and then offset by that much in the opposite direction. We do the same to the associated trigger markers too of course.
+				markerStartOffset = gsap.getProperty(markerStartTrigger, direction.p);
+				markerEndOffset = gsap.getProperty(markerEndTrigger, direction.p);
+			}
+			while (i--) { // user might try to pin the same element more than once, so we must find any prior triggers with the same pin, revert them, and determine how long they're pinning so that we can offset things appropriately. Make sure we revert from last to first so that things "rewind" properly.
+				curTrigger = _triggers[i];
+				curTrigger.end || curTrigger.refresh(0, 1) || (_refreshing = self); // if it's a timeline-based trigger that hasn't been fully initialized yet because it's waiting for 1 tick, just force the refresh() here, otherwise if it contains a pin that's supposed to affect other ScrollTriggers further down the page, they won't be adjusted properly.
+				curPin = curTrigger.pin;
+				if (curPin && (curPin === trigger || curPin === pin || curPin === pinnedContainer) && !curTrigger.isReverted) {
+					revertedPins || (revertedPins = []);
+					revertedPins.unshift(curTrigger); // we'll revert from first to last to make sure things reach their end state properly
+					curTrigger.revert(true, true);
+				}
+				if (curTrigger !== _triggers[i]) { // in case it got removed.
+					triggerIndex--;
+					i--;
+				}
+			}
+			_isFunction(parsedStart) && (parsedStart = parsedStart(self));
+			parsedStart = _parseClamp(parsedStart, "start", self);
+			start = _parsePosition(parsedStart, trigger, size, direction, scrollFunc(), markerStart, markerStartTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._startClamp && "_startClamp") || (pin ? -0.001 : 0);
+			_isFunction(parsedEnd) && (parsedEnd = parsedEnd(self));
+			if (_isString(parsedEnd) && !parsedEnd.indexOf("+=")) {
+				if (~parsedEnd.indexOf(" ")) {
+					parsedEnd = (_isString(parsedStart) ? parsedStart.split(" ")[0] : "") + parsedEnd;
+				} else {
+					offset = _offsetToPx(parsedEnd.substr(2), size);
+					parsedEnd = _isString(parsedStart) ? parsedStart : (containerAnimation ? gsap.utils.mapRange(0, containerAnimation.duration(), containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, start) : start) + offset; // _parsePosition won't factor in the offset if the start is a number, so do it here.
+					parsedEndTrigger = trigger;
+				}
+			}
+			parsedEnd = _parseClamp(parsedEnd, "end", self);
+			end = Math.max(start, _parsePosition(parsedEnd || (parsedEndTrigger ? "100% 0" : max), parsedEndTrigger, size, direction, scrollFunc() + offset, markerEnd, markerEndTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._endClamp && "_endClamp")) || -0.001;
+
+			offset = 0;
+			i = triggerIndex;
+			while (i--) {
+				curTrigger = _triggers[i];
+				curPin = curTrigger.pin;
+				if (curPin && curTrigger.start - curTrigger._pinPush <= start && !containerAnimation && curTrigger.end > 0) {
+					cs = curTrigger.end - (self._startClamp ? Math.max(0, curTrigger.start) : curTrigger.start);
+					if (((curPin === trigger && curTrigger.start - curTrigger._pinPush < start) || curPin === pinnedContainer) && isNaN(parsedStart)) { // numeric start values shouldn't be offset at all - treat them as absolute
+						offset += cs * (1 - curTrigger.progress);
+					}
+					curPin === pin && (otherPinOffset += cs);
+				}
+			}
+			start += offset;
+			end += offset;
+			self._startClamp && (self._startClamp += offset);
+
+			if (self._endClamp && !_refreshingAll) {
+				self._endClamp = end || -0.001;
+				end = Math.min(end, _maxScroll(scroller, direction));
+			}
+			change = (end - start) || ((start -= 0.01) && 0.001);
+
+			if (isFirstRefresh) { // on the very first refresh(), the prevProgress couldn't have been accurate yet because the start/end were never calculated, so we set it here. Before 3.11.5, it could lead to an inaccurate scroll position restoration with snapping.
+				prevProgress = gsap.utils.clamp(0, 1, gsap.utils.normalize(start, end, prevScroll));
+			}
+			self._pinPush = otherPinOffset;
+			if (markerStart && offset) { // offset the markers if necessary
+				cs = {};
+				cs[direction.a] = "+=" + offset;
+				pinnedContainer && (cs[direction.p] = "-=" + scrollFunc());
+				gsap.set([markerStart, markerEnd], cs);
+			}
+
+			if (pin && !(_clampingMax && self.end >= _maxScroll(scroller, direction))) {
+				cs = _getComputedStyle(pin);
+				isVertical = direction === _vertical;
+				scroll = scrollFunc(); // recalculate because the triggers can affect the scroll
+				pinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;
+				if (!max && end > 1) { // makes sure the scroller has a scrollbar, otherwise if something has width: 100%, for example, it would be too big (exclude the scrollbar). See https://gsap.com/forums/topic/25182-scrolltrigger-width-of-page-increase-where-markers-are-set-to-false/
+					forcedOverflow = (isViewport ? (_doc.scrollingElement || _docEl) : scroller).style;
+					forcedOverflow = {style: forcedOverflow, value: forcedOverflow["overflow" + direction.a.toUpperCase()]};
+					if (isViewport && _getComputedStyle(_body)["overflow" + direction.a.toUpperCase()] !== "scroll") { // avoid an extra scrollbar if BOTH <html> and <body> have overflow set to "scroll"
+						forcedOverflow.style["overflow" + direction.a.toUpperCase()] = "scroll";
+					}
+				}
+				_swapPinIn(pin, spacer, cs);
+				pinState = _getState(pin);
+				// transforms will interfere with the top/left/right/bottom placement, so remove them temporarily. getBoundingClientRect() factors in transforms.
+				bounds = _getBounds(pin, true);
+				oppositeScroll = useFixedPosition && _getScrollFunc(scroller, isVertical ? _horizontal : _vertical)();
+				if (pinSpacing) {
+					spacerState = [pinSpacing + direction.os2, change + otherPinOffset + _px];
+					spacerState.t = spacer;
+					i = (pinSpacing === _padding) ? _getSize(pin, direction) + change + otherPinOffset : 0;
+					if (i) {
+						spacerState.push(direction.d, i + _px); // for box-sizing: border-box (must include padding).
+						spacer.style.flexBasis !== "auto" && (spacer.style.flexBasis = i + _px);
+					}
+					_setState(spacerState);
+					if (pinnedContainer) { // in ScrollTrigger.refresh(), we need to re-evaluate the pinContainer's size because this pinSpacing may stretch it out, but we can't just add the exact distance because depending on layout, it may not push things down or it may only do so partially.
+						_triggers.forEach(t => {
+							if (t.pin === pinnedContainer && t.vars.pinSpacing !== false) {
+								t._subPinOffset = true;
+							}
+						});
+					}
+					useFixedPosition && scrollFunc(prevScroll);
+				} else {
+					i = _getSize(pin, direction);
+					i && spacer.style.flexBasis !== "auto" && (spacer.style.flexBasis = i + _px);
+				}
+				if (useFixedPosition) {
+					override = {
+						top: (bounds.top + (isVertical ? scroll - start : oppositeScroll)) + _px,
+						left: (bounds.left + (isVertical ? oppositeScroll : scroll - start)) + _px,
+						boxSizing: "border-box",
+						position: "fixed"
+					};
+					override[_width] = override["max" + _Width] = Math.ceil(bounds.width) + _px;
+					override[_height] = override["max" + _Height] = Math.ceil(bounds.height) + _px;
+					override[_margin] = override[_margin + _Top] = override[_margin + _Right] = override[_margin + _Bottom] = override[_margin + _Left] = "0";
+					override[_padding] = cs[_padding];
+					override[_padding + _Top] = cs[_padding + _Top];
+					override[_padding + _Right] = cs[_padding + _Right];
+					override[_padding + _Bottom] = cs[_padding + _Bottom];
+					override[_padding + _Left] = cs[_padding + _Left];
+					pinActiveState = _copyState(pinOriginalState, override, pinReparent);
+					_refreshingAll && scrollFunc(0);
+				}
+				if (animation) { // the animation might be affecting the transform, so we must jump to the end, check the value, and compensate accordingly. Otherwise, when it becomes unpinned, the pinSetter() will get set to a value that doesn't include whatever the animation did.
+					initted = animation._initted; // if not, we must invalidate() after this step, otherwise it could lock in starting values prematurely.
+					_suppressOverwrites(1);
+					animation.render(animation.duration(), true, true);
+					pinChange = pinGetter(direction.a) - pinStart + change + otherPinOffset;
+					pinMoves = Math.abs(change - pinChange) > 1;
+					useFixedPosition && pinMoves && pinActiveState.splice(pinActiveState.length - 2, 2); // transform is the last property/value set in the state Array. Since the animation is controlling that, we should omit it.
+					animation.render(0, true, true);
+					initted || animation.invalidate(true);
+					animation.parent || animation.totalTime(animation.totalTime()); // if, for example, a toggleAction called play() and then refresh() happens and when we render(1) above, it would cause the animation to complete and get removed from its parent, so this makes sure it gets put back in.
+					_suppressOverwrites(0);
+				} else {
+					pinChange = change;
+				}
+				forcedOverflow && (forcedOverflow.value ? (forcedOverflow.style["overflow" + direction.a.toUpperCase()] = forcedOverflow.value) : forcedOverflow.style.removeProperty("overflow-" + direction.a));
+			} else if (trigger && scrollFunc() && !containerAnimation) { // it may be INSIDE a pinned element, so walk up the tree and look for any elements with _pinOffset to compensate because anything with pinSpacing that's already scrolled would throw off the measurements in getBoundingClientRect()
+				bounds = trigger.parentNode;
+				while (bounds && bounds !== _body) {
+					if (bounds._pinOffset) {
+						start -= bounds._pinOffset;
+						end -= bounds._pinOffset;
+					}
+					bounds = bounds.parentNode;
+				}
+			}
+			revertedPins && revertedPins.forEach(t => t.revert(false, true));
+			self.start = start;
+			self.end = end;
+			scroll1 = scroll2 = _refreshingAll ? prevScroll : scrollFunc(); // reset velocity
+			if (!containerAnimation && !_refreshingAll) {
+				scroll1 < prevScroll && scrollFunc(prevScroll);
+				self.scroll.rec = 0;
+			}
+			self.revert(false, true);
+			lastRefresh = _getTime();
+			if (snapDelayedCall) {
+				lastSnap = -1; // just so snapping gets re-enabled, clear out any recorded last value
+				// self.isActive && scrollFunc(start + change * prevProgress); // previously this line was here to ensure that when snapping kicks in, it's from the previous progress but in some cases that's not desirable, like an all-page ScrollTrigger when new content gets added to the page, that'd totally change the progress.
+				snapDelayedCall.restart(true);
+			}
+			_refreshing = 0;
+			animation && isToggle && (animation._initted || prevAnimProgress) && animation.progress() !== prevAnimProgress && animation.progress(prevAnimProgress || 0, true).render(animation.time(), true, true); // must force a re-render because if saveStyles() was used on the target(s), the styles could have been wiped out during the refresh().
+			if (isFirstRefresh || prevProgress !== self.progress || containerAnimation || invalidateOnRefresh) { // ensures that the direction is set properly (when refreshing, progress is set back to 0 initially, then back again to wherever it needs to be) and that callbacks are triggered.
+				animation && !isToggle && animation.totalProgress(containerAnimation && start < -0.001 && !prevProgress ? gsap.utils.normalize(start, end, 0) : prevProgress, true); // to avoid issues where animation callbacks like onStart aren't triggered.
+				self.progress = isFirstRefresh || ((scroll1 - start) / change === prevProgress) ? 0 : prevProgress;
+			}
+			pin && pinSpacing && (spacer._pinOffset = Math.round(self.progress * pinChange));
+			scrubTween && scrubTween.invalidate();
+
+			if (!isNaN(markerStartOffset)) { // numbers were passed in for the position which are absolute, so instead of just putting the markers at the very bottom of the viewport, we figure out how far they shifted down (it's safe to assume they were originally positioned in closer relation to the trigger element with values like "top", "center", a percentage or whatever, so we offset that much in the opposite direction to basically revert them to the relative position thy were at previously.
+				markerStartOffset -= gsap.getProperty(markerStartTrigger, direction.p);
+				markerEndOffset -= gsap.getProperty(markerEndTrigger, direction.p);
+				_shiftMarker(markerStartTrigger, direction, markerStartOffset);
+				_shiftMarker(markerStart, direction, markerStartOffset - (pinOffset || 0));
+				_shiftMarker(markerEndTrigger, direction, markerEndOffset);
+				_shiftMarker(markerEnd, direction, markerEndOffset - (pinOffset || 0));
+			}
+
+			isFirstRefresh && !_refreshingAll && self.update(); // edge case - when you reload a page when it's already scrolled down, some browsers fire a "scroll" event before DOMContentLoaded, triggering an updateAll(). If we don't update the self.progress as part of refresh(), then when it happens next, it may record prevProgress as 0 when it really shouldn't, potentially causing a callback in an animation to fire again.
+
+			if (onRefresh && !_refreshingAll && !executingOnRefresh) { // when refreshing all, we do extra work to correct pinnedContainer sizes and ensure things don't exceed the maxScroll, so we should do all the refreshes at the end after all that work so that the start/end values are corrected.
+				executingOnRefresh = true;
+				onRefresh(self);
+				executingOnRefresh = false;
+			}
+		};
+
+		self.getVelocity = () => ((scrollFunc() - scroll2) / (_getTime() - _time2) * 1000) || 0;
+
+		self.endAnimation = () => {
+			_endAnimation(self.callbackAnimation);
+			if (animation) {
+				scrubTween ? scrubTween.progress(1) : (!animation.paused() ? _endAnimation(animation, animation.reversed()) : isToggle || _endAnimation(animation, self.direction < 0, 1));
+			}
+		};
+
+		self.labelToScroll = label => animation && animation.labels && ((start || self.refresh() || start) + (animation.labels[label] / animation.duration()) * change) || 0;
+
+		self.getTrailing = name => {
+			let i = _triggers.indexOf(self),
+				a = self.direction > 0 ? _triggers.slice(0, i).reverse() : _triggers.slice(i+1);
+			return (_isString(name) ? a.filter(t => t.vars.preventOverlaps === name) : a).filter(t => self.direction > 0 ? t.end <= start : t.start >= end);
+		};
+
+
+		self.update = (reset, recordVelocity, forceFake) => {
+			if (containerAnimation && !forceFake && !reset) {
+				return;
+			}
+			let scroll = _refreshingAll === true ? prevScroll : self.scroll(),
+				p = reset ? 0 : (scroll - start) / change,
+				clipped = p < 0 ? 0 : p > 1 ? 1 : p || 0,
+				prevProgress = self.progress,
+				isActive, wasActive, toggleState, action, stateChanged, toggled, isAtMax, isTakingAction;
+			if (recordVelocity) {
+				scroll2 = scroll1;
+				scroll1 = containerAnimation ? scrollFunc() : scroll;
+				if (snap) {
+					snap2 = snap1;
+					snap1 = animation && !isToggle ? animation.totalProgress() : clipped;
+				}
+			}
+			// anticipate the pinning a few ticks ahead of time based on velocity to avoid a visual glitch due to the fact that most browsers do scrolling on a separate thread (not synced with requestAnimationFrame).
+			if (anticipatePin && pin && !_refreshing && !_startup && _lastScrollTime) {
+				if (!clipped && start < scroll + ((scroll - scroll2) / (_getTime() - _time2)) * anticipatePin) {
+					clipped = 0.0001;
+				} else if (clipped === 1 && end > scroll + ((scroll - scroll2) / (_getTime() - _time2)) * anticipatePin) {
+					clipped = 0.9999;
+				}
+			}
+			if (clipped !== prevProgress && self.enabled) {
+				isActive = self.isActive = !!clipped && clipped < 1;
+				wasActive = !!prevProgress && prevProgress < 1;
+				toggled = isActive !== wasActive;
+				stateChanged = toggled || !!clipped !== !!prevProgress; // could go from start all the way to end, thus it didn't toggle but it did change state in a sense (may need to fire a callback)
+				self.direction = clipped > prevProgress ? 1 : -1;
+				self.progress = clipped;
+
+				if (stateChanged && !_refreshing) {
+					toggleState = clipped && !prevProgress ? 0 : clipped === 1 ? 1 : prevProgress === 1 ? 2 : 3; // 0 = enter, 1 = leave, 2 = enterBack, 3 = leaveBack (we prioritize the FIRST encounter, thus if you scroll really fast past the onEnter and onLeave in one tick, it'd prioritize onEnter.
+					if (isToggle) {
+						action = (!toggled && toggleActions[toggleState + 1] !== "none" && toggleActions[toggleState + 1]) || toggleActions[toggleState]; // if it didn't toggle, that means it shot right past and since we prioritize the "enter" action, we should switch to the "leave" in this case (but only if one is defined)
+						isTakingAction = animation && (action === "complete" || action === "reset" || action in animation);
+					}
+				}
+
+				preventOverlaps && (toggled || isTakingAction) && (isTakingAction || scrub || !animation) && (_isFunction(preventOverlaps) ? preventOverlaps(self) : self.getTrailing(preventOverlaps).forEach(t => t.endAnimation()));
+
+				if (!isToggle) {
+					if (scrubTween && !_refreshing && !_startup) {
+						(scrubTween._dp._time - scrubTween._start !== scrubTween._time) && scrubTween.render(scrubTween._dp._time - scrubTween._start); // if there's a scrub on both the container animation and this one (or a ScrollSmoother), the update order would cause this one not to have rendered yet, so it wouldn't make any progress before we .restart() it heading toward the new progress so it'd appear stuck thus we force a render here.
+						if (scrubTween.resetTo) {
+							scrubTween.resetTo("totalProgress", clipped, animation._tTime / animation._tDur);
+						} else { // legacy support (courtesy), before 3.10.0
+							scrubTween.vars.totalProgress = clipped;
+							scrubTween.invalidate().restart();
+						}
+					} else if (animation) {
+						animation.totalProgress(clipped, !!(_refreshing && (lastRefresh || reset)));
+					}
+				}
+				if (pin) {
+					reset && pinSpacing && (spacer.style[pinSpacing + direction.os2] = spacingStart);
+					if (!useFixedPosition) {
+						pinSetter(_round(pinStart + pinChange * clipped));
+					} else if (stateChanged) {
+						isAtMax = !reset && clipped > prevProgress && end + 1 > scroll && scroll + 1 >= _maxScroll(scroller, direction); // if it's at the VERY end of the page, don't switch away from position: fixed because it's pointless and it could cause a brief flash when the user scrolls back up (when it gets pinned again)
+						if (pinReparent) {
+							if (!reset && (isActive || isAtMax)) {
+								let bounds = _getBounds(pin, true),
+									offset = scroll - start;
+								_reparent(pin, _body, (bounds.top + (direction === _vertical ? offset : 0)) + _px, (bounds.left + (direction === _vertical ? 0 : offset)) + _px);
+							} else {
+								_reparent(pin, spacer);
+							}
+						}
+						_setState(isActive || isAtMax ? pinActiveState : pinState);
+						(pinMoves && clipped < 1 && isActive) || pinSetter(pinStart + (clipped === 1 && !isAtMax ? pinChange : 0));
+					}
+				}
+				snap && !tweenTo.tween && !_refreshing && !_startup && snapDelayedCall.restart(true);
+				toggleClass && (toggled || (once && clipped && (clipped < 1 || !_limitCallbacks))) && _toArray(toggleClass.targets).forEach(el => el.classList[isActive || once ? "add" : "remove"](toggleClass.className)); // classes could affect positioning, so do it even if reset or refreshing is true.
+				onUpdate && !isToggle && !reset && onUpdate(self);
+				if (stateChanged && !_refreshing) {
+					if (isToggle) {
+						if (isTakingAction) {
+							if (action === "complete") {
+								animation.pause().totalProgress(1);
+							} else if (action === "reset") {
+								animation.restart(true).pause();
+							} else if (action === "restart") {
+								animation.restart(true);
+							} else {
+								animation[action]();
+							}
+						}
+						onUpdate && onUpdate(self);
+					}
+					if (toggled || !_limitCallbacks) { // on startup, the page could be scrolled and we don't want to fire callbacks that didn't toggle. For example onEnter shouldn't fire if the ScrollTrigger isn't actually entered.
+						onToggle && toggled && _callback(self, onToggle);
+						callbacks[toggleState] && _callback(self, callbacks[toggleState]);
+						once && (clipped === 1 ? self.kill(false, 1) : (callbacks[toggleState] = 0)); // a callback shouldn't be called again if once is true.
+						if (!toggled) { // it's possible to go completely past, like from before the start to after the end (or vice-versa) in which case BOTH callbacks should be fired in that order
+							toggleState = clipped === 1 ? 1 : 3;
+							callbacks[toggleState] && _callback(self, callbacks[toggleState]);
+						}
+					}
+					if (fastScrollEnd && !isActive && Math.abs(self.getVelocity()) > (_isNumber(fastScrollEnd) ? fastScrollEnd : 2500)) {
+						_endAnimation(self.callbackAnimation);
+						scrubTween ? scrubTween.progress(1) : _endAnimation(animation, action === "reverse" ? 1 : !clipped, 1);
+					}
+				} else if (isToggle && onUpdate && !_refreshing) {
+					onUpdate(self);
+				}
+			}
+			// update absolutely-positioned markers (only if the scroller isn't the viewport)
+			if (markerEndSetter) {
+				let n = containerAnimation ? scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0) : scroll;
+				markerStartSetter(n + (markerStartTrigger._isFlipped ? 1 : 0));
+				markerEndSetter(n);
+			}
+			caMarkerSetter && caMarkerSetter(-scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0));
+		};
+
+		self.enable = (reset, refresh) => {
+			if (!self.enabled) {
+				self.enabled = true;
+				_addListener(scroller, "resize", _onResize);
+				isViewport || _addListener(scroller, "scroll", _onScroll);
+				onRefreshInit && _addListener(ScrollTrigger, "refreshInit", onRefreshInit);
+				if (reset !== false) {
+					self.progress = prevProgress = 0;
+					scroll1 = scroll2 = lastSnap = scrollFunc();
+				}
+				refresh !== false && self.refresh();
+			}
+		};
+
+		self.getTween = snap => snap && tweenTo ? tweenTo.tween : scrubTween;
+
+		self.setPositions = (newStart, newEnd, keepClamp, pinOffset) => { // doesn't persist after refresh()! Intended to be a way to override values that were set during refresh(), like you could set it in onRefresh()
+			if (containerAnimation) { // convert ratios into scroll positions. Remember, start/end values on ScrollTriggers that have a containerAnimation refer to the time (in seconds), NOT scroll positions.
+				let st = containerAnimation.scrollTrigger,
+					duration = containerAnimation.duration(),
+					change = st.end - st.start;
+				newStart = st.start + change * newStart / duration;
+				newEnd = st.start + change * newEnd / duration;
+			}
+			self.refresh(false, false, {start: _keepClamp(newStart, keepClamp && !!self._startClamp), end: _keepClamp(newEnd, keepClamp && !!self._endClamp)}, pinOffset);
+			self.update();
+		};
+
+		self.adjustPinSpacing = amount => {
+			if (spacerState && amount) {
+				let i = spacerState.indexOf(direction.d) + 1;
+				spacerState[i] = (parseFloat(spacerState[i]) + amount) + _px;
+				spacerState[1] = (parseFloat(spacerState[1]) + amount) + _px;
+				_setState(spacerState);
+			}
+		};
+
+		self.disable = (reset, allowAnimation) => {
+			if (self.enabled) {
+				reset !== false && self.revert(true, true);
+				self.enabled = self.isActive = false;
+				allowAnimation || (scrubTween && scrubTween.pause());
+				prevScroll = 0;
+				pinCache && (pinCache.uncache = 1);
+				onRefreshInit && _removeListener(ScrollTrigger, "refreshInit", onRefreshInit);
+				if (snapDelayedCall) {
+					snapDelayedCall.pause();
+					tweenTo.tween && tweenTo.tween.kill() && (tweenTo.tween = 0);
+				}
+				if (!isViewport) {
+					let i = _triggers.length;
+					while (i--) {
+						if (_triggers[i].scroller === scroller && _triggers[i] !== self) {
+							return; //don't remove the listeners if there are still other triggers referencing it.
+						}
+					}
+					_removeListener(scroller, "resize", _onResize);
+					isViewport || _removeListener(scroller, "scroll", _onScroll);
+				}
+			}
+		};
+
+		self.kill = (revert, allowAnimation) => {
+			self.disable(revert, allowAnimation);
+			scrubTween && !allowAnimation && scrubTween.kill();
+			id && (delete _ids[id]);
+			let i = _triggers.indexOf(self);
+			i >= 0 && _triggers.splice(i, 1);
+			i === _i && _direction > 0 && _i--; // if we're in the middle of a refresh() or update(), splicing would cause skips in the index, so adjust...
+
+			// if no other ScrollTrigger instances of the same scroller are found, wipe out any recorded scroll position. Otherwise, in a single page application, for example, it could maintain scroll position when it really shouldn't.
+			i = 0;
+			_triggers.forEach(t => t.scroller === self.scroller && (i = 1));
+			i || _refreshingAll || (self.scroll.rec = 0);
+
+			if (animation) {
+				animation.scrollTrigger = null;
+				revert && animation.revert({kill: false});
+				allowAnimation || animation.kill();
+			}
+			markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(m => m.parentNode && m.parentNode.removeChild(m));
+			_primary === self && (_primary = 0);
+			if (pin) {
+				pinCache && (pinCache.uncache = 1);
+				i = 0;
+				_triggers.forEach(t => t.pin === pin && i++);
+				i || (pinCache.spacer = 0); // if there aren't any more ScrollTriggers with the same pin, remove the spacer, otherwise it could be contaminated with old/stale values if the user re-creates a ScrollTrigger for the same element.
+			}
+			vars.onKill && vars.onKill(self);
+		};
+
+		_triggers.push(self);
+		self.enable(false, false);
+		customRevertReturn && customRevertReturn(self);
+
+		if (animation && animation.add && !change) { // if the animation is a timeline, it may not have been populated yet, so it wouldn't render at the proper place on the first refresh(), thus we should schedule one for the next tick. If "change" is defined, we know it must be re-enabling, thus we can refresh() right away.
+			let updateFunc = self.update; // some browsers may fire a scroll event BEFORE a tick elapses and/or the DOMContentLoaded fires. So there's a chance update() will be called BEFORE a refresh() has happened on a Timeline-attached ScrollTrigger which means the start/end won't be calculated yet. We don't want to add conditional logic inside the update() method (like check to see if end is defined and if not, force a refresh()) because that's a function that gets hit a LOT (performance). So we swap out the real update() method for this one that'll re-attach it the first time it gets called and of course forces a refresh().
+			self.update = () => {
+				self.update = updateFunc;
+				start || end || self.refresh();
+			};
+			gsap.delayedCall(0.01, self.update);
+			change = 0.01;
+			start = end = 0;
+		} else {
+			self.refresh();
+		}
+		pin && _queueRefreshAll(); // pinning could affect the positions of other things, so make sure we queue a full refresh()
+	}
+
+
+	static register(core) {
+		if (!_coreInitted) {
+			gsap = core || _getGSAP();
+			_windowExists() && window.document && ScrollTrigger.enable();
+			_coreInitted = _enabled;
+		}
+		return _coreInitted;
+	}
+
+	static defaults(config) {
+		if (config) {
+			for (let p in config) {
+				_defaults[p] = config[p];
+			}
+		}
+		return _defaults;
+	}
+
+	static disable(reset, kill) {
+		_enabled = 0;
+		_triggers.forEach(trigger => trigger[kill ? "kill" : "disable"](reset));
+		_removeListener(_win, "wheel", _onScroll);
+		_removeListener(_doc, "scroll", _onScroll);
+		clearInterval(_syncInterval);
+		_removeListener(_doc, "touchcancel", _passThrough);
+		_removeListener(_body, "touchstart", _passThrough);
+		_multiListener(_removeListener, _doc, "pointerdown,touchstart,mousedown", _pointerDownHandler);
+		_multiListener(_removeListener, _doc, "pointerup,touchend,mouseup", _pointerUpHandler);
+		_resizeDelay.kill();
+		_iterateAutoRefresh(_removeListener);
+		for (let i = 0; i < _scrollers.length; i+=3) {
+			_wheelListener(_removeListener, _scrollers[i], _scrollers[i+1]);
+			_wheelListener(_removeListener, _scrollers[i], _scrollers[i+2]);
+		}
+	}
+
+	static enable() {
+		_win = window;
+		_doc = document;
+		_docEl = _doc.documentElement;
+		_body = _doc.body;
+		if (gsap) {
+			_toArray = gsap.utils.toArray;
+			_clamp = gsap.utils.clamp;
+			_context = gsap.core.context || _passThrough;
+			_suppressOverwrites = gsap.core.suppressOverwrites || _passThrough;
+			_scrollRestoration = _win.history.scrollRestoration || "auto";
+			_lastScroll = _win.pageYOffset;
+			gsap.core.globals("ScrollTrigger", ScrollTrigger); // must register the global manually because in Internet Explorer, functions (classes) don't have a "name" property.
+			if (_body) {
+				_enabled = 1;
+				_div100vh = document.createElement("div"); // to solve mobile browser address bar show/hide resizing, we shouldn't rely on window.innerHeight. Instead, use a <div> with its height set to 100vh and measure that since that's what the scrolling is based on anyway and it's not affected by address bar showing/hiding.
+				_div100vh.style.height = "100vh";
+				_div100vh.style.position = "absolute";
+				_refresh100vh();
+				_rafBugFix();
+				Observer.register(gsap);
+				// isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.
+				ScrollTrigger.isTouch = Observer.isTouch;
+				_fixIOSBug = Observer.isTouch && /(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent); // since 2017, iOS has had a bug that causes event.clientX/Y to be inaccurate when a scroll occurs, thus we must alternate ignoring every other touchmove event to work around it. See https://bugs.webkit.org/show_bug.cgi?id=181954 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503
+				_ignoreMobileResize = Observer.isTouch === 1;
+				_addListener(_win, "wheel", _onScroll); // mostly for 3rd party smooth scrolling libraries.
+				_root = [_win, _doc, _docEl, _body];
+				if (gsap.matchMedia) {
+					ScrollTrigger.matchMedia = vars => {
+						let mm = gsap.matchMedia(),
+							p;
+						for (p in vars) {
+							mm.add(p, vars[p]);
+						}
+						return mm;
+					};
+					gsap.addEventListener("matchMediaInit", () => _revertAll());
+					gsap.addEventListener("matchMediaRevert", () => _revertRecorded());
+					gsap.addEventListener("matchMedia", () => {
+						_refreshAll(0, 1);
+						_dispatch("matchMedia");
+					});
+					gsap.matchMedia("(orientation: portrait)", () => { // when orientation changes, we should take new base measurements for the ignoreMobileResize feature.
+						_setBaseDimensions();
+						return _setBaseDimensions;
+					});
+				} else {
+					console.warn("Requires GSAP 3.11.0 or later");
+				}
+				_setBaseDimensions();
+				_addListener(_doc, "scroll", _onScroll); // some browsers (like Chrome), the window stops dispatching scroll events on the window if you scroll really fast, but it's consistent on the document!
+				let bodyStyle = _body.style,
+					border = bodyStyle.borderTopStyle,
+					AnimationProto = gsap.core.Animation.prototype,
+					bounds, i;
+				AnimationProto.revert || Object.defineProperty(AnimationProto, "revert", { value: function() { return this.time(-0.01, true); }}); // only for backwards compatibility (Animation.revert() was added after 3.10.4)
+				bodyStyle.borderTopStyle = "solid"; // works around an issue where a margin of a child element could throw off the bounds of the _body, making it seem like there's a margin when there actually isn't. The border ensures that the bounds are accurate.
+				bounds = _getBounds(_body);
+				_vertical.m = Math.round(bounds.top + _vertical.sc()) || 0; // accommodate the offset of the <body> caused by margins and/or padding
+				_horizontal.m = Math.round(bounds.left + _horizontal.sc()) || 0;
+				border ? (bodyStyle.borderTopStyle = border) : bodyStyle.removeProperty("border-top-style");
+				// TODO: (?) maybe move to leveraging the velocity mechanism in Observer and skip intervals.
+				_syncInterval = setInterval(_sync, 250);
+				gsap.delayedCall(0.5, () => _startup = 0);
+				_addListener(_doc, "touchcancel", _passThrough); // some older Android devices intermittently stop dispatching "touchmove" events if we don't listen for "touchcancel" on the document.
+				_addListener(_body, "touchstart", _passThrough); //works around Safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/
+				_multiListener(_addListener, _doc, "pointerdown,touchstart,mousedown", _pointerDownHandler);
+				_multiListener(_addListener, _doc, "pointerup,touchend,mouseup", _pointerUpHandler);
+				_transformProp = gsap.utils.checkPrefix("transform");
+				_stateProps.push(_transformProp);
+				_coreInitted = _getTime();
+				_resizeDelay = gsap.delayedCall(0.2, _refreshAll).pause();
+				_autoRefresh = [_doc, "visibilitychange", () => {
+					let w = _win.innerWidth,
+						h = _win.innerHeight;
+					if (_doc.hidden) {
+						_prevWidth = w;
+						_prevHeight = h;
+					} else if (_prevWidth !== w || _prevHeight !== h) {
+						_onResize();
+					}
+				}, _doc, "DOMContentLoaded", _refreshAll, _win, "load", _refreshAll, _win, "resize", _onResize];
+				_iterateAutoRefresh(_addListener);
+				_triggers.forEach(trigger => trigger.enable(0, 1));
+				for (i = 0; i < _scrollers.length; i+=3) {
+					_wheelListener(_removeListener, _scrollers[i], _scrollers[i+1]);
+					_wheelListener(_removeListener, _scrollers[i], _scrollers[i+2]);
+				}
+			}
+		}
+	}
+
+	static config(vars) {
+		("limitCallbacks" in vars) && (_limitCallbacks = !!vars.limitCallbacks);
+		let ms = vars.syncInterval;
+		ms && clearInterval(_syncInterval) || ((_syncInterval = ms) && setInterval(_sync, ms));
+		("ignoreMobileResize" in vars) && (_ignoreMobileResize = ScrollTrigger.isTouch === 1 && vars.ignoreMobileResize);
+		if ("autoRefreshEvents" in vars) {
+			_iterateAutoRefresh(_removeListener) || _iterateAutoRefresh(_addListener, vars.autoRefreshEvents || "none");
+			_ignoreResize = (vars.autoRefreshEvents + "").indexOf("resize") === -1;
+		}
+	}
+
+	static scrollerProxy(target, vars) {
+		let t = _getTarget(target),
+			i = _scrollers.indexOf(t),
+			isViewport = _isViewport(t);
+		if (~i) {
+			_scrollers.splice(i, isViewport ? 6 : 2);
+		}
+		if (vars) {
+			isViewport ? _proxies.unshift(_win, vars, _body, vars, _docEl, vars) : _proxies.unshift(t, vars);
+		}
+	}
+
+	static clearMatchMedia(query) {
+		_triggers.forEach(t => t._ctx && t._ctx.query === query && t._ctx.kill(true, true));
+	}
+
+	static isInViewport(element, ratio, horizontal) {
+		let bounds = (_isString(element) ? _getTarget(element) : element).getBoundingClientRect(),
+			offset = bounds[horizontal ? _width : _height] * ratio || 0;
+		return horizontal ? bounds.right - offset > 0 && bounds.left + offset < _win.innerWidth : bounds.bottom - offset > 0 && bounds.top + offset < _win.innerHeight;
+	}
+
+	static positionInViewport(element, referencePoint, horizontal) {
+		_isString(element) && (element = _getTarget(element));
+		let bounds = element.getBoundingClientRect(),
+			size = bounds[horizontal ? _width : _height],
+			offset = referencePoint == null ? size / 2 : ((referencePoint in _keywords) ? _keywords[referencePoint] * size : ~referencePoint.indexOf("%") ? parseFloat(referencePoint) * size / 100 : parseFloat(referencePoint) || 0);
+		return horizontal ? (bounds.left + offset) / _win.innerWidth : (bounds.top + offset) / _win.innerHeight;
+	}
+
+	static killAll(allowListeners) {
+		_triggers.slice(0).forEach(t => t.vars.id !== "ScrollSmoother" && t.kill());
+		if (allowListeners !== true) {
+			let listeners = _listeners.killAll || [];
+			_listeners = {};
+			listeners.forEach(f => f());
+		}
+	}
+
+}
+
+ScrollTrigger.version = "3.12.5";
+ScrollTrigger.saveStyles = targets => targets ? _toArray(targets).forEach(target => { // saved styles are recorded in a consecutive alternating Array, like [element, cssText, transform attribute, cache, matchMedia, ...]
+	if (target && target.style) {
+		let i = _savedStyles.indexOf(target);
+		i >= 0 && _savedStyles.splice(i, 5);
+		_savedStyles.push(target, target.style.cssText, target.getBBox && target.getAttribute("transform"), gsap.core.getCache(target), _context());
+	}
+}) : _savedStyles;
+ScrollTrigger.revert = (soft, media) => _revertAll(!soft, media);
+ScrollTrigger.create = (vars, animation) => new ScrollTrigger(vars, animation);
+ScrollTrigger.refresh = safe => safe ? _onResize() : (_coreInitted || ScrollTrigger.register()) && _refreshAll(true);
+ScrollTrigger.update = force => ++_scrollers.cache && _updateAll(force === true ? 2 : 0);
+ScrollTrigger.clearScrollMemory = _clearScrollMemory;
+ScrollTrigger.maxScroll = (element, horizontal) => _maxScroll(element, horizontal ? _horizontal : _vertical);
+ScrollTrigger.getScrollFunc = (element, horizontal) => _getScrollFunc(_getTarget(element), horizontal ? _horizontal : _vertical);
+ScrollTrigger.getById = id => _ids[id];
+ScrollTrigger.getAll = () => _triggers.filter(t => t.vars.id !== "ScrollSmoother"); // it's common for people to ScrollTrigger.getAll(t => t.kill()) on page routes, for example, and we don't want it to ruin smooth scrolling by killing the main ScrollSmoother one.
+ScrollTrigger.isScrolling = () => !!_lastScrollTime;
+ScrollTrigger.snapDirectional = _snapDirectional;
+ScrollTrigger.addEventListener = (type, callback) => {
+	let a = _listeners[type] || (_listeners[type] = []);
+	~a.indexOf(callback) || a.push(callback);
+};
+ScrollTrigger.removeEventListener = (type, callback) => {
+	let a = _listeners[type],
+		i = a && a.indexOf(callback);
+	i >= 0 && a.splice(i, 1);
+};
+ScrollTrigger.batch = (targets, vars) => {
+	let result = [],
+		varsCopy = {},
+		interval = vars.interval || 0.016,
+		batchMax = vars.batchMax || 1e9,
+		proxyCallback = (type, callback) => {
+			let elements = [],
+				triggers = [],
+				delay = gsap.delayedCall(interval, () => {callback(elements, triggers); elements = []; triggers = [];}).pause();
+			return self => {
+				elements.length || delay.restart(true);
+				elements.push(self.trigger);
+				triggers.push(self);
+				batchMax <= elements.length && delay.progress(1);
+			};
+		},
+		p;
+	for (p in vars) {
+		varsCopy[p] = (p.substr(0, 2) === "on" && _isFunction(vars[p]) && p !== "onRefreshInit") ? proxyCallback(p, vars[p]) : vars[p];
+	}
+	if (_isFunction(batchMax)) {
+		batchMax = batchMax();
+		_addListener(ScrollTrigger, "refresh", () => batchMax = vars.batchMax());
+	}
+	_toArray(targets).forEach(target => {
+		let config = {};
+		for (p in varsCopy) {
+			config[p] = varsCopy[p];
+		}
+		config.trigger = target;
+		result.push(ScrollTrigger.create(config));
+	});
+	return result;
+};
+
+
+// to reduce file size. clamps the scroll and also returns a duration multiplier so that if the scroll gets chopped shorter, the duration gets curtailed as well (otherwise if you're very close to the top of the page, for example, and swipe up really fast, it'll suddenly slow down and take a long time to reach the top).
+let _clampScrollAndGetDurationMultiplier = (scrollFunc, current, end, max) => {
+		current > max ? scrollFunc(max) : current < 0 && scrollFunc(0);
+		return end > max ? (max - current) / (end - current) : end < 0 ? current / (current - end) : 1;
+	},
+	_allowNativePanning = (target, direction) => {
+		if (direction === true) {
+			target.style.removeProperty("touch-action");
+		} else {
+			target.style.touchAction = direction === true ? "auto" : direction ? "pan-" + direction + (Observer.isTouch ? " pinch-zoom" : "") : "none"; // note: Firefox doesn't support it pinch-zoom properly, at least in addition to a pan-x or pan-y.
+		}
+		target === _docEl && _allowNativePanning(_body, direction);
+	},
+	_overflow = {auto: 1, scroll: 1},
+	_nestedScroll = ({event, target, axis}) => {
+		let node = (event.changedTouches ? event.changedTouches[0] : event).target,
+			cache = node._gsap || gsap.core.getCache(node),
+			time = _getTime(), cs;
+		if (!cache._isScrollT || time - cache._isScrollT > 2000) { // cache for 2 seconds to improve performance.
+			while (node && node !== _body && ((node.scrollHeight <= node.clientHeight && node.scrollWidth <= node.clientWidth) || !(_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]))) node = node.parentNode;
+			cache._isScroll = node && node !== target && !_isViewport(node) && (_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]);
+			cache._isScrollT = time;
+		}
+		if (cache._isScroll || axis === "x") {
+			event.stopPropagation();
+			event._gsapAllow = true;
+		}
+	},
+	// capture events on scrollable elements INSIDE the <body> and allow those by calling stopPropagation() when we find a scrollable ancestor
+	_inputObserver = (target, type, inputs, nested) => Observer.create({
+		target: target,
+		capture: true,
+		debounce: false,
+		lockAxis: true,
+		type: type,
+		onWheel: (nested = nested && _nestedScroll),
+		onPress: nested,
+		onDrag: nested,
+		onScroll: nested,
+		onEnable: () => inputs && _addListener(_doc, Observer.eventTypes[0], _captureInputs, false, true),
+		onDisable: () => _removeListener(_doc, Observer.eventTypes[0], _captureInputs, true)
+	}),
+	_inputExp = /(input|label|select|textarea)/i,
+	_inputIsFocused,
+	_captureInputs = e => {
+		let isInput = _inputExp.test(e.target.tagName);
+		if (isInput || _inputIsFocused) {
+			e._gsapAllow = true;
+			_inputIsFocused = isInput;
+		}
+	},
+	_getScrollNormalizer = vars => {
+		_isObject(vars) || (vars = {});
+		vars.preventDefault = vars.isNormalizer = vars.allowClicks = true;
+		vars.type || (vars.type = "wheel,touch");
+		vars.debounce = !!vars.debounce;
+		vars.id = vars.id || "normalizer";
+		let {normalizeScrollX, momentum, allowNestedScroll, onRelease} = vars,
+			self, maxY,
+			target = _getTarget(vars.target) || _docEl,
+			smoother = gsap.core.globals().ScrollSmoother,
+			smootherInstance = smoother && smoother.get(),
+			content = _fixIOSBug && ((vars.content && _getTarget(vars.content)) || (smootherInstance && vars.content !== false && !smootherInstance.smooth() && smootherInstance.content())),
+			scrollFuncY = _getScrollFunc(target, _vertical),
+			scrollFuncX = _getScrollFunc(target, _horizontal),
+			scale = 1,
+			initialScale = (Observer.isTouch && _win.visualViewport ? _win.visualViewport.scale * _win.visualViewport.width : _win.outerWidth) / _win.innerWidth,
+			wheelRefresh = 0,
+			resolveMomentumDuration = _isFunction(momentum) ? () => momentum(self) : () => momentum || 2.8,
+			lastRefreshID, skipTouchMove,
+			inputObserver = _inputObserver(target, vars.type, true, allowNestedScroll),
+			resumeTouchMove = () => skipTouchMove = false,
+			scrollClampX = _passThrough,
+			scrollClampY = _passThrough,
+			updateClamps = () => {
+				maxY = _maxScroll(target, _vertical);
+				scrollClampY = _clamp(_fixIOSBug ? 1 : 0, maxY);
+				normalizeScrollX && (scrollClampX = _clamp(0, _maxScroll(target, _horizontal)));
+				lastRefreshID = _refreshID;
+			},
+			removeContentOffset = () => {
+				content._gsap.y = _round(parseFloat(content._gsap.y) + scrollFuncY.offset) + "px";
+				content.style.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " + parseFloat(content._gsap.y) + ", 0, 1)";
+				scrollFuncY.offset = scrollFuncY.cacheID = 0;
+			},
+			ignoreDrag = () => {
+				if (skipTouchMove) {
+					requestAnimationFrame(resumeTouchMove);
+					let offset = _round(self.deltaY / 2),
+						scroll = scrollClampY(scrollFuncY.v - offset);
+					if (content && scroll !== scrollFuncY.v + scrollFuncY.offset) {
+						scrollFuncY.offset = scroll - scrollFuncY.v;
+						let y = _round((parseFloat(content && content._gsap.y) || 0) - scrollFuncY.offset);
+						content.style.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " + y + ", 0, 1)";
+						content._gsap.y = y + "px";
+						scrollFuncY.cacheID = _scrollers.cache;
+						_updateAll();
+					}
+					return true;
+				}
+				scrollFuncY.offset && removeContentOffset();
+				skipTouchMove = true;
+			},
+			tween, startScrollX, startScrollY, onStopDelayedCall,
+			onResize = () => { // if the window resizes, like on an iPhone which Apple FORCES the address bar to show/hide even if we event.preventDefault(), it may be scrolling too far now that the address bar is showing, so we must dynamically adjust the momentum tween.
+				updateClamps();
+				if (tween.isActive() && tween.vars.scrollY > maxY) {
+					scrollFuncY() > maxY ? tween.progress(1) && scrollFuncY(maxY) : tween.resetTo("scrollY", maxY);
+				}
+			};
+		content && gsap.set(content, {y: "+=0"}); // to ensure there's a cache (element._gsap)
+		vars.ignoreCheck = e => (_fixIOSBug && e.type === "touchmove" && ignoreDrag()) || (scale > 1.05 && e.type !== "touchstart") || self.isGesturing || (e.touches && e.touches.length > 1);
+		vars.onPress = () => {
+			skipTouchMove = false;
+			let prevScale = scale;
+			scale = _round(((_win.visualViewport && _win.visualViewport.scale) || 1) / initialScale);
+			tween.pause();
+			prevScale !== scale && _allowNativePanning(target, scale > 1.01 ? true : normalizeScrollX ? false : "x");
+			startScrollX = scrollFuncX();
+			startScrollY = scrollFuncY();
+			updateClamps();
+			lastRefreshID = _refreshID;
+		};
+		vars.onRelease = vars.onGestureStart = (self, wasDragging) => {
+			scrollFuncY.offset && removeContentOffset();
+			if (!wasDragging) {
+				onStopDelayedCall.restart(true);
+			} else {
+				_scrollers.cache++; // make sure we're pulling the non-cached value
+				// alternate algorithm: durX = Math.min(6, Math.abs(self.velocityX / 800)),	dur = Math.max(durX, Math.min(6, Math.abs(self.velocityY / 800))); dur = dur * (0.4 + (1 - _power4In(dur / 6)) * 0.6)) * (momentumSpeed || 1)
+				let dur = resolveMomentumDuration(),
+					currentScroll, endScroll;
+				if (normalizeScrollX) {
+					currentScroll = scrollFuncX();
+					endScroll = currentScroll + (dur * 0.05 * -self.velocityX) / 0.227; // the constant .227 is from power4(0.05). velocity is inverted because scrolling goes in the opposite direction.
+					dur *= _clampScrollAndGetDurationMultiplier(scrollFuncX, currentScroll, endScroll, _maxScroll(target, _horizontal));
+					tween.vars.scrollX = scrollClampX(endScroll);
+				}
+				currentScroll = scrollFuncY();
+				endScroll = currentScroll + (dur * 0.05 * -self.velocityY) / 0.227; // the constant .227 is from power4(0.05)
+				dur *= _clampScrollAndGetDurationMultiplier(scrollFuncY, currentScroll, endScroll, _maxScroll(target, _vertical));
+				tween.vars.scrollY = scrollClampY(endScroll);
+				tween.invalidate().duration(dur).play(0.01);
+				if (_fixIOSBug && tween.vars.scrollY >= maxY || currentScroll >= maxY-1) { // iOS bug: it'll show the address bar but NOT fire the window "resize" event until the animation is done but we must protect against overshoot so we leverage an onUpdate to do so.
+					gsap.to({}, {onUpdate: onResize, duration: dur});
+				}
+			}
+			onRelease && onRelease(self);
+		};
+		vars.onWheel = () => {
+			tween._ts && tween.pause();
+			if (_getTime() - wheelRefresh > 1000) { // after 1 second, refresh the clamps otherwise that'll only happen when ScrollTrigger.refresh() is called or for touch-scrolling.
+				lastRefreshID = 0;
+				wheelRefresh = _getTime();
+			}
+		};
+		vars.onChange = (self, dx, dy, xArray, yArray) => {
+			_refreshID !== lastRefreshID && updateClamps();
+			dx && normalizeScrollX && scrollFuncX(scrollClampX(xArray[2] === dx ? startScrollX + (self.startX - self.x) : scrollFuncX() + dx - xArray[1])); // for more precision, we track pointer/touch movement from the start, otherwise it'll drift.
+			if (dy) {
+				scrollFuncY.offset && removeContentOffset();
+				let isTouch = yArray[2] === dy,
+					y = isTouch ? startScrollY + self.startY - self.y : scrollFuncY() + dy - yArray[1],
+					yClamped = scrollClampY(y);
+				isTouch && y !== yClamped && (startScrollY += yClamped - y);
+				scrollFuncY(yClamped);
+			}
+			(dy || dx) && _updateAll();
+		};
+		vars.onEnable = () => {
+			_allowNativePanning(target, normalizeScrollX ? false : "x");
+			ScrollTrigger.addEventListener("refresh", onResize);
+			_addListener(_win, "resize", onResize);
+			if (scrollFuncY.smooth) {
+				scrollFuncY.target.style.scrollBehavior = "auto";
+				scrollFuncY.smooth = scrollFuncX.smooth = false;
+			}
+			inputObserver.enable();
+		};
+		vars.onDisable = () => {
+			_allowNativePanning(target, true);
+			_removeListener(_win, "resize", onResize);
+			ScrollTrigger.removeEventListener("refresh", onResize);
+			inputObserver.kill();
+		};
+		vars.lockAxis = vars.lockAxis !== false;
+		self = new Observer(vars);
+		self.iOS = _fixIOSBug; // used in the Observer getCachedScroll() function to work around an iOS bug that wreaks havoc with TouchEvent.clientY if we allow scroll to go all the way back to 0.
+		_fixIOSBug && !scrollFuncY() && scrollFuncY(1); // iOS bug causes event.clientY values to freak out (wildly inaccurate) if the scroll position is exactly 0.
+		_fixIOSBug && gsap.ticker.add(_passThrough); // prevent the ticker from sleeping
+		onStopDelayedCall = self._dc;
+		tween = gsap.to(self, {ease: "power4", paused: true, inherit: false, scrollX: normalizeScrollX ? "+=0.1" : "+=0", scrollY: "+=0.1", modifiers: {scrollY: _interruptionTracker(scrollFuncY, scrollFuncY(), () => tween.pause())	}, onUpdate: _updateAll, onComplete: onStopDelayedCall.vars.onComplete}); // we need the modifier to sense if the scroll position is altered outside of the momentum tween (like with a scrollTo tween) so we can pause() it to prevent conflicts.
+		return self;
+	};
+
+ScrollTrigger.sort = func => _triggers.sort(func || ((a, b) => (a.vars.refreshPriority || 0) * -1e6 + a.start - (b.start + (b.vars.refreshPriority || 0) * -1e6)));
+ScrollTrigger.observe = vars => new Observer(vars);
+ScrollTrigger.normalizeScroll = vars => {
+	if (typeof(vars) === "undefined") {
+		return _normalizer;
+	}
+	if (vars === true && _normalizer) {
+		return _normalizer.enable();
+	}
+	if (vars === false) {
+		_normalizer && _normalizer.kill();
+		_normalizer = vars;
+		return;
+	}
+	let normalizer = vars instanceof Observer ? vars : _getScrollNormalizer(vars);
+	_normalizer && _normalizer.target === normalizer.target && _normalizer.kill();
+	_isViewport(normalizer.target) && (_normalizer = normalizer);
+	return normalizer;
+};
+
+
+ScrollTrigger.core = { // smaller file size way to leverage in ScrollSmoother and Observer
+	_getVelocityProp,
+	_inputObserver,
+	_scrollers,
+	_proxies,
+	bridge: {
+		// when normalizeScroll sets the scroll position (ss = setScroll)
+		ss: () => {
+			_lastScrollTime || _dispatch("scrollStart");
+			_lastScrollTime = _getTime();
+		},
+		// a way to get the _refreshing value in Observer
+		ref: () => _refreshing
+	}
+};
+
+_getGSAP() && gsap.registerPlugin(ScrollTrigger);
+
+export { ScrollTrigger, ScrollTrigger as default };
diff --git a/dist/ScrollTrigger.d.mts b/dist/ScrollTrigger.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..9f96df0b407ac8437c0c4f6db38b918c7410942d
--- /dev/null
+++ b/dist/ScrollTrigger.d.mts
@@ -0,0 +1,1768 @@
+import { _scrollers, Observer, _vertical, _horizontal, _getTarget, _proxies, _getScrollFunc, _getVelocityProp, _getProxyProp } from './Observer.mjs';
+
+/*!
+ * ScrollTrigger 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let gsap, _coreInitted, _win, _doc, _docEl, _body, _root, _resizeDelay, _toArray, _clamp, _time2, _syncInterval, _refreshing, _pointerIsDown, _transformProp, _i, _prevWidth, _prevHeight, _autoRefresh, _sort, _suppressOverwrites, _ignoreResize, _normalizer, _ignoreMobileResize, _baseScreenHeight, _baseScreenWidth, _fixIOSBug, _context, _scrollRestoration, _div100vh, _100vh, _isReverted, _clampingMax,
+	_limitCallbacks, // if true, we'll only trigger callbacks if the active state toggles, so if you scroll immediately past both the start and end positions of a ScrollTrigger (thus inactive to inactive), neither its onEnter nor onLeave will be called. This is useful during startup.
+	_startup = 1,
+	_getTime = Date.now,
+	_time1 = _getTime(),
+	_lastScrollTime = 0,
+	_enabled = 0,
+	_parseClamp = (value, type, self) => {
+		let clamp = (_isString(value) && (value.substr(0, 6) === "clamp(" || value.indexOf("max") > -1));
+		self["_" + type + "Clamp"] = clamp;
+		return clamp ? value.substr(6, value.length - 7) : value;
+	},
+	_keepClamp = (value, clamp) => clamp && (!_isString(value) || value.substr(0, 6) !== "clamp(") ? "clamp(" + value + ")" : value,
+	_rafBugFix = () => _enabled && requestAnimationFrame(_rafBugFix), // in some browsers (like Firefox), screen repaints weren't consistent unless we had SOMETHING queued up in requestAnimationFrame()! So this just creates a super simple loop to keep it alive and smooth out repaints.
+	_pointerDownHandler = () => _pointerIsDown = 1,
+	_pointerUpHandler = () => _pointerIsDown = 0,
+	_passThrough = v => v,
+	_round = value => Math.round(value * 100000) / 100000 || 0,
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_isViewport = e => !!~_root.indexOf(e),
+	_getViewportDimension = dimensionProperty => (dimensionProperty === "Height" ? _100vh : _win["inner" + dimensionProperty]) || _docEl["client" + dimensionProperty] || _body["client" + dimensionProperty],
+	_getBoundsFunc = element => _getProxyProp(element, "getBoundingClientRect") || (_isViewport(element) ? () => {_winOffsets.width = _win.innerWidth; _winOffsets.height = _100vh; return _winOffsets;} : () => _getBounds(element)),
+	_getSizeFunc = (scroller, isViewport, {d, d2, a}) => (a = _getProxyProp(scroller, "getBoundingClientRect")) ? () => a()[d] : () => (isViewport ? _getViewportDimension(d2) : scroller["client" + d2]) || 0,
+	_getOffsetsFunc = (element, isViewport) => !isViewport || ~_proxies.indexOf(element) ? _getBoundsFunc(element) : () => _winOffsets,
+	_maxScroll = (element, {s, d2, d, a}) => Math.max(0, (s = "scroll" + d2) && (a = _getProxyProp(element, s)) ? a() - _getBoundsFunc(element)()[d] : _isViewport(element) ? (_docEl[s] || _body[s]) - _getViewportDimension(d2) : element[s] - element["offset" + d2]),
+	_iterateAutoRefresh = (func, events) => {
+		for (let i = 0; i < _autoRefresh.length; i += 3) {
+			(!events || ~events.indexOf(_autoRefresh[i+1])) && func(_autoRefresh[i], _autoRefresh[i+1], _autoRefresh[i+2]);
+		}
+	},
+	_isString = value => typeof(value) === "string",
+	_isFunction = value => typeof(value) === "function",
+	_isNumber = value => typeof(value) === "number",
+	_isObject = value => typeof(value) === "object",
+	_endAnimation = (animation, reversed, pause) => animation && animation.progress(reversed ? 0 : 1) && pause && animation.pause(),
+	_callback = (self, func) => {
+		if (self.enabled) {
+			let result = self._ctx ? self._ctx.add(() => func(self)) : func(self);
+			result && result.totalTime && (self.callbackAnimation = result);
+		}
+	},
+	_abs = Math.abs,
+	_left = "left",
+	_top = "top",
+	_right = "right",
+	_bottom = "bottom",
+	_width = "width",
+	_height = "height",
+	_Right = "Right",
+	_Left = "Left",
+	_Top = "Top",
+	_Bottom = "Bottom",
+	_padding = "padding",
+	_margin = "margin",
+	_Width = "Width",
+	_Height = "Height",
+	_px = "px",
+	_getComputedStyle = element => _win.getComputedStyle(element),
+	_makePositionable = element => { // if the element already has position: absolute or fixed, leave that, otherwise make it position: relative
+		let position = _getComputedStyle(element).position;
+		element.style.position = (position === "absolute" || position === "fixed") ? position : "relative";
+	},
+	_setDefaults = (obj, defaults) => {
+		for (let p in defaults) {
+			(p in obj) || (obj[p] = defaults[p]);
+		}
+		return obj;
+	},
+	_getBounds = (element, withoutTransforms) => {
+		let tween = withoutTransforms && _getComputedStyle(element)[_transformProp] !== "matrix(1, 0, 0, 1, 0, 0)" && gsap.to(element, {x: 0, y: 0, xPercent: 0, yPercent: 0, rotation: 0, rotationX: 0, rotationY: 0, scale: 1, skewX: 0, skewY: 0}).progress(1),
+			bounds = element.getBoundingClientRect();
+		tween && tween.progress(0).kill();
+		return bounds;
+	},
+	_getSize = (element, {d2}) => element["offset" + d2] || element["client" + d2] || 0,
+	_getLabelRatioArray = timeline => {
+		let a = [],
+			labels = timeline.labels,
+			duration = timeline.duration(),
+			p;
+		for (p in labels) {
+			a.push(labels[p] / duration);
+		}
+		return a;
+	},
+	_getClosestLabel = animation => value => gsap.utils.snap(_getLabelRatioArray(animation), value),
+	_snapDirectional = snapIncrementOrArray => {
+		let snap = gsap.utils.snap(snapIncrementOrArray),
+			a = Array.isArray(snapIncrementOrArray) && snapIncrementOrArray.slice(0).sort((a, b) => a - b);
+		return a ? (value, direction, threshold= 1e-3) => {
+			let i;
+			if (!direction) {
+				return snap(value);
+			}
+			if (direction > 0) {
+				value -= threshold; // to avoid rounding errors. If we're too strict, it might snap forward, then immediately again, and again.
+				for (i = 0; i < a.length; i++) {
+					if (a[i] >= value) {
+						return a[i];
+					}
+				}
+				return a[i-1];
+			} else {
+				i = a.length;
+				value += threshold;
+				while (i--) {
+					if (a[i] <= value) {
+						return a[i];
+					}
+				}
+			}
+			return a[0];
+		} : (value, direction, threshold= 1e-3) => {
+			let snapped = snap(value);
+			return !direction || Math.abs(snapped - value) < threshold || ((snapped - value < 0) === direction < 0) ? snapped : snap(direction < 0 ? value - snapIncrementOrArray : value + snapIncrementOrArray);
+		};
+	},
+	_getLabelAtDirection = timeline => (value, st) => _snapDirectional(_getLabelRatioArray(timeline))(value, st.direction),
+	_multiListener = (func, element, types, callback) => types.split(",").forEach(type => func(element, type, callback)),
+	_addListener = (element, type, func, nonPassive, capture) => element.addEventListener(type, func, {passive: !nonPassive, capture: !!capture}),
+	_removeListener = (element, type, func, capture) => element.removeEventListener(type, func, !!capture),
+	_wheelListener = (func, el, scrollFunc) => {
+		scrollFunc = scrollFunc && scrollFunc.wheelHandler;
+		if (scrollFunc) {
+			func(el, "wheel", scrollFunc);
+			func(el, "touchmove", scrollFunc);
+		}
+	},
+	_markerDefaults = {startColor: "green", endColor: "red", indent: 0, fontSize: "16px", fontWeight:"normal"},
+	_defaults = {toggleActions: "play", anticipatePin: 0},
+	_keywords = {top: 0, left: 0, center: 0.5, bottom: 1, right: 1},
+	_offsetToPx = (value, size) => {
+		if (_isString(value)) {
+			let eqIndex = value.indexOf("="),
+				relative = ~eqIndex ? +(value.charAt(eqIndex-1) + 1) * parseFloat(value.substr(eqIndex + 1)) : 0;
+			if (~eqIndex) {
+				(value.indexOf("%") > eqIndex) && (relative *= size / 100);
+				value = value.substr(0, eqIndex-1);
+			}
+			value = relative + ((value in _keywords) ? _keywords[value] * size : ~value.indexOf("%") ? parseFloat(value) * size / 100 : parseFloat(value) || 0);
+		}
+		return value;
+	},
+	_createMarker = (type, name, container, direction, {startColor, endColor, fontSize, indent, fontWeight}, offset, matchWidthEl, containerAnimation) => {
+		let e = _doc.createElement("div"),
+			useFixedPosition = _isViewport(container) || _getProxyProp(container, "pinType") === "fixed",
+			isScroller = type.indexOf("scroller") !== -1,
+			parent = useFixedPosition ? _body : container,
+			isStart = type.indexOf("start") !== -1,
+			color = isStart ? startColor : endColor,
+			css = "border-color:" + color + ";font-size:" + fontSize + ";color:" + color + ";font-weight:" + fontWeight + ";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";
+		css += "position:" + ((isScroller || containerAnimation) && useFixedPosition ? "fixed;" : "absolute;");
+		(isScroller || containerAnimation || !useFixedPosition) && (css += (direction === _vertical ? _right : _bottom) + ":" + (offset + parseFloat(indent)) + "px;");
+		matchWidthEl && (css += "box-sizing:border-box;text-align:left;width:" + matchWidthEl.offsetWidth + "px;");
+		e._isStart = isStart;
+		e.setAttribute("class", "gsap-marker-" + type + (name ? " marker-" + name : ""));
+		e.style.cssText = css;
+		e.innerText = name || name === 0 ? type + "-" + name : type;
+		parent.children[0] ? parent.insertBefore(e, parent.children[0]) : parent.appendChild(e);
+		e._offset = e["offset" + direction.op.d2];
+		_positionMarker(e, 0, direction, isStart);
+		return e;
+	},
+	_positionMarker = (marker, start, direction, flipped) => {
+		let vars = {display: "block"},
+			side = direction[flipped ? "os2" : "p2"],
+			oppositeSide = direction[flipped ? "p2" : "os2"];
+		marker._isFlipped = flipped;
+		vars[direction.a + "Percent"] = flipped ? -100 : 0;
+		vars[direction.a] = flipped ? "1px" : 0;
+		vars["border" + side + _Width] = 1;
+		vars["border" + oppositeSide + _Width] = 0;
+		vars[direction.p] = start + "px";
+		gsap.set(marker, vars);
+	},
+	_triggers = [],
+	_ids = {},
+	_rafID,
+	_sync = () => _getTime() - _lastScrollTime > 34 && (_rafID || (_rafID = requestAnimationFrame(_updateAll))),
+	_onScroll = () => { // previously, we tried to optimize performance by batching/deferring to the next requestAnimationFrame(), but discovered that Safari has a few bugs that make this unworkable (especially on iOS). See https://codepen.io/GreenSock/pen/16c435b12ef09c38125204818e7b45fc?editors=0010 and https://codepen.io/GreenSock/pen/JjOxYpQ/3dd65ccec5a60f1d862c355d84d14562?editors=0010 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503?editors=0010
+		if (!_normalizer || !_normalizer.isPressed || _normalizer.startX > _body.clientWidth) { // if the user is dragging the scrollbar, allow it.
+			_scrollers.cache++;
+			if (_normalizer) {
+				_rafID || (_rafID = requestAnimationFrame(_updateAll));
+			} else {
+				_updateAll(); // Safari in particular (on desktop) NEEDS the immediate update rather than waiting for a requestAnimationFrame() whereas iOS seems to benefit from waiting for the requestAnimationFrame() tick, at least when normalizing. See https://codepen.io/GreenSock/pen/qBYozqO?editors=0110
+			}
+			_lastScrollTime || _dispatch("scrollStart");
+			_lastScrollTime = _getTime();
+		}
+	},
+	_setBaseDimensions = () => {
+		_baseScreenWidth = _win.innerWidth;
+		_baseScreenHeight = _win.innerHeight;
+	},
+	_onResize = () => {
+		_scrollers.cache++;
+		!_refreshing && !_ignoreResize && !_doc.fullscreenElement && !_doc.webkitFullscreenElement && (!_ignoreMobileResize || _baseScreenWidth !== _win.innerWidth || Math.abs(_win.innerHeight - _baseScreenHeight) > _win.innerHeight * 0.25) && _resizeDelay.restart(true);
+	}, // ignore resizes triggered by refresh()
+	_listeners = {},
+	_emptyArray = [],
+	_softRefresh = () => _removeListener(ScrollTrigger, "scrollEnd", _softRefresh) || _refreshAll(true),
+	_dispatch = type => (_listeners[type] && _listeners[type].map(f => f())) || _emptyArray,
+	_savedStyles = [], // when ScrollTrigger.saveStyles() is called, the inline styles are recorded in this Array in a sequential format like [element, cssText, gsCache, media]. This keeps it very memory-efficient and fast to iterate through.
+	_revertRecorded = media => {
+		for (let i = 0; i < _savedStyles.length; i+=5) {
+			if (!media || _savedStyles[i+4] && _savedStyles[i+4].query === media) {
+				_savedStyles[i].style.cssText = _savedStyles[i+1];
+				_savedStyles[i].getBBox && _savedStyles[i].setAttribute("transform", _savedStyles[i+2] || "");
+				_savedStyles[i+3].uncache = 1;
+			}
+		}
+	},
+	_revertAll = (kill, media) => {
+		let trigger;
+		for (_i = 0; _i < _triggers.length; _i++) {
+			trigger = _triggers[_i];
+			if (trigger && (!media || trigger._ctx === media)) {
+				if (kill) {
+					trigger.kill(1);
+				} else {
+					trigger.revert(true, true);
+				}
+			}
+		}
+		_isReverted = true;
+		media && _revertRecorded(media);
+		media || _dispatch("revert");
+	},
+	_clearScrollMemory = (scrollRestoration, force) => { // zero-out all the recorded scroll positions. Don't use _triggers because if, for example, .matchMedia() is used to create some ScrollTriggers and then the user resizes and it removes ALL ScrollTriggers, and then go back to a size where there are ScrollTriggers, it would have kept the position(s) saved from the initial state.
+		_scrollers.cache++;
+		(force || !_refreshingAll) && _scrollers.forEach(obj => _isFunction(obj) && obj.cacheID++ && (obj.rec = 0));
+		_isString(scrollRestoration) && (_win.history.scrollRestoration = _scrollRestoration = scrollRestoration);
+	},
+	_refreshingAll,
+	_refreshID = 0,
+	_queueRefreshID,
+	_queueRefreshAll = () => { // we don't want to call _refreshAll() every time we create a new ScrollTrigger (for performance reasons) - it's better to batch them. Some frameworks dynamically load content and we can't rely on the window's "load" or "DOMContentLoaded" events to trigger it.
+		if (_queueRefreshID !== _refreshID) {
+			let id = _queueRefreshID = _refreshID;
+			requestAnimationFrame(() => id === _refreshID && _refreshAll(true));
+		}
+	},
+	_refresh100vh = () => {
+		_body.appendChild(_div100vh);
+		_100vh = (!_normalizer && _div100vh.offsetHeight) || _win.innerHeight;
+		_body.removeChild(_div100vh);
+	},
+	_hideAllMarkers = hide => _toArray(".gsap-marker-start, .gsap-marker-end, .gsap-marker-scroller-start, .gsap-marker-scroller-end").forEach(el => el.style.display = hide ? "none" : "block"),
+	_refreshAll = (force, skipRevert) => {
+		if (_lastScrollTime && !force && !_isReverted) {
+			_addListener(ScrollTrigger, "scrollEnd", _softRefresh);
+			return;
+		}
+		_refresh100vh();
+		_refreshingAll = ScrollTrigger.isRefreshing = true;
+		_scrollers.forEach(obj => _isFunction(obj) && ++obj.cacheID && (obj.rec = obj())); // force the clearing of the cache because some browsers take a little while to dispatch the "scroll" event and the user may have changed the scroll position and then called ScrollTrigger.refresh() right away
+		let refreshInits = _dispatch("refreshInit");
+		_sort && ScrollTrigger.sort();
+		skipRevert || _revertAll();
+		_scrollers.forEach(obj => {
+			if (_isFunction(obj)) {
+				obj.smooth && (obj.target.style.scrollBehavior = "auto"); // smooth scrolling interferes
+				obj(0);
+			}
+		});
+		_triggers.slice(0).forEach(t => t.refresh()); // don't loop with _i because during a refresh() someone could call ScrollTrigger.update() which would iterate through _i resulting in a skip.
+		_isReverted = false;
+		_triggers.forEach((t) => { // nested pins (pinnedContainer) with pinSpacing may expand the container, so we must accommodate that here.
+			if (t._subPinOffset && t.pin) {
+				let prop = t.vars.horizontal ? "offsetWidth" : "offsetHeight",
+					original = t.pin[prop];
+				t.revert(true, 1);
+				t.adjustPinSpacing(t.pin[prop] - original);
+				t.refresh();
+			}
+		});
+		_clampingMax = 1; // pinSpacing might be propping a page open, thus when we .setPositions() to clamp a ScrollTrigger's end we should leave the pinSpacing alone. That's what this flag is for.
+		_hideAllMarkers(true);
+		_triggers.forEach(t => { // the scroller's max scroll position may change after all the ScrollTriggers refreshed (like pinning could push it down), so we need to loop back and correct any with end: "max". Same for anything with a clamped end
+			let max = _maxScroll(t.scroller, t._dir),
+				endClamp = t.vars.end === "max" || (t._endClamp && t.end > max),
+				startClamp = t._startClamp && t.start >= max;
+			(endClamp || startClamp) && t.setPositions(startClamp ? max - 1 : t.start, endClamp ? Math.max(startClamp ? max : t.start + 1, max) : t.end, true);
+		});
+		_hideAllMarkers(false);
+		_clampingMax = 0;
+		refreshInits.forEach(result => result && result.render && result.render(-1)); // if the onRefreshInit() returns an animation (typically a gsap.set()), revert it. This makes it easy to put things in a certain spot before refreshing for measurement purposes, and then put things back.
+		_scrollers.forEach(obj => {
+			if (_isFunction(obj)) {
+				obj.smooth && requestAnimationFrame(() => obj.target.style.scrollBehavior = "smooth");
+				obj.rec && obj(obj.rec);
+			}
+		});
+		_clearScrollMemory(_scrollRestoration, 1);
+		_resizeDelay.pause();
+		_refreshID++;
+		_refreshingAll = 2;
+		_updateAll(2);
+		_triggers.forEach(t => _isFunction(t.vars.onRefresh) && t.vars.onRefresh(t));
+		_refreshingAll = ScrollTrigger.isRefreshing = false;
+		_dispatch("refresh");
+	},
+	_lastScroll = 0,
+	_direction = 1,
+	_primary,
+	_updateAll = (force) => {
+		if (force === 2 || (!_refreshingAll && !_isReverted)) { // _isReverted could be true if, for example, a matchMedia() is in the process of executing. We don't want to update during the time everything is reverted.
+			ScrollTrigger.isUpdating = true;
+			_primary && _primary.update(0); // ScrollSmoother uses refreshPriority -9999 to become the primary that gets updated before all others because it affects the scroll position.
+			let l = _triggers.length,
+				time = _getTime(),
+				recordVelocity = time - _time1 >= 50,
+				scroll = l && _triggers[0].scroll();
+			_direction = _lastScroll > scroll ? -1 : 1;
+			_refreshingAll || (_lastScroll = scroll);
+			if (recordVelocity) {
+				if (_lastScrollTime && !_pointerIsDown && time - _lastScrollTime > 200) {
+					_lastScrollTime = 0;
+					_dispatch("scrollEnd");
+				}
+				_time2 = _time1;
+				_time1 = time;
+			}
+			if (_direction < 0) {
+				_i = l;
+				while (_i-- > 0) {
+					_triggers[_i] && _triggers[_i].update(0, recordVelocity);
+				}
+				_direction = 1;
+			} else {
+				for (_i = 0; _i < l; _i++) {
+					_triggers[_i] && _triggers[_i].update(0, recordVelocity);
+				}
+			}
+			ScrollTrigger.isUpdating = false;
+		}
+		_rafID = 0;
+	},
+	_propNamesToCopy = [_left, _top, _bottom, _right, _margin + _Bottom, _margin + _Right, _margin + _Top, _margin + _Left, "display", "flexShrink", "float", "zIndex", "gridColumnStart", "gridColumnEnd", "gridRowStart", "gridRowEnd", "gridArea", "justifySelf", "alignSelf", "placeSelf", "order"],
+	_stateProps = _propNamesToCopy.concat([_width, _height, "boxSizing", "max" + _Width, "max" + _Height, "position", _margin, _padding, _padding + _Top, _padding + _Right, _padding + _Bottom, _padding + _Left]),
+	_swapPinOut = (pin, spacer, state) => {
+		_setState(state);
+		let cache = pin._gsap;
+		if (cache.spacerIsNative) {
+			_setState(cache.spacerState);
+		} else if (pin._gsap.swappedIn) {
+			let parent = spacer.parentNode;
+			if (parent) {
+				parent.insertBefore(pin, spacer);
+				parent.removeChild(spacer);
+			}
+		}
+		pin._gsap.swappedIn = false;
+	},
+	_swapPinIn = (pin, spacer, cs, spacerState) => {
+		if (!pin._gsap.swappedIn) {
+			let i = _propNamesToCopy.length,
+				spacerStyle = spacer.style,
+				pinStyle = pin.style,
+				p;
+			while (i--) {
+				p = _propNamesToCopy[i];
+				spacerStyle[p] = cs[p];
+			}
+			spacerStyle.position = cs.position === "absolute" ? "absolute" : "relative";
+			(cs.display === "inline") && (spacerStyle.display = "inline-block");
+			pinStyle[_bottom] = pinStyle[_right] = "auto";
+			spacerStyle.flexBasis = cs.flexBasis || "auto";
+			spacerStyle.overflow = "visible";
+			spacerStyle.boxSizing = "border-box";
+			spacerStyle[_width] = _getSize(pin, _horizontal) + _px;
+			spacerStyle[_height] = _getSize(pin, _vertical) + _px;
+			spacerStyle[_padding] = pinStyle[_margin] = pinStyle[_top] = pinStyle[_left] = "0";
+			_setState(spacerState);
+			pinStyle[_width] = pinStyle["max" + _Width] = cs[_width];
+			pinStyle[_height] = pinStyle["max" + _Height] = cs[_height];
+			pinStyle[_padding] = cs[_padding];
+			if (pin.parentNode !== spacer) {
+				pin.parentNode.insertBefore(spacer, pin);
+				spacer.appendChild(pin);
+			}
+			pin._gsap.swappedIn = true;
+		}
+	},
+	_capsExp = /([A-Z])/g,
+	_setState = state => {
+		if (state) {
+			let style = state.t.style,
+				l = state.length,
+				i = 0,
+				p, value;
+			(state.t._gsap || gsap.core.getCache(state.t)).uncache = 1; // otherwise transforms may be off
+			for (; i < l; i +=2) {
+				value = state[i+1];
+				p = state[i];
+				if (value) {
+					style[p] = value;
+				} else if (style[p]) {
+					style.removeProperty(p.replace(_capsExp, "-$1").toLowerCase());
+				}
+			}
+		}
+	},
+	_getState = element => { // returns an Array with alternating values like [property, value, property, value] and a "t" property pointing to the target (element). Makes it fast and cheap.
+		let l = _stateProps.length,
+			style = element.style,
+			state = [],
+			i = 0;
+		for (; i < l; i++) {
+			state.push(_stateProps[i], style[_stateProps[i]]);
+		}
+		state.t = element;
+		return state;
+	},
+	_copyState = (state, override, omitOffsets) => {
+		let result = [],
+			l = state.length,
+			i = omitOffsets ? 8 : 0, // skip top, left, right, bottom if omitOffsets is true
+			p;
+		for (; i < l; i += 2) {
+			p = state[i];
+			result.push(p, (p in override) ? override[p] : state[i+1]);
+		}
+		result.t = state.t;
+		return result;
+	},
+	_winOffsets = {left:0, top:0},
+	// // potential future feature (?) Allow users to calculate where a trigger hits (scroll position) like getScrollPosition("#id", "top bottom")
+	// _getScrollPosition = (trigger, position, {scroller, containerAnimation, horizontal}) => {
+	// 	scroller = _getTarget(scroller || _win);
+	// 	let direction = horizontal ? _horizontal : _vertical,
+	// 		isViewport = _isViewport(scroller);
+	// 	_getSizeFunc(scroller, isViewport, direction);
+	// 	return _parsePosition(position, _getTarget(trigger), _getSizeFunc(scroller, isViewport, direction)(), direction, _getScrollFunc(scroller, direction)(), 0, 0, 0, _getOffsetsFunc(scroller, isViewport)(), isViewport ? 0 : parseFloat(_getComputedStyle(scroller)["border" + direction.p2 + _Width]) || 0, 0, containerAnimation ? containerAnimation.duration() : _maxScroll(scroller), containerAnimation);
+	// },
+	_parsePosition = (value, trigger, scrollerSize, direction, scroll, marker, markerScroller, self, scrollerBounds, borderWidth, useFixedPosition, scrollerMax, containerAnimation, clampZeroProp) => {
+		_isFunction(value) && (value = value(self));
+		if (_isString(value) && value.substr(0,3) === "max") {
+			value = scrollerMax + (value.charAt(4) === "=" ? _offsetToPx("0" + value.substr(3), scrollerSize) : 0);
+		}
+		let time = containerAnimation ? containerAnimation.time() : 0,
+			p1, p2, element;
+		containerAnimation && containerAnimation.seek(0);
+		isNaN(value) || (value = +value); // convert a string number like "45" to an actual number
+		if (!_isNumber(value)) {
+			_isFunction(trigger) && (trigger = trigger(self));
+			let offsets = (value || "0").split(" "),
+				bounds, localOffset, globalOffset, display;
+			element = _getTarget(trigger, self) || _body;
+			bounds = _getBounds(element) || {};
+			if ((!bounds || (!bounds.left && !bounds.top)) && _getComputedStyle(element).display === "none") { // if display is "none", it won't report getBoundingClientRect() properly
+				display = element.style.display;
+				element.style.display = "block";
+				bounds = _getBounds(element);
+				display ? (element.style.display = display) : element.style.removeProperty("display");
+			}
+			localOffset = _offsetToPx(offsets[0], bounds[direction.d]);
+			globalOffset = _offsetToPx(offsets[1] || "0", scrollerSize);
+			value = bounds[direction.p] - scrollerBounds[direction.p] - borderWidth + localOffset + scroll - globalOffset;
+			markerScroller && _positionMarker(markerScroller, globalOffset, direction, (scrollerSize - globalOffset < 20 || (markerScroller._isStart && globalOffset > 20)));
+			scrollerSize -= scrollerSize - globalOffset; // adjust for the marker
+		} else {
+			containerAnimation && (value = gsap.utils.mapRange(containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, 0, scrollerMax, value));
+			markerScroller && _positionMarker(markerScroller, scrollerSize, direction, true);
+		}
+		if (clampZeroProp) {
+			self[clampZeroProp] = value || -0.001;
+			value < 0 && (value = 0);
+		}
+		if (marker) {
+			let position = value + scrollerSize,
+				isStart = marker._isStart;
+			p1 = "scroll" + direction.d2;
+			_positionMarker(marker, position, direction, (isStart && position > 20) || (!isStart && (useFixedPosition ? Math.max(_body[p1], _docEl[p1]) : marker.parentNode[p1]) <= position + 1));
+			if (useFixedPosition) {
+				scrollerBounds = _getBounds(markerScroller);
+				useFixedPosition && (marker.style[direction.op.p] = (scrollerBounds[direction.op.p] - direction.op.m - marker._offset) + _px);
+			}
+		}
+		if (containerAnimation && element) {
+			p1 = _getBounds(element);
+			containerAnimation.seek(scrollerMax);
+			p2 = _getBounds(element);
+			containerAnimation._caScrollDist = p1[direction.p] - p2[direction.p];
+			value = value / (containerAnimation._caScrollDist) * scrollerMax;
+		}
+		containerAnimation && containerAnimation.seek(time);
+		return containerAnimation ? value : Math.round(value);
+	},
+	_prefixExp = /(webkit|moz|length|cssText|inset)/i,
+	_reparent = (element, parent, top, left) => {
+		if (element.parentNode !== parent) {
+			let style = element.style,
+				p, cs;
+			if (parent === _body) {
+				element._stOrig = style.cssText; // record original inline styles so we can revert them later
+				cs = _getComputedStyle(element);
+				for (p in cs) { // must copy all relevant styles to ensure that nothing changes visually when we reparent to the <body>. Skip the vendor prefixed ones.
+					if (!+p && !_prefixExp.test(p) && cs[p] && typeof style[p] === "string" && p !== "0") {
+						style[p] = cs[p];
+					}
+				}
+				style.top = top;
+				style.left = left;
+			} else {
+				style.cssText = element._stOrig;
+			}
+			gsap.core.getCache(element).uncache = 1;
+			parent.appendChild(element);
+		}
+	},
+	_interruptionTracker = (getValueFunc, initialValue, onInterrupt) => {
+		let last1 = initialValue,
+			last2 = last1;
+		return value => {
+			let current = Math.round(getValueFunc()); // round because in some [very uncommon] Windows environments, scroll can get reported with decimals even though it was set without.
+			if (current !== last1 && current !== last2 && Math.abs(current - last1) > 3 && Math.abs(current - last2) > 3) { // if the user scrolls, kill the tween. iOS Safari intermittently misreports the scroll position, it may be the most recently-set one or the one before that! When Safari is zoomed (CMD-+), it often misreports as 1 pixel off too! So if we set the scroll position to 125, for example, it'll actually report it as 124.
+				value = current;
+				onInterrupt && onInterrupt();
+			}
+			last2 = last1;
+			last1 = value;
+			return value;
+		};
+	},
+	_shiftMarker = (marker, direction, value) => {
+		let vars = {};
+		vars[direction.p] = "+=" + value;
+		gsap.set(marker, vars);
+	},
+	// _mergeAnimations = animations => {
+	// 	let tl = gsap.timeline({smoothChildTiming: true}).startTime(Math.min(...animations.map(a => a.globalTime(0))));
+	// 	animations.forEach(a => {let time = a.totalTime(); tl.add(a); a.totalTime(time); });
+	// 	tl.smoothChildTiming = false;
+	// 	return tl;
+	// },
+
+	// returns a function that can be used to tween the scroll position in the direction provided, and when doing so it'll add a .tween property to the FUNCTION itself, and remove it when the tween completes or gets killed. This gives us a way to have multiple ScrollTriggers use a central function for any given scroller and see if there's a scroll tween running (which would affect if/how things get updated)
+	_getTweenCreator = (scroller, direction) => {
+		let getScroll = _getScrollFunc(scroller, direction),
+			prop = "_scroll" + direction.p2, // add a tweenable property to the scroller that's a getter/setter function, like _scrollTop or _scrollLeft. This way, if someone does gsap.killTweensOf(scroller) it'll kill the scroll tween.
+			getTween = (scrollTo, vars, initialValue, change1, change2) => {
+				let tween = getTween.tween,
+					onComplete = vars.onComplete,
+					modifiers = {};
+				initialValue = initialValue || getScroll();
+				let checkForInterruption = _interruptionTracker(getScroll, initialValue, () => {
+					tween.kill();
+					getTween.tween = 0;
+				});
+				change2 = (change1 && change2) || 0; // if change1 is 0, we set that to the difference and ignore change2. Otherwise, there would be a compound effect.
+				change1 = change1 || (scrollTo - initialValue);
+				tween && tween.kill();
+				vars[prop] = scrollTo;
+				vars.inherit = false;
+				vars.modifiers = modifiers;
+				modifiers[prop] = () => checkForInterruption(initialValue + change1 * tween.ratio + change2 * tween.ratio * tween.ratio);
+				vars.onUpdate = () => {
+					_scrollers.cache++;
+					getTween.tween && _updateAll(); // if it was interrupted/killed, like in a context.revert(), don't force an updateAll()
+				};
+				vars.onComplete = () => {
+					getTween.tween = 0;
+					onComplete && onComplete.call(tween);
+				};
+				tween = getTween.tween = gsap.to(scroller, vars);
+				return tween;
+			};
+		scroller[prop] = getScroll;
+		getScroll.wheelHandler = () => getTween.tween && getTween.tween.kill() && (getTween.tween = 0);
+		_addListener(scroller, "wheel", getScroll.wheelHandler); // Windows machines handle mousewheel scrolling in chunks (like "3 lines per scroll") meaning the typical strategy for cancelling the scroll isn't as sensitive. It's much more likely to match one of the previous 2 scroll event positions. So we kill any snapping as soon as there's a wheel event.
+		ScrollTrigger.isTouch && _addListener(scroller, "touchmove", getScroll.wheelHandler);
+		return getTween;
+	};
+
+
+
+
+class ScrollTrigger {
+
+	constructor(vars, animation) {
+		_coreInitted || ScrollTrigger.register(gsap) || console.warn("Please gsap.registerPlugin(ScrollTrigger)");
+		_context(this);
+		this.init(vars, animation);
+	}
+
+	init(vars, animation) {
+		this.progress = this.start = 0;
+		this.vars && this.kill(true, true); // in case it's being initted again
+		if (!_enabled) {
+			this.update = this.refresh = this.kill = _passThrough;
+			return;
+		}
+		vars = _setDefaults((_isString(vars) || _isNumber(vars) || vars.nodeType) ? {trigger: vars} : vars, _defaults);
+		let {onUpdate, toggleClass, id, onToggle, onRefresh, scrub, trigger, pin, pinSpacing, invalidateOnRefresh, anticipatePin, onScrubComplete, onSnapComplete, once, snap, pinReparent, pinSpacer, containerAnimation, fastScrollEnd, preventOverlaps} = vars,
+			direction = vars.horizontal || (vars.containerAnimation && vars.horizontal !== false) ? _horizontal : _vertical,
+			isToggle = !scrub && scrub !== 0,
+			scroller = _getTarget(vars.scroller || _win),
+			scrollerCache = gsap.core.getCache(scroller),
+			isViewport = _isViewport(scroller),
+			useFixedPosition = ("pinType" in vars ? vars.pinType : _getProxyProp(scroller, "pinType") || (isViewport && "fixed")) === "fixed",
+			callbacks = [vars.onEnter, vars.onLeave, vars.onEnterBack, vars.onLeaveBack],
+			toggleActions = isToggle && vars.toggleActions.split(" "),
+			markers = "markers" in vars ? vars.markers : _defaults.markers,
+			borderWidth = isViewport ? 0 : parseFloat(_getComputedStyle(scroller)["border" + direction.p2 + _Width]) || 0,
+			self = this,
+			onRefreshInit = vars.onRefreshInit && (() => vars.onRefreshInit(self)),
+			getScrollerSize = _getSizeFunc(scroller, isViewport, direction),
+			getScrollerOffsets = _getOffsetsFunc(scroller, isViewport),
+			lastSnap = 0,
+			lastRefresh = 0,
+			prevProgress = 0,
+			scrollFunc = _getScrollFunc(scroller, direction),
+			tweenTo, pinCache, snapFunc, scroll1, scroll2, start, end, markerStart, markerEnd, markerStartTrigger, markerEndTrigger, markerVars, executingOnRefresh,
+			change, pinOriginalState, pinActiveState, pinState, spacer, offset, pinGetter, pinSetter, pinStart, pinChange, spacingStart, spacerState, markerStartSetter, pinMoves,
+			markerEndSetter, cs, snap1, snap2, scrubTween, scrubSmooth, snapDurClamp, snapDelayedCall, prevScroll, prevAnimProgress, caMarkerSetter, customRevertReturn;
+
+		// for the sake of efficiency, _startClamp/_endClamp serve like a truthy value indicating that clamping was enabled on the start/end, and ALSO store the actual pre-clamped numeric value. We tap into that in ScrollSmoother for speed effects. So for example, if start="clamp(top bottom)" results in a start of -100 naturally, it would get clamped to 0 but -100 would be stored in _startClamp.
+		self._startClamp = self._endClamp = false;
+		self._dir = direction;
+		anticipatePin *= 45;
+		self.scroller = scroller;
+		self.scroll = containerAnimation ? containerAnimation.time.bind(containerAnimation) : scrollFunc;
+		scroll1 = scrollFunc();
+		self.vars = vars;
+		animation = animation || vars.animation;
+		if ("refreshPriority" in vars) {
+			_sort = 1;
+			vars.refreshPriority === -9999 && (_primary = self); // used by ScrollSmoother
+		}
+		scrollerCache.tweenScroll = scrollerCache.tweenScroll || {
+			top: _getTweenCreator(scroller, _vertical),
+			left: _getTweenCreator(scroller, _horizontal)
+		};
+		self.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];
+		self.scrubDuration = value => {
+			scrubSmooth = _isNumber(value) && value;
+			if (!scrubSmooth) {
+				scrubTween && scrubTween.progress(1).kill();
+				scrubTween = 0;
+			} else {
+				scrubTween ? scrubTween.duration(value) : (scrubTween = gsap.to(animation, {ease: "expo", totalProgress: "+=0", inherit: false, duration: scrubSmooth, paused: true, onComplete: () => onScrubComplete && onScrubComplete(self)}));
+			}
+		};
+		if (animation) {
+			animation.vars.lazy = false;
+			(animation._initted && !self.isReverted) || (animation.vars.immediateRender !== false && vars.immediateRender !== false && animation.duration() && animation.render(0, true, true)); // special case: if this ScrollTrigger gets re-initted, a from() tween with a stagger could get initted initially and then reverted on the re-init which means it'll need to get rendered again here to properly display things. Otherwise, See https://gsap.com/forums/topic/36777-scrollsmoother-splittext-nextjs/ and https://codepen.io/GreenSock/pen/eYPyPpd?editors=0010
+			self.animation = animation.pause();
+			animation.scrollTrigger = self;
+			self.scrubDuration(scrub);
+			snap1 = 0;
+			id || (id = animation.vars.id);
+		}
+
+		if (snap) {
+			// TODO: potential idea: use legitimate CSS scroll snapping by pushing invisible elements into the DOM that serve as snap positions, and toggle the document.scrollingElement.style.scrollSnapType onToggle. See https://codepen.io/GreenSock/pen/JjLrgWM for a quick proof of concept.
+			if (!_isObject(snap) || snap.push) {
+				snap = {snapTo: snap};
+			}
+			("scrollBehavior" in _body.style) && gsap.set(isViewport ? [_body, _docEl] : scroller, {scrollBehavior: "auto"}); // smooth scrolling doesn't work with snap.
+			_scrollers.forEach(o => _isFunction(o) && o.target === (isViewport ? _doc.scrollingElement || _docEl : scroller) && (o.smooth = false)); // note: set smooth to false on both the vertical and horizontal scroll getters/setters
+			snapFunc = _isFunction(snap.snapTo) ? snap.snapTo : snap.snapTo === "labels" ? _getClosestLabel(animation) : snap.snapTo === "labelsDirectional" ? _getLabelAtDirection(animation) : snap.directional !== false ? (value, st) => _snapDirectional(snap.snapTo)(value, _getTime() - lastRefresh < 500 ? 0 : st.direction) : gsap.utils.snap(snap.snapTo);
+			snapDurClamp = snap.duration || {min: 0.1, max: 2};
+			snapDurClamp = _isObject(snapDurClamp) ? _clamp(snapDurClamp.min, snapDurClamp.max) : _clamp(snapDurClamp, snapDurClamp);
+			snapDelayedCall = gsap.delayedCall(snap.delay || (scrubSmooth / 2) || 0.1, () => {
+				let scroll = scrollFunc(),
+					refreshedRecently = _getTime() - lastRefresh < 500,
+					tween = tweenTo.tween;
+				if ((refreshedRecently || Math.abs(self.getVelocity()) < 10) && !tween && !_pointerIsDown && lastSnap !== scroll) {
+					let progress = (scroll - start) / change, // don't use self.progress because this might run between the refresh() and when the scroll position updates and self.progress is set properly in the update() method.
+						totalProgress = animation && !isToggle ? animation.totalProgress() : progress,
+						velocity = refreshedRecently ? 0 : ((totalProgress - snap2) / (_getTime() - _time2) * 1000) || 0,
+						change1 = gsap.utils.clamp(-progress, 1 - progress, _abs(velocity / 2) * velocity / 0.185),
+						naturalEnd = progress + (snap.inertia === false ? 0 : change1),
+						endValue, endScroll,
+						{ onStart, onInterrupt, onComplete } = snap;
+					endValue = snapFunc(naturalEnd, self);
+					_isNumber(endValue) || (endValue = naturalEnd); // in case the function didn't return a number, fall back to using the naturalEnd
+					endScroll = Math.round(start + endValue * change);
+					if (scroll <= end && scroll >= start && endScroll !== scroll) {
+						if (tween && !tween._initted && tween.data <= _abs(endScroll - scroll)) { // there's an overlapping snap! So we must figure out which one is closer and let that tween live.
+							return;
+						}
+						if (snap.inertia === false) {
+							change1 = endValue - progress;
+						}
+						tweenTo(endScroll, {
+							duration: snapDurClamp(_abs( (Math.max(_abs(naturalEnd - totalProgress), _abs(endValue - totalProgress)) * 0.185 / velocity / 0.05) || 0)),
+							ease: snap.ease || "power3",
+							data: _abs(endScroll - scroll), // record the distance so that if another snap tween occurs (conflict) we can prioritize the closest snap.
+							onInterrupt: () => snapDelayedCall.restart(true) && onInterrupt && onInterrupt(self),
+							onComplete() {
+								self.update();
+								lastSnap = scrollFunc();
+								if (animation) { // the resolution of the scrollbar is limited, so we should correct the scrubbed animation's playhead at the end to match EXACTLY where it was supposed to snap
+									scrubTween ? scrubTween.resetTo("totalProgress", endValue, animation._tTime / animation._tDur) : animation.progress(endValue);
+								}
+								snap1 = snap2 = animation && !isToggle ? animation.totalProgress() : self.progress;
+								onSnapComplete && onSnapComplete(self);
+								onComplete && onComplete(self);
+							}
+						}, scroll, change1 * change, endScroll - scroll - change1 * change);
+						onStart && onStart(self, tweenTo.tween);
+					}
+				} else if (self.isActive && lastSnap !== scroll) {
+					snapDelayedCall.restart(true);
+				}
+			}).pause();
+		}
+		id && (_ids[id] = self);
+		trigger = self.trigger = _getTarget(trigger || (pin !== true && pin));
+
+		// if a trigger has some kind of scroll-related effect applied that could contaminate the "y" or "x" position (like a ScrollSmoother effect), we needed a way to temporarily revert it, so we use the stRevert property of the gsCache. It can return another function that we'll call at the end so it can return to its normal state.
+		customRevertReturn = trigger && trigger._gsap && trigger._gsap.stRevert;
+		customRevertReturn && (customRevertReturn = customRevertReturn(self));
+
+		pin = pin === true ? trigger : _getTarget(pin);
+		_isString(toggleClass) && (toggleClass = {targets: trigger, className: toggleClass});
+		if (pin) {
+			(pinSpacing === false || pinSpacing === _margin) || (pinSpacing = !pinSpacing && pin.parentNode && pin.parentNode.style && _getComputedStyle(pin.parentNode).display === "flex" ? false : _padding); // if the parent is display: flex, don't apply pinSpacing by default. We should check that pin.parentNode is an element (not shadow dom window)
+			self.pin = pin;
+			pinCache = gsap.core.getCache(pin);
+			if (!pinCache.spacer) { // record the spacer and pinOriginalState on the cache in case someone tries pinning the same element with MULTIPLE ScrollTriggers - we don't want to have multiple spacers or record the "original" pin state after it has already been affected by another ScrollTrigger.
+				if (pinSpacer) {
+					pinSpacer = _getTarget(pinSpacer);
+					pinSpacer && !pinSpacer.nodeType && (pinSpacer = pinSpacer.current || pinSpacer.nativeElement); // for React & Angular
+					pinCache.spacerIsNative = !!pinSpacer;
+					pinSpacer && (pinCache.spacerState = _getState(pinSpacer));
+				}
+				pinCache.spacer = spacer = pinSpacer || _doc.createElement("div");
+				spacer.classList.add("pin-spacer");
+				id && spacer.classList.add("pin-spacer-" + id);
+				pinCache.pinState = pinOriginalState = _getState(pin);
+			} else {
+				pinOriginalState = pinCache.pinState;
+			}
+			vars.force3D !== false && gsap.set(pin, {force3D: true});
+			self.spacer = spacer = pinCache.spacer;
+			cs = _getComputedStyle(pin);
+			spacingStart = cs[pinSpacing + direction.os2];
+			pinGetter = gsap.getProperty(pin);
+			pinSetter = gsap.quickSetter(pin, direction.a, _px);
+			// pin.firstChild && !_maxScroll(pin, direction) && (pin.style.overflow = "hidden"); // protects from collapsing margins, but can have unintended consequences as demonstrated here: https://codepen.io/GreenSock/pen/1e42c7a73bfa409d2cf1e184e7a4248d so it was removed in favor of just telling people to set up their CSS to avoid the collapsing margins (overflow: hidden | auto is just one option. Another is border-top: 1px solid transparent).
+			_swapPinIn(pin, spacer, cs);
+			pinState = _getState(pin);
+		}
+		if (markers) {
+			markerVars = _isObject(markers) ? _setDefaults(markers, _markerDefaults) : _markerDefaults;
+			markerStartTrigger = _createMarker("scroller-start", id, scroller, direction, markerVars, 0);
+			markerEndTrigger = _createMarker("scroller-end", id, scroller, direction, markerVars, 0, markerStartTrigger);
+			offset = markerStartTrigger["offset" + direction.op.d2];
+			let content = _getTarget(_getProxyProp(scroller, "content") || scroller);
+			markerStart = this.markerStart = _createMarker("start", id, content, direction, markerVars, offset, 0, containerAnimation);
+			markerEnd = this.markerEnd = _createMarker("end", id, content, direction, markerVars, offset, 0, containerAnimation);
+			containerAnimation && (caMarkerSetter = gsap.quickSetter([markerStart, markerEnd], direction.a, _px));
+			if ((!useFixedPosition && !(_proxies.length && _getProxyProp(scroller, "fixedMarkers") === true))) {
+				_makePositionable(isViewport ? _body : scroller);
+				gsap.set([markerStartTrigger, markerEndTrigger], {force3D: true});
+				markerStartSetter = gsap.quickSetter(markerStartTrigger, direction.a, _px);
+				markerEndSetter = gsap.quickSetter(markerEndTrigger, direction.a, _px);
+			}
+		}
+
+		if (containerAnimation) {
+			let oldOnUpdate = containerAnimation.vars.onUpdate,
+				oldParams = containerAnimation.vars.onUpdateParams;
+			containerAnimation.eventCallback("onUpdate", () => {
+				self.update(0, 0, 1);
+				oldOnUpdate && oldOnUpdate.apply(containerAnimation, oldParams || []);
+			});
+		}
+
+		self.previous = () => _triggers[_triggers.indexOf(self) - 1];
+		self.next = () => _triggers[_triggers.indexOf(self) + 1];
+
+		self.revert = (revert, temp) => {
+			if (!temp) { return self.kill(true); } // for compatibility with gsap.context() and gsap.matchMedia() which call revert()
+			let r = revert !== false || !self.enabled,
+				prevRefreshing = _refreshing;
+			if (r !== self.isReverted) {
+				if (r) {
+					prevScroll = Math.max(scrollFunc(), self.scroll.rec || 0); // record the scroll so we can revert later (repositioning/pinning things can affect scroll position). In the static refresh() method, we first record all the scroll positions as a reference.
+					prevProgress = self.progress;
+					prevAnimProgress = animation && animation.progress();
+				}
+				markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(m => m.style.display = r ? "none" : "block");
+				if (r) {
+					_refreshing = self;
+					self.update(r); // make sure the pin is back in its original position so that all the measurements are correct. do this BEFORE swapping the pin out
+				}
+				if (pin && (!pinReparent || !self.isActive)) {
+					if (r) {
+						_swapPinOut(pin, spacer, pinOriginalState);
+					} else {
+						_swapPinIn(pin, spacer, _getComputedStyle(pin), spacerState);
+					}
+				}
+				r || self.update(r); // when we're restoring, the update should run AFTER swapping the pin into its pin-spacer.
+				_refreshing = prevRefreshing; // restore. We set it to true during the update() so that things fire properly in there.
+				self.isReverted = r;
+			}
+		};
+
+		self.refresh = (soft, force, position, pinOffset) => { // position is typically only defined if it's coming from setPositions() - it's a way to skip the normal parsing. pinOffset is also only from setPositions() and is mostly related to fancy stuff we need to do in ScrollSmoother with effects
+			if ((_refreshing || !self.enabled) && !force) {
+				return;
+			}
+			if (pin && soft && _lastScrollTime) {
+				_addListener(ScrollTrigger, "scrollEnd", _softRefresh);
+				return;
+			}
+			!_refreshingAll && onRefreshInit && onRefreshInit(self);
+			_refreshing = self;
+			if (tweenTo.tween && !position) { // we skip this if a position is passed in because typically that's from .setPositions() and it's best to allow in-progress snapping to continue.
+				tweenTo.tween.kill();
+				tweenTo.tween = 0;
+			}
+			scrubTween && scrubTween.pause();
+			invalidateOnRefresh && animation && animation.revert({kill: false}).invalidate();
+			self.isReverted || self.revert(true, true);
+			self._subPinOffset = false; // we'll set this to true in the sub-pins if we find any
+			let size = getScrollerSize(),
+				scrollerBounds = getScrollerOffsets(),
+				max = containerAnimation ? containerAnimation.duration() : _maxScroll(scroller, direction),
+				isFirstRefresh = change <= 0.01,
+				offset = 0,
+				otherPinOffset = pinOffset || 0,
+				parsedEnd = _isObject(position) ? position.end : vars.end,
+				parsedEndTrigger = vars.endTrigger || trigger,
+				parsedStart = _isObject(position) ? position.start : (vars.start || (vars.start === 0 || !trigger ? 0 : (pin ? "0 0" : "0 100%"))),
+				pinnedContainer = self.pinnedContainer = vars.pinnedContainer && _getTarget(vars.pinnedContainer, self),
+				triggerIndex = (trigger && Math.max(0, _triggers.indexOf(self))) || 0,
+				i = triggerIndex,
+				cs, bounds, scroll, isVertical, override, curTrigger, curPin, oppositeScroll, initted, revertedPins, forcedOverflow, markerStartOffset, markerEndOffset;
+			if (markers && _isObject(position)) { // if we alter the start/end positions with .setPositions(), it generally feeds in absolute NUMBERS which don't convey information about where to line up the markers, so to keep it intuitive, we record how far the trigger positions shift after applying the new numbers and then offset by that much in the opposite direction. We do the same to the associated trigger markers too of course.
+				markerStartOffset = gsap.getProperty(markerStartTrigger, direction.p);
+				markerEndOffset = gsap.getProperty(markerEndTrigger, direction.p);
+			}
+			while (i--) { // user might try to pin the same element more than once, so we must find any prior triggers with the same pin, revert them, and determine how long they're pinning so that we can offset things appropriately. Make sure we revert from last to first so that things "rewind" properly.
+				curTrigger = _triggers[i];
+				curTrigger.end || curTrigger.refresh(0, 1) || (_refreshing = self); // if it's a timeline-based trigger that hasn't been fully initialized yet because it's waiting for 1 tick, just force the refresh() here, otherwise if it contains a pin that's supposed to affect other ScrollTriggers further down the page, they won't be adjusted properly.
+				curPin = curTrigger.pin;
+				if (curPin && (curPin === trigger || curPin === pin || curPin === pinnedContainer) && !curTrigger.isReverted) {
+					revertedPins || (revertedPins = []);
+					revertedPins.unshift(curTrigger); // we'll revert from first to last to make sure things reach their end state properly
+					curTrigger.revert(true, true);
+				}
+				if (curTrigger !== _triggers[i]) { // in case it got removed.
+					triggerIndex--;
+					i--;
+				}
+			}
+			_isFunction(parsedStart) && (parsedStart = parsedStart(self));
+			parsedStart = _parseClamp(parsedStart, "start", self);
+			start = _parsePosition(parsedStart, trigger, size, direction, scrollFunc(), markerStart, markerStartTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._startClamp && "_startClamp") || (pin ? -0.001 : 0);
+			_isFunction(parsedEnd) && (parsedEnd = parsedEnd(self));
+			if (_isString(parsedEnd) && !parsedEnd.indexOf("+=")) {
+				if (~parsedEnd.indexOf(" ")) {
+					parsedEnd = (_isString(parsedStart) ? parsedStart.split(" ")[0] : "") + parsedEnd;
+				} else {
+					offset = _offsetToPx(parsedEnd.substr(2), size);
+					parsedEnd = _isString(parsedStart) ? parsedStart : (containerAnimation ? gsap.utils.mapRange(0, containerAnimation.duration(), containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, start) : start) + offset; // _parsePosition won't factor in the offset if the start is a number, so do it here.
+					parsedEndTrigger = trigger;
+				}
+			}
+			parsedEnd = _parseClamp(parsedEnd, "end", self);
+			end = Math.max(start, _parsePosition(parsedEnd || (parsedEndTrigger ? "100% 0" : max), parsedEndTrigger, size, direction, scrollFunc() + offset, markerEnd, markerEndTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._endClamp && "_endClamp")) || -0.001;
+
+			offset = 0;
+			i = triggerIndex;
+			while (i--) {
+				curTrigger = _triggers[i];
+				curPin = curTrigger.pin;
+				if (curPin && curTrigger.start - curTrigger._pinPush <= start && !containerAnimation && curTrigger.end > 0) {
+					cs = curTrigger.end - (self._startClamp ? Math.max(0, curTrigger.start) : curTrigger.start);
+					if (((curPin === trigger && curTrigger.start - curTrigger._pinPush < start) || curPin === pinnedContainer) && isNaN(parsedStart)) { // numeric start values shouldn't be offset at all - treat them as absolute
+						offset += cs * (1 - curTrigger.progress);
+					}
+					curPin === pin && (otherPinOffset += cs);
+				}
+			}
+			start += offset;
+			end += offset;
+			self._startClamp && (self._startClamp += offset);
+
+			if (self._endClamp && !_refreshingAll) {
+				self._endClamp = end || -0.001;
+				end = Math.min(end, _maxScroll(scroller, direction));
+			}
+			change = (end - start) || ((start -= 0.01) && 0.001);
+
+			if (isFirstRefresh) { // on the very first refresh(), the prevProgress couldn't have been accurate yet because the start/end were never calculated, so we set it here. Before 3.11.5, it could lead to an inaccurate scroll position restoration with snapping.
+				prevProgress = gsap.utils.clamp(0, 1, gsap.utils.normalize(start, end, prevScroll));
+			}
+			self._pinPush = otherPinOffset;
+			if (markerStart && offset) { // offset the markers if necessary
+				cs = {};
+				cs[direction.a] = "+=" + offset;
+				pinnedContainer && (cs[direction.p] = "-=" + scrollFunc());
+				gsap.set([markerStart, markerEnd], cs);
+			}
+
+			if (pin && !(_clampingMax && self.end >= _maxScroll(scroller, direction))) {
+				cs = _getComputedStyle(pin);
+				isVertical = direction === _vertical;
+				scroll = scrollFunc(); // recalculate because the triggers can affect the scroll
+				pinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;
+				if (!max && end > 1) { // makes sure the scroller has a scrollbar, otherwise if something has width: 100%, for example, it would be too big (exclude the scrollbar). See https://gsap.com/forums/topic/25182-scrolltrigger-width-of-page-increase-where-markers-are-set-to-false/
+					forcedOverflow = (isViewport ? (_doc.scrollingElement || _docEl) : scroller).style;
+					forcedOverflow = {style: forcedOverflow, value: forcedOverflow["overflow" + direction.a.toUpperCase()]};
+					if (isViewport && _getComputedStyle(_body)["overflow" + direction.a.toUpperCase()] !== "scroll") { // avoid an extra scrollbar if BOTH <html> and <body> have overflow set to "scroll"
+						forcedOverflow.style["overflow" + direction.a.toUpperCase()] = "scroll";
+					}
+				}
+				_swapPinIn(pin, spacer, cs);
+				pinState = _getState(pin);
+				// transforms will interfere with the top/left/right/bottom placement, so remove them temporarily. getBoundingClientRect() factors in transforms.
+				bounds = _getBounds(pin, true);
+				oppositeScroll = useFixedPosition && _getScrollFunc(scroller, isVertical ? _horizontal : _vertical)();
+				if (pinSpacing) {
+					spacerState = [pinSpacing + direction.os2, change + otherPinOffset + _px];
+					spacerState.t = spacer;
+					i = (pinSpacing === _padding) ? _getSize(pin, direction) + change + otherPinOffset : 0;
+					if (i) {
+						spacerState.push(direction.d, i + _px); // for box-sizing: border-box (must include padding).
+						spacer.style.flexBasis !== "auto" && (spacer.style.flexBasis = i + _px);
+					}
+					_setState(spacerState);
+					if (pinnedContainer) { // in ScrollTrigger.refresh(), we need to re-evaluate the pinContainer's size because this pinSpacing may stretch it out, but we can't just add the exact distance because depending on layout, it may not push things down or it may only do so partially.
+						_triggers.forEach(t => {
+							if (t.pin === pinnedContainer && t.vars.pinSpacing !== false) {
+								t._subPinOffset = true;
+							}
+						});
+					}
+					useFixedPosition && scrollFunc(prevScroll);
+				} else {
+					i = _getSize(pin, direction);
+					i && spacer.style.flexBasis !== "auto" && (spacer.style.flexBasis = i + _px);
+				}
+				if (useFixedPosition) {
+					override = {
+						top: (bounds.top + (isVertical ? scroll - start : oppositeScroll)) + _px,
+						left: (bounds.left + (isVertical ? oppositeScroll : scroll - start)) + _px,
+						boxSizing: "border-box",
+						position: "fixed"
+					};
+					override[_width] = override["max" + _Width] = Math.ceil(bounds.width) + _px;
+					override[_height] = override["max" + _Height] = Math.ceil(bounds.height) + _px;
+					override[_margin] = override[_margin + _Top] = override[_margin + _Right] = override[_margin + _Bottom] = override[_margin + _Left] = "0";
+					override[_padding] = cs[_padding];
+					override[_padding + _Top] = cs[_padding + _Top];
+					override[_padding + _Right] = cs[_padding + _Right];
+					override[_padding + _Bottom] = cs[_padding + _Bottom];
+					override[_padding + _Left] = cs[_padding + _Left];
+					pinActiveState = _copyState(pinOriginalState, override, pinReparent);
+					_refreshingAll && scrollFunc(0);
+				}
+				if (animation) { // the animation might be affecting the transform, so we must jump to the end, check the value, and compensate accordingly. Otherwise, when it becomes unpinned, the pinSetter() will get set to a value that doesn't include whatever the animation did.
+					initted = animation._initted; // if not, we must invalidate() after this step, otherwise it could lock in starting values prematurely.
+					_suppressOverwrites(1);
+					animation.render(animation.duration(), true, true);
+					pinChange = pinGetter(direction.a) - pinStart + change + otherPinOffset;
+					pinMoves = Math.abs(change - pinChange) > 1;
+					useFixedPosition && pinMoves && pinActiveState.splice(pinActiveState.length - 2, 2); // transform is the last property/value set in the state Array. Since the animation is controlling that, we should omit it.
+					animation.render(0, true, true);
+					initted || animation.invalidate(true);
+					animation.parent || animation.totalTime(animation.totalTime()); // if, for example, a toggleAction called play() and then refresh() happens and when we render(1) above, it would cause the animation to complete and get removed from its parent, so this makes sure it gets put back in.
+					_suppressOverwrites(0);
+				} else {
+					pinChange = change;
+				}
+				forcedOverflow && (forcedOverflow.value ? (forcedOverflow.style["overflow" + direction.a.toUpperCase()] = forcedOverflow.value) : forcedOverflow.style.removeProperty("overflow-" + direction.a));
+			} else if (trigger && scrollFunc() && !containerAnimation) { // it may be INSIDE a pinned element, so walk up the tree and look for any elements with _pinOffset to compensate because anything with pinSpacing that's already scrolled would throw off the measurements in getBoundingClientRect()
+				bounds = trigger.parentNode;
+				while (bounds && bounds !== _body) {
+					if (bounds._pinOffset) {
+						start -= bounds._pinOffset;
+						end -= bounds._pinOffset;
+					}
+					bounds = bounds.parentNode;
+				}
+			}
+			revertedPins && revertedPins.forEach(t => t.revert(false, true));
+			self.start = start;
+			self.end = end;
+			scroll1 = scroll2 = _refreshingAll ? prevScroll : scrollFunc(); // reset velocity
+			if (!containerAnimation && !_refreshingAll) {
+				scroll1 < prevScroll && scrollFunc(prevScroll);
+				self.scroll.rec = 0;
+			}
+			self.revert(false, true);
+			lastRefresh = _getTime();
+			if (snapDelayedCall) {
+				lastSnap = -1; // just so snapping gets re-enabled, clear out any recorded last value
+				// self.isActive && scrollFunc(start + change * prevProgress); // previously this line was here to ensure that when snapping kicks in, it's from the previous progress but in some cases that's not desirable, like an all-page ScrollTrigger when new content gets added to the page, that'd totally change the progress.
+				snapDelayedCall.restart(true);
+			}
+			_refreshing = 0;
+			animation && isToggle && (animation._initted || prevAnimProgress) && animation.progress() !== prevAnimProgress && animation.progress(prevAnimProgress || 0, true).render(animation.time(), true, true); // must force a re-render because if saveStyles() was used on the target(s), the styles could have been wiped out during the refresh().
+			if (isFirstRefresh || prevProgress !== self.progress || containerAnimation || invalidateOnRefresh) { // ensures that the direction is set properly (when refreshing, progress is set back to 0 initially, then back again to wherever it needs to be) and that callbacks are triggered.
+				animation && !isToggle && animation.totalProgress(containerAnimation && start < -0.001 && !prevProgress ? gsap.utils.normalize(start, end, 0) : prevProgress, true); // to avoid issues where animation callbacks like onStart aren't triggered.
+				self.progress = isFirstRefresh || ((scroll1 - start) / change === prevProgress) ? 0 : prevProgress;
+			}
+			pin && pinSpacing && (spacer._pinOffset = Math.round(self.progress * pinChange));
+			scrubTween && scrubTween.invalidate();
+
+			if (!isNaN(markerStartOffset)) { // numbers were passed in for the position which are absolute, so instead of just putting the markers at the very bottom of the viewport, we figure out how far they shifted down (it's safe to assume they were originally positioned in closer relation to the trigger element with values like "top", "center", a percentage or whatever, so we offset that much in the opposite direction to basically revert them to the relative position thy were at previously.
+				markerStartOffset -= gsap.getProperty(markerStartTrigger, direction.p);
+				markerEndOffset -= gsap.getProperty(markerEndTrigger, direction.p);
+				_shiftMarker(markerStartTrigger, direction, markerStartOffset);
+				_shiftMarker(markerStart, direction, markerStartOffset - (pinOffset || 0));
+				_shiftMarker(markerEndTrigger, direction, markerEndOffset);
+				_shiftMarker(markerEnd, direction, markerEndOffset - (pinOffset || 0));
+			}
+
+			isFirstRefresh && !_refreshingAll && self.update(); // edge case - when you reload a page when it's already scrolled down, some browsers fire a "scroll" event before DOMContentLoaded, triggering an updateAll(). If we don't update the self.progress as part of refresh(), then when it happens next, it may record prevProgress as 0 when it really shouldn't, potentially causing a callback in an animation to fire again.
+
+			if (onRefresh && !_refreshingAll && !executingOnRefresh) { // when refreshing all, we do extra work to correct pinnedContainer sizes and ensure things don't exceed the maxScroll, so we should do all the refreshes at the end after all that work so that the start/end values are corrected.
+				executingOnRefresh = true;
+				onRefresh(self);
+				executingOnRefresh = false;
+			}
+		};
+
+		self.getVelocity = () => ((scrollFunc() - scroll2) / (_getTime() - _time2) * 1000) || 0;
+
+		self.endAnimation = () => {
+			_endAnimation(self.callbackAnimation);
+			if (animation) {
+				scrubTween ? scrubTween.progress(1) : (!animation.paused() ? _endAnimation(animation, animation.reversed()) : isToggle || _endAnimation(animation, self.direction < 0, 1));
+			}
+		};
+
+		self.labelToScroll = label => animation && animation.labels && ((start || self.refresh() || start) + (animation.labels[label] / animation.duration()) * change) || 0;
+
+		self.getTrailing = name => {
+			let i = _triggers.indexOf(self),
+				a = self.direction > 0 ? _triggers.slice(0, i).reverse() : _triggers.slice(i+1);
+			return (_isString(name) ? a.filter(t => t.vars.preventOverlaps === name) : a).filter(t => self.direction > 0 ? t.end <= start : t.start >= end);
+		};
+
+
+		self.update = (reset, recordVelocity, forceFake) => {
+			if (containerAnimation && !forceFake && !reset) {
+				return;
+			}
+			let scroll = _refreshingAll === true ? prevScroll : self.scroll(),
+				p = reset ? 0 : (scroll - start) / change,
+				clipped = p < 0 ? 0 : p > 1 ? 1 : p || 0,
+				prevProgress = self.progress,
+				isActive, wasActive, toggleState, action, stateChanged, toggled, isAtMax, isTakingAction;
+			if (recordVelocity) {
+				scroll2 = scroll1;
+				scroll1 = containerAnimation ? scrollFunc() : scroll;
+				if (snap) {
+					snap2 = snap1;
+					snap1 = animation && !isToggle ? animation.totalProgress() : clipped;
+				}
+			}
+			// anticipate the pinning a few ticks ahead of time based on velocity to avoid a visual glitch due to the fact that most browsers do scrolling on a separate thread (not synced with requestAnimationFrame).
+			if (anticipatePin && pin && !_refreshing && !_startup && _lastScrollTime) {
+				if (!clipped && start < scroll + ((scroll - scroll2) / (_getTime() - _time2)) * anticipatePin) {
+					clipped = 0.0001;
+				} else if (clipped === 1 && end > scroll + ((scroll - scroll2) / (_getTime() - _time2)) * anticipatePin) {
+					clipped = 0.9999;
+				}
+			}
+			if (clipped !== prevProgress && self.enabled) {
+				isActive = self.isActive = !!clipped && clipped < 1;
+				wasActive = !!prevProgress && prevProgress < 1;
+				toggled = isActive !== wasActive;
+				stateChanged = toggled || !!clipped !== !!prevProgress; // could go from start all the way to end, thus it didn't toggle but it did change state in a sense (may need to fire a callback)
+				self.direction = clipped > prevProgress ? 1 : -1;
+				self.progress = clipped;
+
+				if (stateChanged && !_refreshing) {
+					toggleState = clipped && !prevProgress ? 0 : clipped === 1 ? 1 : prevProgress === 1 ? 2 : 3; // 0 = enter, 1 = leave, 2 = enterBack, 3 = leaveBack (we prioritize the FIRST encounter, thus if you scroll really fast past the onEnter and onLeave in one tick, it'd prioritize onEnter.
+					if (isToggle) {
+						action = (!toggled && toggleActions[toggleState + 1] !== "none" && toggleActions[toggleState + 1]) || toggleActions[toggleState]; // if it didn't toggle, that means it shot right past and since we prioritize the "enter" action, we should switch to the "leave" in this case (but only if one is defined)
+						isTakingAction = animation && (action === "complete" || action === "reset" || action in animation);
+					}
+				}
+
+				preventOverlaps && (toggled || isTakingAction) && (isTakingAction || scrub || !animation) && (_isFunction(preventOverlaps) ? preventOverlaps(self) : self.getTrailing(preventOverlaps).forEach(t => t.endAnimation()));
+
+				if (!isToggle) {
+					if (scrubTween && !_refreshing && !_startup) {
+						(scrubTween._dp._time - scrubTween._start !== scrubTween._time) && scrubTween.render(scrubTween._dp._time - scrubTween._start); // if there's a scrub on both the container animation and this one (or a ScrollSmoother), the update order would cause this one not to have rendered yet, so it wouldn't make any progress before we .restart() it heading toward the new progress so it'd appear stuck thus we force a render here.
+						if (scrubTween.resetTo) {
+							scrubTween.resetTo("totalProgress", clipped, animation._tTime / animation._tDur);
+						} else { // legacy support (courtesy), before 3.10.0
+							scrubTween.vars.totalProgress = clipped;
+							scrubTween.invalidate().restart();
+						}
+					} else if (animation) {
+						animation.totalProgress(clipped, !!(_refreshing && (lastRefresh || reset)));
+					}
+				}
+				if (pin) {
+					reset && pinSpacing && (spacer.style[pinSpacing + direction.os2] = spacingStart);
+					if (!useFixedPosition) {
+						pinSetter(_round(pinStart + pinChange * clipped));
+					} else if (stateChanged) {
+						isAtMax = !reset && clipped > prevProgress && end + 1 > scroll && scroll + 1 >= _maxScroll(scroller, direction); // if it's at the VERY end of the page, don't switch away from position: fixed because it's pointless and it could cause a brief flash when the user scrolls back up (when it gets pinned again)
+						if (pinReparent) {
+							if (!reset && (isActive || isAtMax)) {
+								let bounds = _getBounds(pin, true),
+									offset = scroll - start;
+								_reparent(pin, _body, (bounds.top + (direction === _vertical ? offset : 0)) + _px, (bounds.left + (direction === _vertical ? 0 : offset)) + _px);
+							} else {
+								_reparent(pin, spacer);
+							}
+						}
+						_setState(isActive || isAtMax ? pinActiveState : pinState);
+						(pinMoves && clipped < 1 && isActive) || pinSetter(pinStart + (clipped === 1 && !isAtMax ? pinChange : 0));
+					}
+				}
+				snap && !tweenTo.tween && !_refreshing && !_startup && snapDelayedCall.restart(true);
+				toggleClass && (toggled || (once && clipped && (clipped < 1 || !_limitCallbacks))) && _toArray(toggleClass.targets).forEach(el => el.classList[isActive || once ? "add" : "remove"](toggleClass.className)); // classes could affect positioning, so do it even if reset or refreshing is true.
+				onUpdate && !isToggle && !reset && onUpdate(self);
+				if (stateChanged && !_refreshing) {
+					if (isToggle) {
+						if (isTakingAction) {
+							if (action === "complete") {
+								animation.pause().totalProgress(1);
+							} else if (action === "reset") {
+								animation.restart(true).pause();
+							} else if (action === "restart") {
+								animation.restart(true);
+							} else {
+								animation[action]();
+							}
+						}
+						onUpdate && onUpdate(self);
+					}
+					if (toggled || !_limitCallbacks) { // on startup, the page could be scrolled and we don't want to fire callbacks that didn't toggle. For example onEnter shouldn't fire if the ScrollTrigger isn't actually entered.
+						onToggle && toggled && _callback(self, onToggle);
+						callbacks[toggleState] && _callback(self, callbacks[toggleState]);
+						once && (clipped === 1 ? self.kill(false, 1) : (callbacks[toggleState] = 0)); // a callback shouldn't be called again if once is true.
+						if (!toggled) { // it's possible to go completely past, like from before the start to after the end (or vice-versa) in which case BOTH callbacks should be fired in that order
+							toggleState = clipped === 1 ? 1 : 3;
+							callbacks[toggleState] && _callback(self, callbacks[toggleState]);
+						}
+					}
+					if (fastScrollEnd && !isActive && Math.abs(self.getVelocity()) > (_isNumber(fastScrollEnd) ? fastScrollEnd : 2500)) {
+						_endAnimation(self.callbackAnimation);
+						scrubTween ? scrubTween.progress(1) : _endAnimation(animation, action === "reverse" ? 1 : !clipped, 1);
+					}
+				} else if (isToggle && onUpdate && !_refreshing) {
+					onUpdate(self);
+				}
+			}
+			// update absolutely-positioned markers (only if the scroller isn't the viewport)
+			if (markerEndSetter) {
+				let n = containerAnimation ? scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0) : scroll;
+				markerStartSetter(n + (markerStartTrigger._isFlipped ? 1 : 0));
+				markerEndSetter(n);
+			}
+			caMarkerSetter && caMarkerSetter(-scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0));
+		};
+
+		self.enable = (reset, refresh) => {
+			if (!self.enabled) {
+				self.enabled = true;
+				_addListener(scroller, "resize", _onResize);
+				isViewport || _addListener(scroller, "scroll", _onScroll);
+				onRefreshInit && _addListener(ScrollTrigger, "refreshInit", onRefreshInit);
+				if (reset !== false) {
+					self.progress = prevProgress = 0;
+					scroll1 = scroll2 = lastSnap = scrollFunc();
+				}
+				refresh !== false && self.refresh();
+			}
+		};
+
+		self.getTween = snap => snap && tweenTo ? tweenTo.tween : scrubTween;
+
+		self.setPositions = (newStart, newEnd, keepClamp, pinOffset) => { // doesn't persist after refresh()! Intended to be a way to override values that were set during refresh(), like you could set it in onRefresh()
+			if (containerAnimation) { // convert ratios into scroll positions. Remember, start/end values on ScrollTriggers that have a containerAnimation refer to the time (in seconds), NOT scroll positions.
+				let st = containerAnimation.scrollTrigger,
+					duration = containerAnimation.duration(),
+					change = st.end - st.start;
+				newStart = st.start + change * newStart / duration;
+				newEnd = st.start + change * newEnd / duration;
+			}
+			self.refresh(false, false, {start: _keepClamp(newStart, keepClamp && !!self._startClamp), end: _keepClamp(newEnd, keepClamp && !!self._endClamp)}, pinOffset);
+			self.update();
+		};
+
+		self.adjustPinSpacing = amount => {
+			if (spacerState && amount) {
+				let i = spacerState.indexOf(direction.d) + 1;
+				spacerState[i] = (parseFloat(spacerState[i]) + amount) + _px;
+				spacerState[1] = (parseFloat(spacerState[1]) + amount) + _px;
+				_setState(spacerState);
+			}
+		};
+
+		self.disable = (reset, allowAnimation) => {
+			if (self.enabled) {
+				reset !== false && self.revert(true, true);
+				self.enabled = self.isActive = false;
+				allowAnimation || (scrubTween && scrubTween.pause());
+				prevScroll = 0;
+				pinCache && (pinCache.uncache = 1);
+				onRefreshInit && _removeListener(ScrollTrigger, "refreshInit", onRefreshInit);
+				if (snapDelayedCall) {
+					snapDelayedCall.pause();
+					tweenTo.tween && tweenTo.tween.kill() && (tweenTo.tween = 0);
+				}
+				if (!isViewport) {
+					let i = _triggers.length;
+					while (i--) {
+						if (_triggers[i].scroller === scroller && _triggers[i] !== self) {
+							return; //don't remove the listeners if there are still other triggers referencing it.
+						}
+					}
+					_removeListener(scroller, "resize", _onResize);
+					isViewport || _removeListener(scroller, "scroll", _onScroll);
+				}
+			}
+		};
+
+		self.kill = (revert, allowAnimation) => {
+			self.disable(revert, allowAnimation);
+			scrubTween && !allowAnimation && scrubTween.kill();
+			id && (delete _ids[id]);
+			let i = _triggers.indexOf(self);
+			i >= 0 && _triggers.splice(i, 1);
+			i === _i && _direction > 0 && _i--; // if we're in the middle of a refresh() or update(), splicing would cause skips in the index, so adjust...
+
+			// if no other ScrollTrigger instances of the same scroller are found, wipe out any recorded scroll position. Otherwise, in a single page application, for example, it could maintain scroll position when it really shouldn't.
+			i = 0;
+			_triggers.forEach(t => t.scroller === self.scroller && (i = 1));
+			i || _refreshingAll || (self.scroll.rec = 0);
+
+			if (animation) {
+				animation.scrollTrigger = null;
+				revert && animation.revert({kill: false});
+				allowAnimation || animation.kill();
+			}
+			markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(m => m.parentNode && m.parentNode.removeChild(m));
+			_primary === self && (_primary = 0);
+			if (pin) {
+				pinCache && (pinCache.uncache = 1);
+				i = 0;
+				_triggers.forEach(t => t.pin === pin && i++);
+				i || (pinCache.spacer = 0); // if there aren't any more ScrollTriggers with the same pin, remove the spacer, otherwise it could be contaminated with old/stale values if the user re-creates a ScrollTrigger for the same element.
+			}
+			vars.onKill && vars.onKill(self);
+		};
+
+		_triggers.push(self);
+		self.enable(false, false);
+		customRevertReturn && customRevertReturn(self);
+
+		if (animation && animation.add && !change) { // if the animation is a timeline, it may not have been populated yet, so it wouldn't render at the proper place on the first refresh(), thus we should schedule one for the next tick. If "change" is defined, we know it must be re-enabling, thus we can refresh() right away.
+			let updateFunc = self.update; // some browsers may fire a scroll event BEFORE a tick elapses and/or the DOMContentLoaded fires. So there's a chance update() will be called BEFORE a refresh() has happened on a Timeline-attached ScrollTrigger which means the start/end won't be calculated yet. We don't want to add conditional logic inside the update() method (like check to see if end is defined and if not, force a refresh()) because that's a function that gets hit a LOT (performance). So we swap out the real update() method for this one that'll re-attach it the first time it gets called and of course forces a refresh().
+			self.update = () => {
+				self.update = updateFunc;
+				start || end || self.refresh();
+			};
+			gsap.delayedCall(0.01, self.update);
+			change = 0.01;
+			start = end = 0;
+		} else {
+			self.refresh();
+		}
+		pin && _queueRefreshAll(); // pinning could affect the positions of other things, so make sure we queue a full refresh()
+	}
+
+
+	static register(core) {
+		if (!_coreInitted) {
+			gsap = core || _getGSAP();
+			_windowExists() && window.document && ScrollTrigger.enable();
+			_coreInitted = _enabled;
+		}
+		return _coreInitted;
+	}
+
+	static defaults(config) {
+		if (config) {
+			for (let p in config) {
+				_defaults[p] = config[p];
+			}
+		}
+		return _defaults;
+	}
+
+	static disable(reset, kill) {
+		_enabled = 0;
+		_triggers.forEach(trigger => trigger[kill ? "kill" : "disable"](reset));
+		_removeListener(_win, "wheel", _onScroll);
+		_removeListener(_doc, "scroll", _onScroll);
+		clearInterval(_syncInterval);
+		_removeListener(_doc, "touchcancel", _passThrough);
+		_removeListener(_body, "touchstart", _passThrough);
+		_multiListener(_removeListener, _doc, "pointerdown,touchstart,mousedown", _pointerDownHandler);
+		_multiListener(_removeListener, _doc, "pointerup,touchend,mouseup", _pointerUpHandler);
+		_resizeDelay.kill();
+		_iterateAutoRefresh(_removeListener);
+		for (let i = 0; i < _scrollers.length; i+=3) {
+			_wheelListener(_removeListener, _scrollers[i], _scrollers[i+1]);
+			_wheelListener(_removeListener, _scrollers[i], _scrollers[i+2]);
+		}
+	}
+
+	static enable() {
+		_win = window;
+		_doc = document;
+		_docEl = _doc.documentElement;
+		_body = _doc.body;
+		if (gsap) {
+			_toArray = gsap.utils.toArray;
+			_clamp = gsap.utils.clamp;
+			_context = gsap.core.context || _passThrough;
+			_suppressOverwrites = gsap.core.suppressOverwrites || _passThrough;
+			_scrollRestoration = _win.history.scrollRestoration || "auto";
+			_lastScroll = _win.pageYOffset;
+			gsap.core.globals("ScrollTrigger", ScrollTrigger); // must register the global manually because in Internet Explorer, functions (classes) don't have a "name" property.
+			if (_body) {
+				_enabled = 1;
+				_div100vh = document.createElement("div"); // to solve mobile browser address bar show/hide resizing, we shouldn't rely on window.innerHeight. Instead, use a <div> with its height set to 100vh and measure that since that's what the scrolling is based on anyway and it's not affected by address bar showing/hiding.
+				_div100vh.style.height = "100vh";
+				_div100vh.style.position = "absolute";
+				_refresh100vh();
+				_rafBugFix();
+				Observer.register(gsap);
+				// isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.
+				ScrollTrigger.isTouch = Observer.isTouch;
+				_fixIOSBug = Observer.isTouch && /(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent); // since 2017, iOS has had a bug that causes event.clientX/Y to be inaccurate when a scroll occurs, thus we must alternate ignoring every other touchmove event to work around it. See https://bugs.webkit.org/show_bug.cgi?id=181954 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503
+				_ignoreMobileResize = Observer.isTouch === 1;
+				_addListener(_win, "wheel", _onScroll); // mostly for 3rd party smooth scrolling libraries.
+				_root = [_win, _doc, _docEl, _body];
+				if (gsap.matchMedia) {
+					ScrollTrigger.matchMedia = vars => {
+						let mm = gsap.matchMedia(),
+							p;
+						for (p in vars) {
+							mm.add(p, vars[p]);
+						}
+						return mm;
+					};
+					gsap.addEventListener("matchMediaInit", () => _revertAll());
+					gsap.addEventListener("matchMediaRevert", () => _revertRecorded());
+					gsap.addEventListener("matchMedia", () => {
+						_refreshAll(0, 1);
+						_dispatch("matchMedia");
+					});
+					gsap.matchMedia("(orientation: portrait)", () => { // when orientation changes, we should take new base measurements for the ignoreMobileResize feature.
+						_setBaseDimensions();
+						return _setBaseDimensions;
+					});
+				} else {
+					console.warn("Requires GSAP 3.11.0 or later");
+				}
+				_setBaseDimensions();
+				_addListener(_doc, "scroll", _onScroll); // some browsers (like Chrome), the window stops dispatching scroll events on the window if you scroll really fast, but it's consistent on the document!
+				let bodyStyle = _body.style,
+					border = bodyStyle.borderTopStyle,
+					AnimationProto = gsap.core.Animation.prototype,
+					bounds, i;
+				AnimationProto.revert || Object.defineProperty(AnimationProto, "revert", { value: function() { return this.time(-0.01, true); }}); // only for backwards compatibility (Animation.revert() was added after 3.10.4)
+				bodyStyle.borderTopStyle = "solid"; // works around an issue where a margin of a child element could throw off the bounds of the _body, making it seem like there's a margin when there actually isn't. The border ensures that the bounds are accurate.
+				bounds = _getBounds(_body);
+				_vertical.m = Math.round(bounds.top + _vertical.sc()) || 0; // accommodate the offset of the <body> caused by margins and/or padding
+				_horizontal.m = Math.round(bounds.left + _horizontal.sc()) || 0;
+				border ? (bodyStyle.borderTopStyle = border) : bodyStyle.removeProperty("border-top-style");
+				// TODO: (?) maybe move to leveraging the velocity mechanism in Observer and skip intervals.
+				_syncInterval = setInterval(_sync, 250);
+				gsap.delayedCall(0.5, () => _startup = 0);
+				_addListener(_doc, "touchcancel", _passThrough); // some older Android devices intermittently stop dispatching "touchmove" events if we don't listen for "touchcancel" on the document.
+				_addListener(_body, "touchstart", _passThrough); //works around Safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/
+				_multiListener(_addListener, _doc, "pointerdown,touchstart,mousedown", _pointerDownHandler);
+				_multiListener(_addListener, _doc, "pointerup,touchend,mouseup", _pointerUpHandler);
+				_transformProp = gsap.utils.checkPrefix("transform");
+				_stateProps.push(_transformProp);
+				_coreInitted = _getTime();
+				_resizeDelay = gsap.delayedCall(0.2, _refreshAll).pause();
+				_autoRefresh = [_doc, "visibilitychange", () => {
+					let w = _win.innerWidth,
+						h = _win.innerHeight;
+					if (_doc.hidden) {
+						_prevWidth = w;
+						_prevHeight = h;
+					} else if (_prevWidth !== w || _prevHeight !== h) {
+						_onResize();
+					}
+				}, _doc, "DOMContentLoaded", _refreshAll, _win, "load", _refreshAll, _win, "resize", _onResize];
+				_iterateAutoRefresh(_addListener);
+				_triggers.forEach(trigger => trigger.enable(0, 1));
+				for (i = 0; i < _scrollers.length; i+=3) {
+					_wheelListener(_removeListener, _scrollers[i], _scrollers[i+1]);
+					_wheelListener(_removeListener, _scrollers[i], _scrollers[i+2]);
+				}
+			}
+		}
+	}
+
+	static config(vars) {
+		("limitCallbacks" in vars) && (_limitCallbacks = !!vars.limitCallbacks);
+		let ms = vars.syncInterval;
+		ms && clearInterval(_syncInterval) || ((_syncInterval = ms) && setInterval(_sync, ms));
+		("ignoreMobileResize" in vars) && (_ignoreMobileResize = ScrollTrigger.isTouch === 1 && vars.ignoreMobileResize);
+		if ("autoRefreshEvents" in vars) {
+			_iterateAutoRefresh(_removeListener) || _iterateAutoRefresh(_addListener, vars.autoRefreshEvents || "none");
+			_ignoreResize = (vars.autoRefreshEvents + "").indexOf("resize") === -1;
+		}
+	}
+
+	static scrollerProxy(target, vars) {
+		let t = _getTarget(target),
+			i = _scrollers.indexOf(t),
+			isViewport = _isViewport(t);
+		if (~i) {
+			_scrollers.splice(i, isViewport ? 6 : 2);
+		}
+		if (vars) {
+			isViewport ? _proxies.unshift(_win, vars, _body, vars, _docEl, vars) : _proxies.unshift(t, vars);
+		}
+	}
+
+	static clearMatchMedia(query) {
+		_triggers.forEach(t => t._ctx && t._ctx.query === query && t._ctx.kill(true, true));
+	}
+
+	static isInViewport(element, ratio, horizontal) {
+		let bounds = (_isString(element) ? _getTarget(element) : element).getBoundingClientRect(),
+			offset = bounds[horizontal ? _width : _height] * ratio || 0;
+		return horizontal ? bounds.right - offset > 0 && bounds.left + offset < _win.innerWidth : bounds.bottom - offset > 0 && bounds.top + offset < _win.innerHeight;
+	}
+
+	static positionInViewport(element, referencePoint, horizontal) {
+		_isString(element) && (element = _getTarget(element));
+		let bounds = element.getBoundingClientRect(),
+			size = bounds[horizontal ? _width : _height],
+			offset = referencePoint == null ? size / 2 : ((referencePoint in _keywords) ? _keywords[referencePoint] * size : ~referencePoint.indexOf("%") ? parseFloat(referencePoint) * size / 100 : parseFloat(referencePoint) || 0);
+		return horizontal ? (bounds.left + offset) / _win.innerWidth : (bounds.top + offset) / _win.innerHeight;
+	}
+
+	static killAll(allowListeners) {
+		_triggers.slice(0).forEach(t => t.vars.id !== "ScrollSmoother" && t.kill());
+		if (allowListeners !== true) {
+			let listeners = _listeners.killAll || [];
+			_listeners = {};
+			listeners.forEach(f => f());
+		}
+	}
+
+}
+
+ScrollTrigger.version = "3.12.5";
+ScrollTrigger.saveStyles = targets => targets ? _toArray(targets).forEach(target => { // saved styles are recorded in a consecutive alternating Array, like [element, cssText, transform attribute, cache, matchMedia, ...]
+	if (target && target.style) {
+		let i = _savedStyles.indexOf(target);
+		i >= 0 && _savedStyles.splice(i, 5);
+		_savedStyles.push(target, target.style.cssText, target.getBBox && target.getAttribute("transform"), gsap.core.getCache(target), _context());
+	}
+}) : _savedStyles;
+ScrollTrigger.revert = (soft, media) => _revertAll(!soft, media);
+ScrollTrigger.create = (vars, animation) => new ScrollTrigger(vars, animation);
+ScrollTrigger.refresh = safe => safe ? _onResize() : (_coreInitted || ScrollTrigger.register()) && _refreshAll(true);
+ScrollTrigger.update = force => ++_scrollers.cache && _updateAll(force === true ? 2 : 0);
+ScrollTrigger.clearScrollMemory = _clearScrollMemory;
+ScrollTrigger.maxScroll = (element, horizontal) => _maxScroll(element, horizontal ? _horizontal : _vertical);
+ScrollTrigger.getScrollFunc = (element, horizontal) => _getScrollFunc(_getTarget(element), horizontal ? _horizontal : _vertical);
+ScrollTrigger.getById = id => _ids[id];
+ScrollTrigger.getAll = () => _triggers.filter(t => t.vars.id !== "ScrollSmoother"); // it's common for people to ScrollTrigger.getAll(t => t.kill()) on page routes, for example, and we don't want it to ruin smooth scrolling by killing the main ScrollSmoother one.
+ScrollTrigger.isScrolling = () => !!_lastScrollTime;
+ScrollTrigger.snapDirectional = _snapDirectional;
+ScrollTrigger.addEventListener = (type, callback) => {
+	let a = _listeners[type] || (_listeners[type] = []);
+	~a.indexOf(callback) || a.push(callback);
+};
+ScrollTrigger.removeEventListener = (type, callback) => {
+	let a = _listeners[type],
+		i = a && a.indexOf(callback);
+	i >= 0 && a.splice(i, 1);
+};
+ScrollTrigger.batch = (targets, vars) => {
+	let result = [],
+		varsCopy = {},
+		interval = vars.interval || 0.016,
+		batchMax = vars.batchMax || 1e9,
+		proxyCallback = (type, callback) => {
+			let elements = [],
+				triggers = [],
+				delay = gsap.delayedCall(interval, () => {callback(elements, triggers); elements = []; triggers = [];}).pause();
+			return self => {
+				elements.length || delay.restart(true);
+				elements.push(self.trigger);
+				triggers.push(self);
+				batchMax <= elements.length && delay.progress(1);
+			};
+		},
+		p;
+	for (p in vars) {
+		varsCopy[p] = (p.substr(0, 2) === "on" && _isFunction(vars[p]) && p !== "onRefreshInit") ? proxyCallback(p, vars[p]) : vars[p];
+	}
+	if (_isFunction(batchMax)) {
+		batchMax = batchMax();
+		_addListener(ScrollTrigger, "refresh", () => batchMax = vars.batchMax());
+	}
+	_toArray(targets).forEach(target => {
+		let config = {};
+		for (p in varsCopy) {
+			config[p] = varsCopy[p];
+		}
+		config.trigger = target;
+		result.push(ScrollTrigger.create(config));
+	});
+	return result;
+};
+
+
+// to reduce file size. clamps the scroll and also returns a duration multiplier so that if the scroll gets chopped shorter, the duration gets curtailed as well (otherwise if you're very close to the top of the page, for example, and swipe up really fast, it'll suddenly slow down and take a long time to reach the top).
+let _clampScrollAndGetDurationMultiplier = (scrollFunc, current, end, max) => {
+		current > max ? scrollFunc(max) : current < 0 && scrollFunc(0);
+		return end > max ? (max - current) / (end - current) : end < 0 ? current / (current - end) : 1;
+	},
+	_allowNativePanning = (target, direction) => {
+		if (direction === true) {
+			target.style.removeProperty("touch-action");
+		} else {
+			target.style.touchAction = direction === true ? "auto" : direction ? "pan-" + direction + (Observer.isTouch ? " pinch-zoom" : "") : "none"; // note: Firefox doesn't support it pinch-zoom properly, at least in addition to a pan-x or pan-y.
+		}
+		target === _docEl && _allowNativePanning(_body, direction);
+	},
+	_overflow = {auto: 1, scroll: 1},
+	_nestedScroll = ({event, target, axis}) => {
+		let node = (event.changedTouches ? event.changedTouches[0] : event).target,
+			cache = node._gsap || gsap.core.getCache(node),
+			time = _getTime(), cs;
+		if (!cache._isScrollT || time - cache._isScrollT > 2000) { // cache for 2 seconds to improve performance.
+			while (node && node !== _body && ((node.scrollHeight <= node.clientHeight && node.scrollWidth <= node.clientWidth) || !(_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]))) node = node.parentNode;
+			cache._isScroll = node && node !== target && !_isViewport(node) && (_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]);
+			cache._isScrollT = time;
+		}
+		if (cache._isScroll || axis === "x") {
+			event.stopPropagation();
+			event._gsapAllow = true;
+		}
+	},
+	// capture events on scrollable elements INSIDE the <body> and allow those by calling stopPropagation() when we find a scrollable ancestor
+	_inputObserver = (target, type, inputs, nested) => Observer.create({
+		target: target,
+		capture: true,
+		debounce: false,
+		lockAxis: true,
+		type: type,
+		onWheel: (nested = nested && _nestedScroll),
+		onPress: nested,
+		onDrag: nested,
+		onScroll: nested,
+		onEnable: () => inputs && _addListener(_doc, Observer.eventTypes[0], _captureInputs, false, true),
+		onDisable: () => _removeListener(_doc, Observer.eventTypes[0], _captureInputs, true)
+	}),
+	_inputExp = /(input|label|select|textarea)/i,
+	_inputIsFocused,
+	_captureInputs = e => {
+		let isInput = _inputExp.test(e.target.tagName);
+		if (isInput || _inputIsFocused) {
+			e._gsapAllow = true;
+			_inputIsFocused = isInput;
+		}
+	},
+	_getScrollNormalizer = vars => {
+		_isObject(vars) || (vars = {});
+		vars.preventDefault = vars.isNormalizer = vars.allowClicks = true;
+		vars.type || (vars.type = "wheel,touch");
+		vars.debounce = !!vars.debounce;
+		vars.id = vars.id || "normalizer";
+		let {normalizeScrollX, momentum, allowNestedScroll, onRelease} = vars,
+			self, maxY,
+			target = _getTarget(vars.target) || _docEl,
+			smoother = gsap.core.globals().ScrollSmoother,
+			smootherInstance = smoother && smoother.get(),
+			content = _fixIOSBug && ((vars.content && _getTarget(vars.content)) || (smootherInstance && vars.content !== false && !smootherInstance.smooth() && smootherInstance.content())),
+			scrollFuncY = _getScrollFunc(target, _vertical),
+			scrollFuncX = _getScrollFunc(target, _horizontal),
+			scale = 1,
+			initialScale = (Observer.isTouch && _win.visualViewport ? _win.visualViewport.scale * _win.visualViewport.width : _win.outerWidth) / _win.innerWidth,
+			wheelRefresh = 0,
+			resolveMomentumDuration = _isFunction(momentum) ? () => momentum(self) : () => momentum || 2.8,
+			lastRefreshID, skipTouchMove,
+			inputObserver = _inputObserver(target, vars.type, true, allowNestedScroll),
+			resumeTouchMove = () => skipTouchMove = false,
+			scrollClampX = _passThrough,
+			scrollClampY = _passThrough,
+			updateClamps = () => {
+				maxY = _maxScroll(target, _vertical);
+				scrollClampY = _clamp(_fixIOSBug ? 1 : 0, maxY);
+				normalizeScrollX && (scrollClampX = _clamp(0, _maxScroll(target, _horizontal)));
+				lastRefreshID = _refreshID;
+			},
+			removeContentOffset = () => {
+				content._gsap.y = _round(parseFloat(content._gsap.y) + scrollFuncY.offset) + "px";
+				content.style.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " + parseFloat(content._gsap.y) + ", 0, 1)";
+				scrollFuncY.offset = scrollFuncY.cacheID = 0;
+			},
+			ignoreDrag = () => {
+				if (skipTouchMove) {
+					requestAnimationFrame(resumeTouchMove);
+					let offset = _round(self.deltaY / 2),
+						scroll = scrollClampY(scrollFuncY.v - offset);
+					if (content && scroll !== scrollFuncY.v + scrollFuncY.offset) {
+						scrollFuncY.offset = scroll - scrollFuncY.v;
+						let y = _round((parseFloat(content && content._gsap.y) || 0) - scrollFuncY.offset);
+						content.style.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " + y + ", 0, 1)";
+						content._gsap.y = y + "px";
+						scrollFuncY.cacheID = _scrollers.cache;
+						_updateAll();
+					}
+					return true;
+				}
+				scrollFuncY.offset && removeContentOffset();
+				skipTouchMove = true;
+			},
+			tween, startScrollX, startScrollY, onStopDelayedCall,
+			onResize = () => { // if the window resizes, like on an iPhone which Apple FORCES the address bar to show/hide even if we event.preventDefault(), it may be scrolling too far now that the address bar is showing, so we must dynamically adjust the momentum tween.
+				updateClamps();
+				if (tween.isActive() && tween.vars.scrollY > maxY) {
+					scrollFuncY() > maxY ? tween.progress(1) && scrollFuncY(maxY) : tween.resetTo("scrollY", maxY);
+				}
+			};
+		content && gsap.set(content, {y: "+=0"}); // to ensure there's a cache (element._gsap)
+		vars.ignoreCheck = e => (_fixIOSBug && e.type === "touchmove" && ignoreDrag()) || (scale > 1.05 && e.type !== "touchstart") || self.isGesturing || (e.touches && e.touches.length > 1);
+		vars.onPress = () => {
+			skipTouchMove = false;
+			let prevScale = scale;
+			scale = _round(((_win.visualViewport && _win.visualViewport.scale) || 1) / initialScale);
+			tween.pause();
+			prevScale !== scale && _allowNativePanning(target, scale > 1.01 ? true : normalizeScrollX ? false : "x");
+			startScrollX = scrollFuncX();
+			startScrollY = scrollFuncY();
+			updateClamps();
+			lastRefreshID = _refreshID;
+		};
+		vars.onRelease = vars.onGestureStart = (self, wasDragging) => {
+			scrollFuncY.offset && removeContentOffset();
+			if (!wasDragging) {
+				onStopDelayedCall.restart(true);
+			} else {
+				_scrollers.cache++; // make sure we're pulling the non-cached value
+				// alternate algorithm: durX = Math.min(6, Math.abs(self.velocityX / 800)),	dur = Math.max(durX, Math.min(6, Math.abs(self.velocityY / 800))); dur = dur * (0.4 + (1 - _power4In(dur / 6)) * 0.6)) * (momentumSpeed || 1)
+				let dur = resolveMomentumDuration(),
+					currentScroll, endScroll;
+				if (normalizeScrollX) {
+					currentScroll = scrollFuncX();
+					endScroll = currentScroll + (dur * 0.05 * -self.velocityX) / 0.227; // the constant .227 is from power4(0.05). velocity is inverted because scrolling goes in the opposite direction.
+					dur *= _clampScrollAndGetDurationMultiplier(scrollFuncX, currentScroll, endScroll, _maxScroll(target, _horizontal));
+					tween.vars.scrollX = scrollClampX(endScroll);
+				}
+				currentScroll = scrollFuncY();
+				endScroll = currentScroll + (dur * 0.05 * -self.velocityY) / 0.227; // the constant .227 is from power4(0.05)
+				dur *= _clampScrollAndGetDurationMultiplier(scrollFuncY, currentScroll, endScroll, _maxScroll(target, _vertical));
+				tween.vars.scrollY = scrollClampY(endScroll);
+				tween.invalidate().duration(dur).play(0.01);
+				if (_fixIOSBug && tween.vars.scrollY >= maxY || currentScroll >= maxY-1) { // iOS bug: it'll show the address bar but NOT fire the window "resize" event until the animation is done but we must protect against overshoot so we leverage an onUpdate to do so.
+					gsap.to({}, {onUpdate: onResize, duration: dur});
+				}
+			}
+			onRelease && onRelease(self);
+		};
+		vars.onWheel = () => {
+			tween._ts && tween.pause();
+			if (_getTime() - wheelRefresh > 1000) { // after 1 second, refresh the clamps otherwise that'll only happen when ScrollTrigger.refresh() is called or for touch-scrolling.
+				lastRefreshID = 0;
+				wheelRefresh = _getTime();
+			}
+		};
+		vars.onChange = (self, dx, dy, xArray, yArray) => {
+			_refreshID !== lastRefreshID && updateClamps();
+			dx && normalizeScrollX && scrollFuncX(scrollClampX(xArray[2] === dx ? startScrollX + (self.startX - self.x) : scrollFuncX() + dx - xArray[1])); // for more precision, we track pointer/touch movement from the start, otherwise it'll drift.
+			if (dy) {
+				scrollFuncY.offset && removeContentOffset();
+				let isTouch = yArray[2] === dy,
+					y = isTouch ? startScrollY + self.startY - self.y : scrollFuncY() + dy - yArray[1],
+					yClamped = scrollClampY(y);
+				isTouch && y !== yClamped && (startScrollY += yClamped - y);
+				scrollFuncY(yClamped);
+			}
+			(dy || dx) && _updateAll();
+		};
+		vars.onEnable = () => {
+			_allowNativePanning(target, normalizeScrollX ? false : "x");
+			ScrollTrigger.addEventListener("refresh", onResize);
+			_addListener(_win, "resize", onResize);
+			if (scrollFuncY.smooth) {
+				scrollFuncY.target.style.scrollBehavior = "auto";
+				scrollFuncY.smooth = scrollFuncX.smooth = false;
+			}
+			inputObserver.enable();
+		};
+		vars.onDisable = () => {
+			_allowNativePanning(target, true);
+			_removeListener(_win, "resize", onResize);
+			ScrollTrigger.removeEventListener("refresh", onResize);
+			inputObserver.kill();
+		};
+		vars.lockAxis = vars.lockAxis !== false;
+		self = new Observer(vars);
+		self.iOS = _fixIOSBug; // used in the Observer getCachedScroll() function to work around an iOS bug that wreaks havoc with TouchEvent.clientY if we allow scroll to go all the way back to 0.
+		_fixIOSBug && !scrollFuncY() && scrollFuncY(1); // iOS bug causes event.clientY values to freak out (wildly inaccurate) if the scroll position is exactly 0.
+		_fixIOSBug && gsap.ticker.add(_passThrough); // prevent the ticker from sleeping
+		onStopDelayedCall = self._dc;
+		tween = gsap.to(self, {ease: "power4", paused: true, inherit: false, scrollX: normalizeScrollX ? "+=0.1" : "+=0", scrollY: "+=0.1", modifiers: {scrollY: _interruptionTracker(scrollFuncY, scrollFuncY(), () => tween.pause())	}, onUpdate: _updateAll, onComplete: onStopDelayedCall.vars.onComplete}); // we need the modifier to sense if the scroll position is altered outside of the momentum tween (like with a scrollTo tween) so we can pause() it to prevent conflicts.
+		return self;
+	};
+
+ScrollTrigger.sort = func => _triggers.sort(func || ((a, b) => (a.vars.refreshPriority || 0) * -1e6 + a.start - (b.start + (b.vars.refreshPriority || 0) * -1e6)));
+ScrollTrigger.observe = vars => new Observer(vars);
+ScrollTrigger.normalizeScroll = vars => {
+	if (typeof(vars) === "undefined") {
+		return _normalizer;
+	}
+	if (vars === true && _normalizer) {
+		return _normalizer.enable();
+	}
+	if (vars === false) {
+		_normalizer && _normalizer.kill();
+		_normalizer = vars;
+		return;
+	}
+	let normalizer = vars instanceof Observer ? vars : _getScrollNormalizer(vars);
+	_normalizer && _normalizer.target === normalizer.target && _normalizer.kill();
+	_isViewport(normalizer.target) && (_normalizer = normalizer);
+	return normalizer;
+};
+
+
+ScrollTrigger.core = { // smaller file size way to leverage in ScrollSmoother and Observer
+	_getVelocityProp,
+	_inputObserver,
+	_scrollers,
+	_proxies,
+	bridge: {
+		// when normalizeScroll sets the scroll position (ss = setScroll)
+		ss: () => {
+			_lastScrollTime || _dispatch("scrollStart");
+			_lastScrollTime = _getTime();
+		},
+		// a way to get the _refreshing value in Observer
+		ref: () => _refreshing
+	}
+};
+
+_getGSAP() && gsap.registerPlugin(ScrollTrigger);
+
+export { ScrollTrigger, ScrollTrigger as default };
diff --git a/src/ScrollTrigger.js b/dist/ScrollTrigger.d.ts
similarity index 99%
rename from src/ScrollTrigger.js
rename to dist/ScrollTrigger.d.ts
index 2b4e3ff605bddfee513149bcf45f030b0e72f08e..89f45d9a84f50c3a027fd3b0818fd8e80b63028f 100644
--- a/src/ScrollTrigger.js
+++ b/dist/ScrollTrigger.d.ts
@@ -1,3 +1,5 @@
+import { _scrollers, Observer, _vertical, _horizontal, _getTarget, _proxies, _getScrollFunc, _getVelocityProp, _getProxyProp } from './Observer.js';
+
 /*!
  * ScrollTrigger 3.12.5
  * https://gsap.com
@@ -9,7 +11,6 @@
 */
 /* eslint-disable */
 
-import { Observer, _getTarget, _vertical, _horizontal, _scrollers, _proxies, _getScrollFunc, _getProxyProp, _getVelocityProp } from "./Observer.js";
 
 let gsap, _coreInitted, _win, _doc, _docEl, _body, _root, _resizeDelay, _toArray, _clamp, _time2, _syncInterval, _refreshing, _pointerIsDown, _transformProp, _i, _prevWidth, _prevHeight, _autoRefresh, _sort, _suppressOverwrites, _ignoreResize, _normalizer, _ignoreMobileResize, _baseScreenHeight, _baseScreenWidth, _fixIOSBug, _context, _scrollRestoration, _div100vh, _100vh, _isReverted, _clampingMax,
 	_limitCallbacks, // if true, we'll only trigger callbacks if the active state toggles, so if you scroll immediately past both the start and end positions of a ScrollTrigger (thus inactive to inactive), neither its onEnter nor onLeave will be called. This is useful during startup.
@@ -134,7 +135,7 @@ let gsap, _coreInitted, _win, _doc, _docEl, _body, _root, _resizeDelay, _toArray
 	_addListener = (element, type, func, nonPassive, capture) => element.addEventListener(type, func, {passive: !nonPassive, capture: !!capture}),
 	_removeListener = (element, type, func, capture) => element.removeEventListener(type, func, !!capture),
 	_wheelListener = (func, el, scrollFunc) => {
-		scrollFunc = scrollFunc && scrollFunc.wheelHandler
+		scrollFunc = scrollFunc && scrollFunc.wheelHandler;
 		if (scrollFunc) {
 			func(el, "wheel", scrollFunc);
 			func(el, "touchmove", scrollFunc);
@@ -278,7 +279,7 @@ let gsap, _coreInitted, _win, _doc, _docEl, _body, _root, _resizeDelay, _toArray
 				obj(0);
 			}
 		});
-		_triggers.slice(0).forEach(t => t.refresh()) // don't loop with _i because during a refresh() someone could call ScrollTrigger.update() which would iterate through _i resulting in a skip.
+		_triggers.slice(0).forEach(t => t.refresh()); // don't loop with _i because during a refresh() someone could call ScrollTrigger.update() which would iterate through _i resulting in a skip.
 		_isReverted = false;
 		_triggers.forEach((t) => { // nested pins (pinnedContainer) with pinSpacing may expand the container, so we must accommodate that here.
 			if (t._subPinOffset && t.pin) {
@@ -562,7 +563,7 @@ let gsap, _coreInitted, _win, _doc, _docEl, _body, _root, _resizeDelay, _toArray
 				let checkForInterruption = _interruptionTracker(getScroll, initialValue, () => {
 					tween.kill();
 					getTween.tween = 0;
-				})
+				});
 				change2 = (change1 && change2) || 0; // if change1 is 0, we set that to the difference and ignore change2. Otherwise, there would be a compound effect.
 				change1 = change1 || (scrollTo - initialValue);
 				tween && tween.kill();
@@ -591,7 +592,7 @@ let gsap, _coreInitted, _win, _doc, _docEl, _body, _root, _resizeDelay, _toArray
 
 
 
-export class ScrollTrigger {
+class ScrollTrigger {
 
 	constructor(vars, animation) {
 		_coreInitted || ScrollTrigger.register(gsap) || console.warn("Please gsap.registerPlugin(ScrollTrigger)");
@@ -814,7 +815,7 @@ export class ScrollTrigger {
 				_refreshing = prevRefreshing; // restore. We set it to true during the update() so that things fire properly in there.
 				self.isReverted = r;
 			}
-		}
+		};
 
 		self.refresh = (soft, force, position, pinOffset) => { // position is typically only defined if it's coming from setPositions() - it's a way to skip the normal parsing. pinOffset is also only from setPositions() and is mostly related to fancy stuff we need to do in ScrollSmoother with effects
 			if ((_refreshing || !self.enabled) && !force) {
@@ -983,7 +984,7 @@ export class ScrollTrigger {
 					animation.parent || animation.totalTime(animation.totalTime()); // if, for example, a toggleAction called play() and then refresh() happens and when we render(1) above, it would cause the animation to complete and get removed from its parent, so this makes sure it gets put back in.
 					_suppressOverwrites(0);
 				} else {
-					pinChange = change
+					pinChange = change;
 				}
 				forcedOverflow && (forcedOverflow.value ? (forcedOverflow.style["overflow" + direction.a.toUpperCase()] = forcedOverflow.value) : forcedOverflow.style.removeProperty("overflow-" + direction.a));
 			} else if (trigger && scrollFunc() && !containerAnimation) { // it may be INSIDE a pinned element, so walk up the tree and look for any elements with _pinOffset to compensate because anything with pinSpacing that's already scrolled would throw off the measurements in getBoundingClientRect()
@@ -1527,7 +1528,7 @@ ScrollTrigger.batch = (targets, vars) => {
 		result.push(ScrollTrigger.create(config));
 	});
 	return result;
-}
+};
 
 
 // to reduce file size. clamps the scroll and also returns a duration multiplier so that if the scroll gets chopped shorter, the duration gets curtailed as well (otherwise if you're very close to the top of the page, for example, and swipe up really fast, it'll suddenly slow down and take a long time to reach the top).
@@ -1641,7 +1642,7 @@ let _clampScrollAndGetDurationMultiplier = (scrollFunc, current, end, max) => {
 				}
 			};
 		content && gsap.set(content, {y: "+=0"}); // to ensure there's a cache (element._gsap)
-		vars.ignoreCheck = e => (_fixIOSBug && e.type === "touchmove" && ignoreDrag(e)) || (scale > 1.05 && e.type !== "touchstart") || self.isGesturing || (e.touches && e.touches.length > 1);
+		vars.ignoreCheck = e => (_fixIOSBug && e.type === "touchmove" && ignoreDrag()) || (scale > 1.05 && e.type !== "touchstart") || self.isGesturing || (e.touches && e.touches.length > 1);
 		vars.onPress = () => {
 			skipTouchMove = false;
 			let prevScale = scale;
@@ -1652,7 +1653,7 @@ let _clampScrollAndGetDurationMultiplier = (scrollFunc, current, end, max) => {
 			startScrollY = scrollFuncY();
 			updateClamps();
 			lastRefreshID = _refreshID;
-		}
+		};
 		vars.onRelease = vars.onGestureStart = (self, wasDragging) => {
 			scrollFuncY.offset && removeContentOffset();
 			if (!wasDragging) {
@@ -1764,4 +1765,4 @@ ScrollTrigger.core = { // smaller file size way to leverage in ScrollSmoother an
 
 _getGSAP() && gsap.registerPlugin(ScrollTrigger);
 
-export { ScrollTrigger as default };
\ No newline at end of file
+export { ScrollTrigger, ScrollTrigger as default };
diff --git a/dist/ScrollTrigger.js b/dist/ScrollTrigger.js
deleted file mode 100644
index 76188e6e71918bf8cdb4f0a2095eb5befd918d98..0000000000000000000000000000000000000000
diff --git a/dist/ScrollTrigger.min.js b/dist/ScrollTrigger.min.js
deleted file mode 100644
index cceb2b91a810a354ef79eaf2974548115e25b371..0000000000000000000000000000000000000000
diff --git a/dist/ScrollTrigger.min.js.map b/dist/ScrollTrigger.min.js.map
deleted file mode 100644
index 675631b2bb49d71520c8a16ac010f1c21fd9407b..0000000000000000000000000000000000000000
diff --git a/dist/ScrollTrigger.mjs b/dist/ScrollTrigger.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..9f96df0b407ac8437c0c4f6db38b918c7410942d
--- /dev/null
+++ b/dist/ScrollTrigger.mjs
@@ -0,0 +1,1768 @@
+import { _scrollers, Observer, _vertical, _horizontal, _getTarget, _proxies, _getScrollFunc, _getVelocityProp, _getProxyProp } from './Observer.mjs';
+
+/*!
+ * ScrollTrigger 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let gsap, _coreInitted, _win, _doc, _docEl, _body, _root, _resizeDelay, _toArray, _clamp, _time2, _syncInterval, _refreshing, _pointerIsDown, _transformProp, _i, _prevWidth, _prevHeight, _autoRefresh, _sort, _suppressOverwrites, _ignoreResize, _normalizer, _ignoreMobileResize, _baseScreenHeight, _baseScreenWidth, _fixIOSBug, _context, _scrollRestoration, _div100vh, _100vh, _isReverted, _clampingMax,
+	_limitCallbacks, // if true, we'll only trigger callbacks if the active state toggles, so if you scroll immediately past both the start and end positions of a ScrollTrigger (thus inactive to inactive), neither its onEnter nor onLeave will be called. This is useful during startup.
+	_startup = 1,
+	_getTime = Date.now,
+	_time1 = _getTime(),
+	_lastScrollTime = 0,
+	_enabled = 0,
+	_parseClamp = (value, type, self) => {
+		let clamp = (_isString(value) && (value.substr(0, 6) === "clamp(" || value.indexOf("max") > -1));
+		self["_" + type + "Clamp"] = clamp;
+		return clamp ? value.substr(6, value.length - 7) : value;
+	},
+	_keepClamp = (value, clamp) => clamp && (!_isString(value) || value.substr(0, 6) !== "clamp(") ? "clamp(" + value + ")" : value,
+	_rafBugFix = () => _enabled && requestAnimationFrame(_rafBugFix), // in some browsers (like Firefox), screen repaints weren't consistent unless we had SOMETHING queued up in requestAnimationFrame()! So this just creates a super simple loop to keep it alive and smooth out repaints.
+	_pointerDownHandler = () => _pointerIsDown = 1,
+	_pointerUpHandler = () => _pointerIsDown = 0,
+	_passThrough = v => v,
+	_round = value => Math.round(value * 100000) / 100000 || 0,
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_isViewport = e => !!~_root.indexOf(e),
+	_getViewportDimension = dimensionProperty => (dimensionProperty === "Height" ? _100vh : _win["inner" + dimensionProperty]) || _docEl["client" + dimensionProperty] || _body["client" + dimensionProperty],
+	_getBoundsFunc = element => _getProxyProp(element, "getBoundingClientRect") || (_isViewport(element) ? () => {_winOffsets.width = _win.innerWidth; _winOffsets.height = _100vh; return _winOffsets;} : () => _getBounds(element)),
+	_getSizeFunc = (scroller, isViewport, {d, d2, a}) => (a = _getProxyProp(scroller, "getBoundingClientRect")) ? () => a()[d] : () => (isViewport ? _getViewportDimension(d2) : scroller["client" + d2]) || 0,
+	_getOffsetsFunc = (element, isViewport) => !isViewport || ~_proxies.indexOf(element) ? _getBoundsFunc(element) : () => _winOffsets,
+	_maxScroll = (element, {s, d2, d, a}) => Math.max(0, (s = "scroll" + d2) && (a = _getProxyProp(element, s)) ? a() - _getBoundsFunc(element)()[d] : _isViewport(element) ? (_docEl[s] || _body[s]) - _getViewportDimension(d2) : element[s] - element["offset" + d2]),
+	_iterateAutoRefresh = (func, events) => {
+		for (let i = 0; i < _autoRefresh.length; i += 3) {
+			(!events || ~events.indexOf(_autoRefresh[i+1])) && func(_autoRefresh[i], _autoRefresh[i+1], _autoRefresh[i+2]);
+		}
+	},
+	_isString = value => typeof(value) === "string",
+	_isFunction = value => typeof(value) === "function",
+	_isNumber = value => typeof(value) === "number",
+	_isObject = value => typeof(value) === "object",
+	_endAnimation = (animation, reversed, pause) => animation && animation.progress(reversed ? 0 : 1) && pause && animation.pause(),
+	_callback = (self, func) => {
+		if (self.enabled) {
+			let result = self._ctx ? self._ctx.add(() => func(self)) : func(self);
+			result && result.totalTime && (self.callbackAnimation = result);
+		}
+	},
+	_abs = Math.abs,
+	_left = "left",
+	_top = "top",
+	_right = "right",
+	_bottom = "bottom",
+	_width = "width",
+	_height = "height",
+	_Right = "Right",
+	_Left = "Left",
+	_Top = "Top",
+	_Bottom = "Bottom",
+	_padding = "padding",
+	_margin = "margin",
+	_Width = "Width",
+	_Height = "Height",
+	_px = "px",
+	_getComputedStyle = element => _win.getComputedStyle(element),
+	_makePositionable = element => { // if the element already has position: absolute or fixed, leave that, otherwise make it position: relative
+		let position = _getComputedStyle(element).position;
+		element.style.position = (position === "absolute" || position === "fixed") ? position : "relative";
+	},
+	_setDefaults = (obj, defaults) => {
+		for (let p in defaults) {
+			(p in obj) || (obj[p] = defaults[p]);
+		}
+		return obj;
+	},
+	_getBounds = (element, withoutTransforms) => {
+		let tween = withoutTransforms && _getComputedStyle(element)[_transformProp] !== "matrix(1, 0, 0, 1, 0, 0)" && gsap.to(element, {x: 0, y: 0, xPercent: 0, yPercent: 0, rotation: 0, rotationX: 0, rotationY: 0, scale: 1, skewX: 0, skewY: 0}).progress(1),
+			bounds = element.getBoundingClientRect();
+		tween && tween.progress(0).kill();
+		return bounds;
+	},
+	_getSize = (element, {d2}) => element["offset" + d2] || element["client" + d2] || 0,
+	_getLabelRatioArray = timeline => {
+		let a = [],
+			labels = timeline.labels,
+			duration = timeline.duration(),
+			p;
+		for (p in labels) {
+			a.push(labels[p] / duration);
+		}
+		return a;
+	},
+	_getClosestLabel = animation => value => gsap.utils.snap(_getLabelRatioArray(animation), value),
+	_snapDirectional = snapIncrementOrArray => {
+		let snap = gsap.utils.snap(snapIncrementOrArray),
+			a = Array.isArray(snapIncrementOrArray) && snapIncrementOrArray.slice(0).sort((a, b) => a - b);
+		return a ? (value, direction, threshold= 1e-3) => {
+			let i;
+			if (!direction) {
+				return snap(value);
+			}
+			if (direction > 0) {
+				value -= threshold; // to avoid rounding errors. If we're too strict, it might snap forward, then immediately again, and again.
+				for (i = 0; i < a.length; i++) {
+					if (a[i] >= value) {
+						return a[i];
+					}
+				}
+				return a[i-1];
+			} else {
+				i = a.length;
+				value += threshold;
+				while (i--) {
+					if (a[i] <= value) {
+						return a[i];
+					}
+				}
+			}
+			return a[0];
+		} : (value, direction, threshold= 1e-3) => {
+			let snapped = snap(value);
+			return !direction || Math.abs(snapped - value) < threshold || ((snapped - value < 0) === direction < 0) ? snapped : snap(direction < 0 ? value - snapIncrementOrArray : value + snapIncrementOrArray);
+		};
+	},
+	_getLabelAtDirection = timeline => (value, st) => _snapDirectional(_getLabelRatioArray(timeline))(value, st.direction),
+	_multiListener = (func, element, types, callback) => types.split(",").forEach(type => func(element, type, callback)),
+	_addListener = (element, type, func, nonPassive, capture) => element.addEventListener(type, func, {passive: !nonPassive, capture: !!capture}),
+	_removeListener = (element, type, func, capture) => element.removeEventListener(type, func, !!capture),
+	_wheelListener = (func, el, scrollFunc) => {
+		scrollFunc = scrollFunc && scrollFunc.wheelHandler;
+		if (scrollFunc) {
+			func(el, "wheel", scrollFunc);
+			func(el, "touchmove", scrollFunc);
+		}
+	},
+	_markerDefaults = {startColor: "green", endColor: "red", indent: 0, fontSize: "16px", fontWeight:"normal"},
+	_defaults = {toggleActions: "play", anticipatePin: 0},
+	_keywords = {top: 0, left: 0, center: 0.5, bottom: 1, right: 1},
+	_offsetToPx = (value, size) => {
+		if (_isString(value)) {
+			let eqIndex = value.indexOf("="),
+				relative = ~eqIndex ? +(value.charAt(eqIndex-1) + 1) * parseFloat(value.substr(eqIndex + 1)) : 0;
+			if (~eqIndex) {
+				(value.indexOf("%") > eqIndex) && (relative *= size / 100);
+				value = value.substr(0, eqIndex-1);
+			}
+			value = relative + ((value in _keywords) ? _keywords[value] * size : ~value.indexOf("%") ? parseFloat(value) * size / 100 : parseFloat(value) || 0);
+		}
+		return value;
+	},
+	_createMarker = (type, name, container, direction, {startColor, endColor, fontSize, indent, fontWeight}, offset, matchWidthEl, containerAnimation) => {
+		let e = _doc.createElement("div"),
+			useFixedPosition = _isViewport(container) || _getProxyProp(container, "pinType") === "fixed",
+			isScroller = type.indexOf("scroller") !== -1,
+			parent = useFixedPosition ? _body : container,
+			isStart = type.indexOf("start") !== -1,
+			color = isStart ? startColor : endColor,
+			css = "border-color:" + color + ";font-size:" + fontSize + ";color:" + color + ";font-weight:" + fontWeight + ";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";
+		css += "position:" + ((isScroller || containerAnimation) && useFixedPosition ? "fixed;" : "absolute;");
+		(isScroller || containerAnimation || !useFixedPosition) && (css += (direction === _vertical ? _right : _bottom) + ":" + (offset + parseFloat(indent)) + "px;");
+		matchWidthEl && (css += "box-sizing:border-box;text-align:left;width:" + matchWidthEl.offsetWidth + "px;");
+		e._isStart = isStart;
+		e.setAttribute("class", "gsap-marker-" + type + (name ? " marker-" + name : ""));
+		e.style.cssText = css;
+		e.innerText = name || name === 0 ? type + "-" + name : type;
+		parent.children[0] ? parent.insertBefore(e, parent.children[0]) : parent.appendChild(e);
+		e._offset = e["offset" + direction.op.d2];
+		_positionMarker(e, 0, direction, isStart);
+		return e;
+	},
+	_positionMarker = (marker, start, direction, flipped) => {
+		let vars = {display: "block"},
+			side = direction[flipped ? "os2" : "p2"],
+			oppositeSide = direction[flipped ? "p2" : "os2"];
+		marker._isFlipped = flipped;
+		vars[direction.a + "Percent"] = flipped ? -100 : 0;
+		vars[direction.a] = flipped ? "1px" : 0;
+		vars["border" + side + _Width] = 1;
+		vars["border" + oppositeSide + _Width] = 0;
+		vars[direction.p] = start + "px";
+		gsap.set(marker, vars);
+	},
+	_triggers = [],
+	_ids = {},
+	_rafID,
+	_sync = () => _getTime() - _lastScrollTime > 34 && (_rafID || (_rafID = requestAnimationFrame(_updateAll))),
+	_onScroll = () => { // previously, we tried to optimize performance by batching/deferring to the next requestAnimationFrame(), but discovered that Safari has a few bugs that make this unworkable (especially on iOS). See https://codepen.io/GreenSock/pen/16c435b12ef09c38125204818e7b45fc?editors=0010 and https://codepen.io/GreenSock/pen/JjOxYpQ/3dd65ccec5a60f1d862c355d84d14562?editors=0010 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503?editors=0010
+		if (!_normalizer || !_normalizer.isPressed || _normalizer.startX > _body.clientWidth) { // if the user is dragging the scrollbar, allow it.
+			_scrollers.cache++;
+			if (_normalizer) {
+				_rafID || (_rafID = requestAnimationFrame(_updateAll));
+			} else {
+				_updateAll(); // Safari in particular (on desktop) NEEDS the immediate update rather than waiting for a requestAnimationFrame() whereas iOS seems to benefit from waiting for the requestAnimationFrame() tick, at least when normalizing. See https://codepen.io/GreenSock/pen/qBYozqO?editors=0110
+			}
+			_lastScrollTime || _dispatch("scrollStart");
+			_lastScrollTime = _getTime();
+		}
+	},
+	_setBaseDimensions = () => {
+		_baseScreenWidth = _win.innerWidth;
+		_baseScreenHeight = _win.innerHeight;
+	},
+	_onResize = () => {
+		_scrollers.cache++;
+		!_refreshing && !_ignoreResize && !_doc.fullscreenElement && !_doc.webkitFullscreenElement && (!_ignoreMobileResize || _baseScreenWidth !== _win.innerWidth || Math.abs(_win.innerHeight - _baseScreenHeight) > _win.innerHeight * 0.25) && _resizeDelay.restart(true);
+	}, // ignore resizes triggered by refresh()
+	_listeners = {},
+	_emptyArray = [],
+	_softRefresh = () => _removeListener(ScrollTrigger, "scrollEnd", _softRefresh) || _refreshAll(true),
+	_dispatch = type => (_listeners[type] && _listeners[type].map(f => f())) || _emptyArray,
+	_savedStyles = [], // when ScrollTrigger.saveStyles() is called, the inline styles are recorded in this Array in a sequential format like [element, cssText, gsCache, media]. This keeps it very memory-efficient and fast to iterate through.
+	_revertRecorded = media => {
+		for (let i = 0; i < _savedStyles.length; i+=5) {
+			if (!media || _savedStyles[i+4] && _savedStyles[i+4].query === media) {
+				_savedStyles[i].style.cssText = _savedStyles[i+1];
+				_savedStyles[i].getBBox && _savedStyles[i].setAttribute("transform", _savedStyles[i+2] || "");
+				_savedStyles[i+3].uncache = 1;
+			}
+		}
+	},
+	_revertAll = (kill, media) => {
+		let trigger;
+		for (_i = 0; _i < _triggers.length; _i++) {
+			trigger = _triggers[_i];
+			if (trigger && (!media || trigger._ctx === media)) {
+				if (kill) {
+					trigger.kill(1);
+				} else {
+					trigger.revert(true, true);
+				}
+			}
+		}
+		_isReverted = true;
+		media && _revertRecorded(media);
+		media || _dispatch("revert");
+	},
+	_clearScrollMemory = (scrollRestoration, force) => { // zero-out all the recorded scroll positions. Don't use _triggers because if, for example, .matchMedia() is used to create some ScrollTriggers and then the user resizes and it removes ALL ScrollTriggers, and then go back to a size where there are ScrollTriggers, it would have kept the position(s) saved from the initial state.
+		_scrollers.cache++;
+		(force || !_refreshingAll) && _scrollers.forEach(obj => _isFunction(obj) && obj.cacheID++ && (obj.rec = 0));
+		_isString(scrollRestoration) && (_win.history.scrollRestoration = _scrollRestoration = scrollRestoration);
+	},
+	_refreshingAll,
+	_refreshID = 0,
+	_queueRefreshID,
+	_queueRefreshAll = () => { // we don't want to call _refreshAll() every time we create a new ScrollTrigger (for performance reasons) - it's better to batch them. Some frameworks dynamically load content and we can't rely on the window's "load" or "DOMContentLoaded" events to trigger it.
+		if (_queueRefreshID !== _refreshID) {
+			let id = _queueRefreshID = _refreshID;
+			requestAnimationFrame(() => id === _refreshID && _refreshAll(true));
+		}
+	},
+	_refresh100vh = () => {
+		_body.appendChild(_div100vh);
+		_100vh = (!_normalizer && _div100vh.offsetHeight) || _win.innerHeight;
+		_body.removeChild(_div100vh);
+	},
+	_hideAllMarkers = hide => _toArray(".gsap-marker-start, .gsap-marker-end, .gsap-marker-scroller-start, .gsap-marker-scroller-end").forEach(el => el.style.display = hide ? "none" : "block"),
+	_refreshAll = (force, skipRevert) => {
+		if (_lastScrollTime && !force && !_isReverted) {
+			_addListener(ScrollTrigger, "scrollEnd", _softRefresh);
+			return;
+		}
+		_refresh100vh();
+		_refreshingAll = ScrollTrigger.isRefreshing = true;
+		_scrollers.forEach(obj => _isFunction(obj) && ++obj.cacheID && (obj.rec = obj())); // force the clearing of the cache because some browsers take a little while to dispatch the "scroll" event and the user may have changed the scroll position and then called ScrollTrigger.refresh() right away
+		let refreshInits = _dispatch("refreshInit");
+		_sort && ScrollTrigger.sort();
+		skipRevert || _revertAll();
+		_scrollers.forEach(obj => {
+			if (_isFunction(obj)) {
+				obj.smooth && (obj.target.style.scrollBehavior = "auto"); // smooth scrolling interferes
+				obj(0);
+			}
+		});
+		_triggers.slice(0).forEach(t => t.refresh()); // don't loop with _i because during a refresh() someone could call ScrollTrigger.update() which would iterate through _i resulting in a skip.
+		_isReverted = false;
+		_triggers.forEach((t) => { // nested pins (pinnedContainer) with pinSpacing may expand the container, so we must accommodate that here.
+			if (t._subPinOffset && t.pin) {
+				let prop = t.vars.horizontal ? "offsetWidth" : "offsetHeight",
+					original = t.pin[prop];
+				t.revert(true, 1);
+				t.adjustPinSpacing(t.pin[prop] - original);
+				t.refresh();
+			}
+		});
+		_clampingMax = 1; // pinSpacing might be propping a page open, thus when we .setPositions() to clamp a ScrollTrigger's end we should leave the pinSpacing alone. That's what this flag is for.
+		_hideAllMarkers(true);
+		_triggers.forEach(t => { // the scroller's max scroll position may change after all the ScrollTriggers refreshed (like pinning could push it down), so we need to loop back and correct any with end: "max". Same for anything with a clamped end
+			let max = _maxScroll(t.scroller, t._dir),
+				endClamp = t.vars.end === "max" || (t._endClamp && t.end > max),
+				startClamp = t._startClamp && t.start >= max;
+			(endClamp || startClamp) && t.setPositions(startClamp ? max - 1 : t.start, endClamp ? Math.max(startClamp ? max : t.start + 1, max) : t.end, true);
+		});
+		_hideAllMarkers(false);
+		_clampingMax = 0;
+		refreshInits.forEach(result => result && result.render && result.render(-1)); // if the onRefreshInit() returns an animation (typically a gsap.set()), revert it. This makes it easy to put things in a certain spot before refreshing for measurement purposes, and then put things back.
+		_scrollers.forEach(obj => {
+			if (_isFunction(obj)) {
+				obj.smooth && requestAnimationFrame(() => obj.target.style.scrollBehavior = "smooth");
+				obj.rec && obj(obj.rec);
+			}
+		});
+		_clearScrollMemory(_scrollRestoration, 1);
+		_resizeDelay.pause();
+		_refreshID++;
+		_refreshingAll = 2;
+		_updateAll(2);
+		_triggers.forEach(t => _isFunction(t.vars.onRefresh) && t.vars.onRefresh(t));
+		_refreshingAll = ScrollTrigger.isRefreshing = false;
+		_dispatch("refresh");
+	},
+	_lastScroll = 0,
+	_direction = 1,
+	_primary,
+	_updateAll = (force) => {
+		if (force === 2 || (!_refreshingAll && !_isReverted)) { // _isReverted could be true if, for example, a matchMedia() is in the process of executing. We don't want to update during the time everything is reverted.
+			ScrollTrigger.isUpdating = true;
+			_primary && _primary.update(0); // ScrollSmoother uses refreshPriority -9999 to become the primary that gets updated before all others because it affects the scroll position.
+			let l = _triggers.length,
+				time = _getTime(),
+				recordVelocity = time - _time1 >= 50,
+				scroll = l && _triggers[0].scroll();
+			_direction = _lastScroll > scroll ? -1 : 1;
+			_refreshingAll || (_lastScroll = scroll);
+			if (recordVelocity) {
+				if (_lastScrollTime && !_pointerIsDown && time - _lastScrollTime > 200) {
+					_lastScrollTime = 0;
+					_dispatch("scrollEnd");
+				}
+				_time2 = _time1;
+				_time1 = time;
+			}
+			if (_direction < 0) {
+				_i = l;
+				while (_i-- > 0) {
+					_triggers[_i] && _triggers[_i].update(0, recordVelocity);
+				}
+				_direction = 1;
+			} else {
+				for (_i = 0; _i < l; _i++) {
+					_triggers[_i] && _triggers[_i].update(0, recordVelocity);
+				}
+			}
+			ScrollTrigger.isUpdating = false;
+		}
+		_rafID = 0;
+	},
+	_propNamesToCopy = [_left, _top, _bottom, _right, _margin + _Bottom, _margin + _Right, _margin + _Top, _margin + _Left, "display", "flexShrink", "float", "zIndex", "gridColumnStart", "gridColumnEnd", "gridRowStart", "gridRowEnd", "gridArea", "justifySelf", "alignSelf", "placeSelf", "order"],
+	_stateProps = _propNamesToCopy.concat([_width, _height, "boxSizing", "max" + _Width, "max" + _Height, "position", _margin, _padding, _padding + _Top, _padding + _Right, _padding + _Bottom, _padding + _Left]),
+	_swapPinOut = (pin, spacer, state) => {
+		_setState(state);
+		let cache = pin._gsap;
+		if (cache.spacerIsNative) {
+			_setState(cache.spacerState);
+		} else if (pin._gsap.swappedIn) {
+			let parent = spacer.parentNode;
+			if (parent) {
+				parent.insertBefore(pin, spacer);
+				parent.removeChild(spacer);
+			}
+		}
+		pin._gsap.swappedIn = false;
+	},
+	_swapPinIn = (pin, spacer, cs, spacerState) => {
+		if (!pin._gsap.swappedIn) {
+			let i = _propNamesToCopy.length,
+				spacerStyle = spacer.style,
+				pinStyle = pin.style,
+				p;
+			while (i--) {
+				p = _propNamesToCopy[i];
+				spacerStyle[p] = cs[p];
+			}
+			spacerStyle.position = cs.position === "absolute" ? "absolute" : "relative";
+			(cs.display === "inline") && (spacerStyle.display = "inline-block");
+			pinStyle[_bottom] = pinStyle[_right] = "auto";
+			spacerStyle.flexBasis = cs.flexBasis || "auto";
+			spacerStyle.overflow = "visible";
+			spacerStyle.boxSizing = "border-box";
+			spacerStyle[_width] = _getSize(pin, _horizontal) + _px;
+			spacerStyle[_height] = _getSize(pin, _vertical) + _px;
+			spacerStyle[_padding] = pinStyle[_margin] = pinStyle[_top] = pinStyle[_left] = "0";
+			_setState(spacerState);
+			pinStyle[_width] = pinStyle["max" + _Width] = cs[_width];
+			pinStyle[_height] = pinStyle["max" + _Height] = cs[_height];
+			pinStyle[_padding] = cs[_padding];
+			if (pin.parentNode !== spacer) {
+				pin.parentNode.insertBefore(spacer, pin);
+				spacer.appendChild(pin);
+			}
+			pin._gsap.swappedIn = true;
+		}
+	},
+	_capsExp = /([A-Z])/g,
+	_setState = state => {
+		if (state) {
+			let style = state.t.style,
+				l = state.length,
+				i = 0,
+				p, value;
+			(state.t._gsap || gsap.core.getCache(state.t)).uncache = 1; // otherwise transforms may be off
+			for (; i < l; i +=2) {
+				value = state[i+1];
+				p = state[i];
+				if (value) {
+					style[p] = value;
+				} else if (style[p]) {
+					style.removeProperty(p.replace(_capsExp, "-$1").toLowerCase());
+				}
+			}
+		}
+	},
+	_getState = element => { // returns an Array with alternating values like [property, value, property, value] and a "t" property pointing to the target (element). Makes it fast and cheap.
+		let l = _stateProps.length,
+			style = element.style,
+			state = [],
+			i = 0;
+		for (; i < l; i++) {
+			state.push(_stateProps[i], style[_stateProps[i]]);
+		}
+		state.t = element;
+		return state;
+	},
+	_copyState = (state, override, omitOffsets) => {
+		let result = [],
+			l = state.length,
+			i = omitOffsets ? 8 : 0, // skip top, left, right, bottom if omitOffsets is true
+			p;
+		for (; i < l; i += 2) {
+			p = state[i];
+			result.push(p, (p in override) ? override[p] : state[i+1]);
+		}
+		result.t = state.t;
+		return result;
+	},
+	_winOffsets = {left:0, top:0},
+	// // potential future feature (?) Allow users to calculate where a trigger hits (scroll position) like getScrollPosition("#id", "top bottom")
+	// _getScrollPosition = (trigger, position, {scroller, containerAnimation, horizontal}) => {
+	// 	scroller = _getTarget(scroller || _win);
+	// 	let direction = horizontal ? _horizontal : _vertical,
+	// 		isViewport = _isViewport(scroller);
+	// 	_getSizeFunc(scroller, isViewport, direction);
+	// 	return _parsePosition(position, _getTarget(trigger), _getSizeFunc(scroller, isViewport, direction)(), direction, _getScrollFunc(scroller, direction)(), 0, 0, 0, _getOffsetsFunc(scroller, isViewport)(), isViewport ? 0 : parseFloat(_getComputedStyle(scroller)["border" + direction.p2 + _Width]) || 0, 0, containerAnimation ? containerAnimation.duration() : _maxScroll(scroller), containerAnimation);
+	// },
+	_parsePosition = (value, trigger, scrollerSize, direction, scroll, marker, markerScroller, self, scrollerBounds, borderWidth, useFixedPosition, scrollerMax, containerAnimation, clampZeroProp) => {
+		_isFunction(value) && (value = value(self));
+		if (_isString(value) && value.substr(0,3) === "max") {
+			value = scrollerMax + (value.charAt(4) === "=" ? _offsetToPx("0" + value.substr(3), scrollerSize) : 0);
+		}
+		let time = containerAnimation ? containerAnimation.time() : 0,
+			p1, p2, element;
+		containerAnimation && containerAnimation.seek(0);
+		isNaN(value) || (value = +value); // convert a string number like "45" to an actual number
+		if (!_isNumber(value)) {
+			_isFunction(trigger) && (trigger = trigger(self));
+			let offsets = (value || "0").split(" "),
+				bounds, localOffset, globalOffset, display;
+			element = _getTarget(trigger, self) || _body;
+			bounds = _getBounds(element) || {};
+			if ((!bounds || (!bounds.left && !bounds.top)) && _getComputedStyle(element).display === "none") { // if display is "none", it won't report getBoundingClientRect() properly
+				display = element.style.display;
+				element.style.display = "block";
+				bounds = _getBounds(element);
+				display ? (element.style.display = display) : element.style.removeProperty("display");
+			}
+			localOffset = _offsetToPx(offsets[0], bounds[direction.d]);
+			globalOffset = _offsetToPx(offsets[1] || "0", scrollerSize);
+			value = bounds[direction.p] - scrollerBounds[direction.p] - borderWidth + localOffset + scroll - globalOffset;
+			markerScroller && _positionMarker(markerScroller, globalOffset, direction, (scrollerSize - globalOffset < 20 || (markerScroller._isStart && globalOffset > 20)));
+			scrollerSize -= scrollerSize - globalOffset; // adjust for the marker
+		} else {
+			containerAnimation && (value = gsap.utils.mapRange(containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, 0, scrollerMax, value));
+			markerScroller && _positionMarker(markerScroller, scrollerSize, direction, true);
+		}
+		if (clampZeroProp) {
+			self[clampZeroProp] = value || -0.001;
+			value < 0 && (value = 0);
+		}
+		if (marker) {
+			let position = value + scrollerSize,
+				isStart = marker._isStart;
+			p1 = "scroll" + direction.d2;
+			_positionMarker(marker, position, direction, (isStart && position > 20) || (!isStart && (useFixedPosition ? Math.max(_body[p1], _docEl[p1]) : marker.parentNode[p1]) <= position + 1));
+			if (useFixedPosition) {
+				scrollerBounds = _getBounds(markerScroller);
+				useFixedPosition && (marker.style[direction.op.p] = (scrollerBounds[direction.op.p] - direction.op.m - marker._offset) + _px);
+			}
+		}
+		if (containerAnimation && element) {
+			p1 = _getBounds(element);
+			containerAnimation.seek(scrollerMax);
+			p2 = _getBounds(element);
+			containerAnimation._caScrollDist = p1[direction.p] - p2[direction.p];
+			value = value / (containerAnimation._caScrollDist) * scrollerMax;
+		}
+		containerAnimation && containerAnimation.seek(time);
+		return containerAnimation ? value : Math.round(value);
+	},
+	_prefixExp = /(webkit|moz|length|cssText|inset)/i,
+	_reparent = (element, parent, top, left) => {
+		if (element.parentNode !== parent) {
+			let style = element.style,
+				p, cs;
+			if (parent === _body) {
+				element._stOrig = style.cssText; // record original inline styles so we can revert them later
+				cs = _getComputedStyle(element);
+				for (p in cs) { // must copy all relevant styles to ensure that nothing changes visually when we reparent to the <body>. Skip the vendor prefixed ones.
+					if (!+p && !_prefixExp.test(p) && cs[p] && typeof style[p] === "string" && p !== "0") {
+						style[p] = cs[p];
+					}
+				}
+				style.top = top;
+				style.left = left;
+			} else {
+				style.cssText = element._stOrig;
+			}
+			gsap.core.getCache(element).uncache = 1;
+			parent.appendChild(element);
+		}
+	},
+	_interruptionTracker = (getValueFunc, initialValue, onInterrupt) => {
+		let last1 = initialValue,
+			last2 = last1;
+		return value => {
+			let current = Math.round(getValueFunc()); // round because in some [very uncommon] Windows environments, scroll can get reported with decimals even though it was set without.
+			if (current !== last1 && current !== last2 && Math.abs(current - last1) > 3 && Math.abs(current - last2) > 3) { // if the user scrolls, kill the tween. iOS Safari intermittently misreports the scroll position, it may be the most recently-set one or the one before that! When Safari is zoomed (CMD-+), it often misreports as 1 pixel off too! So if we set the scroll position to 125, for example, it'll actually report it as 124.
+				value = current;
+				onInterrupt && onInterrupt();
+			}
+			last2 = last1;
+			last1 = value;
+			return value;
+		};
+	},
+	_shiftMarker = (marker, direction, value) => {
+		let vars = {};
+		vars[direction.p] = "+=" + value;
+		gsap.set(marker, vars);
+	},
+	// _mergeAnimations = animations => {
+	// 	let tl = gsap.timeline({smoothChildTiming: true}).startTime(Math.min(...animations.map(a => a.globalTime(0))));
+	// 	animations.forEach(a => {let time = a.totalTime(); tl.add(a); a.totalTime(time); });
+	// 	tl.smoothChildTiming = false;
+	// 	return tl;
+	// },
+
+	// returns a function that can be used to tween the scroll position in the direction provided, and when doing so it'll add a .tween property to the FUNCTION itself, and remove it when the tween completes or gets killed. This gives us a way to have multiple ScrollTriggers use a central function for any given scroller and see if there's a scroll tween running (which would affect if/how things get updated)
+	_getTweenCreator = (scroller, direction) => {
+		let getScroll = _getScrollFunc(scroller, direction),
+			prop = "_scroll" + direction.p2, // add a tweenable property to the scroller that's a getter/setter function, like _scrollTop or _scrollLeft. This way, if someone does gsap.killTweensOf(scroller) it'll kill the scroll tween.
+			getTween = (scrollTo, vars, initialValue, change1, change2) => {
+				let tween = getTween.tween,
+					onComplete = vars.onComplete,
+					modifiers = {};
+				initialValue = initialValue || getScroll();
+				let checkForInterruption = _interruptionTracker(getScroll, initialValue, () => {
+					tween.kill();
+					getTween.tween = 0;
+				});
+				change2 = (change1 && change2) || 0; // if change1 is 0, we set that to the difference and ignore change2. Otherwise, there would be a compound effect.
+				change1 = change1 || (scrollTo - initialValue);
+				tween && tween.kill();
+				vars[prop] = scrollTo;
+				vars.inherit = false;
+				vars.modifiers = modifiers;
+				modifiers[prop] = () => checkForInterruption(initialValue + change1 * tween.ratio + change2 * tween.ratio * tween.ratio);
+				vars.onUpdate = () => {
+					_scrollers.cache++;
+					getTween.tween && _updateAll(); // if it was interrupted/killed, like in a context.revert(), don't force an updateAll()
+				};
+				vars.onComplete = () => {
+					getTween.tween = 0;
+					onComplete && onComplete.call(tween);
+				};
+				tween = getTween.tween = gsap.to(scroller, vars);
+				return tween;
+			};
+		scroller[prop] = getScroll;
+		getScroll.wheelHandler = () => getTween.tween && getTween.tween.kill() && (getTween.tween = 0);
+		_addListener(scroller, "wheel", getScroll.wheelHandler); // Windows machines handle mousewheel scrolling in chunks (like "3 lines per scroll") meaning the typical strategy for cancelling the scroll isn't as sensitive. It's much more likely to match one of the previous 2 scroll event positions. So we kill any snapping as soon as there's a wheel event.
+		ScrollTrigger.isTouch && _addListener(scroller, "touchmove", getScroll.wheelHandler);
+		return getTween;
+	};
+
+
+
+
+class ScrollTrigger {
+
+	constructor(vars, animation) {
+		_coreInitted || ScrollTrigger.register(gsap) || console.warn("Please gsap.registerPlugin(ScrollTrigger)");
+		_context(this);
+		this.init(vars, animation);
+	}
+
+	init(vars, animation) {
+		this.progress = this.start = 0;
+		this.vars && this.kill(true, true); // in case it's being initted again
+		if (!_enabled) {
+			this.update = this.refresh = this.kill = _passThrough;
+			return;
+		}
+		vars = _setDefaults((_isString(vars) || _isNumber(vars) || vars.nodeType) ? {trigger: vars} : vars, _defaults);
+		let {onUpdate, toggleClass, id, onToggle, onRefresh, scrub, trigger, pin, pinSpacing, invalidateOnRefresh, anticipatePin, onScrubComplete, onSnapComplete, once, snap, pinReparent, pinSpacer, containerAnimation, fastScrollEnd, preventOverlaps} = vars,
+			direction = vars.horizontal || (vars.containerAnimation && vars.horizontal !== false) ? _horizontal : _vertical,
+			isToggle = !scrub && scrub !== 0,
+			scroller = _getTarget(vars.scroller || _win),
+			scrollerCache = gsap.core.getCache(scroller),
+			isViewport = _isViewport(scroller),
+			useFixedPosition = ("pinType" in vars ? vars.pinType : _getProxyProp(scroller, "pinType") || (isViewport && "fixed")) === "fixed",
+			callbacks = [vars.onEnter, vars.onLeave, vars.onEnterBack, vars.onLeaveBack],
+			toggleActions = isToggle && vars.toggleActions.split(" "),
+			markers = "markers" in vars ? vars.markers : _defaults.markers,
+			borderWidth = isViewport ? 0 : parseFloat(_getComputedStyle(scroller)["border" + direction.p2 + _Width]) || 0,
+			self = this,
+			onRefreshInit = vars.onRefreshInit && (() => vars.onRefreshInit(self)),
+			getScrollerSize = _getSizeFunc(scroller, isViewport, direction),
+			getScrollerOffsets = _getOffsetsFunc(scroller, isViewport),
+			lastSnap = 0,
+			lastRefresh = 0,
+			prevProgress = 0,
+			scrollFunc = _getScrollFunc(scroller, direction),
+			tweenTo, pinCache, snapFunc, scroll1, scroll2, start, end, markerStart, markerEnd, markerStartTrigger, markerEndTrigger, markerVars, executingOnRefresh,
+			change, pinOriginalState, pinActiveState, pinState, spacer, offset, pinGetter, pinSetter, pinStart, pinChange, spacingStart, spacerState, markerStartSetter, pinMoves,
+			markerEndSetter, cs, snap1, snap2, scrubTween, scrubSmooth, snapDurClamp, snapDelayedCall, prevScroll, prevAnimProgress, caMarkerSetter, customRevertReturn;
+
+		// for the sake of efficiency, _startClamp/_endClamp serve like a truthy value indicating that clamping was enabled on the start/end, and ALSO store the actual pre-clamped numeric value. We tap into that in ScrollSmoother for speed effects. So for example, if start="clamp(top bottom)" results in a start of -100 naturally, it would get clamped to 0 but -100 would be stored in _startClamp.
+		self._startClamp = self._endClamp = false;
+		self._dir = direction;
+		anticipatePin *= 45;
+		self.scroller = scroller;
+		self.scroll = containerAnimation ? containerAnimation.time.bind(containerAnimation) : scrollFunc;
+		scroll1 = scrollFunc();
+		self.vars = vars;
+		animation = animation || vars.animation;
+		if ("refreshPriority" in vars) {
+			_sort = 1;
+			vars.refreshPriority === -9999 && (_primary = self); // used by ScrollSmoother
+		}
+		scrollerCache.tweenScroll = scrollerCache.tweenScroll || {
+			top: _getTweenCreator(scroller, _vertical),
+			left: _getTweenCreator(scroller, _horizontal)
+		};
+		self.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];
+		self.scrubDuration = value => {
+			scrubSmooth = _isNumber(value) && value;
+			if (!scrubSmooth) {
+				scrubTween && scrubTween.progress(1).kill();
+				scrubTween = 0;
+			} else {
+				scrubTween ? scrubTween.duration(value) : (scrubTween = gsap.to(animation, {ease: "expo", totalProgress: "+=0", inherit: false, duration: scrubSmooth, paused: true, onComplete: () => onScrubComplete && onScrubComplete(self)}));
+			}
+		};
+		if (animation) {
+			animation.vars.lazy = false;
+			(animation._initted && !self.isReverted) || (animation.vars.immediateRender !== false && vars.immediateRender !== false && animation.duration() && animation.render(0, true, true)); // special case: if this ScrollTrigger gets re-initted, a from() tween with a stagger could get initted initially and then reverted on the re-init which means it'll need to get rendered again here to properly display things. Otherwise, See https://gsap.com/forums/topic/36777-scrollsmoother-splittext-nextjs/ and https://codepen.io/GreenSock/pen/eYPyPpd?editors=0010
+			self.animation = animation.pause();
+			animation.scrollTrigger = self;
+			self.scrubDuration(scrub);
+			snap1 = 0;
+			id || (id = animation.vars.id);
+		}
+
+		if (snap) {
+			// TODO: potential idea: use legitimate CSS scroll snapping by pushing invisible elements into the DOM that serve as snap positions, and toggle the document.scrollingElement.style.scrollSnapType onToggle. See https://codepen.io/GreenSock/pen/JjLrgWM for a quick proof of concept.
+			if (!_isObject(snap) || snap.push) {
+				snap = {snapTo: snap};
+			}
+			("scrollBehavior" in _body.style) && gsap.set(isViewport ? [_body, _docEl] : scroller, {scrollBehavior: "auto"}); // smooth scrolling doesn't work with snap.
+			_scrollers.forEach(o => _isFunction(o) && o.target === (isViewport ? _doc.scrollingElement || _docEl : scroller) && (o.smooth = false)); // note: set smooth to false on both the vertical and horizontal scroll getters/setters
+			snapFunc = _isFunction(snap.snapTo) ? snap.snapTo : snap.snapTo === "labels" ? _getClosestLabel(animation) : snap.snapTo === "labelsDirectional" ? _getLabelAtDirection(animation) : snap.directional !== false ? (value, st) => _snapDirectional(snap.snapTo)(value, _getTime() - lastRefresh < 500 ? 0 : st.direction) : gsap.utils.snap(snap.snapTo);
+			snapDurClamp = snap.duration || {min: 0.1, max: 2};
+			snapDurClamp = _isObject(snapDurClamp) ? _clamp(snapDurClamp.min, snapDurClamp.max) : _clamp(snapDurClamp, snapDurClamp);
+			snapDelayedCall = gsap.delayedCall(snap.delay || (scrubSmooth / 2) || 0.1, () => {
+				let scroll = scrollFunc(),
+					refreshedRecently = _getTime() - lastRefresh < 500,
+					tween = tweenTo.tween;
+				if ((refreshedRecently || Math.abs(self.getVelocity()) < 10) && !tween && !_pointerIsDown && lastSnap !== scroll) {
+					let progress = (scroll - start) / change, // don't use self.progress because this might run between the refresh() and when the scroll position updates and self.progress is set properly in the update() method.
+						totalProgress = animation && !isToggle ? animation.totalProgress() : progress,
+						velocity = refreshedRecently ? 0 : ((totalProgress - snap2) / (_getTime() - _time2) * 1000) || 0,
+						change1 = gsap.utils.clamp(-progress, 1 - progress, _abs(velocity / 2) * velocity / 0.185),
+						naturalEnd = progress + (snap.inertia === false ? 0 : change1),
+						endValue, endScroll,
+						{ onStart, onInterrupt, onComplete } = snap;
+					endValue = snapFunc(naturalEnd, self);
+					_isNumber(endValue) || (endValue = naturalEnd); // in case the function didn't return a number, fall back to using the naturalEnd
+					endScroll = Math.round(start + endValue * change);
+					if (scroll <= end && scroll >= start && endScroll !== scroll) {
+						if (tween && !tween._initted && tween.data <= _abs(endScroll - scroll)) { // there's an overlapping snap! So we must figure out which one is closer and let that tween live.
+							return;
+						}
+						if (snap.inertia === false) {
+							change1 = endValue - progress;
+						}
+						tweenTo(endScroll, {
+							duration: snapDurClamp(_abs( (Math.max(_abs(naturalEnd - totalProgress), _abs(endValue - totalProgress)) * 0.185 / velocity / 0.05) || 0)),
+							ease: snap.ease || "power3",
+							data: _abs(endScroll - scroll), // record the distance so that if another snap tween occurs (conflict) we can prioritize the closest snap.
+							onInterrupt: () => snapDelayedCall.restart(true) && onInterrupt && onInterrupt(self),
+							onComplete() {
+								self.update();
+								lastSnap = scrollFunc();
+								if (animation) { // the resolution of the scrollbar is limited, so we should correct the scrubbed animation's playhead at the end to match EXACTLY where it was supposed to snap
+									scrubTween ? scrubTween.resetTo("totalProgress", endValue, animation._tTime / animation._tDur) : animation.progress(endValue);
+								}
+								snap1 = snap2 = animation && !isToggle ? animation.totalProgress() : self.progress;
+								onSnapComplete && onSnapComplete(self);
+								onComplete && onComplete(self);
+							}
+						}, scroll, change1 * change, endScroll - scroll - change1 * change);
+						onStart && onStart(self, tweenTo.tween);
+					}
+				} else if (self.isActive && lastSnap !== scroll) {
+					snapDelayedCall.restart(true);
+				}
+			}).pause();
+		}
+		id && (_ids[id] = self);
+		trigger = self.trigger = _getTarget(trigger || (pin !== true && pin));
+
+		// if a trigger has some kind of scroll-related effect applied that could contaminate the "y" or "x" position (like a ScrollSmoother effect), we needed a way to temporarily revert it, so we use the stRevert property of the gsCache. It can return another function that we'll call at the end so it can return to its normal state.
+		customRevertReturn = trigger && trigger._gsap && trigger._gsap.stRevert;
+		customRevertReturn && (customRevertReturn = customRevertReturn(self));
+
+		pin = pin === true ? trigger : _getTarget(pin);
+		_isString(toggleClass) && (toggleClass = {targets: trigger, className: toggleClass});
+		if (pin) {
+			(pinSpacing === false || pinSpacing === _margin) || (pinSpacing = !pinSpacing && pin.parentNode && pin.parentNode.style && _getComputedStyle(pin.parentNode).display === "flex" ? false : _padding); // if the parent is display: flex, don't apply pinSpacing by default. We should check that pin.parentNode is an element (not shadow dom window)
+			self.pin = pin;
+			pinCache = gsap.core.getCache(pin);
+			if (!pinCache.spacer) { // record the spacer and pinOriginalState on the cache in case someone tries pinning the same element with MULTIPLE ScrollTriggers - we don't want to have multiple spacers or record the "original" pin state after it has already been affected by another ScrollTrigger.
+				if (pinSpacer) {
+					pinSpacer = _getTarget(pinSpacer);
+					pinSpacer && !pinSpacer.nodeType && (pinSpacer = pinSpacer.current || pinSpacer.nativeElement); // for React & Angular
+					pinCache.spacerIsNative = !!pinSpacer;
+					pinSpacer && (pinCache.spacerState = _getState(pinSpacer));
+				}
+				pinCache.spacer = spacer = pinSpacer || _doc.createElement("div");
+				spacer.classList.add("pin-spacer");
+				id && spacer.classList.add("pin-spacer-" + id);
+				pinCache.pinState = pinOriginalState = _getState(pin);
+			} else {
+				pinOriginalState = pinCache.pinState;
+			}
+			vars.force3D !== false && gsap.set(pin, {force3D: true});
+			self.spacer = spacer = pinCache.spacer;
+			cs = _getComputedStyle(pin);
+			spacingStart = cs[pinSpacing + direction.os2];
+			pinGetter = gsap.getProperty(pin);
+			pinSetter = gsap.quickSetter(pin, direction.a, _px);
+			// pin.firstChild && !_maxScroll(pin, direction) && (pin.style.overflow = "hidden"); // protects from collapsing margins, but can have unintended consequences as demonstrated here: https://codepen.io/GreenSock/pen/1e42c7a73bfa409d2cf1e184e7a4248d so it was removed in favor of just telling people to set up their CSS to avoid the collapsing margins (overflow: hidden | auto is just one option. Another is border-top: 1px solid transparent).
+			_swapPinIn(pin, spacer, cs);
+			pinState = _getState(pin);
+		}
+		if (markers) {
+			markerVars = _isObject(markers) ? _setDefaults(markers, _markerDefaults) : _markerDefaults;
+			markerStartTrigger = _createMarker("scroller-start", id, scroller, direction, markerVars, 0);
+			markerEndTrigger = _createMarker("scroller-end", id, scroller, direction, markerVars, 0, markerStartTrigger);
+			offset = markerStartTrigger["offset" + direction.op.d2];
+			let content = _getTarget(_getProxyProp(scroller, "content") || scroller);
+			markerStart = this.markerStart = _createMarker("start", id, content, direction, markerVars, offset, 0, containerAnimation);
+			markerEnd = this.markerEnd = _createMarker("end", id, content, direction, markerVars, offset, 0, containerAnimation);
+			containerAnimation && (caMarkerSetter = gsap.quickSetter([markerStart, markerEnd], direction.a, _px));
+			if ((!useFixedPosition && !(_proxies.length && _getProxyProp(scroller, "fixedMarkers") === true))) {
+				_makePositionable(isViewport ? _body : scroller);
+				gsap.set([markerStartTrigger, markerEndTrigger], {force3D: true});
+				markerStartSetter = gsap.quickSetter(markerStartTrigger, direction.a, _px);
+				markerEndSetter = gsap.quickSetter(markerEndTrigger, direction.a, _px);
+			}
+		}
+
+		if (containerAnimation) {
+			let oldOnUpdate = containerAnimation.vars.onUpdate,
+				oldParams = containerAnimation.vars.onUpdateParams;
+			containerAnimation.eventCallback("onUpdate", () => {
+				self.update(0, 0, 1);
+				oldOnUpdate && oldOnUpdate.apply(containerAnimation, oldParams || []);
+			});
+		}
+
+		self.previous = () => _triggers[_triggers.indexOf(self) - 1];
+		self.next = () => _triggers[_triggers.indexOf(self) + 1];
+
+		self.revert = (revert, temp) => {
+			if (!temp) { return self.kill(true); } // for compatibility with gsap.context() and gsap.matchMedia() which call revert()
+			let r = revert !== false || !self.enabled,
+				prevRefreshing = _refreshing;
+			if (r !== self.isReverted) {
+				if (r) {
+					prevScroll = Math.max(scrollFunc(), self.scroll.rec || 0); // record the scroll so we can revert later (repositioning/pinning things can affect scroll position). In the static refresh() method, we first record all the scroll positions as a reference.
+					prevProgress = self.progress;
+					prevAnimProgress = animation && animation.progress();
+				}
+				markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(m => m.style.display = r ? "none" : "block");
+				if (r) {
+					_refreshing = self;
+					self.update(r); // make sure the pin is back in its original position so that all the measurements are correct. do this BEFORE swapping the pin out
+				}
+				if (pin && (!pinReparent || !self.isActive)) {
+					if (r) {
+						_swapPinOut(pin, spacer, pinOriginalState);
+					} else {
+						_swapPinIn(pin, spacer, _getComputedStyle(pin), spacerState);
+					}
+				}
+				r || self.update(r); // when we're restoring, the update should run AFTER swapping the pin into its pin-spacer.
+				_refreshing = prevRefreshing; // restore. We set it to true during the update() so that things fire properly in there.
+				self.isReverted = r;
+			}
+		};
+
+		self.refresh = (soft, force, position, pinOffset) => { // position is typically only defined if it's coming from setPositions() - it's a way to skip the normal parsing. pinOffset is also only from setPositions() and is mostly related to fancy stuff we need to do in ScrollSmoother with effects
+			if ((_refreshing || !self.enabled) && !force) {
+				return;
+			}
+			if (pin && soft && _lastScrollTime) {
+				_addListener(ScrollTrigger, "scrollEnd", _softRefresh);
+				return;
+			}
+			!_refreshingAll && onRefreshInit && onRefreshInit(self);
+			_refreshing = self;
+			if (tweenTo.tween && !position) { // we skip this if a position is passed in because typically that's from .setPositions() and it's best to allow in-progress snapping to continue.
+				tweenTo.tween.kill();
+				tweenTo.tween = 0;
+			}
+			scrubTween && scrubTween.pause();
+			invalidateOnRefresh && animation && animation.revert({kill: false}).invalidate();
+			self.isReverted || self.revert(true, true);
+			self._subPinOffset = false; // we'll set this to true in the sub-pins if we find any
+			let size = getScrollerSize(),
+				scrollerBounds = getScrollerOffsets(),
+				max = containerAnimation ? containerAnimation.duration() : _maxScroll(scroller, direction),
+				isFirstRefresh = change <= 0.01,
+				offset = 0,
+				otherPinOffset = pinOffset || 0,
+				parsedEnd = _isObject(position) ? position.end : vars.end,
+				parsedEndTrigger = vars.endTrigger || trigger,
+				parsedStart = _isObject(position) ? position.start : (vars.start || (vars.start === 0 || !trigger ? 0 : (pin ? "0 0" : "0 100%"))),
+				pinnedContainer = self.pinnedContainer = vars.pinnedContainer && _getTarget(vars.pinnedContainer, self),
+				triggerIndex = (trigger && Math.max(0, _triggers.indexOf(self))) || 0,
+				i = triggerIndex,
+				cs, bounds, scroll, isVertical, override, curTrigger, curPin, oppositeScroll, initted, revertedPins, forcedOverflow, markerStartOffset, markerEndOffset;
+			if (markers && _isObject(position)) { // if we alter the start/end positions with .setPositions(), it generally feeds in absolute NUMBERS which don't convey information about where to line up the markers, so to keep it intuitive, we record how far the trigger positions shift after applying the new numbers and then offset by that much in the opposite direction. We do the same to the associated trigger markers too of course.
+				markerStartOffset = gsap.getProperty(markerStartTrigger, direction.p);
+				markerEndOffset = gsap.getProperty(markerEndTrigger, direction.p);
+			}
+			while (i--) { // user might try to pin the same element more than once, so we must find any prior triggers with the same pin, revert them, and determine how long they're pinning so that we can offset things appropriately. Make sure we revert from last to first so that things "rewind" properly.
+				curTrigger = _triggers[i];
+				curTrigger.end || curTrigger.refresh(0, 1) || (_refreshing = self); // if it's a timeline-based trigger that hasn't been fully initialized yet because it's waiting for 1 tick, just force the refresh() here, otherwise if it contains a pin that's supposed to affect other ScrollTriggers further down the page, they won't be adjusted properly.
+				curPin = curTrigger.pin;
+				if (curPin && (curPin === trigger || curPin === pin || curPin === pinnedContainer) && !curTrigger.isReverted) {
+					revertedPins || (revertedPins = []);
+					revertedPins.unshift(curTrigger); // we'll revert from first to last to make sure things reach their end state properly
+					curTrigger.revert(true, true);
+				}
+				if (curTrigger !== _triggers[i]) { // in case it got removed.
+					triggerIndex--;
+					i--;
+				}
+			}
+			_isFunction(parsedStart) && (parsedStart = parsedStart(self));
+			parsedStart = _parseClamp(parsedStart, "start", self);
+			start = _parsePosition(parsedStart, trigger, size, direction, scrollFunc(), markerStart, markerStartTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._startClamp && "_startClamp") || (pin ? -0.001 : 0);
+			_isFunction(parsedEnd) && (parsedEnd = parsedEnd(self));
+			if (_isString(parsedEnd) && !parsedEnd.indexOf("+=")) {
+				if (~parsedEnd.indexOf(" ")) {
+					parsedEnd = (_isString(parsedStart) ? parsedStart.split(" ")[0] : "") + parsedEnd;
+				} else {
+					offset = _offsetToPx(parsedEnd.substr(2), size);
+					parsedEnd = _isString(parsedStart) ? parsedStart : (containerAnimation ? gsap.utils.mapRange(0, containerAnimation.duration(), containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, start) : start) + offset; // _parsePosition won't factor in the offset if the start is a number, so do it here.
+					parsedEndTrigger = trigger;
+				}
+			}
+			parsedEnd = _parseClamp(parsedEnd, "end", self);
+			end = Math.max(start, _parsePosition(parsedEnd || (parsedEndTrigger ? "100% 0" : max), parsedEndTrigger, size, direction, scrollFunc() + offset, markerEnd, markerEndTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._endClamp && "_endClamp")) || -0.001;
+
+			offset = 0;
+			i = triggerIndex;
+			while (i--) {
+				curTrigger = _triggers[i];
+				curPin = curTrigger.pin;
+				if (curPin && curTrigger.start - curTrigger._pinPush <= start && !containerAnimation && curTrigger.end > 0) {
+					cs = curTrigger.end - (self._startClamp ? Math.max(0, curTrigger.start) : curTrigger.start);
+					if (((curPin === trigger && curTrigger.start - curTrigger._pinPush < start) || curPin === pinnedContainer) && isNaN(parsedStart)) { // numeric start values shouldn't be offset at all - treat them as absolute
+						offset += cs * (1 - curTrigger.progress);
+					}
+					curPin === pin && (otherPinOffset += cs);
+				}
+			}
+			start += offset;
+			end += offset;
+			self._startClamp && (self._startClamp += offset);
+
+			if (self._endClamp && !_refreshingAll) {
+				self._endClamp = end || -0.001;
+				end = Math.min(end, _maxScroll(scroller, direction));
+			}
+			change = (end - start) || ((start -= 0.01) && 0.001);
+
+			if (isFirstRefresh) { // on the very first refresh(), the prevProgress couldn't have been accurate yet because the start/end were never calculated, so we set it here. Before 3.11.5, it could lead to an inaccurate scroll position restoration with snapping.
+				prevProgress = gsap.utils.clamp(0, 1, gsap.utils.normalize(start, end, prevScroll));
+			}
+			self._pinPush = otherPinOffset;
+			if (markerStart && offset) { // offset the markers if necessary
+				cs = {};
+				cs[direction.a] = "+=" + offset;
+				pinnedContainer && (cs[direction.p] = "-=" + scrollFunc());
+				gsap.set([markerStart, markerEnd], cs);
+			}
+
+			if (pin && !(_clampingMax && self.end >= _maxScroll(scroller, direction))) {
+				cs = _getComputedStyle(pin);
+				isVertical = direction === _vertical;
+				scroll = scrollFunc(); // recalculate because the triggers can affect the scroll
+				pinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;
+				if (!max && end > 1) { // makes sure the scroller has a scrollbar, otherwise if something has width: 100%, for example, it would be too big (exclude the scrollbar). See https://gsap.com/forums/topic/25182-scrolltrigger-width-of-page-increase-where-markers-are-set-to-false/
+					forcedOverflow = (isViewport ? (_doc.scrollingElement || _docEl) : scroller).style;
+					forcedOverflow = {style: forcedOverflow, value: forcedOverflow["overflow" + direction.a.toUpperCase()]};
+					if (isViewport && _getComputedStyle(_body)["overflow" + direction.a.toUpperCase()] !== "scroll") { // avoid an extra scrollbar if BOTH <html> and <body> have overflow set to "scroll"
+						forcedOverflow.style["overflow" + direction.a.toUpperCase()] = "scroll";
+					}
+				}
+				_swapPinIn(pin, spacer, cs);
+				pinState = _getState(pin);
+				// transforms will interfere with the top/left/right/bottom placement, so remove them temporarily. getBoundingClientRect() factors in transforms.
+				bounds = _getBounds(pin, true);
+				oppositeScroll = useFixedPosition && _getScrollFunc(scroller, isVertical ? _horizontal : _vertical)();
+				if (pinSpacing) {
+					spacerState = [pinSpacing + direction.os2, change + otherPinOffset + _px];
+					spacerState.t = spacer;
+					i = (pinSpacing === _padding) ? _getSize(pin, direction) + change + otherPinOffset : 0;
+					if (i) {
+						spacerState.push(direction.d, i + _px); // for box-sizing: border-box (must include padding).
+						spacer.style.flexBasis !== "auto" && (spacer.style.flexBasis = i + _px);
+					}
+					_setState(spacerState);
+					if (pinnedContainer) { // in ScrollTrigger.refresh(), we need to re-evaluate the pinContainer's size because this pinSpacing may stretch it out, but we can't just add the exact distance because depending on layout, it may not push things down or it may only do so partially.
+						_triggers.forEach(t => {
+							if (t.pin === pinnedContainer && t.vars.pinSpacing !== false) {
+								t._subPinOffset = true;
+							}
+						});
+					}
+					useFixedPosition && scrollFunc(prevScroll);
+				} else {
+					i = _getSize(pin, direction);
+					i && spacer.style.flexBasis !== "auto" && (spacer.style.flexBasis = i + _px);
+				}
+				if (useFixedPosition) {
+					override = {
+						top: (bounds.top + (isVertical ? scroll - start : oppositeScroll)) + _px,
+						left: (bounds.left + (isVertical ? oppositeScroll : scroll - start)) + _px,
+						boxSizing: "border-box",
+						position: "fixed"
+					};
+					override[_width] = override["max" + _Width] = Math.ceil(bounds.width) + _px;
+					override[_height] = override["max" + _Height] = Math.ceil(bounds.height) + _px;
+					override[_margin] = override[_margin + _Top] = override[_margin + _Right] = override[_margin + _Bottom] = override[_margin + _Left] = "0";
+					override[_padding] = cs[_padding];
+					override[_padding + _Top] = cs[_padding + _Top];
+					override[_padding + _Right] = cs[_padding + _Right];
+					override[_padding + _Bottom] = cs[_padding + _Bottom];
+					override[_padding + _Left] = cs[_padding + _Left];
+					pinActiveState = _copyState(pinOriginalState, override, pinReparent);
+					_refreshingAll && scrollFunc(0);
+				}
+				if (animation) { // the animation might be affecting the transform, so we must jump to the end, check the value, and compensate accordingly. Otherwise, when it becomes unpinned, the pinSetter() will get set to a value that doesn't include whatever the animation did.
+					initted = animation._initted; // if not, we must invalidate() after this step, otherwise it could lock in starting values prematurely.
+					_suppressOverwrites(1);
+					animation.render(animation.duration(), true, true);
+					pinChange = pinGetter(direction.a) - pinStart + change + otherPinOffset;
+					pinMoves = Math.abs(change - pinChange) > 1;
+					useFixedPosition && pinMoves && pinActiveState.splice(pinActiveState.length - 2, 2); // transform is the last property/value set in the state Array. Since the animation is controlling that, we should omit it.
+					animation.render(0, true, true);
+					initted || animation.invalidate(true);
+					animation.parent || animation.totalTime(animation.totalTime()); // if, for example, a toggleAction called play() and then refresh() happens and when we render(1) above, it would cause the animation to complete and get removed from its parent, so this makes sure it gets put back in.
+					_suppressOverwrites(0);
+				} else {
+					pinChange = change;
+				}
+				forcedOverflow && (forcedOverflow.value ? (forcedOverflow.style["overflow" + direction.a.toUpperCase()] = forcedOverflow.value) : forcedOverflow.style.removeProperty("overflow-" + direction.a));
+			} else if (trigger && scrollFunc() && !containerAnimation) { // it may be INSIDE a pinned element, so walk up the tree and look for any elements with _pinOffset to compensate because anything with pinSpacing that's already scrolled would throw off the measurements in getBoundingClientRect()
+				bounds = trigger.parentNode;
+				while (bounds && bounds !== _body) {
+					if (bounds._pinOffset) {
+						start -= bounds._pinOffset;
+						end -= bounds._pinOffset;
+					}
+					bounds = bounds.parentNode;
+				}
+			}
+			revertedPins && revertedPins.forEach(t => t.revert(false, true));
+			self.start = start;
+			self.end = end;
+			scroll1 = scroll2 = _refreshingAll ? prevScroll : scrollFunc(); // reset velocity
+			if (!containerAnimation && !_refreshingAll) {
+				scroll1 < prevScroll && scrollFunc(prevScroll);
+				self.scroll.rec = 0;
+			}
+			self.revert(false, true);
+			lastRefresh = _getTime();
+			if (snapDelayedCall) {
+				lastSnap = -1; // just so snapping gets re-enabled, clear out any recorded last value
+				// self.isActive && scrollFunc(start + change * prevProgress); // previously this line was here to ensure that when snapping kicks in, it's from the previous progress but in some cases that's not desirable, like an all-page ScrollTrigger when new content gets added to the page, that'd totally change the progress.
+				snapDelayedCall.restart(true);
+			}
+			_refreshing = 0;
+			animation && isToggle && (animation._initted || prevAnimProgress) && animation.progress() !== prevAnimProgress && animation.progress(prevAnimProgress || 0, true).render(animation.time(), true, true); // must force a re-render because if saveStyles() was used on the target(s), the styles could have been wiped out during the refresh().
+			if (isFirstRefresh || prevProgress !== self.progress || containerAnimation || invalidateOnRefresh) { // ensures that the direction is set properly (when refreshing, progress is set back to 0 initially, then back again to wherever it needs to be) and that callbacks are triggered.
+				animation && !isToggle && animation.totalProgress(containerAnimation && start < -0.001 && !prevProgress ? gsap.utils.normalize(start, end, 0) : prevProgress, true); // to avoid issues where animation callbacks like onStart aren't triggered.
+				self.progress = isFirstRefresh || ((scroll1 - start) / change === prevProgress) ? 0 : prevProgress;
+			}
+			pin && pinSpacing && (spacer._pinOffset = Math.round(self.progress * pinChange));
+			scrubTween && scrubTween.invalidate();
+
+			if (!isNaN(markerStartOffset)) { // numbers were passed in for the position which are absolute, so instead of just putting the markers at the very bottom of the viewport, we figure out how far they shifted down (it's safe to assume they were originally positioned in closer relation to the trigger element with values like "top", "center", a percentage or whatever, so we offset that much in the opposite direction to basically revert them to the relative position thy were at previously.
+				markerStartOffset -= gsap.getProperty(markerStartTrigger, direction.p);
+				markerEndOffset -= gsap.getProperty(markerEndTrigger, direction.p);
+				_shiftMarker(markerStartTrigger, direction, markerStartOffset);
+				_shiftMarker(markerStart, direction, markerStartOffset - (pinOffset || 0));
+				_shiftMarker(markerEndTrigger, direction, markerEndOffset);
+				_shiftMarker(markerEnd, direction, markerEndOffset - (pinOffset || 0));
+			}
+
+			isFirstRefresh && !_refreshingAll && self.update(); // edge case - when you reload a page when it's already scrolled down, some browsers fire a "scroll" event before DOMContentLoaded, triggering an updateAll(). If we don't update the self.progress as part of refresh(), then when it happens next, it may record prevProgress as 0 when it really shouldn't, potentially causing a callback in an animation to fire again.
+
+			if (onRefresh && !_refreshingAll && !executingOnRefresh) { // when refreshing all, we do extra work to correct pinnedContainer sizes and ensure things don't exceed the maxScroll, so we should do all the refreshes at the end after all that work so that the start/end values are corrected.
+				executingOnRefresh = true;
+				onRefresh(self);
+				executingOnRefresh = false;
+			}
+		};
+
+		self.getVelocity = () => ((scrollFunc() - scroll2) / (_getTime() - _time2) * 1000) || 0;
+
+		self.endAnimation = () => {
+			_endAnimation(self.callbackAnimation);
+			if (animation) {
+				scrubTween ? scrubTween.progress(1) : (!animation.paused() ? _endAnimation(animation, animation.reversed()) : isToggle || _endAnimation(animation, self.direction < 0, 1));
+			}
+		};
+
+		self.labelToScroll = label => animation && animation.labels && ((start || self.refresh() || start) + (animation.labels[label] / animation.duration()) * change) || 0;
+
+		self.getTrailing = name => {
+			let i = _triggers.indexOf(self),
+				a = self.direction > 0 ? _triggers.slice(0, i).reverse() : _triggers.slice(i+1);
+			return (_isString(name) ? a.filter(t => t.vars.preventOverlaps === name) : a).filter(t => self.direction > 0 ? t.end <= start : t.start >= end);
+		};
+
+
+		self.update = (reset, recordVelocity, forceFake) => {
+			if (containerAnimation && !forceFake && !reset) {
+				return;
+			}
+			let scroll = _refreshingAll === true ? prevScroll : self.scroll(),
+				p = reset ? 0 : (scroll - start) / change,
+				clipped = p < 0 ? 0 : p > 1 ? 1 : p || 0,
+				prevProgress = self.progress,
+				isActive, wasActive, toggleState, action, stateChanged, toggled, isAtMax, isTakingAction;
+			if (recordVelocity) {
+				scroll2 = scroll1;
+				scroll1 = containerAnimation ? scrollFunc() : scroll;
+				if (snap) {
+					snap2 = snap1;
+					snap1 = animation && !isToggle ? animation.totalProgress() : clipped;
+				}
+			}
+			// anticipate the pinning a few ticks ahead of time based on velocity to avoid a visual glitch due to the fact that most browsers do scrolling on a separate thread (not synced with requestAnimationFrame).
+			if (anticipatePin && pin && !_refreshing && !_startup && _lastScrollTime) {
+				if (!clipped && start < scroll + ((scroll - scroll2) / (_getTime() - _time2)) * anticipatePin) {
+					clipped = 0.0001;
+				} else if (clipped === 1 && end > scroll + ((scroll - scroll2) / (_getTime() - _time2)) * anticipatePin) {
+					clipped = 0.9999;
+				}
+			}
+			if (clipped !== prevProgress && self.enabled) {
+				isActive = self.isActive = !!clipped && clipped < 1;
+				wasActive = !!prevProgress && prevProgress < 1;
+				toggled = isActive !== wasActive;
+				stateChanged = toggled || !!clipped !== !!prevProgress; // could go from start all the way to end, thus it didn't toggle but it did change state in a sense (may need to fire a callback)
+				self.direction = clipped > prevProgress ? 1 : -1;
+				self.progress = clipped;
+
+				if (stateChanged && !_refreshing) {
+					toggleState = clipped && !prevProgress ? 0 : clipped === 1 ? 1 : prevProgress === 1 ? 2 : 3; // 0 = enter, 1 = leave, 2 = enterBack, 3 = leaveBack (we prioritize the FIRST encounter, thus if you scroll really fast past the onEnter and onLeave in one tick, it'd prioritize onEnter.
+					if (isToggle) {
+						action = (!toggled && toggleActions[toggleState + 1] !== "none" && toggleActions[toggleState + 1]) || toggleActions[toggleState]; // if it didn't toggle, that means it shot right past and since we prioritize the "enter" action, we should switch to the "leave" in this case (but only if one is defined)
+						isTakingAction = animation && (action === "complete" || action === "reset" || action in animation);
+					}
+				}
+
+				preventOverlaps && (toggled || isTakingAction) && (isTakingAction || scrub || !animation) && (_isFunction(preventOverlaps) ? preventOverlaps(self) : self.getTrailing(preventOverlaps).forEach(t => t.endAnimation()));
+
+				if (!isToggle) {
+					if (scrubTween && !_refreshing && !_startup) {
+						(scrubTween._dp._time - scrubTween._start !== scrubTween._time) && scrubTween.render(scrubTween._dp._time - scrubTween._start); // if there's a scrub on both the container animation and this one (or a ScrollSmoother), the update order would cause this one not to have rendered yet, so it wouldn't make any progress before we .restart() it heading toward the new progress so it'd appear stuck thus we force a render here.
+						if (scrubTween.resetTo) {
+							scrubTween.resetTo("totalProgress", clipped, animation._tTime / animation._tDur);
+						} else { // legacy support (courtesy), before 3.10.0
+							scrubTween.vars.totalProgress = clipped;
+							scrubTween.invalidate().restart();
+						}
+					} else if (animation) {
+						animation.totalProgress(clipped, !!(_refreshing && (lastRefresh || reset)));
+					}
+				}
+				if (pin) {
+					reset && pinSpacing && (spacer.style[pinSpacing + direction.os2] = spacingStart);
+					if (!useFixedPosition) {
+						pinSetter(_round(pinStart + pinChange * clipped));
+					} else if (stateChanged) {
+						isAtMax = !reset && clipped > prevProgress && end + 1 > scroll && scroll + 1 >= _maxScroll(scroller, direction); // if it's at the VERY end of the page, don't switch away from position: fixed because it's pointless and it could cause a brief flash when the user scrolls back up (when it gets pinned again)
+						if (pinReparent) {
+							if (!reset && (isActive || isAtMax)) {
+								let bounds = _getBounds(pin, true),
+									offset = scroll - start;
+								_reparent(pin, _body, (bounds.top + (direction === _vertical ? offset : 0)) + _px, (bounds.left + (direction === _vertical ? 0 : offset)) + _px);
+							} else {
+								_reparent(pin, spacer);
+							}
+						}
+						_setState(isActive || isAtMax ? pinActiveState : pinState);
+						(pinMoves && clipped < 1 && isActive) || pinSetter(pinStart + (clipped === 1 && !isAtMax ? pinChange : 0));
+					}
+				}
+				snap && !tweenTo.tween && !_refreshing && !_startup && snapDelayedCall.restart(true);
+				toggleClass && (toggled || (once && clipped && (clipped < 1 || !_limitCallbacks))) && _toArray(toggleClass.targets).forEach(el => el.classList[isActive || once ? "add" : "remove"](toggleClass.className)); // classes could affect positioning, so do it even if reset or refreshing is true.
+				onUpdate && !isToggle && !reset && onUpdate(self);
+				if (stateChanged && !_refreshing) {
+					if (isToggle) {
+						if (isTakingAction) {
+							if (action === "complete") {
+								animation.pause().totalProgress(1);
+							} else if (action === "reset") {
+								animation.restart(true).pause();
+							} else if (action === "restart") {
+								animation.restart(true);
+							} else {
+								animation[action]();
+							}
+						}
+						onUpdate && onUpdate(self);
+					}
+					if (toggled || !_limitCallbacks) { // on startup, the page could be scrolled and we don't want to fire callbacks that didn't toggle. For example onEnter shouldn't fire if the ScrollTrigger isn't actually entered.
+						onToggle && toggled && _callback(self, onToggle);
+						callbacks[toggleState] && _callback(self, callbacks[toggleState]);
+						once && (clipped === 1 ? self.kill(false, 1) : (callbacks[toggleState] = 0)); // a callback shouldn't be called again if once is true.
+						if (!toggled) { // it's possible to go completely past, like from before the start to after the end (or vice-versa) in which case BOTH callbacks should be fired in that order
+							toggleState = clipped === 1 ? 1 : 3;
+							callbacks[toggleState] && _callback(self, callbacks[toggleState]);
+						}
+					}
+					if (fastScrollEnd && !isActive && Math.abs(self.getVelocity()) > (_isNumber(fastScrollEnd) ? fastScrollEnd : 2500)) {
+						_endAnimation(self.callbackAnimation);
+						scrubTween ? scrubTween.progress(1) : _endAnimation(animation, action === "reverse" ? 1 : !clipped, 1);
+					}
+				} else if (isToggle && onUpdate && !_refreshing) {
+					onUpdate(self);
+				}
+			}
+			// update absolutely-positioned markers (only if the scroller isn't the viewport)
+			if (markerEndSetter) {
+				let n = containerAnimation ? scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0) : scroll;
+				markerStartSetter(n + (markerStartTrigger._isFlipped ? 1 : 0));
+				markerEndSetter(n);
+			}
+			caMarkerSetter && caMarkerSetter(-scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0));
+		};
+
+		self.enable = (reset, refresh) => {
+			if (!self.enabled) {
+				self.enabled = true;
+				_addListener(scroller, "resize", _onResize);
+				isViewport || _addListener(scroller, "scroll", _onScroll);
+				onRefreshInit && _addListener(ScrollTrigger, "refreshInit", onRefreshInit);
+				if (reset !== false) {
+					self.progress = prevProgress = 0;
+					scroll1 = scroll2 = lastSnap = scrollFunc();
+				}
+				refresh !== false && self.refresh();
+			}
+		};
+
+		self.getTween = snap => snap && tweenTo ? tweenTo.tween : scrubTween;
+
+		self.setPositions = (newStart, newEnd, keepClamp, pinOffset) => { // doesn't persist after refresh()! Intended to be a way to override values that were set during refresh(), like you could set it in onRefresh()
+			if (containerAnimation) { // convert ratios into scroll positions. Remember, start/end values on ScrollTriggers that have a containerAnimation refer to the time (in seconds), NOT scroll positions.
+				let st = containerAnimation.scrollTrigger,
+					duration = containerAnimation.duration(),
+					change = st.end - st.start;
+				newStart = st.start + change * newStart / duration;
+				newEnd = st.start + change * newEnd / duration;
+			}
+			self.refresh(false, false, {start: _keepClamp(newStart, keepClamp && !!self._startClamp), end: _keepClamp(newEnd, keepClamp && !!self._endClamp)}, pinOffset);
+			self.update();
+		};
+
+		self.adjustPinSpacing = amount => {
+			if (spacerState && amount) {
+				let i = spacerState.indexOf(direction.d) + 1;
+				spacerState[i] = (parseFloat(spacerState[i]) + amount) + _px;
+				spacerState[1] = (parseFloat(spacerState[1]) + amount) + _px;
+				_setState(spacerState);
+			}
+		};
+
+		self.disable = (reset, allowAnimation) => {
+			if (self.enabled) {
+				reset !== false && self.revert(true, true);
+				self.enabled = self.isActive = false;
+				allowAnimation || (scrubTween && scrubTween.pause());
+				prevScroll = 0;
+				pinCache && (pinCache.uncache = 1);
+				onRefreshInit && _removeListener(ScrollTrigger, "refreshInit", onRefreshInit);
+				if (snapDelayedCall) {
+					snapDelayedCall.pause();
+					tweenTo.tween && tweenTo.tween.kill() && (tweenTo.tween = 0);
+				}
+				if (!isViewport) {
+					let i = _triggers.length;
+					while (i--) {
+						if (_triggers[i].scroller === scroller && _triggers[i] !== self) {
+							return; //don't remove the listeners if there are still other triggers referencing it.
+						}
+					}
+					_removeListener(scroller, "resize", _onResize);
+					isViewport || _removeListener(scroller, "scroll", _onScroll);
+				}
+			}
+		};
+
+		self.kill = (revert, allowAnimation) => {
+			self.disable(revert, allowAnimation);
+			scrubTween && !allowAnimation && scrubTween.kill();
+			id && (delete _ids[id]);
+			let i = _triggers.indexOf(self);
+			i >= 0 && _triggers.splice(i, 1);
+			i === _i && _direction > 0 && _i--; // if we're in the middle of a refresh() or update(), splicing would cause skips in the index, so adjust...
+
+			// if no other ScrollTrigger instances of the same scroller are found, wipe out any recorded scroll position. Otherwise, in a single page application, for example, it could maintain scroll position when it really shouldn't.
+			i = 0;
+			_triggers.forEach(t => t.scroller === self.scroller && (i = 1));
+			i || _refreshingAll || (self.scroll.rec = 0);
+
+			if (animation) {
+				animation.scrollTrigger = null;
+				revert && animation.revert({kill: false});
+				allowAnimation || animation.kill();
+			}
+			markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(m => m.parentNode && m.parentNode.removeChild(m));
+			_primary === self && (_primary = 0);
+			if (pin) {
+				pinCache && (pinCache.uncache = 1);
+				i = 0;
+				_triggers.forEach(t => t.pin === pin && i++);
+				i || (pinCache.spacer = 0); // if there aren't any more ScrollTriggers with the same pin, remove the spacer, otherwise it could be contaminated with old/stale values if the user re-creates a ScrollTrigger for the same element.
+			}
+			vars.onKill && vars.onKill(self);
+		};
+
+		_triggers.push(self);
+		self.enable(false, false);
+		customRevertReturn && customRevertReturn(self);
+
+		if (animation && animation.add && !change) { // if the animation is a timeline, it may not have been populated yet, so it wouldn't render at the proper place on the first refresh(), thus we should schedule one for the next tick. If "change" is defined, we know it must be re-enabling, thus we can refresh() right away.
+			let updateFunc = self.update; // some browsers may fire a scroll event BEFORE a tick elapses and/or the DOMContentLoaded fires. So there's a chance update() will be called BEFORE a refresh() has happened on a Timeline-attached ScrollTrigger which means the start/end won't be calculated yet. We don't want to add conditional logic inside the update() method (like check to see if end is defined and if not, force a refresh()) because that's a function that gets hit a LOT (performance). So we swap out the real update() method for this one that'll re-attach it the first time it gets called and of course forces a refresh().
+			self.update = () => {
+				self.update = updateFunc;
+				start || end || self.refresh();
+			};
+			gsap.delayedCall(0.01, self.update);
+			change = 0.01;
+			start = end = 0;
+		} else {
+			self.refresh();
+		}
+		pin && _queueRefreshAll(); // pinning could affect the positions of other things, so make sure we queue a full refresh()
+	}
+
+
+	static register(core) {
+		if (!_coreInitted) {
+			gsap = core || _getGSAP();
+			_windowExists() && window.document && ScrollTrigger.enable();
+			_coreInitted = _enabled;
+		}
+		return _coreInitted;
+	}
+
+	static defaults(config) {
+		if (config) {
+			for (let p in config) {
+				_defaults[p] = config[p];
+			}
+		}
+		return _defaults;
+	}
+
+	static disable(reset, kill) {
+		_enabled = 0;
+		_triggers.forEach(trigger => trigger[kill ? "kill" : "disable"](reset));
+		_removeListener(_win, "wheel", _onScroll);
+		_removeListener(_doc, "scroll", _onScroll);
+		clearInterval(_syncInterval);
+		_removeListener(_doc, "touchcancel", _passThrough);
+		_removeListener(_body, "touchstart", _passThrough);
+		_multiListener(_removeListener, _doc, "pointerdown,touchstart,mousedown", _pointerDownHandler);
+		_multiListener(_removeListener, _doc, "pointerup,touchend,mouseup", _pointerUpHandler);
+		_resizeDelay.kill();
+		_iterateAutoRefresh(_removeListener);
+		for (let i = 0; i < _scrollers.length; i+=3) {
+			_wheelListener(_removeListener, _scrollers[i], _scrollers[i+1]);
+			_wheelListener(_removeListener, _scrollers[i], _scrollers[i+2]);
+		}
+	}
+
+	static enable() {
+		_win = window;
+		_doc = document;
+		_docEl = _doc.documentElement;
+		_body = _doc.body;
+		if (gsap) {
+			_toArray = gsap.utils.toArray;
+			_clamp = gsap.utils.clamp;
+			_context = gsap.core.context || _passThrough;
+			_suppressOverwrites = gsap.core.suppressOverwrites || _passThrough;
+			_scrollRestoration = _win.history.scrollRestoration || "auto";
+			_lastScroll = _win.pageYOffset;
+			gsap.core.globals("ScrollTrigger", ScrollTrigger); // must register the global manually because in Internet Explorer, functions (classes) don't have a "name" property.
+			if (_body) {
+				_enabled = 1;
+				_div100vh = document.createElement("div"); // to solve mobile browser address bar show/hide resizing, we shouldn't rely on window.innerHeight. Instead, use a <div> with its height set to 100vh and measure that since that's what the scrolling is based on anyway and it's not affected by address bar showing/hiding.
+				_div100vh.style.height = "100vh";
+				_div100vh.style.position = "absolute";
+				_refresh100vh();
+				_rafBugFix();
+				Observer.register(gsap);
+				// isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.
+				ScrollTrigger.isTouch = Observer.isTouch;
+				_fixIOSBug = Observer.isTouch && /(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent); // since 2017, iOS has had a bug that causes event.clientX/Y to be inaccurate when a scroll occurs, thus we must alternate ignoring every other touchmove event to work around it. See https://bugs.webkit.org/show_bug.cgi?id=181954 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503
+				_ignoreMobileResize = Observer.isTouch === 1;
+				_addListener(_win, "wheel", _onScroll); // mostly for 3rd party smooth scrolling libraries.
+				_root = [_win, _doc, _docEl, _body];
+				if (gsap.matchMedia) {
+					ScrollTrigger.matchMedia = vars => {
+						let mm = gsap.matchMedia(),
+							p;
+						for (p in vars) {
+							mm.add(p, vars[p]);
+						}
+						return mm;
+					};
+					gsap.addEventListener("matchMediaInit", () => _revertAll());
+					gsap.addEventListener("matchMediaRevert", () => _revertRecorded());
+					gsap.addEventListener("matchMedia", () => {
+						_refreshAll(0, 1);
+						_dispatch("matchMedia");
+					});
+					gsap.matchMedia("(orientation: portrait)", () => { // when orientation changes, we should take new base measurements for the ignoreMobileResize feature.
+						_setBaseDimensions();
+						return _setBaseDimensions;
+					});
+				} else {
+					console.warn("Requires GSAP 3.11.0 or later");
+				}
+				_setBaseDimensions();
+				_addListener(_doc, "scroll", _onScroll); // some browsers (like Chrome), the window stops dispatching scroll events on the window if you scroll really fast, but it's consistent on the document!
+				let bodyStyle = _body.style,
+					border = bodyStyle.borderTopStyle,
+					AnimationProto = gsap.core.Animation.prototype,
+					bounds, i;
+				AnimationProto.revert || Object.defineProperty(AnimationProto, "revert", { value: function() { return this.time(-0.01, true); }}); // only for backwards compatibility (Animation.revert() was added after 3.10.4)
+				bodyStyle.borderTopStyle = "solid"; // works around an issue where a margin of a child element could throw off the bounds of the _body, making it seem like there's a margin when there actually isn't. The border ensures that the bounds are accurate.
+				bounds = _getBounds(_body);
+				_vertical.m = Math.round(bounds.top + _vertical.sc()) || 0; // accommodate the offset of the <body> caused by margins and/or padding
+				_horizontal.m = Math.round(bounds.left + _horizontal.sc()) || 0;
+				border ? (bodyStyle.borderTopStyle = border) : bodyStyle.removeProperty("border-top-style");
+				// TODO: (?) maybe move to leveraging the velocity mechanism in Observer and skip intervals.
+				_syncInterval = setInterval(_sync, 250);
+				gsap.delayedCall(0.5, () => _startup = 0);
+				_addListener(_doc, "touchcancel", _passThrough); // some older Android devices intermittently stop dispatching "touchmove" events if we don't listen for "touchcancel" on the document.
+				_addListener(_body, "touchstart", _passThrough); //works around Safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/
+				_multiListener(_addListener, _doc, "pointerdown,touchstart,mousedown", _pointerDownHandler);
+				_multiListener(_addListener, _doc, "pointerup,touchend,mouseup", _pointerUpHandler);
+				_transformProp = gsap.utils.checkPrefix("transform");
+				_stateProps.push(_transformProp);
+				_coreInitted = _getTime();
+				_resizeDelay = gsap.delayedCall(0.2, _refreshAll).pause();
+				_autoRefresh = [_doc, "visibilitychange", () => {
+					let w = _win.innerWidth,
+						h = _win.innerHeight;
+					if (_doc.hidden) {
+						_prevWidth = w;
+						_prevHeight = h;
+					} else if (_prevWidth !== w || _prevHeight !== h) {
+						_onResize();
+					}
+				}, _doc, "DOMContentLoaded", _refreshAll, _win, "load", _refreshAll, _win, "resize", _onResize];
+				_iterateAutoRefresh(_addListener);
+				_triggers.forEach(trigger => trigger.enable(0, 1));
+				for (i = 0; i < _scrollers.length; i+=3) {
+					_wheelListener(_removeListener, _scrollers[i], _scrollers[i+1]);
+					_wheelListener(_removeListener, _scrollers[i], _scrollers[i+2]);
+				}
+			}
+		}
+	}
+
+	static config(vars) {
+		("limitCallbacks" in vars) && (_limitCallbacks = !!vars.limitCallbacks);
+		let ms = vars.syncInterval;
+		ms && clearInterval(_syncInterval) || ((_syncInterval = ms) && setInterval(_sync, ms));
+		("ignoreMobileResize" in vars) && (_ignoreMobileResize = ScrollTrigger.isTouch === 1 && vars.ignoreMobileResize);
+		if ("autoRefreshEvents" in vars) {
+			_iterateAutoRefresh(_removeListener) || _iterateAutoRefresh(_addListener, vars.autoRefreshEvents || "none");
+			_ignoreResize = (vars.autoRefreshEvents + "").indexOf("resize") === -1;
+		}
+	}
+
+	static scrollerProxy(target, vars) {
+		let t = _getTarget(target),
+			i = _scrollers.indexOf(t),
+			isViewport = _isViewport(t);
+		if (~i) {
+			_scrollers.splice(i, isViewport ? 6 : 2);
+		}
+		if (vars) {
+			isViewport ? _proxies.unshift(_win, vars, _body, vars, _docEl, vars) : _proxies.unshift(t, vars);
+		}
+	}
+
+	static clearMatchMedia(query) {
+		_triggers.forEach(t => t._ctx && t._ctx.query === query && t._ctx.kill(true, true));
+	}
+
+	static isInViewport(element, ratio, horizontal) {
+		let bounds = (_isString(element) ? _getTarget(element) : element).getBoundingClientRect(),
+			offset = bounds[horizontal ? _width : _height] * ratio || 0;
+		return horizontal ? bounds.right - offset > 0 && bounds.left + offset < _win.innerWidth : bounds.bottom - offset > 0 && bounds.top + offset < _win.innerHeight;
+	}
+
+	static positionInViewport(element, referencePoint, horizontal) {
+		_isString(element) && (element = _getTarget(element));
+		let bounds = element.getBoundingClientRect(),
+			size = bounds[horizontal ? _width : _height],
+			offset = referencePoint == null ? size / 2 : ((referencePoint in _keywords) ? _keywords[referencePoint] * size : ~referencePoint.indexOf("%") ? parseFloat(referencePoint) * size / 100 : parseFloat(referencePoint) || 0);
+		return horizontal ? (bounds.left + offset) / _win.innerWidth : (bounds.top + offset) / _win.innerHeight;
+	}
+
+	static killAll(allowListeners) {
+		_triggers.slice(0).forEach(t => t.vars.id !== "ScrollSmoother" && t.kill());
+		if (allowListeners !== true) {
+			let listeners = _listeners.killAll || [];
+			_listeners = {};
+			listeners.forEach(f => f());
+		}
+	}
+
+}
+
+ScrollTrigger.version = "3.12.5";
+ScrollTrigger.saveStyles = targets => targets ? _toArray(targets).forEach(target => { // saved styles are recorded in a consecutive alternating Array, like [element, cssText, transform attribute, cache, matchMedia, ...]
+	if (target && target.style) {
+		let i = _savedStyles.indexOf(target);
+		i >= 0 && _savedStyles.splice(i, 5);
+		_savedStyles.push(target, target.style.cssText, target.getBBox && target.getAttribute("transform"), gsap.core.getCache(target), _context());
+	}
+}) : _savedStyles;
+ScrollTrigger.revert = (soft, media) => _revertAll(!soft, media);
+ScrollTrigger.create = (vars, animation) => new ScrollTrigger(vars, animation);
+ScrollTrigger.refresh = safe => safe ? _onResize() : (_coreInitted || ScrollTrigger.register()) && _refreshAll(true);
+ScrollTrigger.update = force => ++_scrollers.cache && _updateAll(force === true ? 2 : 0);
+ScrollTrigger.clearScrollMemory = _clearScrollMemory;
+ScrollTrigger.maxScroll = (element, horizontal) => _maxScroll(element, horizontal ? _horizontal : _vertical);
+ScrollTrigger.getScrollFunc = (element, horizontal) => _getScrollFunc(_getTarget(element), horizontal ? _horizontal : _vertical);
+ScrollTrigger.getById = id => _ids[id];
+ScrollTrigger.getAll = () => _triggers.filter(t => t.vars.id !== "ScrollSmoother"); // it's common for people to ScrollTrigger.getAll(t => t.kill()) on page routes, for example, and we don't want it to ruin smooth scrolling by killing the main ScrollSmoother one.
+ScrollTrigger.isScrolling = () => !!_lastScrollTime;
+ScrollTrigger.snapDirectional = _snapDirectional;
+ScrollTrigger.addEventListener = (type, callback) => {
+	let a = _listeners[type] || (_listeners[type] = []);
+	~a.indexOf(callback) || a.push(callback);
+};
+ScrollTrigger.removeEventListener = (type, callback) => {
+	let a = _listeners[type],
+		i = a && a.indexOf(callback);
+	i >= 0 && a.splice(i, 1);
+};
+ScrollTrigger.batch = (targets, vars) => {
+	let result = [],
+		varsCopy = {},
+		interval = vars.interval || 0.016,
+		batchMax = vars.batchMax || 1e9,
+		proxyCallback = (type, callback) => {
+			let elements = [],
+				triggers = [],
+				delay = gsap.delayedCall(interval, () => {callback(elements, triggers); elements = []; triggers = [];}).pause();
+			return self => {
+				elements.length || delay.restart(true);
+				elements.push(self.trigger);
+				triggers.push(self);
+				batchMax <= elements.length && delay.progress(1);
+			};
+		},
+		p;
+	for (p in vars) {
+		varsCopy[p] = (p.substr(0, 2) === "on" && _isFunction(vars[p]) && p !== "onRefreshInit") ? proxyCallback(p, vars[p]) : vars[p];
+	}
+	if (_isFunction(batchMax)) {
+		batchMax = batchMax();
+		_addListener(ScrollTrigger, "refresh", () => batchMax = vars.batchMax());
+	}
+	_toArray(targets).forEach(target => {
+		let config = {};
+		for (p in varsCopy) {
+			config[p] = varsCopy[p];
+		}
+		config.trigger = target;
+		result.push(ScrollTrigger.create(config));
+	});
+	return result;
+};
+
+
+// to reduce file size. clamps the scroll and also returns a duration multiplier so that if the scroll gets chopped shorter, the duration gets curtailed as well (otherwise if you're very close to the top of the page, for example, and swipe up really fast, it'll suddenly slow down and take a long time to reach the top).
+let _clampScrollAndGetDurationMultiplier = (scrollFunc, current, end, max) => {
+		current > max ? scrollFunc(max) : current < 0 && scrollFunc(0);
+		return end > max ? (max - current) / (end - current) : end < 0 ? current / (current - end) : 1;
+	},
+	_allowNativePanning = (target, direction) => {
+		if (direction === true) {
+			target.style.removeProperty("touch-action");
+		} else {
+			target.style.touchAction = direction === true ? "auto" : direction ? "pan-" + direction + (Observer.isTouch ? " pinch-zoom" : "") : "none"; // note: Firefox doesn't support it pinch-zoom properly, at least in addition to a pan-x or pan-y.
+		}
+		target === _docEl && _allowNativePanning(_body, direction);
+	},
+	_overflow = {auto: 1, scroll: 1},
+	_nestedScroll = ({event, target, axis}) => {
+		let node = (event.changedTouches ? event.changedTouches[0] : event).target,
+			cache = node._gsap || gsap.core.getCache(node),
+			time = _getTime(), cs;
+		if (!cache._isScrollT || time - cache._isScrollT > 2000) { // cache for 2 seconds to improve performance.
+			while (node && node !== _body && ((node.scrollHeight <= node.clientHeight && node.scrollWidth <= node.clientWidth) || !(_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]))) node = node.parentNode;
+			cache._isScroll = node && node !== target && !_isViewport(node) && (_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]);
+			cache._isScrollT = time;
+		}
+		if (cache._isScroll || axis === "x") {
+			event.stopPropagation();
+			event._gsapAllow = true;
+		}
+	},
+	// capture events on scrollable elements INSIDE the <body> and allow those by calling stopPropagation() when we find a scrollable ancestor
+	_inputObserver = (target, type, inputs, nested) => Observer.create({
+		target: target,
+		capture: true,
+		debounce: false,
+		lockAxis: true,
+		type: type,
+		onWheel: (nested = nested && _nestedScroll),
+		onPress: nested,
+		onDrag: nested,
+		onScroll: nested,
+		onEnable: () => inputs && _addListener(_doc, Observer.eventTypes[0], _captureInputs, false, true),
+		onDisable: () => _removeListener(_doc, Observer.eventTypes[0], _captureInputs, true)
+	}),
+	_inputExp = /(input|label|select|textarea)/i,
+	_inputIsFocused,
+	_captureInputs = e => {
+		let isInput = _inputExp.test(e.target.tagName);
+		if (isInput || _inputIsFocused) {
+			e._gsapAllow = true;
+			_inputIsFocused = isInput;
+		}
+	},
+	_getScrollNormalizer = vars => {
+		_isObject(vars) || (vars = {});
+		vars.preventDefault = vars.isNormalizer = vars.allowClicks = true;
+		vars.type || (vars.type = "wheel,touch");
+		vars.debounce = !!vars.debounce;
+		vars.id = vars.id || "normalizer";
+		let {normalizeScrollX, momentum, allowNestedScroll, onRelease} = vars,
+			self, maxY,
+			target = _getTarget(vars.target) || _docEl,
+			smoother = gsap.core.globals().ScrollSmoother,
+			smootherInstance = smoother && smoother.get(),
+			content = _fixIOSBug && ((vars.content && _getTarget(vars.content)) || (smootherInstance && vars.content !== false && !smootherInstance.smooth() && smootherInstance.content())),
+			scrollFuncY = _getScrollFunc(target, _vertical),
+			scrollFuncX = _getScrollFunc(target, _horizontal),
+			scale = 1,
+			initialScale = (Observer.isTouch && _win.visualViewport ? _win.visualViewport.scale * _win.visualViewport.width : _win.outerWidth) / _win.innerWidth,
+			wheelRefresh = 0,
+			resolveMomentumDuration = _isFunction(momentum) ? () => momentum(self) : () => momentum || 2.8,
+			lastRefreshID, skipTouchMove,
+			inputObserver = _inputObserver(target, vars.type, true, allowNestedScroll),
+			resumeTouchMove = () => skipTouchMove = false,
+			scrollClampX = _passThrough,
+			scrollClampY = _passThrough,
+			updateClamps = () => {
+				maxY = _maxScroll(target, _vertical);
+				scrollClampY = _clamp(_fixIOSBug ? 1 : 0, maxY);
+				normalizeScrollX && (scrollClampX = _clamp(0, _maxScroll(target, _horizontal)));
+				lastRefreshID = _refreshID;
+			},
+			removeContentOffset = () => {
+				content._gsap.y = _round(parseFloat(content._gsap.y) + scrollFuncY.offset) + "px";
+				content.style.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " + parseFloat(content._gsap.y) + ", 0, 1)";
+				scrollFuncY.offset = scrollFuncY.cacheID = 0;
+			},
+			ignoreDrag = () => {
+				if (skipTouchMove) {
+					requestAnimationFrame(resumeTouchMove);
+					let offset = _round(self.deltaY / 2),
+						scroll = scrollClampY(scrollFuncY.v - offset);
+					if (content && scroll !== scrollFuncY.v + scrollFuncY.offset) {
+						scrollFuncY.offset = scroll - scrollFuncY.v;
+						let y = _round((parseFloat(content && content._gsap.y) || 0) - scrollFuncY.offset);
+						content.style.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " + y + ", 0, 1)";
+						content._gsap.y = y + "px";
+						scrollFuncY.cacheID = _scrollers.cache;
+						_updateAll();
+					}
+					return true;
+				}
+				scrollFuncY.offset && removeContentOffset();
+				skipTouchMove = true;
+			},
+			tween, startScrollX, startScrollY, onStopDelayedCall,
+			onResize = () => { // if the window resizes, like on an iPhone which Apple FORCES the address bar to show/hide even if we event.preventDefault(), it may be scrolling too far now that the address bar is showing, so we must dynamically adjust the momentum tween.
+				updateClamps();
+				if (tween.isActive() && tween.vars.scrollY > maxY) {
+					scrollFuncY() > maxY ? tween.progress(1) && scrollFuncY(maxY) : tween.resetTo("scrollY", maxY);
+				}
+			};
+		content && gsap.set(content, {y: "+=0"}); // to ensure there's a cache (element._gsap)
+		vars.ignoreCheck = e => (_fixIOSBug && e.type === "touchmove" && ignoreDrag()) || (scale > 1.05 && e.type !== "touchstart") || self.isGesturing || (e.touches && e.touches.length > 1);
+		vars.onPress = () => {
+			skipTouchMove = false;
+			let prevScale = scale;
+			scale = _round(((_win.visualViewport && _win.visualViewport.scale) || 1) / initialScale);
+			tween.pause();
+			prevScale !== scale && _allowNativePanning(target, scale > 1.01 ? true : normalizeScrollX ? false : "x");
+			startScrollX = scrollFuncX();
+			startScrollY = scrollFuncY();
+			updateClamps();
+			lastRefreshID = _refreshID;
+		};
+		vars.onRelease = vars.onGestureStart = (self, wasDragging) => {
+			scrollFuncY.offset && removeContentOffset();
+			if (!wasDragging) {
+				onStopDelayedCall.restart(true);
+			} else {
+				_scrollers.cache++; // make sure we're pulling the non-cached value
+				// alternate algorithm: durX = Math.min(6, Math.abs(self.velocityX / 800)),	dur = Math.max(durX, Math.min(6, Math.abs(self.velocityY / 800))); dur = dur * (0.4 + (1 - _power4In(dur / 6)) * 0.6)) * (momentumSpeed || 1)
+				let dur = resolveMomentumDuration(),
+					currentScroll, endScroll;
+				if (normalizeScrollX) {
+					currentScroll = scrollFuncX();
+					endScroll = currentScroll + (dur * 0.05 * -self.velocityX) / 0.227; // the constant .227 is from power4(0.05). velocity is inverted because scrolling goes in the opposite direction.
+					dur *= _clampScrollAndGetDurationMultiplier(scrollFuncX, currentScroll, endScroll, _maxScroll(target, _horizontal));
+					tween.vars.scrollX = scrollClampX(endScroll);
+				}
+				currentScroll = scrollFuncY();
+				endScroll = currentScroll + (dur * 0.05 * -self.velocityY) / 0.227; // the constant .227 is from power4(0.05)
+				dur *= _clampScrollAndGetDurationMultiplier(scrollFuncY, currentScroll, endScroll, _maxScroll(target, _vertical));
+				tween.vars.scrollY = scrollClampY(endScroll);
+				tween.invalidate().duration(dur).play(0.01);
+				if (_fixIOSBug && tween.vars.scrollY >= maxY || currentScroll >= maxY-1) { // iOS bug: it'll show the address bar but NOT fire the window "resize" event until the animation is done but we must protect against overshoot so we leverage an onUpdate to do so.
+					gsap.to({}, {onUpdate: onResize, duration: dur});
+				}
+			}
+			onRelease && onRelease(self);
+		};
+		vars.onWheel = () => {
+			tween._ts && tween.pause();
+			if (_getTime() - wheelRefresh > 1000) { // after 1 second, refresh the clamps otherwise that'll only happen when ScrollTrigger.refresh() is called or for touch-scrolling.
+				lastRefreshID = 0;
+				wheelRefresh = _getTime();
+			}
+		};
+		vars.onChange = (self, dx, dy, xArray, yArray) => {
+			_refreshID !== lastRefreshID && updateClamps();
+			dx && normalizeScrollX && scrollFuncX(scrollClampX(xArray[2] === dx ? startScrollX + (self.startX - self.x) : scrollFuncX() + dx - xArray[1])); // for more precision, we track pointer/touch movement from the start, otherwise it'll drift.
+			if (dy) {
+				scrollFuncY.offset && removeContentOffset();
+				let isTouch = yArray[2] === dy,
+					y = isTouch ? startScrollY + self.startY - self.y : scrollFuncY() + dy - yArray[1],
+					yClamped = scrollClampY(y);
+				isTouch && y !== yClamped && (startScrollY += yClamped - y);
+				scrollFuncY(yClamped);
+			}
+			(dy || dx) && _updateAll();
+		};
+		vars.onEnable = () => {
+			_allowNativePanning(target, normalizeScrollX ? false : "x");
+			ScrollTrigger.addEventListener("refresh", onResize);
+			_addListener(_win, "resize", onResize);
+			if (scrollFuncY.smooth) {
+				scrollFuncY.target.style.scrollBehavior = "auto";
+				scrollFuncY.smooth = scrollFuncX.smooth = false;
+			}
+			inputObserver.enable();
+		};
+		vars.onDisable = () => {
+			_allowNativePanning(target, true);
+			_removeListener(_win, "resize", onResize);
+			ScrollTrigger.removeEventListener("refresh", onResize);
+			inputObserver.kill();
+		};
+		vars.lockAxis = vars.lockAxis !== false;
+		self = new Observer(vars);
+		self.iOS = _fixIOSBug; // used in the Observer getCachedScroll() function to work around an iOS bug that wreaks havoc with TouchEvent.clientY if we allow scroll to go all the way back to 0.
+		_fixIOSBug && !scrollFuncY() && scrollFuncY(1); // iOS bug causes event.clientY values to freak out (wildly inaccurate) if the scroll position is exactly 0.
+		_fixIOSBug && gsap.ticker.add(_passThrough); // prevent the ticker from sleeping
+		onStopDelayedCall = self._dc;
+		tween = gsap.to(self, {ease: "power4", paused: true, inherit: false, scrollX: normalizeScrollX ? "+=0.1" : "+=0", scrollY: "+=0.1", modifiers: {scrollY: _interruptionTracker(scrollFuncY, scrollFuncY(), () => tween.pause())	}, onUpdate: _updateAll, onComplete: onStopDelayedCall.vars.onComplete}); // we need the modifier to sense if the scroll position is altered outside of the momentum tween (like with a scrollTo tween) so we can pause() it to prevent conflicts.
+		return self;
+	};
+
+ScrollTrigger.sort = func => _triggers.sort(func || ((a, b) => (a.vars.refreshPriority || 0) * -1e6 + a.start - (b.start + (b.vars.refreshPriority || 0) * -1e6)));
+ScrollTrigger.observe = vars => new Observer(vars);
+ScrollTrigger.normalizeScroll = vars => {
+	if (typeof(vars) === "undefined") {
+		return _normalizer;
+	}
+	if (vars === true && _normalizer) {
+		return _normalizer.enable();
+	}
+	if (vars === false) {
+		_normalizer && _normalizer.kill();
+		_normalizer = vars;
+		return;
+	}
+	let normalizer = vars instanceof Observer ? vars : _getScrollNormalizer(vars);
+	_normalizer && _normalizer.target === normalizer.target && _normalizer.kill();
+	_isViewport(normalizer.target) && (_normalizer = normalizer);
+	return normalizer;
+};
+
+
+ScrollTrigger.core = { // smaller file size way to leverage in ScrollSmoother and Observer
+	_getVelocityProp,
+	_inputObserver,
+	_scrollers,
+	_proxies,
+	bridge: {
+		// when normalizeScroll sets the scroll position (ss = setScroll)
+		ss: () => {
+			_lastScrollTime || _dispatch("scrollStart");
+			_lastScrollTime = _getTime();
+		},
+		// a way to get the _refreshing value in Observer
+		ref: () => _refreshing
+	}
+};
+
+_getGSAP() && gsap.registerPlugin(ScrollTrigger);
+
+export { ScrollTrigger, ScrollTrigger as default };
diff --git a/dist/TextPlugin.cjs b/dist/TextPlugin.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..c2934718686bc89cc1a49ca82588734be0285143
--- /dev/null
+++ b/dist/TextPlugin.cjs
@@ -0,0 +1,217 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+/*!
+ * strings: 3.12.5
+ * https://gsap.com
+ *
+ * Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let _trimExp = /(?:^\s+|\s+$)/g;
+
+const emojiExp = /([\uD800-\uDBFF][\uDC00-\uDFFF](?:[\u200D\uFE0F][\uD800-\uDBFF][\uDC00-\uDFFF]){2,}|\uD83D\uDC69(?:\u200D(?:(?:\uD83D\uDC69\u200D)?\uD83D\uDC67|(?:\uD83D\uDC69\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]\uFE0F|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC6F\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3C-\uDD3E\uDDD6-\uDDDF])\u200D[\u2640\u2642]\uFE0F|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F\u200D[\u2640\u2642]|(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642])\uFE0F|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\uD83D\uDC69\u200D[\u2695\u2696\u2708]|\uD83D\uDC68(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708]))\uFE0F|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83D\uDC69\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|\uD83D\uDC68(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]))|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDD1-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\u200D(?:(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC69\uDC6E\uDC70-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD26\uDD30-\uDD39\uDD3D\uDD3E\uDDD1-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])?|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDEEB\uDEEC\uDEF4-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267B\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])\uFE0F)/;
+
+function getText(e) {
+	let type = e.nodeType,
+		result = "";
+	if (type === 1 || type === 9 || type === 11) {
+		if (typeof(e.textContent) === "string") {
+			return e.textContent;
+		} else {
+			for (e = e.firstChild; e; e = e.nextSibling ) {
+				result += getText(e);
+			}
+		}
+	} else if (type === 3 || type === 4) {
+		return e.nodeValue;
+	}
+	return result;
+}
+
+function splitInnerHTML(element, delimiter, trim, preserveSpaces) {
+	let node = element.firstChild,
+		result = [], s;
+	while (node) {
+		if (node.nodeType === 3) {
+			s = (node.nodeValue + "").replace(/^\n+/g, "");
+			if (!preserveSpaces) {
+				s = s.replace(/\s+/g, " ");
+			}
+			result.push(...emojiSafeSplit(s, delimiter, trim, preserveSpaces));
+		} else if ((node.nodeName + "").toLowerCase() === "br") {
+			result[result.length-1] += "<br>";
+		} else {
+			result.push(node.outerHTML);
+		}
+		node = node.nextSibling;
+	}
+	s = result.length;
+	while (s--) {
+		result[s] === "&" && result.splice(s, 1, "&amp;");
+	}
+	return result;
+}
+
+/*
+//smaller kb version that only handles the simpler emoji's, which is often perfectly adequate.
+
+let _emoji = "[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2694-\u2697]|\uD83E[\uDD10-\uDD5D]|[\uD800-\uDBFF][\uDC00-\uDFFF]",
+	_emojiExp = new RegExp(_emoji),
+	_emojiAndCharsExp = new RegExp(_emoji + "|.", "g"),
+	_emojiSafeSplit = (text, delimiter, trim) => {
+		if (trim) {
+			text = text.replace(_trimExp, "");
+		}
+		return ((delimiter === "" || !delimiter) && _emojiExp.test(text)) ? text.match(_emojiAndCharsExp) : text.split(delimiter || "");
+	};
+ */
+function emojiSafeSplit(text, delimiter, trim, preserveSpaces) {
+	text += ""; // make sure it's cast as a string. Someone may pass in a number.
+	trim && (text = text.trim ? text.trim() : text.replace(_trimExp, "")); // IE9 and earlier compatibility
+	if (delimiter && delimiter !== "") {
+		return text.replace(/>/g, "&gt;").replace(/</g, "&lt;").split(delimiter);
+	}
+	let result = [],
+		l = text.length,
+		i = 0,
+		j, character;
+	for (; i < l; i++) {
+		character = text.charAt(i);
+		if ((character.charCodeAt(0) >= 0xD800 && character.charCodeAt(0) <= 0xDBFF) || (text.charCodeAt(i+1) >= 0xFE00 && text.charCodeAt(i+1) <= 0xFE0F)) { //special emoji characters use 2 or 4 unicode characters that we must keep together.
+			j = ((text.substr(i, 12).split(emojiExp) || [])[1] || "").length || 2;
+			character = text.substr(i, j);
+			result.emoji = 1;
+			i += j - 1;
+		}
+		result.push(character === ">" ? "&gt;" : (character === "<") ? "&lt;" : preserveSpaces && character === " " && (text.charAt(i-1) === " " || text.charAt(i+1) === " ") ? "&nbsp;" : character);
+	}
+	return result;
+}
+
+/*!
+ * TextPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let gsap, _tempDiv,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap);
+
+
+const TextPlugin = {
+	version:"3.12.5",
+	name:"text",
+	init(target, value, tween) {
+		typeof(value) !== "object" && (value = {value:value});
+		let i = target.nodeName.toUpperCase(),
+			data = this,
+			{ newClass, oldClass, preserveSpaces, rtl } = value,
+			delimiter = data.delimiter = value.delimiter || "",
+			fillChar = data.fillChar = value.fillChar || (value.padSpace ? "&nbsp;" : ""),
+			short, text, original, j, condensedText, condensedOriginal, aggregate, s;
+		data.svg = (target.getBBox && (i === "TEXT" || i === "TSPAN"));
+		if (!("innerHTML" in target) && !data.svg) {
+			return false;
+		}
+		data.target = target;
+		if (!("value" in value)) {
+			data.text = data.original = [""];
+			return;
+		}
+		original = splitInnerHTML(target, delimiter, false, preserveSpaces);
+		_tempDiv || (_tempDiv = document.createElement("div"));
+		_tempDiv.innerHTML = value.value;
+		text = splitInnerHTML(_tempDiv, delimiter, false, preserveSpaces);
+		data.from = tween._from;
+		if ((data.from || rtl) && !(rtl && data.from)) { // right-to-left or "from()" tweens should invert things (but if it's BOTH .from() and rtl, inverting twice equals not inverting at all :)
+			i = original;
+			original = text;
+			text = i;
+		}
+		data.hasClass = !!(newClass || oldClass);
+		data.newClass = rtl ? oldClass : newClass;
+		data.oldClass = rtl ? newClass : oldClass;
+		i = original.length - text.length;
+		short = i < 0 ? original : text;
+		if (i < 0) {
+			i = -i;
+		}
+		while (--i > -1) {
+			short.push(fillChar);
+		}
+		if (value.type === "diff") {
+			j = 0;
+			condensedText = [];
+			condensedOriginal = [];
+			aggregate = "";
+			for (i = 0; i < text.length; i++) {
+				s = text[i];
+				if (s === original[i]) {
+					aggregate += s;
+				} else {
+					condensedText[j] = aggregate + s;
+					condensedOriginal[j++] = aggregate + original[i];
+					aggregate = "";
+				}
+			}
+			text = condensedText;
+			original = condensedOriginal;
+			if (aggregate) {
+				text.push(aggregate);
+				original.push(aggregate);
+			}
+		}
+		value.speed && tween.duration(Math.min(0.05 / value.speed * short.length, value.maxDuration || 9999));
+		data.rtl = rtl;
+		data.original = original;
+		data.text = text;
+		data._props.push("text");
+	},
+	render(ratio, data) {
+		if (ratio > 1) {
+			ratio = 1;
+		} else if (ratio < 0) {
+			ratio = 0;
+		}
+		if (data.from) {
+			ratio = 1 - ratio;
+		}
+		let { text, hasClass, newClass, oldClass, delimiter, target, fillChar, original, rtl } = data,
+			l = text.length,
+			i = ((rtl ? 1 - ratio : ratio) * l + 0.5) | 0,
+			applyNew, applyOld, str;
+		if (hasClass && ratio) {
+			applyNew = (newClass && i);
+			applyOld = (oldClass && i !== l);
+			str = (applyNew ? "<span class='" + newClass + "'>" : "") + text.slice(0, i).join(delimiter) + (applyNew ? "</span>" : "") + (applyOld ? "<span class='" + oldClass + "'>" : "") + delimiter + original.slice(i).join(delimiter) + (applyOld ? "</span>" : "");
+		} else {
+			str = text.slice(0, i).join(delimiter) + delimiter + original.slice(i).join(delimiter);
+		}
+		if (data.svg) { //SVG text elements don't have an "innerHTML" in Microsoft browsers.
+			target.textContent = str;
+		} else {
+			target.innerHTML = (fillChar === "&nbsp;" && ~str.indexOf("  ")) ? str.split("  ").join("&nbsp;&nbsp;") : str;
+		}
+	}
+};
+
+TextPlugin.splitInnerHTML = splitInnerHTML;
+TextPlugin.emojiSafeSplit = emojiSafeSplit;
+TextPlugin.getText = getText;
+
+_getGSAP() && gsap.registerPlugin(TextPlugin);
+
+exports.TextPlugin = TextPlugin;
+exports.default = TextPlugin;
diff --git a/dist/TextPlugin.d.cts b/dist/TextPlugin.d.cts
new file mode 100644
index 0000000000000000000000000000000000000000..c364984caa0d81ce1a14038b758f8b562bcae67f
--- /dev/null
+++ b/dist/TextPlugin.d.cts
@@ -0,0 +1,212 @@
+/*!
+ * strings: 3.12.5
+ * https://gsap.com
+ *
+ * Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let _trimExp = /(?:^\s+|\s+$)/g;
+
+const emojiExp = /([\uD800-\uDBFF][\uDC00-\uDFFF](?:[\u200D\uFE0F][\uD800-\uDBFF][\uDC00-\uDFFF]){2,}|\uD83D\uDC69(?:\u200D(?:(?:\uD83D\uDC69\u200D)?\uD83D\uDC67|(?:\uD83D\uDC69\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]\uFE0F|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC6F\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3C-\uDD3E\uDDD6-\uDDDF])\u200D[\u2640\u2642]\uFE0F|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F\u200D[\u2640\u2642]|(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642])\uFE0F|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\uD83D\uDC69\u200D[\u2695\u2696\u2708]|\uD83D\uDC68(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708]))\uFE0F|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83D\uDC69\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|\uD83D\uDC68(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]))|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDD1-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\u200D(?:(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC69\uDC6E\uDC70-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD26\uDD30-\uDD39\uDD3D\uDD3E\uDDD1-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])?|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDEEB\uDEEC\uDEF4-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267B\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])\uFE0F)/;
+
+function getText(e) {
+	let type = e.nodeType,
+		result = "";
+	if (type === 1 || type === 9 || type === 11) {
+		if (typeof(e.textContent) === "string") {
+			return e.textContent;
+		} else {
+			for (e = e.firstChild; e; e = e.nextSibling ) {
+				result += getText(e);
+			}
+		}
+	} else if (type === 3 || type === 4) {
+		return e.nodeValue;
+	}
+	return result;
+}
+
+function splitInnerHTML(element, delimiter, trim, preserveSpaces) {
+	let node = element.firstChild,
+		result = [], s;
+	while (node) {
+		if (node.nodeType === 3) {
+			s = (node.nodeValue + "").replace(/^\n+/g, "");
+			if (!preserveSpaces) {
+				s = s.replace(/\s+/g, " ");
+			}
+			result.push(...emojiSafeSplit(s, delimiter, trim, preserveSpaces));
+		} else if ((node.nodeName + "").toLowerCase() === "br") {
+			result[result.length-1] += "<br>";
+		} else {
+			result.push(node.outerHTML);
+		}
+		node = node.nextSibling;
+	}
+	s = result.length;
+	while (s--) {
+		result[s] === "&" && result.splice(s, 1, "&amp;");
+	}
+	return result;
+}
+
+/*
+//smaller kb version that only handles the simpler emoji's, which is often perfectly adequate.
+
+let _emoji = "[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2694-\u2697]|\uD83E[\uDD10-\uDD5D]|[\uD800-\uDBFF][\uDC00-\uDFFF]",
+	_emojiExp = new RegExp(_emoji),
+	_emojiAndCharsExp = new RegExp(_emoji + "|.", "g"),
+	_emojiSafeSplit = (text, delimiter, trim) => {
+		if (trim) {
+			text = text.replace(_trimExp, "");
+		}
+		return ((delimiter === "" || !delimiter) && _emojiExp.test(text)) ? text.match(_emojiAndCharsExp) : text.split(delimiter || "");
+	};
+ */
+function emojiSafeSplit(text, delimiter, trim, preserveSpaces) {
+	text += ""; // make sure it's cast as a string. Someone may pass in a number.
+	trim && (text = text.trim ? text.trim() : text.replace(_trimExp, "")); // IE9 and earlier compatibility
+	if (delimiter && delimiter !== "") {
+		return text.replace(/>/g, "&gt;").replace(/</g, "&lt;").split(delimiter);
+	}
+	let result = [],
+		l = text.length,
+		i = 0,
+		j, character;
+	for (; i < l; i++) {
+		character = text.charAt(i);
+		if ((character.charCodeAt(0) >= 0xD800 && character.charCodeAt(0) <= 0xDBFF) || (text.charCodeAt(i+1) >= 0xFE00 && text.charCodeAt(i+1) <= 0xFE0F)) { //special emoji characters use 2 or 4 unicode characters that we must keep together.
+			j = ((text.substr(i, 12).split(emojiExp) || [])[1] || "").length || 2;
+			character = text.substr(i, j);
+			result.emoji = 1;
+			i += j - 1;
+		}
+		result.push(character === ">" ? "&gt;" : (character === "<") ? "&lt;" : preserveSpaces && character === " " && (text.charAt(i-1) === " " || text.charAt(i+1) === " ") ? "&nbsp;" : character);
+	}
+	return result;
+}
+
+/*!
+ * TextPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let gsap, _tempDiv,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap);
+
+
+const TextPlugin = {
+	version:"3.12.5",
+	name:"text",
+	init(target, value, tween) {
+		typeof(value) !== "object" && (value = {value:value});
+		let i = target.nodeName.toUpperCase(),
+			data = this,
+			{ newClass, oldClass, preserveSpaces, rtl } = value,
+			delimiter = data.delimiter = value.delimiter || "",
+			fillChar = data.fillChar = value.fillChar || (value.padSpace ? "&nbsp;" : ""),
+			short, text, original, j, condensedText, condensedOriginal, aggregate, s;
+		data.svg = (target.getBBox && (i === "TEXT" || i === "TSPAN"));
+		if (!("innerHTML" in target) && !data.svg) {
+			return false;
+		}
+		data.target = target;
+		if (!("value" in value)) {
+			data.text = data.original = [""];
+			return;
+		}
+		original = splitInnerHTML(target, delimiter, false, preserveSpaces);
+		_tempDiv || (_tempDiv = document.createElement("div"));
+		_tempDiv.innerHTML = value.value;
+		text = splitInnerHTML(_tempDiv, delimiter, false, preserveSpaces);
+		data.from = tween._from;
+		if ((data.from || rtl) && !(rtl && data.from)) { // right-to-left or "from()" tweens should invert things (but if it's BOTH .from() and rtl, inverting twice equals not inverting at all :)
+			i = original;
+			original = text;
+			text = i;
+		}
+		data.hasClass = !!(newClass || oldClass);
+		data.newClass = rtl ? oldClass : newClass;
+		data.oldClass = rtl ? newClass : oldClass;
+		i = original.length - text.length;
+		short = i < 0 ? original : text;
+		if (i < 0) {
+			i = -i;
+		}
+		while (--i > -1) {
+			short.push(fillChar);
+		}
+		if (value.type === "diff") {
+			j = 0;
+			condensedText = [];
+			condensedOriginal = [];
+			aggregate = "";
+			for (i = 0; i < text.length; i++) {
+				s = text[i];
+				if (s === original[i]) {
+					aggregate += s;
+				} else {
+					condensedText[j] = aggregate + s;
+					condensedOriginal[j++] = aggregate + original[i];
+					aggregate = "";
+				}
+			}
+			text = condensedText;
+			original = condensedOriginal;
+			if (aggregate) {
+				text.push(aggregate);
+				original.push(aggregate);
+			}
+		}
+		value.speed && tween.duration(Math.min(0.05 / value.speed * short.length, value.maxDuration || 9999));
+		data.rtl = rtl;
+		data.original = original;
+		data.text = text;
+		data._props.push("text");
+	},
+	render(ratio, data) {
+		if (ratio > 1) {
+			ratio = 1;
+		} else if (ratio < 0) {
+			ratio = 0;
+		}
+		if (data.from) {
+			ratio = 1 - ratio;
+		}
+		let { text, hasClass, newClass, oldClass, delimiter, target, fillChar, original, rtl } = data,
+			l = text.length,
+			i = ((rtl ? 1 - ratio : ratio) * l + 0.5) | 0,
+			applyNew, applyOld, str;
+		if (hasClass && ratio) {
+			applyNew = (newClass && i);
+			applyOld = (oldClass && i !== l);
+			str = (applyNew ? "<span class='" + newClass + "'>" : "") + text.slice(0, i).join(delimiter) + (applyNew ? "</span>" : "") + (applyOld ? "<span class='" + oldClass + "'>" : "") + delimiter + original.slice(i).join(delimiter) + (applyOld ? "</span>" : "");
+		} else {
+			str = text.slice(0, i).join(delimiter) + delimiter + original.slice(i).join(delimiter);
+		}
+		if (data.svg) { //SVG text elements don't have an "innerHTML" in Microsoft browsers.
+			target.textContent = str;
+		} else {
+			target.innerHTML = (fillChar === "&nbsp;" && ~str.indexOf("  ")) ? str.split("  ").join("&nbsp;&nbsp;") : str;
+		}
+	}
+};
+
+TextPlugin.splitInnerHTML = splitInnerHTML;
+TextPlugin.emojiSafeSplit = emojiSafeSplit;
+TextPlugin.getText = getText;
+
+_getGSAP() && gsap.registerPlugin(TextPlugin);
+
+export { TextPlugin, TextPlugin as default };
diff --git a/dist/TextPlugin.d.mts b/dist/TextPlugin.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..c364984caa0d81ce1a14038b758f8b562bcae67f
--- /dev/null
+++ b/dist/TextPlugin.d.mts
@@ -0,0 +1,212 @@
+/*!
+ * strings: 3.12.5
+ * https://gsap.com
+ *
+ * Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let _trimExp = /(?:^\s+|\s+$)/g;
+
+const emojiExp = /([\uD800-\uDBFF][\uDC00-\uDFFF](?:[\u200D\uFE0F][\uD800-\uDBFF][\uDC00-\uDFFF]){2,}|\uD83D\uDC69(?:\u200D(?:(?:\uD83D\uDC69\u200D)?\uD83D\uDC67|(?:\uD83D\uDC69\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]\uFE0F|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC6F\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3C-\uDD3E\uDDD6-\uDDDF])\u200D[\u2640\u2642]\uFE0F|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F\u200D[\u2640\u2642]|(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642])\uFE0F|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\uD83D\uDC69\u200D[\u2695\u2696\u2708]|\uD83D\uDC68(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708]))\uFE0F|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83D\uDC69\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|\uD83D\uDC68(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]))|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDD1-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\u200D(?:(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC69\uDC6E\uDC70-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD26\uDD30-\uDD39\uDD3D\uDD3E\uDDD1-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])?|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDEEB\uDEEC\uDEF4-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267B\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])\uFE0F)/;
+
+function getText(e) {
+	let type = e.nodeType,
+		result = "";
+	if (type === 1 || type === 9 || type === 11) {
+		if (typeof(e.textContent) === "string") {
+			return e.textContent;
+		} else {
+			for (e = e.firstChild; e; e = e.nextSibling ) {
+				result += getText(e);
+			}
+		}
+	} else if (type === 3 || type === 4) {
+		return e.nodeValue;
+	}
+	return result;
+}
+
+function splitInnerHTML(element, delimiter, trim, preserveSpaces) {
+	let node = element.firstChild,
+		result = [], s;
+	while (node) {
+		if (node.nodeType === 3) {
+			s = (node.nodeValue + "").replace(/^\n+/g, "");
+			if (!preserveSpaces) {
+				s = s.replace(/\s+/g, " ");
+			}
+			result.push(...emojiSafeSplit(s, delimiter, trim, preserveSpaces));
+		} else if ((node.nodeName + "").toLowerCase() === "br") {
+			result[result.length-1] += "<br>";
+		} else {
+			result.push(node.outerHTML);
+		}
+		node = node.nextSibling;
+	}
+	s = result.length;
+	while (s--) {
+		result[s] === "&" && result.splice(s, 1, "&amp;");
+	}
+	return result;
+}
+
+/*
+//smaller kb version that only handles the simpler emoji's, which is often perfectly adequate.
+
+let _emoji = "[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2694-\u2697]|\uD83E[\uDD10-\uDD5D]|[\uD800-\uDBFF][\uDC00-\uDFFF]",
+	_emojiExp = new RegExp(_emoji),
+	_emojiAndCharsExp = new RegExp(_emoji + "|.", "g"),
+	_emojiSafeSplit = (text, delimiter, trim) => {
+		if (trim) {
+			text = text.replace(_trimExp, "");
+		}
+		return ((delimiter === "" || !delimiter) && _emojiExp.test(text)) ? text.match(_emojiAndCharsExp) : text.split(delimiter || "");
+	};
+ */
+function emojiSafeSplit(text, delimiter, trim, preserveSpaces) {
+	text += ""; // make sure it's cast as a string. Someone may pass in a number.
+	trim && (text = text.trim ? text.trim() : text.replace(_trimExp, "")); // IE9 and earlier compatibility
+	if (delimiter && delimiter !== "") {
+		return text.replace(/>/g, "&gt;").replace(/</g, "&lt;").split(delimiter);
+	}
+	let result = [],
+		l = text.length,
+		i = 0,
+		j, character;
+	for (; i < l; i++) {
+		character = text.charAt(i);
+		if ((character.charCodeAt(0) >= 0xD800 && character.charCodeAt(0) <= 0xDBFF) || (text.charCodeAt(i+1) >= 0xFE00 && text.charCodeAt(i+1) <= 0xFE0F)) { //special emoji characters use 2 or 4 unicode characters that we must keep together.
+			j = ((text.substr(i, 12).split(emojiExp) || [])[1] || "").length || 2;
+			character = text.substr(i, j);
+			result.emoji = 1;
+			i += j - 1;
+		}
+		result.push(character === ">" ? "&gt;" : (character === "<") ? "&lt;" : preserveSpaces && character === " " && (text.charAt(i-1) === " " || text.charAt(i+1) === " ") ? "&nbsp;" : character);
+	}
+	return result;
+}
+
+/*!
+ * TextPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let gsap, _tempDiv,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap);
+
+
+const TextPlugin = {
+	version:"3.12.5",
+	name:"text",
+	init(target, value, tween) {
+		typeof(value) !== "object" && (value = {value:value});
+		let i = target.nodeName.toUpperCase(),
+			data = this,
+			{ newClass, oldClass, preserveSpaces, rtl } = value,
+			delimiter = data.delimiter = value.delimiter || "",
+			fillChar = data.fillChar = value.fillChar || (value.padSpace ? "&nbsp;" : ""),
+			short, text, original, j, condensedText, condensedOriginal, aggregate, s;
+		data.svg = (target.getBBox && (i === "TEXT" || i === "TSPAN"));
+		if (!("innerHTML" in target) && !data.svg) {
+			return false;
+		}
+		data.target = target;
+		if (!("value" in value)) {
+			data.text = data.original = [""];
+			return;
+		}
+		original = splitInnerHTML(target, delimiter, false, preserveSpaces);
+		_tempDiv || (_tempDiv = document.createElement("div"));
+		_tempDiv.innerHTML = value.value;
+		text = splitInnerHTML(_tempDiv, delimiter, false, preserveSpaces);
+		data.from = tween._from;
+		if ((data.from || rtl) && !(rtl && data.from)) { // right-to-left or "from()" tweens should invert things (but if it's BOTH .from() and rtl, inverting twice equals not inverting at all :)
+			i = original;
+			original = text;
+			text = i;
+		}
+		data.hasClass = !!(newClass || oldClass);
+		data.newClass = rtl ? oldClass : newClass;
+		data.oldClass = rtl ? newClass : oldClass;
+		i = original.length - text.length;
+		short = i < 0 ? original : text;
+		if (i < 0) {
+			i = -i;
+		}
+		while (--i > -1) {
+			short.push(fillChar);
+		}
+		if (value.type === "diff") {
+			j = 0;
+			condensedText = [];
+			condensedOriginal = [];
+			aggregate = "";
+			for (i = 0; i < text.length; i++) {
+				s = text[i];
+				if (s === original[i]) {
+					aggregate += s;
+				} else {
+					condensedText[j] = aggregate + s;
+					condensedOriginal[j++] = aggregate + original[i];
+					aggregate = "";
+				}
+			}
+			text = condensedText;
+			original = condensedOriginal;
+			if (aggregate) {
+				text.push(aggregate);
+				original.push(aggregate);
+			}
+		}
+		value.speed && tween.duration(Math.min(0.05 / value.speed * short.length, value.maxDuration || 9999));
+		data.rtl = rtl;
+		data.original = original;
+		data.text = text;
+		data._props.push("text");
+	},
+	render(ratio, data) {
+		if (ratio > 1) {
+			ratio = 1;
+		} else if (ratio < 0) {
+			ratio = 0;
+		}
+		if (data.from) {
+			ratio = 1 - ratio;
+		}
+		let { text, hasClass, newClass, oldClass, delimiter, target, fillChar, original, rtl } = data,
+			l = text.length,
+			i = ((rtl ? 1 - ratio : ratio) * l + 0.5) | 0,
+			applyNew, applyOld, str;
+		if (hasClass && ratio) {
+			applyNew = (newClass && i);
+			applyOld = (oldClass && i !== l);
+			str = (applyNew ? "<span class='" + newClass + "'>" : "") + text.slice(0, i).join(delimiter) + (applyNew ? "</span>" : "") + (applyOld ? "<span class='" + oldClass + "'>" : "") + delimiter + original.slice(i).join(delimiter) + (applyOld ? "</span>" : "");
+		} else {
+			str = text.slice(0, i).join(delimiter) + delimiter + original.slice(i).join(delimiter);
+		}
+		if (data.svg) { //SVG text elements don't have an "innerHTML" in Microsoft browsers.
+			target.textContent = str;
+		} else {
+			target.innerHTML = (fillChar === "&nbsp;" && ~str.indexOf("  ")) ? str.split("  ").join("&nbsp;&nbsp;") : str;
+		}
+	}
+};
+
+TextPlugin.splitInnerHTML = splitInnerHTML;
+TextPlugin.emojiSafeSplit = emojiSafeSplit;
+TextPlugin.getText = getText;
+
+_getGSAP() && gsap.registerPlugin(TextPlugin);
+
+export { TextPlugin, TextPlugin as default };
diff --git a/dist/TextPlugin.d.ts b/dist/TextPlugin.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..c364984caa0d81ce1a14038b758f8b562bcae67f
--- /dev/null
+++ b/dist/TextPlugin.d.ts
@@ -0,0 +1,212 @@
+/*!
+ * strings: 3.12.5
+ * https://gsap.com
+ *
+ * Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let _trimExp = /(?:^\s+|\s+$)/g;
+
+const emojiExp = /([\uD800-\uDBFF][\uDC00-\uDFFF](?:[\u200D\uFE0F][\uD800-\uDBFF][\uDC00-\uDFFF]){2,}|\uD83D\uDC69(?:\u200D(?:(?:\uD83D\uDC69\u200D)?\uD83D\uDC67|(?:\uD83D\uDC69\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]\uFE0F|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC6F\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3C-\uDD3E\uDDD6-\uDDDF])\u200D[\u2640\u2642]\uFE0F|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F\u200D[\u2640\u2642]|(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642])\uFE0F|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\uD83D\uDC69\u200D[\u2695\u2696\u2708]|\uD83D\uDC68(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708]))\uFE0F|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83D\uDC69\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|\uD83D\uDC68(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]))|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDD1-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\u200D(?:(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC69\uDC6E\uDC70-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD26\uDD30-\uDD39\uDD3D\uDD3E\uDDD1-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])?|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDEEB\uDEEC\uDEF4-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267B\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])\uFE0F)/;
+
+function getText(e) {
+	let type = e.nodeType,
+		result = "";
+	if (type === 1 || type === 9 || type === 11) {
+		if (typeof(e.textContent) === "string") {
+			return e.textContent;
+		} else {
+			for (e = e.firstChild; e; e = e.nextSibling ) {
+				result += getText(e);
+			}
+		}
+	} else if (type === 3 || type === 4) {
+		return e.nodeValue;
+	}
+	return result;
+}
+
+function splitInnerHTML(element, delimiter, trim, preserveSpaces) {
+	let node = element.firstChild,
+		result = [], s;
+	while (node) {
+		if (node.nodeType === 3) {
+			s = (node.nodeValue + "").replace(/^\n+/g, "");
+			if (!preserveSpaces) {
+				s = s.replace(/\s+/g, " ");
+			}
+			result.push(...emojiSafeSplit(s, delimiter, trim, preserveSpaces));
+		} else if ((node.nodeName + "").toLowerCase() === "br") {
+			result[result.length-1] += "<br>";
+		} else {
+			result.push(node.outerHTML);
+		}
+		node = node.nextSibling;
+	}
+	s = result.length;
+	while (s--) {
+		result[s] === "&" && result.splice(s, 1, "&amp;");
+	}
+	return result;
+}
+
+/*
+//smaller kb version that only handles the simpler emoji's, which is often perfectly adequate.
+
+let _emoji = "[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2694-\u2697]|\uD83E[\uDD10-\uDD5D]|[\uD800-\uDBFF][\uDC00-\uDFFF]",
+	_emojiExp = new RegExp(_emoji),
+	_emojiAndCharsExp = new RegExp(_emoji + "|.", "g"),
+	_emojiSafeSplit = (text, delimiter, trim) => {
+		if (trim) {
+			text = text.replace(_trimExp, "");
+		}
+		return ((delimiter === "" || !delimiter) && _emojiExp.test(text)) ? text.match(_emojiAndCharsExp) : text.split(delimiter || "");
+	};
+ */
+function emojiSafeSplit(text, delimiter, trim, preserveSpaces) {
+	text += ""; // make sure it's cast as a string. Someone may pass in a number.
+	trim && (text = text.trim ? text.trim() : text.replace(_trimExp, "")); // IE9 and earlier compatibility
+	if (delimiter && delimiter !== "") {
+		return text.replace(/>/g, "&gt;").replace(/</g, "&lt;").split(delimiter);
+	}
+	let result = [],
+		l = text.length,
+		i = 0,
+		j, character;
+	for (; i < l; i++) {
+		character = text.charAt(i);
+		if ((character.charCodeAt(0) >= 0xD800 && character.charCodeAt(0) <= 0xDBFF) || (text.charCodeAt(i+1) >= 0xFE00 && text.charCodeAt(i+1) <= 0xFE0F)) { //special emoji characters use 2 or 4 unicode characters that we must keep together.
+			j = ((text.substr(i, 12).split(emojiExp) || [])[1] || "").length || 2;
+			character = text.substr(i, j);
+			result.emoji = 1;
+			i += j - 1;
+		}
+		result.push(character === ">" ? "&gt;" : (character === "<") ? "&lt;" : preserveSpaces && character === " " && (text.charAt(i-1) === " " || text.charAt(i+1) === " ") ? "&nbsp;" : character);
+	}
+	return result;
+}
+
+/*!
+ * TextPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let gsap, _tempDiv,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap);
+
+
+const TextPlugin = {
+	version:"3.12.5",
+	name:"text",
+	init(target, value, tween) {
+		typeof(value) !== "object" && (value = {value:value});
+		let i = target.nodeName.toUpperCase(),
+			data = this,
+			{ newClass, oldClass, preserveSpaces, rtl } = value,
+			delimiter = data.delimiter = value.delimiter || "",
+			fillChar = data.fillChar = value.fillChar || (value.padSpace ? "&nbsp;" : ""),
+			short, text, original, j, condensedText, condensedOriginal, aggregate, s;
+		data.svg = (target.getBBox && (i === "TEXT" || i === "TSPAN"));
+		if (!("innerHTML" in target) && !data.svg) {
+			return false;
+		}
+		data.target = target;
+		if (!("value" in value)) {
+			data.text = data.original = [""];
+			return;
+		}
+		original = splitInnerHTML(target, delimiter, false, preserveSpaces);
+		_tempDiv || (_tempDiv = document.createElement("div"));
+		_tempDiv.innerHTML = value.value;
+		text = splitInnerHTML(_tempDiv, delimiter, false, preserveSpaces);
+		data.from = tween._from;
+		if ((data.from || rtl) && !(rtl && data.from)) { // right-to-left or "from()" tweens should invert things (but if it's BOTH .from() and rtl, inverting twice equals not inverting at all :)
+			i = original;
+			original = text;
+			text = i;
+		}
+		data.hasClass = !!(newClass || oldClass);
+		data.newClass = rtl ? oldClass : newClass;
+		data.oldClass = rtl ? newClass : oldClass;
+		i = original.length - text.length;
+		short = i < 0 ? original : text;
+		if (i < 0) {
+			i = -i;
+		}
+		while (--i > -1) {
+			short.push(fillChar);
+		}
+		if (value.type === "diff") {
+			j = 0;
+			condensedText = [];
+			condensedOriginal = [];
+			aggregate = "";
+			for (i = 0; i < text.length; i++) {
+				s = text[i];
+				if (s === original[i]) {
+					aggregate += s;
+				} else {
+					condensedText[j] = aggregate + s;
+					condensedOriginal[j++] = aggregate + original[i];
+					aggregate = "";
+				}
+			}
+			text = condensedText;
+			original = condensedOriginal;
+			if (aggregate) {
+				text.push(aggregate);
+				original.push(aggregate);
+			}
+		}
+		value.speed && tween.duration(Math.min(0.05 / value.speed * short.length, value.maxDuration || 9999));
+		data.rtl = rtl;
+		data.original = original;
+		data.text = text;
+		data._props.push("text");
+	},
+	render(ratio, data) {
+		if (ratio > 1) {
+			ratio = 1;
+		} else if (ratio < 0) {
+			ratio = 0;
+		}
+		if (data.from) {
+			ratio = 1 - ratio;
+		}
+		let { text, hasClass, newClass, oldClass, delimiter, target, fillChar, original, rtl } = data,
+			l = text.length,
+			i = ((rtl ? 1 - ratio : ratio) * l + 0.5) | 0,
+			applyNew, applyOld, str;
+		if (hasClass && ratio) {
+			applyNew = (newClass && i);
+			applyOld = (oldClass && i !== l);
+			str = (applyNew ? "<span class='" + newClass + "'>" : "") + text.slice(0, i).join(delimiter) + (applyNew ? "</span>" : "") + (applyOld ? "<span class='" + oldClass + "'>" : "") + delimiter + original.slice(i).join(delimiter) + (applyOld ? "</span>" : "");
+		} else {
+			str = text.slice(0, i).join(delimiter) + delimiter + original.slice(i).join(delimiter);
+		}
+		if (data.svg) { //SVG text elements don't have an "innerHTML" in Microsoft browsers.
+			target.textContent = str;
+		} else {
+			target.innerHTML = (fillChar === "&nbsp;" && ~str.indexOf("  ")) ? str.split("  ").join("&nbsp;&nbsp;") : str;
+		}
+	}
+};
+
+TextPlugin.splitInnerHTML = splitInnerHTML;
+TextPlugin.emojiSafeSplit = emojiSafeSplit;
+TextPlugin.getText = getText;
+
+_getGSAP() && gsap.registerPlugin(TextPlugin);
+
+export { TextPlugin, TextPlugin as default };
diff --git a/dist/TextPlugin.js b/dist/TextPlugin.js
deleted file mode 100644
index 169ccb4032ab0894f03edd82c0d0204b670ed13f..0000000000000000000000000000000000000000
diff --git a/dist/TextPlugin.min.js b/dist/TextPlugin.min.js
deleted file mode 100644
index 197f344c622495963bd837477db068cdb192deb6..0000000000000000000000000000000000000000
diff --git a/dist/TextPlugin.min.js.map b/dist/TextPlugin.min.js.map
deleted file mode 100644
index c7b2803bc759059b24d1f1f0a7f53f9c9a9bdb71..0000000000000000000000000000000000000000
diff --git a/dist/TextPlugin.mjs b/dist/TextPlugin.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..c364984caa0d81ce1a14038b758f8b562bcae67f
--- /dev/null
+++ b/dist/TextPlugin.mjs
@@ -0,0 +1,212 @@
+/*!
+ * strings: 3.12.5
+ * https://gsap.com
+ *
+ * Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let _trimExp = /(?:^\s+|\s+$)/g;
+
+const emojiExp = /([\uD800-\uDBFF][\uDC00-\uDFFF](?:[\u200D\uFE0F][\uD800-\uDBFF][\uDC00-\uDFFF]){2,}|\uD83D\uDC69(?:\u200D(?:(?:\uD83D\uDC69\u200D)?\uD83D\uDC67|(?:\uD83D\uDC69\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]\uFE0F|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC6F\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3C-\uDD3E\uDDD6-\uDDDF])\u200D[\u2640\u2642]\uFE0F|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F\u200D[\u2640\u2642]|(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642])\uFE0F|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\uD83D\uDC69\u200D[\u2695\u2696\u2708]|\uD83D\uDC68(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708]))\uFE0F|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83D\uDC69\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|\uD83D\uDC68(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]))|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDD1-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\u200D(?:(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC69\uDC6E\uDC70-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD26\uDD30-\uDD39\uDD3D\uDD3E\uDDD1-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])?|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDEEB\uDEEC\uDEF4-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267B\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])\uFE0F)/;
+
+function getText(e) {
+	let type = e.nodeType,
+		result = "";
+	if (type === 1 || type === 9 || type === 11) {
+		if (typeof(e.textContent) === "string") {
+			return e.textContent;
+		} else {
+			for (e = e.firstChild; e; e = e.nextSibling ) {
+				result += getText(e);
+			}
+		}
+	} else if (type === 3 || type === 4) {
+		return e.nodeValue;
+	}
+	return result;
+}
+
+function splitInnerHTML(element, delimiter, trim, preserveSpaces) {
+	let node = element.firstChild,
+		result = [], s;
+	while (node) {
+		if (node.nodeType === 3) {
+			s = (node.nodeValue + "").replace(/^\n+/g, "");
+			if (!preserveSpaces) {
+				s = s.replace(/\s+/g, " ");
+			}
+			result.push(...emojiSafeSplit(s, delimiter, trim, preserveSpaces));
+		} else if ((node.nodeName + "").toLowerCase() === "br") {
+			result[result.length-1] += "<br>";
+		} else {
+			result.push(node.outerHTML);
+		}
+		node = node.nextSibling;
+	}
+	s = result.length;
+	while (s--) {
+		result[s] === "&" && result.splice(s, 1, "&amp;");
+	}
+	return result;
+}
+
+/*
+//smaller kb version that only handles the simpler emoji's, which is often perfectly adequate.
+
+let _emoji = "[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2694-\u2697]|\uD83E[\uDD10-\uDD5D]|[\uD800-\uDBFF][\uDC00-\uDFFF]",
+	_emojiExp = new RegExp(_emoji),
+	_emojiAndCharsExp = new RegExp(_emoji + "|.", "g"),
+	_emojiSafeSplit = (text, delimiter, trim) => {
+		if (trim) {
+			text = text.replace(_trimExp, "");
+		}
+		return ((delimiter === "" || !delimiter) && _emojiExp.test(text)) ? text.match(_emojiAndCharsExp) : text.split(delimiter || "");
+	};
+ */
+function emojiSafeSplit(text, delimiter, trim, preserveSpaces) {
+	text += ""; // make sure it's cast as a string. Someone may pass in a number.
+	trim && (text = text.trim ? text.trim() : text.replace(_trimExp, "")); // IE9 and earlier compatibility
+	if (delimiter && delimiter !== "") {
+		return text.replace(/>/g, "&gt;").replace(/</g, "&lt;").split(delimiter);
+	}
+	let result = [],
+		l = text.length,
+		i = 0,
+		j, character;
+	for (; i < l; i++) {
+		character = text.charAt(i);
+		if ((character.charCodeAt(0) >= 0xD800 && character.charCodeAt(0) <= 0xDBFF) || (text.charCodeAt(i+1) >= 0xFE00 && text.charCodeAt(i+1) <= 0xFE0F)) { //special emoji characters use 2 or 4 unicode characters that we must keep together.
+			j = ((text.substr(i, 12).split(emojiExp) || [])[1] || "").length || 2;
+			character = text.substr(i, j);
+			result.emoji = 1;
+			i += j - 1;
+		}
+		result.push(character === ">" ? "&gt;" : (character === "<") ? "&lt;" : preserveSpaces && character === " " && (text.charAt(i-1) === " " || text.charAt(i+1) === " ") ? "&nbsp;" : character);
+	}
+	return result;
+}
+
+/*!
+ * TextPlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+
+let gsap, _tempDiv,
+	_getGSAP = () => gsap || (typeof(window) !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap);
+
+
+const TextPlugin = {
+	version:"3.12.5",
+	name:"text",
+	init(target, value, tween) {
+		typeof(value) !== "object" && (value = {value:value});
+		let i = target.nodeName.toUpperCase(),
+			data = this,
+			{ newClass, oldClass, preserveSpaces, rtl } = value,
+			delimiter = data.delimiter = value.delimiter || "",
+			fillChar = data.fillChar = value.fillChar || (value.padSpace ? "&nbsp;" : ""),
+			short, text, original, j, condensedText, condensedOriginal, aggregate, s;
+		data.svg = (target.getBBox && (i === "TEXT" || i === "TSPAN"));
+		if (!("innerHTML" in target) && !data.svg) {
+			return false;
+		}
+		data.target = target;
+		if (!("value" in value)) {
+			data.text = data.original = [""];
+			return;
+		}
+		original = splitInnerHTML(target, delimiter, false, preserveSpaces);
+		_tempDiv || (_tempDiv = document.createElement("div"));
+		_tempDiv.innerHTML = value.value;
+		text = splitInnerHTML(_tempDiv, delimiter, false, preserveSpaces);
+		data.from = tween._from;
+		if ((data.from || rtl) && !(rtl && data.from)) { // right-to-left or "from()" tweens should invert things (but if it's BOTH .from() and rtl, inverting twice equals not inverting at all :)
+			i = original;
+			original = text;
+			text = i;
+		}
+		data.hasClass = !!(newClass || oldClass);
+		data.newClass = rtl ? oldClass : newClass;
+		data.oldClass = rtl ? newClass : oldClass;
+		i = original.length - text.length;
+		short = i < 0 ? original : text;
+		if (i < 0) {
+			i = -i;
+		}
+		while (--i > -1) {
+			short.push(fillChar);
+		}
+		if (value.type === "diff") {
+			j = 0;
+			condensedText = [];
+			condensedOriginal = [];
+			aggregate = "";
+			for (i = 0; i < text.length; i++) {
+				s = text[i];
+				if (s === original[i]) {
+					aggregate += s;
+				} else {
+					condensedText[j] = aggregate + s;
+					condensedOriginal[j++] = aggregate + original[i];
+					aggregate = "";
+				}
+			}
+			text = condensedText;
+			original = condensedOriginal;
+			if (aggregate) {
+				text.push(aggregate);
+				original.push(aggregate);
+			}
+		}
+		value.speed && tween.duration(Math.min(0.05 / value.speed * short.length, value.maxDuration || 9999));
+		data.rtl = rtl;
+		data.original = original;
+		data.text = text;
+		data._props.push("text");
+	},
+	render(ratio, data) {
+		if (ratio > 1) {
+			ratio = 1;
+		} else if (ratio < 0) {
+			ratio = 0;
+		}
+		if (data.from) {
+			ratio = 1 - ratio;
+		}
+		let { text, hasClass, newClass, oldClass, delimiter, target, fillChar, original, rtl } = data,
+			l = text.length,
+			i = ((rtl ? 1 - ratio : ratio) * l + 0.5) | 0,
+			applyNew, applyOld, str;
+		if (hasClass && ratio) {
+			applyNew = (newClass && i);
+			applyOld = (oldClass && i !== l);
+			str = (applyNew ? "<span class='" + newClass + "'>" : "") + text.slice(0, i).join(delimiter) + (applyNew ? "</span>" : "") + (applyOld ? "<span class='" + oldClass + "'>" : "") + delimiter + original.slice(i).join(delimiter) + (applyOld ? "</span>" : "");
+		} else {
+			str = text.slice(0, i).join(delimiter) + delimiter + original.slice(i).join(delimiter);
+		}
+		if (data.svg) { //SVG text elements don't have an "innerHTML" in Microsoft browsers.
+			target.textContent = str;
+		} else {
+			target.innerHTML = (fillChar === "&nbsp;" && ~str.indexOf("  ")) ? str.split("  ").join("&nbsp;&nbsp;") : str;
+		}
+	}
+};
+
+TextPlugin.splitInnerHTML = splitInnerHTML;
+TextPlugin.emojiSafeSplit = emojiSafeSplit;
+TextPlugin.getText = getText;
+
+_getGSAP() && gsap.registerPlugin(TextPlugin);
+
+export { TextPlugin, TextPlugin as default };
diff --git a/dist/all.cjs b/dist/all.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..4409588cb00c67e9a37caed330ce13395b3cd810
--- /dev/null
+++ b/dist/all.cjs
@@ -0,0 +1,213 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+const gsapCore = require('./gsap-core.cjs');
+const CSSPlugin$1 = require('./CSSPlugin.cjs');
+const CustomEase = require('./CustomEase.cjs');
+const Draggable = require('./Draggable.cjs');
+const EaselPlugin = require('./EaselPlugin.cjs');
+const EasePack = require('./EasePack.cjs');
+const Flip = require('./Flip.cjs');
+const MotionPathPlugin = require('./MotionPathPlugin.cjs');
+const Observer = require('./Observer.cjs');
+const PixiPlugin = require('./PixiPlugin.cjs');
+const ScrollToPlugin = require('./ScrollToPlugin.cjs');
+const ScrollTrigger = require('./ScrollTrigger.cjs');
+const TextPlugin = require('./TextPlugin.cjs');
+require('./shared/gsap.82b47a43.cjs');
+require('./shared/gsap.b4b61722.cjs');
+
+/*!
+ * CSSRulePlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _coreInitted, _doc, CSSPlugin,
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_checkRegister = () => {
+		if (!_coreInitted) {
+			_initCore();
+			if (!CSSPlugin) {
+				console.warn("Please gsap.registerPlugin(CSSPlugin, CSSRulePlugin)");
+			}
+		}
+		return _coreInitted;
+	},
+	_initCore = core => {
+		gsap = core || _getGSAP();
+		if (_windowExists()) {
+			_doc = document;
+		}
+		if (gsap) {
+			CSSPlugin = gsap.plugins.css;
+			if (CSSPlugin) {
+				_coreInitted = 1;
+			}
+		}
+	};
+
+
+const CSSRulePlugin = {
+	version: "3.12.5",
+	name: "cssRule",
+	init(target, value, tween, index, targets) {
+		if (!_checkRegister() || typeof(target.cssText) === "undefined") {
+			return false;
+		}
+		let div = target._gsProxy = target._gsProxy || _doc.createElement("div");
+		this.ss = target;
+		this.style = div.style;
+		div.style.cssText = target.cssText;
+		CSSPlugin.prototype.init.call(this, div, value, tween, index, targets); //we just offload all the work to the regular CSSPlugin and then copy the cssText back over to the rule in the render() method. This allows us to have all of the updates to CSSPlugin automatically flow through to CSSRulePlugin instead of having to maintain both
+	},
+	render(ratio, data) {
+		let pt = data._pt,
+			style = data.style,
+			ss = data.ss,
+			i;
+		while (pt) {
+			pt.r(ratio, pt.d);
+			pt = pt._next;
+		}
+		i = style.length;
+		while (--i > -1) {
+			ss[style[i]] = style[style[i]];
+		}
+	},
+	getRule(selector) {
+		_checkRegister();
+		let ruleProp = _doc.all ? "rules" : "cssRules",
+			styleSheets = _doc.styleSheets,
+			i = styleSheets.length,
+			pseudo = (selector.charAt(0) === ":"),
+			j, curSS, cs, a;
+		selector = (pseudo ? "" : ",") + selector.split("::").join(":").toLowerCase() + ","; //note: old versions of IE report tag name selectors as upper case, so we just change everything to lowercase.
+		if (pseudo) {
+			a = [];
+		}
+		while (i--) {
+			//Firefox may throw insecure operation errors when css is loaded from other domains, so try/catch.
+			try {
+				curSS = styleSheets[i][ruleProp];
+				if (!curSS) {
+					continue;
+				}
+				j = curSS.length;
+			} catch (e) {
+				console.warn(e);
+				continue;
+			}
+			while (--j > -1) {
+				cs = curSS[j];
+				if (cs.selectorText && ("," + cs.selectorText.split("::").join(":").toLowerCase() + ",").indexOf(selector) !== -1) { //note: IE adds an extra ":" to pseudo selectors, so .myClass:after becomes .myClass::after, so we need to strip the extra one out.
+					if (pseudo) {
+						a.push(cs.style);
+					} else {
+						return cs.style;
+					}
+				}
+			}
+		}
+		return a;
+	},
+	register: _initCore
+};
+
+_getGSAP() && gsap.registerPlugin(CSSRulePlugin);
+
+const gsapWithCSS = gsapCore.gsap.registerPlugin(CSSPlugin$1.CSSPlugin) || gsapCore.gsap, // to protect from tree shaking
+	TweenMaxWithCSS = gsapWithCSS.core.Tween;
+
+//BONUS EXPORTS
+// export * from "./DrawSVGPlugin.js";
+// export * from "./Physics2DPlugin.js";
+// export * from "./PhysicsPropsPlugin.js";
+// export * from "./ScrambleTextPlugin.js";
+// export * from "./CustomBounce.js";
+// export * from "./CustomWiggle.js";
+// export * from "./GSDevTools.js";
+// export * from "./InertiaPlugin.js";
+// export * from "./MorphSVGPlugin.js";
+// export * from "./MotionPathHelper.js";
+// export * from "./ScrollSmoother.js";
+// export * from "./SplitText.js";
+
+exports.Back = gsapCore.Back;
+exports.Bounce = gsapCore.Bounce;
+exports.Circ = gsapCore.Circ;
+exports.Cubic = gsapCore.Cubic;
+exports.Elastic = gsapCore.Elastic;
+exports.Expo = gsapCore.Expo;
+exports.Linear = gsapCore.Linear;
+exports.Power0 = gsapCore.Power0;
+exports.Power1 = gsapCore.Power1;
+exports.Power2 = gsapCore.Power2;
+exports.Power3 = gsapCore.Power3;
+exports.Power4 = gsapCore.Power4;
+exports.Quad = gsapCore.Quad;
+exports.Quart = gsapCore.Quart;
+exports.Quint = gsapCore.Quint;
+exports.Sine = gsapCore.Sine;
+exports.SteppedEase = gsapCore.SteppedEase;
+exports.Strong = gsapCore.Strong;
+exports.TimelineLite = gsapCore.Timeline;
+exports.TimelineMax = gsapCore.Timeline;
+exports.TweenLite = gsapCore.Tween;
+exports.clamp = gsapCore.clamp;
+exports.distribute = gsapCore.distribute;
+exports.getUnit = gsapCore.getUnit;
+exports.interpolate = gsapCore.interpolate;
+exports.mapRange = gsapCore.mapRange;
+exports.normalize = gsapCore.normalize;
+exports.pipe = gsapCore.pipe;
+exports.random = gsapCore.random;
+exports.selector = gsapCore.selector;
+exports.shuffle = gsapCore.shuffle;
+exports.snap = gsapCore.snap;
+exports.splitColor = gsapCore.splitColor;
+exports.toArray = gsapCore.toArray;
+exports.unitize = gsapCore.unitize;
+exports.wrap = gsapCore.wrap;
+exports.wrapYoyo = gsapCore.wrapYoyo;
+exports.CSSPlugin = CSSPlugin$1.CSSPlugin;
+exports.CustomEase = CustomEase.CustomEase;
+exports.Draggable = Draggable.Draggable;
+exports.EaselPlugin = EaselPlugin.EaselPlugin;
+exports.EasePack = EasePack.EasePack;
+exports.ExpoScaleEase = EasePack.ExpoScaleEase;
+exports.RoughEase = EasePack.RoughEase;
+exports.SlowMo = EasePack.SlowMo;
+exports.Flip = Flip.Flip;
+exports.MotionPathPlugin = MotionPathPlugin.MotionPathPlugin;
+exports.Observer = Observer.Observer;
+exports._getProxyProp = Observer._getProxyProp;
+exports._getScrollFunc = Observer._getScrollFunc;
+exports._getTarget = Observer._getTarget;
+exports._getVelocityProp = Observer._getVelocityProp;
+exports._horizontal = Observer._horizontal;
+exports._isViewport = Observer._isViewport;
+Object.defineProperty(exports, '_proxies', {
+	enumerable: true,
+	get: function () { return Observer._proxies; }
+});
+Object.defineProperty(exports, '_scrollers', {
+	enumerable: true,
+	get: function () { return Observer._scrollers; }
+});
+exports._vertical = Observer._vertical;
+exports.PixiPlugin = PixiPlugin.PixiPlugin;
+exports.ScrollToPlugin = ScrollToPlugin.ScrollToPlugin;
+exports.ScrollTrigger = ScrollTrigger.ScrollTrigger;
+exports.TextPlugin = TextPlugin.TextPlugin;
+exports.CSSRulePlugin = CSSRulePlugin;
+exports.TweenMax = TweenMaxWithCSS;
+exports.default = gsapWithCSS;
+exports.gsap = gsapWithCSS;
diff --git a/dist/all.d.cts b/dist/all.d.cts
new file mode 100644
index 0000000000000000000000000000000000000000..606d1a03d4b9dcf4cb93bfa0c48aa8a0ef95ec82
--- /dev/null
+++ b/dist/all.d.cts
@@ -0,0 +1,140 @@
+import { gsap as gsap$1 } from './gsap-core.cjs';
+export { Back, Bounce, Circ, Cubic, Elastic, Expo, Linear, Power0, Power1, Power2, Power3, Power4, Quad, Quart, Quint, Sine, SteppedEase, Strong, Timeline as TimelineLite, Timeline as TimelineMax, Tween as TweenLite, clamp, distribute, getUnit, interpolate, mapRange, normalize, pipe, random, selector, shuffle, snap, splitColor, toArray, unitize, wrap, wrapYoyo } from './gsap-core.cjs';
+import { CSSPlugin as CSSPlugin$1 } from './CSSPlugin.cjs';
+export { CustomEase } from './CustomEase.cjs';
+export { Draggable } from './Draggable.cjs';
+export { EaselPlugin } from './EaselPlugin.cjs';
+export { EasePack, ExpoScaleEase, RoughEase, SlowMo } from './EasePack.cjs';
+export { Flip } from './Flip.cjs';
+export { MotionPathPlugin } from './MotionPathPlugin.cjs';
+export { Observer, _getProxyProp, _getScrollFunc, _getTarget, _getVelocityProp, _horizontal, _isViewport, _proxies, _scrollers, _vertical } from './Observer.cjs';
+export { PixiPlugin } from './PixiPlugin.cjs';
+export { ScrollToPlugin } from './ScrollToPlugin.cjs';
+export { ScrollTrigger } from './ScrollTrigger.cjs';
+export { TextPlugin } from './TextPlugin.cjs';
+import './shared/gsap.41b79ecf.cjs';
+import './shared/gsap.7b0323e5.cjs';
+
+/*!
+ * CSSRulePlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _coreInitted, _doc, CSSPlugin,
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_checkRegister = () => {
+		if (!_coreInitted) {
+			_initCore();
+			if (!CSSPlugin) {
+				console.warn("Please gsap.registerPlugin(CSSPlugin, CSSRulePlugin)");
+			}
+		}
+		return _coreInitted;
+	},
+	_initCore = core => {
+		gsap = core || _getGSAP();
+		if (_windowExists()) {
+			_doc = document;
+		}
+		if (gsap) {
+			CSSPlugin = gsap.plugins.css;
+			if (CSSPlugin) {
+				_coreInitted = 1;
+			}
+		}
+	};
+
+
+const CSSRulePlugin = {
+	version: "3.12.5",
+	name: "cssRule",
+	init(target, value, tween, index, targets) {
+		if (!_checkRegister() || typeof(target.cssText) === "undefined") {
+			return false;
+		}
+		let div = target._gsProxy = target._gsProxy || _doc.createElement("div");
+		this.ss = target;
+		this.style = div.style;
+		div.style.cssText = target.cssText;
+		CSSPlugin.prototype.init.call(this, div, value, tween, index, targets); //we just offload all the work to the regular CSSPlugin and then copy the cssText back over to the rule in the render() method. This allows us to have all of the updates to CSSPlugin automatically flow through to CSSRulePlugin instead of having to maintain both
+	},
+	render(ratio, data) {
+		let pt = data._pt,
+			style = data.style,
+			ss = data.ss,
+			i;
+		while (pt) {
+			pt.r(ratio, pt.d);
+			pt = pt._next;
+		}
+		i = style.length;
+		while (--i > -1) {
+			ss[style[i]] = style[style[i]];
+		}
+	},
+	getRule(selector) {
+		_checkRegister();
+		let ruleProp = _doc.all ? "rules" : "cssRules",
+			styleSheets = _doc.styleSheets,
+			i = styleSheets.length,
+			pseudo = (selector.charAt(0) === ":"),
+			j, curSS, cs, a;
+		selector = (pseudo ? "" : ",") + selector.split("::").join(":").toLowerCase() + ","; //note: old versions of IE report tag name selectors as upper case, so we just change everything to lowercase.
+		if (pseudo) {
+			a = [];
+		}
+		while (i--) {
+			//Firefox may throw insecure operation errors when css is loaded from other domains, so try/catch.
+			try {
+				curSS = styleSheets[i][ruleProp];
+				if (!curSS) {
+					continue;
+				}
+				j = curSS.length;
+			} catch (e) {
+				console.warn(e);
+				continue;
+			}
+			while (--j > -1) {
+				cs = curSS[j];
+				if (cs.selectorText && ("," + cs.selectorText.split("::").join(":").toLowerCase() + ",").indexOf(selector) !== -1) { //note: IE adds an extra ":" to pseudo selectors, so .myClass:after becomes .myClass::after, so we need to strip the extra one out.
+					if (pseudo) {
+						a.push(cs.style);
+					} else {
+						return cs.style;
+					}
+				}
+			}
+		}
+		return a;
+	},
+	register: _initCore
+};
+
+_getGSAP() && gsap.registerPlugin(CSSRulePlugin);
+
+const gsapWithCSS = gsap$1.registerPlugin(CSSPlugin$1) || gsap$1, // to protect from tree shaking
+	TweenMaxWithCSS = gsapWithCSS.core.Tween;
+
+//BONUS EXPORTS
+// export * from "./DrawSVGPlugin.js";
+// export * from "./Physics2DPlugin.js";
+// export * from "./PhysicsPropsPlugin.js";
+// export * from "./ScrambleTextPlugin.js";
+// export * from "./CustomBounce.js";
+// export * from "./CustomWiggle.js";
+// export * from "./GSDevTools.js";
+// export * from "./InertiaPlugin.js";
+// export * from "./MorphSVGPlugin.js";
+// export * from "./MotionPathHelper.js";
+// export * from "./ScrollSmoother.js";
+// export * from "./SplitText.js";
+
+export { CSSPlugin$1 as CSSPlugin, CSSRulePlugin, TweenMaxWithCSS as TweenMax, gsapWithCSS as default, gsapWithCSS as gsap };
diff --git a/dist/all.d.mts b/dist/all.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..07522b3a7192acb5ee77aec196cb9cff34e73796
--- /dev/null
+++ b/dist/all.d.mts
@@ -0,0 +1,140 @@
+import { gsap as gsap$1 } from './gsap-core.mjs';
+export { Back, Bounce, Circ, Cubic, Elastic, Expo, Linear, Power0, Power1, Power2, Power3, Power4, Quad, Quart, Quint, Sine, SteppedEase, Strong, Timeline as TimelineLite, Timeline as TimelineMax, Tween as TweenLite, clamp, distribute, getUnit, interpolate, mapRange, normalize, pipe, random, selector, shuffle, snap, splitColor, toArray, unitize, wrap, wrapYoyo } from './gsap-core.mjs';
+import { CSSPlugin as CSSPlugin$1 } from './CSSPlugin.mjs';
+export { CustomEase } from './CustomEase.mjs';
+export { Draggable } from './Draggable.mjs';
+export { EaselPlugin } from './EaselPlugin.mjs';
+export { EasePack, ExpoScaleEase, RoughEase, SlowMo } from './EasePack.mjs';
+export { Flip } from './Flip.mjs';
+export { MotionPathPlugin } from './MotionPathPlugin.mjs';
+export { Observer, _getProxyProp, _getScrollFunc, _getTarget, _getVelocityProp, _horizontal, _isViewport, _proxies, _scrollers, _vertical } from './Observer.mjs';
+export { PixiPlugin } from './PixiPlugin.mjs';
+export { ScrollToPlugin } from './ScrollToPlugin.mjs';
+export { ScrollTrigger } from './ScrollTrigger.mjs';
+export { TextPlugin } from './TextPlugin.mjs';
+import './shared/gsap.41b79ecf.mjs';
+import './shared/gsap.7b0323e5.mjs';
+
+/*!
+ * CSSRulePlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _coreInitted, _doc, CSSPlugin,
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_checkRegister = () => {
+		if (!_coreInitted) {
+			_initCore();
+			if (!CSSPlugin) {
+				console.warn("Please gsap.registerPlugin(CSSPlugin, CSSRulePlugin)");
+			}
+		}
+		return _coreInitted;
+	},
+	_initCore = core => {
+		gsap = core || _getGSAP();
+		if (_windowExists()) {
+			_doc = document;
+		}
+		if (gsap) {
+			CSSPlugin = gsap.plugins.css;
+			if (CSSPlugin) {
+				_coreInitted = 1;
+			}
+		}
+	};
+
+
+const CSSRulePlugin = {
+	version: "3.12.5",
+	name: "cssRule",
+	init(target, value, tween, index, targets) {
+		if (!_checkRegister() || typeof(target.cssText) === "undefined") {
+			return false;
+		}
+		let div = target._gsProxy = target._gsProxy || _doc.createElement("div");
+		this.ss = target;
+		this.style = div.style;
+		div.style.cssText = target.cssText;
+		CSSPlugin.prototype.init.call(this, div, value, tween, index, targets); //we just offload all the work to the regular CSSPlugin and then copy the cssText back over to the rule in the render() method. This allows us to have all of the updates to CSSPlugin automatically flow through to CSSRulePlugin instead of having to maintain both
+	},
+	render(ratio, data) {
+		let pt = data._pt,
+			style = data.style,
+			ss = data.ss,
+			i;
+		while (pt) {
+			pt.r(ratio, pt.d);
+			pt = pt._next;
+		}
+		i = style.length;
+		while (--i > -1) {
+			ss[style[i]] = style[style[i]];
+		}
+	},
+	getRule(selector) {
+		_checkRegister();
+		let ruleProp = _doc.all ? "rules" : "cssRules",
+			styleSheets = _doc.styleSheets,
+			i = styleSheets.length,
+			pseudo = (selector.charAt(0) === ":"),
+			j, curSS, cs, a;
+		selector = (pseudo ? "" : ",") + selector.split("::").join(":").toLowerCase() + ","; //note: old versions of IE report tag name selectors as upper case, so we just change everything to lowercase.
+		if (pseudo) {
+			a = [];
+		}
+		while (i--) {
+			//Firefox may throw insecure operation errors when css is loaded from other domains, so try/catch.
+			try {
+				curSS = styleSheets[i][ruleProp];
+				if (!curSS) {
+					continue;
+				}
+				j = curSS.length;
+			} catch (e) {
+				console.warn(e);
+				continue;
+			}
+			while (--j > -1) {
+				cs = curSS[j];
+				if (cs.selectorText && ("," + cs.selectorText.split("::").join(":").toLowerCase() + ",").indexOf(selector) !== -1) { //note: IE adds an extra ":" to pseudo selectors, so .myClass:after becomes .myClass::after, so we need to strip the extra one out.
+					if (pseudo) {
+						a.push(cs.style);
+					} else {
+						return cs.style;
+					}
+				}
+			}
+		}
+		return a;
+	},
+	register: _initCore
+};
+
+_getGSAP() && gsap.registerPlugin(CSSRulePlugin);
+
+const gsapWithCSS = gsap$1.registerPlugin(CSSPlugin$1) || gsap$1, // to protect from tree shaking
+	TweenMaxWithCSS = gsapWithCSS.core.Tween;
+
+//BONUS EXPORTS
+// export * from "./DrawSVGPlugin.js";
+// export * from "./Physics2DPlugin.js";
+// export * from "./PhysicsPropsPlugin.js";
+// export * from "./ScrambleTextPlugin.js";
+// export * from "./CustomBounce.js";
+// export * from "./CustomWiggle.js";
+// export * from "./GSDevTools.js";
+// export * from "./InertiaPlugin.js";
+// export * from "./MorphSVGPlugin.js";
+// export * from "./MotionPathHelper.js";
+// export * from "./ScrollSmoother.js";
+// export * from "./SplitText.js";
+
+export { CSSPlugin$1 as CSSPlugin, CSSRulePlugin, TweenMaxWithCSS as TweenMax, gsapWithCSS as default, gsapWithCSS as gsap };
diff --git a/src/CSSRulePlugin.js b/dist/all.d.ts
similarity index 59%
rename from src/CSSRulePlugin.js
rename to dist/all.d.ts
index b44cf54de4baa119c643aaa8549ac5d820d034b1..7e4e6aa51e2e6546d4987b1d238ee9fa5b0278a6 100644
--- a/src/CSSRulePlugin.js
+++ b/dist/all.d.ts
@@ -1,3 +1,20 @@
+import { gsap as gsap$1 } from './gsap-core.js';
+export { Back, Bounce, Circ, Cubic, Elastic, Expo, Linear, Power0, Power1, Power2, Power3, Power4, Quad, Quart, Quint, Sine, SteppedEase, Strong, Timeline as TimelineLite, Timeline as TimelineMax, Tween as TweenLite, clamp, distribute, getUnit, interpolate, mapRange, normalize, pipe, random, selector, shuffle, snap, splitColor, toArray, unitize, wrap, wrapYoyo } from './gsap-core.js';
+import { CSSPlugin as CSSPlugin$1 } from './CSSPlugin.js';
+export { CustomEase } from './CustomEase.js';
+export { Draggable } from './Draggable.js';
+export { EaselPlugin } from './EaselPlugin.js';
+export { EasePack, ExpoScaleEase, RoughEase, SlowMo } from './EasePack.js';
+export { Flip } from './Flip.js';
+export { MotionPathPlugin } from './MotionPathPlugin.js';
+export { Observer, _getProxyProp, _getScrollFunc, _getTarget, _getVelocityProp, _horizontal, _isViewport, _proxies, _scrollers, _vertical } from './Observer.js';
+export { PixiPlugin } from './PixiPlugin.js';
+export { ScrollToPlugin } from './ScrollToPlugin.js';
+export { ScrollTrigger } from './ScrollTrigger.js';
+export { TextPlugin } from './TextPlugin.js';
+import './shared/gsap.41b79ecf.js';
+import './shared/gsap.7b0323e5.js';
+
 /*!
  * CSSRulePlugin 3.12.5
  * https://gsap.com
@@ -9,7 +26,7 @@
 */
 /* eslint-disable */
 
-let gsap, _coreInitted, _win, _doc, CSSPlugin,
+let gsap, _coreInitted, _doc, CSSPlugin,
 	_windowExists = () => typeof(window) !== "undefined",
 	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
 	_checkRegister = () => {
@@ -24,7 +41,6 @@ let gsap, _coreInitted, _win, _doc, CSSPlugin,
 	_initCore = core => {
 		gsap = core || _getGSAP();
 		if (_windowExists()) {
-			_win = window;
 			_doc = document;
 		}
 		if (gsap) {
@@ -36,7 +52,7 @@ let gsap, _coreInitted, _win, _doc, CSSPlugin,
 	};
 
 
-export const CSSRulePlugin = {
+const CSSRulePlugin = {
 	version: "3.12.5",
 	name: "cssRule",
 	init(target, value, tween, index, targets) {
@@ -104,4 +120,21 @@ export const CSSRulePlugin = {
 
 _getGSAP() && gsap.registerPlugin(CSSRulePlugin);
 
-export { CSSRulePlugin as default };
\ No newline at end of file
+const gsapWithCSS = gsap$1.registerPlugin(CSSPlugin$1) || gsap$1, // to protect from tree shaking
+	TweenMaxWithCSS = gsapWithCSS.core.Tween;
+
+//BONUS EXPORTS
+// export * from "./DrawSVGPlugin.js";
+// export * from "./Physics2DPlugin.js";
+// export * from "./PhysicsPropsPlugin.js";
+// export * from "./ScrambleTextPlugin.js";
+// export * from "./CustomBounce.js";
+// export * from "./CustomWiggle.js";
+// export * from "./GSDevTools.js";
+// export * from "./InertiaPlugin.js";
+// export * from "./MorphSVGPlugin.js";
+// export * from "./MotionPathHelper.js";
+// export * from "./ScrollSmoother.js";
+// export * from "./SplitText.js";
+
+export { CSSPlugin$1 as CSSPlugin, CSSRulePlugin, TweenMaxWithCSS as TweenMax, gsapWithCSS as default, gsapWithCSS as gsap };
diff --git a/dist/all.js b/dist/all.js
deleted file mode 100644
index ad17d202b7eb7bedf9574143bcd8c454dcd0ee5e..0000000000000000000000000000000000000000
diff --git a/dist/all.mjs b/dist/all.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..07522b3a7192acb5ee77aec196cb9cff34e73796
--- /dev/null
+++ b/dist/all.mjs
@@ -0,0 +1,140 @@
+import { gsap as gsap$1 } from './gsap-core.mjs';
+export { Back, Bounce, Circ, Cubic, Elastic, Expo, Linear, Power0, Power1, Power2, Power3, Power4, Quad, Quart, Quint, Sine, SteppedEase, Strong, Timeline as TimelineLite, Timeline as TimelineMax, Tween as TweenLite, clamp, distribute, getUnit, interpolate, mapRange, normalize, pipe, random, selector, shuffle, snap, splitColor, toArray, unitize, wrap, wrapYoyo } from './gsap-core.mjs';
+import { CSSPlugin as CSSPlugin$1 } from './CSSPlugin.mjs';
+export { CustomEase } from './CustomEase.mjs';
+export { Draggable } from './Draggable.mjs';
+export { EaselPlugin } from './EaselPlugin.mjs';
+export { EasePack, ExpoScaleEase, RoughEase, SlowMo } from './EasePack.mjs';
+export { Flip } from './Flip.mjs';
+export { MotionPathPlugin } from './MotionPathPlugin.mjs';
+export { Observer, _getProxyProp, _getScrollFunc, _getTarget, _getVelocityProp, _horizontal, _isViewport, _proxies, _scrollers, _vertical } from './Observer.mjs';
+export { PixiPlugin } from './PixiPlugin.mjs';
+export { ScrollToPlugin } from './ScrollToPlugin.mjs';
+export { ScrollTrigger } from './ScrollTrigger.mjs';
+export { TextPlugin } from './TextPlugin.mjs';
+import './shared/gsap.41b79ecf.mjs';
+import './shared/gsap.7b0323e5.mjs';
+
+/*!
+ * CSSRulePlugin 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let gsap, _coreInitted, _doc, CSSPlugin,
+	_windowExists = () => typeof(window) !== "undefined",
+	_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),
+	_checkRegister = () => {
+		if (!_coreInitted) {
+			_initCore();
+			if (!CSSPlugin) {
+				console.warn("Please gsap.registerPlugin(CSSPlugin, CSSRulePlugin)");
+			}
+		}
+		return _coreInitted;
+	},
+	_initCore = core => {
+		gsap = core || _getGSAP();
+		if (_windowExists()) {
+			_doc = document;
+		}
+		if (gsap) {
+			CSSPlugin = gsap.plugins.css;
+			if (CSSPlugin) {
+				_coreInitted = 1;
+			}
+		}
+	};
+
+
+const CSSRulePlugin = {
+	version: "3.12.5",
+	name: "cssRule",
+	init(target, value, tween, index, targets) {
+		if (!_checkRegister() || typeof(target.cssText) === "undefined") {
+			return false;
+		}
+		let div = target._gsProxy = target._gsProxy || _doc.createElement("div");
+		this.ss = target;
+		this.style = div.style;
+		div.style.cssText = target.cssText;
+		CSSPlugin.prototype.init.call(this, div, value, tween, index, targets); //we just offload all the work to the regular CSSPlugin and then copy the cssText back over to the rule in the render() method. This allows us to have all of the updates to CSSPlugin automatically flow through to CSSRulePlugin instead of having to maintain both
+	},
+	render(ratio, data) {
+		let pt = data._pt,
+			style = data.style,
+			ss = data.ss,
+			i;
+		while (pt) {
+			pt.r(ratio, pt.d);
+			pt = pt._next;
+		}
+		i = style.length;
+		while (--i > -1) {
+			ss[style[i]] = style[style[i]];
+		}
+	},
+	getRule(selector) {
+		_checkRegister();
+		let ruleProp = _doc.all ? "rules" : "cssRules",
+			styleSheets = _doc.styleSheets,
+			i = styleSheets.length,
+			pseudo = (selector.charAt(0) === ":"),
+			j, curSS, cs, a;
+		selector = (pseudo ? "" : ",") + selector.split("::").join(":").toLowerCase() + ","; //note: old versions of IE report tag name selectors as upper case, so we just change everything to lowercase.
+		if (pseudo) {
+			a = [];
+		}
+		while (i--) {
+			//Firefox may throw insecure operation errors when css is loaded from other domains, so try/catch.
+			try {
+				curSS = styleSheets[i][ruleProp];
+				if (!curSS) {
+					continue;
+				}
+				j = curSS.length;
+			} catch (e) {
+				console.warn(e);
+				continue;
+			}
+			while (--j > -1) {
+				cs = curSS[j];
+				if (cs.selectorText && ("," + cs.selectorText.split("::").join(":").toLowerCase() + ",").indexOf(selector) !== -1) { //note: IE adds an extra ":" to pseudo selectors, so .myClass:after becomes .myClass::after, so we need to strip the extra one out.
+					if (pseudo) {
+						a.push(cs.style);
+					} else {
+						return cs.style;
+					}
+				}
+			}
+		}
+		return a;
+	},
+	register: _initCore
+};
+
+_getGSAP() && gsap.registerPlugin(CSSRulePlugin);
+
+const gsapWithCSS = gsap$1.registerPlugin(CSSPlugin$1) || gsap$1, // to protect from tree shaking
+	TweenMaxWithCSS = gsapWithCSS.core.Tween;
+
+//BONUS EXPORTS
+// export * from "./DrawSVGPlugin.js";
+// export * from "./Physics2DPlugin.js";
+// export * from "./PhysicsPropsPlugin.js";
+// export * from "./ScrambleTextPlugin.js";
+// export * from "./CustomBounce.js";
+// export * from "./CustomWiggle.js";
+// export * from "./GSDevTools.js";
+// export * from "./InertiaPlugin.js";
+// export * from "./MorphSVGPlugin.js";
+// export * from "./MotionPathHelper.js";
+// export * from "./ScrollSmoother.js";
+// export * from "./SplitText.js";
+
+export { CSSPlugin$1 as CSSPlugin, CSSRulePlugin, TweenMaxWithCSS as TweenMax, gsapWithCSS as default, gsapWithCSS as gsap };
diff --git a/dist/gsap-core.cjs b/dist/gsap-core.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..23e18a72940d3fc4cfe73e405b655c45ef778b8e
--- /dev/null
+++ b/dist/gsap-core.cjs
@@ -0,0 +1,3325 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+/*!
+ * GSAP 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let _config = {
+		autoSleep: 120,
+		force3D: "auto",
+		nullTargetWarn: 1,
+		units: {lineHeight:""}
+	},
+	_defaults = {
+		duration: .5,
+		overwrite: false,
+		delay: 0
+	},
+	_suppressOverwrites,
+	_reverting, _context,
+	_bigNum = 1e8,
+	_tinyNum = 1 / _bigNum,
+	_2PI = Math.PI * 2,
+	_HALF_PI = _2PI / 4,
+	_gsID = 0,
+	_sqrt = Math.sqrt,
+	_cos = Math.cos,
+	_sin = Math.sin,
+	_isString = value => typeof(value) === "string",
+	_isFunction = value => typeof(value) === "function",
+	_isNumber = value => typeof(value) === "number",
+	_isUndefined = value => typeof(value) === "undefined",
+	_isObject = value => typeof(value) === "object",
+	_isNotFalse = value => value !== false,
+	_windowExists = () => typeof(window) !== "undefined",
+	_isFuncOrString = value => _isFunction(value) || _isString(value),
+	_isTypedArray = (typeof ArrayBuffer === "function" && ArrayBuffer.isView) || function() {}, // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().
+	_isArray = Array.isArray,
+	_strictNumExp = /(?:-?\.?\d|\.)+/gi, //only numbers (including negatives and decimals) but NOT relative values.
+	_numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g, //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
+	_numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
+	_complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi, //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.
+	_relExp = /[+-]=-?[.\d]+/,
+	_delimitedValueExp = /[^,'"\[\]\s]+/gi, // previously /[#\-+.]*\b[a-z\d\-=+%.]+/gi but didn't catch special characters.
+	_unitExp = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,
+	_globalTimeline, _win, _coreInitted, _doc,
+	_globals = {},
+	_installScope = {},
+	_coreReady,
+	_install = scope => (_installScope = _merge(scope, _globals)) && gsap,
+	_missingPlugin = (property, value) => console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()"),
+	_warn = (message, suppress) => !suppress && console.warn(message),
+	_addGlobal = (name, obj) => (name && (_globals[name] = obj) && (_installScope && (_installScope[name] = obj))) || _globals,
+	_emptyFunc = () => 0,
+	_startAtRevertConfig = {suppressEvents: true, isStart: true, kill: false},
+	_revertConfigNoKill = {suppressEvents: true, kill: false},
+	_revertConfig = {suppressEvents: true},
+	_reservedProps = {},
+	_lazyTweens = [],
+	_lazyLookup = {},
+	_lastRenderedFrame,
+	_plugins = {},
+	_effects = {},
+	_nextGCFrame = 30,
+	_harnessPlugins = [],
+	_callbackNames = "",
+	_harness = targets => {
+		let target = targets[0],
+			harnessPlugin, i;
+		_isObject(target) || _isFunction(target) || (targets = [targets]);
+		if (!(harnessPlugin = (target._gsap || {}).harness)) { // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)
+			i = _harnessPlugins.length;
+			while (i-- && !_harnessPlugins[i].targetTest(target)) {	}
+			harnessPlugin = _harnessPlugins[i];
+		}
+		i = targets.length;
+		while (i--) {
+			(targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin)))) || targets.splice(i, 1);
+		}
+		return targets;
+	},
+	_getCache = target => target._gsap || _harness(toArray(target))[0]._gsap,
+	_getProperty = (target, property, v) => (v = target[property]) && _isFunction(v) ? target[property]() : (_isUndefined(v) && target.getAttribute && target.getAttribute(property)) || v,
+	_forEachName = (names, func) => ((names = names.split(",")).forEach(func)) || names, //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).
+	_round = value => Math.round(value * 100000) / 100000 || 0,
+	_roundPrecise = value => Math.round(value * 10000000) / 10000000 || 0, // increased precision mostly for timing values.
+	_parseRelative = (start, value) => {
+		let operator = value.charAt(0),
+			end = parseFloat(value.substr(2));
+		start = parseFloat(start);
+		return operator === "+" ? start + end : operator === "-" ? start - end : operator === "*" ? start * end : start / end;
+	},
+	_arrayContainsAny = (toSearch, toFind) => { //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.
+		let l = toFind.length,
+			i = 0;
+		for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) { }
+		return (i < l);
+	},
+	_lazyRender = () => {
+		let l = _lazyTweens.length,
+			a = _lazyTweens.slice(0),
+			i, tween;
+		_lazyLookup = {};
+		_lazyTweens.length = 0;
+		for (i = 0; i < l; i++) {
+			tween = a[i];
+			tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
+		}
+	},
+	_lazySafeRender = (animation, time, suppressEvents, force) => {
+		_lazyTweens.length && !_reverting && _lazyRender();
+		animation.render(time, suppressEvents, force || (_reverting && time < 0 && (animation._initted || animation._startAt)));
+		_lazyTweens.length && !_reverting && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
+	},
+	_numericIfPossible = value => {
+		let n = parseFloat(value);
+		return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;
+	},
+	_passThrough = p => p,
+	_setDefaults = (obj, defaults) => {
+		for (let p in defaults) {
+			(p in obj) || (obj[p] = defaults[p]);
+		}
+		return obj;
+	},
+	_setKeyframeDefaults = excludeDuration => (obj, defaults) => {
+		for (let p in defaults) {
+			(p in obj) || (p === "duration" && excludeDuration) || p === "ease" || (obj[p] = defaults[p]);
+		}
+	},
+	_merge = (base, toMerge) => {
+		for (let p in toMerge) {
+			base[p] = toMerge[p];
+		}
+		return base;
+	},
+	_mergeDeep = (base, toMerge) => {
+		for (let p in toMerge) {
+			p !== "__proto__" && p !== "constructor" && p !== "prototype" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);
+		}
+		return base;
+	},
+	_copyExcluding = (obj, excluding) => {
+		let copy = {},
+			p;
+		for (p in obj) {
+			(p in excluding) || (copy[p] = obj[p]);
+		}
+		return copy;
+	},
+	_inheritDefaults = vars => {
+		let parent = vars.parent || _globalTimeline,
+			func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;
+		if (_isNotFalse(vars.inherit)) {
+			while (parent) {
+				func(vars, parent.vars.defaults);
+				parent = parent.parent || parent._dp;
+			}
+		}
+		return vars;
+	},
+	_arraysMatch = (a1, a2) => {
+		let i = a1.length,
+			match = i === a2.length;
+		while (match && i-- && a1[i] === a2[i]) { }
+		return i < 0;
+	},
+	_addLinkedListItem = (parent, child, firstProp = "_first", lastProp = "_last", sortBy) => {
+		let prev = parent[lastProp],
+			t;
+		if (sortBy) {
+			t = child[sortBy];
+			while (prev && prev[sortBy] > t) {
+				prev = prev._prev;
+			}
+		}
+		if (prev) {
+			child._next = prev._next;
+			prev._next = child;
+		} else {
+			child._next = parent[firstProp];
+			parent[firstProp] = child;
+		}
+		if (child._next) {
+			child._next._prev = child;
+		} else {
+			parent[lastProp] = child;
+		}
+		child._prev = prev;
+		child.parent = child._dp = parent;
+		return child;
+	},
+	_removeLinkedListItem = (parent, child, firstProp = "_first", lastProp = "_last") => {
+		let prev = child._prev,
+			next = child._next;
+		if (prev) {
+			prev._next = next;
+		} else if (parent[firstProp] === child) {
+			parent[firstProp] = next;
+		}
+		if (next) {
+			next._prev = prev;
+		} else if (parent[lastProp] === child) {
+			parent[lastProp] = prev;
+		}
+		child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.
+	},
+	_removeFromParent = (child, onlyIfParentHasAutoRemove) => {
+		child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove && child.parent.remove(child);
+		child._act = 0;
+	},
+	_uncache = (animation, child) => {
+		if (animation && (!child || child._end > animation._dur || child._start < 0)) { // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)
+			let a = animation;
+			while (a) {
+				a._dirty = 1;
+				a = a.parent;
+			}
+		}
+		return animation;
+	},
+	_recacheAncestors = animation => {
+		let parent = animation.parent;
+		while (parent && parent.parent) { //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
+			parent._dirty = 1;
+			parent.totalDuration();
+			parent = parent.parent;
+		}
+		return animation;
+	},
+	_rewindStartAt = (tween, totalTime, suppressEvents, force) => tween._startAt && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : (tween.vars.immediateRender && !tween.vars.autoRevert) || tween._startAt.render(totalTime, true, force)),
+	_hasNoPausedAncestors = animation => !animation || (animation._ts && _hasNoPausedAncestors(animation.parent)),
+	_elapsedCycleDuration = animation => animation._repeat ? _animationCycle(animation._tTime, (animation = animation.duration() + animation._rDelay)) * animation : 0,
+	// feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.
+	_animationCycle = (tTime, cycleDuration) => {
+		let whole = Math.floor(tTime /= cycleDuration);
+		return tTime && (whole === tTime) ? whole - 1 : whole;
+	},
+	_parentToChildTotalTime = (parentTime, child) => (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : (child._dirty ? child.totalDuration() : child._tDur)),
+	_setEnd = animation => (animation._end = _roundPrecise(animation._start + ((animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum)) || 0))),
+	_alignPlayhead = (animation, totalTime) => { // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.
+		let parent = animation._dp;
+		if (parent && parent.smoothChildTiming && animation._ts) {
+			animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));
+			_setEnd(animation);
+			parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
+		}
+		return animation;
+	},
+	/*
+	_totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
+		let cycleDuration = duration + repeatDelay,
+			time = _round(clampedTotalTime % cycleDuration);
+		if (time > duration) {
+			time = duration;
+		}
+		return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
+	},
+	*/
+	_postAddChecks = (timeline, child) => {
+		let t;
+		if (child._time || (!child._dur && child._initted) || (child._start < timeline._time && (child._dur || !child.add))) { // in case, for example, the _start is moved on a tween that has already rendered, or if it's being inserted into a timeline BEFORE where the playhead is currently. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning. Special case: if it's a timeline (has .add() method) and no duration, we can skip rendering because the user may be populating it AFTER adding it to a parent timeline (unconventional, but possible, and we wouldn't want it to get removed if the parent's autoRemoveChildren is true).
+			t = _parentToChildTotalTime(timeline.rawTime(), child);
+			if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
+				child.render(t, true);
+			}
+		}
+		//if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.
+		if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
+			//in case any of the ancestors had completed but should now be enabled...
+			if (timeline._dur < timeline.duration()) {
+				t = timeline;
+				while (t._dp) {
+					(t.rawTime() >= 0) && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.
+					t = t._dp;
+				}
+			}
+			timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.
+		}
+	},
+	_addToTimeline = (timeline, child, position, skipChecks) => {
+		child.parent && _removeFromParent(child);
+		child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);
+		child._end = _roundPrecise(child._start + ((child.totalDuration() / Math.abs(child.timeScale())) || 0));
+		_addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);
+		_isFromOrFromStart(child) || (timeline._recent = child);
+		skipChecks || _postAddChecks(timeline, child);
+		timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime); // if the timeline is reversed and the new child makes it longer, we may need to adjust the parent's _start (push it back)
+		return timeline;
+	},
+	_scrollTrigger = (animation, trigger) => (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation),
+	_attemptInitTween = (tween, time, force, suppressEvents, tTime) => {
+		_initTween(tween, time, tTime);
+		if (!tween._initted) {
+			return 1;
+		}
+		if (!force && tween._pt && !_reverting && ((tween._dur && tween.vars.lazy !== false) || (!tween._dur && tween.vars.lazy)) && _lastRenderedFrame !== _ticker.frame) {
+			_lazyTweens.push(tween);
+			tween._lazy = [tTime, suppressEvents];
+			return 1;
+		}
+	},
+	_parentPlayheadIsBeforeStart = ({parent}) => parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent)), // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0
+	_isFromOrFromStart = ({data}) => data === "isFromStart" || data === "isStart",
+	_renderZeroDurationTween = (tween, totalTime, suppressEvents, force) => {
+		let prevRatio = tween.ratio,
+			ratio = totalTime < 0 || (!totalTime && ((!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween))) || ((tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)))) ? 0 : 1, // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the "startAt" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any "from" and "fromTo" startAt tweens are rendered the first time at a ratio of 1.
+			repeatDelay = tween._rDelay,
+			tTime = 0,
+			pt, iteration, prevIteration;
+		if (repeatDelay && tween._repeat) { // in case there's a zero-duration tween that has a repeat with a repeatDelay
+			tTime = _clamp(0, tween._tDur, totalTime);
+			iteration = _animationCycle(tTime, repeatDelay);
+			tween._yoyo && (iteration & 1) && (ratio = 1 - ratio);
+			if (iteration !== _animationCycle(tween._tTime, repeatDelay)) { // if iteration changed
+				prevRatio = 1 - ratio;
+				tween.vars.repeatRefresh && tween._initted && tween.invalidate();
+			}
+		}
+		if (ratio !== prevRatio || _reverting || force || tween._zTime === _tinyNum || (!totalTime && tween._zTime)) {
+			if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) { // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
+				return;
+			}
+			prevIteration = tween._zTime;
+			tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.
+			suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.
+			tween.ratio = ratio;
+			tween._from && (ratio = 1 - ratio);
+			tween._time = 0;
+			tween._tTime = tTime;
+			pt = tween._pt;
+			while (pt) {
+				pt.r(ratio, pt.d);
+				pt = pt._next;
+			}
+			totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);
+			tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
+			tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");
+			if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
+				ratio && _removeFromParent(tween, 1);
+				if (!suppressEvents && !_reverting) {
+					_callback(tween, (ratio ? "onComplete" : "onReverseComplete"), true);
+					tween._prom && tween._prom();
+				}
+			}
+		} else if (!tween._zTime) {
+			tween._zTime = totalTime;
+		}
+	},
+	_findNextPauseTween = (animation, prevTime, time) => {
+		let child;
+		if (time > prevTime) {
+			child = animation._first;
+			while (child && child._start <= time) {
+				if (child.data === "isPause" && child._start > prevTime) {
+					return child;
+				}
+				child = child._next;
+			}
+		} else {
+			child = animation._last;
+			while (child && child._start >= time) {
+				if (child.data === "isPause" && child._start < prevTime) {
+					return child;
+				}
+				child = child._prev;
+			}
+		}
+	},
+	_setDuration = (animation, duration, skipUncache, leavePlayhead) => {
+		let repeat = animation._repeat,
+			dur = _roundPrecise(duration) || 0,
+			totalProgress = animation._tTime / animation._tDur;
+		totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
+		animation._dur = dur;
+		animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + (animation._rDelay * repeat));
+		totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, (animation._tTime = animation._tDur * totalProgress));
+		animation.parent && _setEnd(animation);
+		skipUncache || _uncache(animation.parent, animation);
+		return animation;
+	},
+	_onUpdateTotalDuration = animation => (animation instanceof Timeline) ? _uncache(animation) : _setDuration(animation, animation._dur),
+	_zeroPosition = {_start:0, endTime:_emptyFunc, totalDuration:_emptyFunc},
+	_parsePosition = (animation, position, percentAnimation) => {
+		let labels = animation.labels,
+			recent = animation._recent || _zeroPosition,
+			clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur, //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
+			i, offset, isPercent;
+		if (_isString(position) && (isNaN(position) || (position in labels))) { //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
+			offset = position.charAt(0);
+			isPercent = position.substr(-1) === "%";
+			i = position.indexOf("=");
+			if (offset === "<" || offset === ">") {
+				i >= 0 && (position = position.replace(/=/, ""));
+				return (offset === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);
+			}
+			if (i < 0) {
+				(position in labels) || (labels[position] = clippedDuration);
+				return labels[position];
+			}
+			offset = parseFloat(position.charAt(i-1) + position.substr(i+1));
+			if (isPercent && percentAnimation) {
+				offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();
+			}
+			return (i > 1) ? _parsePosition(animation, position.substr(0, i-1), percentAnimation) + offset : clippedDuration + offset;
+		}
+		return (position == null) ? clippedDuration : +position;
+	},
+	_createTweenType = (type, params, timeline) => {
+		let isLegacy = _isNumber(params[1]),
+			varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
+			vars = params[varsIndex],
+			irVars, parent;
+		isLegacy && (vars.duration = params[1]);
+		vars.parent = timeline;
+		if (type) {
+			irVars = vars;
+			parent = timeline;
+			while (parent && !("immediateRender" in irVars)) { // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.
+				irVars = parent.vars.defaults || {};
+				parent = _isNotFalse(parent.vars.inherit) && parent.parent;
+			}
+			vars.immediateRender = _isNotFalse(irVars.immediateRender);
+			type < 2 ? (vars.runBackwards = 1) : (vars.startAt = params[varsIndex - 1]); // "from" vars
+		}
+		return new Tween(params[0], vars, params[varsIndex + 1]);
+	},
+	_conditionalReturn = (value, func) => value || value === 0 ? func(value) : func,
+	_clamp = (min, max, value) => value < min ? min : value > max ? max : value,
+	getUnit = (value, v) => !_isString(value) || !(v = _unitExp.exec(value)) ? "" : v[1], // note: protect against padded numbers as strings, like "100.100". That shouldn't return "00" as the unit. If it's numeric, return no unit.
+	clamp = (min, max, value) => _conditionalReturn(value, v => _clamp(min, max, v)),
+	_slice = [].slice,
+	_isArrayLike = (value, nonEmpty) => value && (_isObject(value) && "length" in value && ((!nonEmpty && !value.length) || ((value.length - 1) in value && _isObject(value[0]))) && !value.nodeType && value !== _win),
+	_flatten = (ar, leaveStrings, accumulator = []) => ar.forEach(value => (_isString(value) && !leaveStrings) || _isArrayLike(value, 1) ? accumulator.push(...toArray(value)) : accumulator.push(value)) || accumulator,
+	//takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
+	toArray = (value, scope, leaveStrings) => _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [],
+	selector = value => {
+		value = toArray(value)[0] || _warn("Invalid scope") || {};
+		return v => {
+			let el = value.current || value.nativeElement || value;
+			return toArray(v, el.querySelectorAll ? el : el === value ? _warn("Invalid scope") || _doc.createElement("div") : value);
+		};
+	},
+	shuffle = a => a.sort(() => .5 - Math.random()), // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = Math.floor(Math.random() * i), v = a[--i], a[i] = a[j], a[j] = v); return a;
+	//for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following
+	distribute = v => {
+		if (_isFunction(v)) {
+			return v;
+		}
+		let vars = _isObject(v) ? v : {each:v}, //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.
+			ease = _parseEase(vars.ease),
+			from = vars.from || 0,
+			base = parseFloat(vars.base) || 0,
+			cache = {},
+			isDecimal = (from > 0 && from < 1),
+			ratios = isNaN(from) || isDecimal,
+			axis = vars.axis,
+			ratioX = from,
+			ratioY = from;
+		if (_isString(from)) {
+			ratioX = ratioY = {center:.5, edges:.5, end:1}[from] || 0;
+		} else if (!isDecimal && ratios) {
+			ratioX = from[0];
+			ratioY = from[1];
+		}
+		return (i, target, a) => {
+			let l = (a || vars).length,
+				distances = cache[l],
+				originX, originY, x, y, d, j, max, min, wrapAt;
+			if (!distances) {
+				wrapAt = (vars.grid === "auto") ? 0 : (vars.grid || [1, _bigNum])[1];
+				if (!wrapAt) {
+					max = -_bigNum;
+					while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) { }
+					wrapAt < l && wrapAt--;
+				}
+				distances = cache[l] = [];
+				originX = ratios ? (Math.min(wrapAt, l) * ratioX) - .5 : from % wrapAt;
+				originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : (from / wrapAt) | 0;
+				max = 0;
+				min = _bigNum;
+				for (j = 0; j < l; j++) {
+					x = (j % wrapAt) - originX;
+					y = originY - ((j / wrapAt) | 0);
+					distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs((axis === "y") ? y : x);
+					(d > max) && (max = d);
+					(d < min) && (min = d);
+				}
+				(from === "random") && shuffle(distances);
+				distances.max = max - min;
+				distances.min = min;
+				distances.v = l = (parseFloat(vars.amount) || (parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt)) || 0) * (from === "edges" ? -1 : 1);
+				distances.b = (l < 0) ? base - l : base;
+				distances.u = getUnit(vars.amount || vars.each) || 0; //unit
+				ease = (ease && l < 0) ? _invertEase(ease) : ease;
+			}
+			l = ((distances[i] - distances.min) / distances.max) || 0;
+			return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors
+		};
+	},
+	_roundModifier = v => { //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
+		let p = Math.pow(10, ((v + "").split(".")[1] || "").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())
+		return raw => {
+			let n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);
+			return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!
+		};
+	},
+	snap = (snapTo, value) => {
+		let isArray = _isArray(snapTo),
+			radius, is2D;
+		if (!isArray && _isObject(snapTo)) {
+			radius = isArray = snapTo.radius || _bigNum;
+			if (snapTo.values) {
+				snapTo = toArray(snapTo.values);
+				if ((is2D = !_isNumber(snapTo[0]))) {
+					radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.
+				}
+			} else {
+				snapTo = _roundModifier(snapTo.increment);
+			}
+		}
+		return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? raw => {is2D = snapTo(raw); return Math.abs(is2D - raw) <= radius ? is2D : raw; } : raw => {
+			let x = parseFloat(is2D ? raw.x : raw),
+				y = parseFloat(is2D ? raw.y : 0),
+				min = _bigNum,
+				closest = 0,
+				i = snapTo.length,
+				dx, dy;
+			while (i--) {
+				if (is2D) {
+					dx = snapTo[i].x - x;
+					dy = snapTo[i].y - y;
+					dx = dx * dx + dy * dy;
+				} else {
+					dx = Math.abs(snapTo[i] - x);
+				}
+				if (dx < min) {
+					min = dx;
+					closest = i;
+				}
+			}
+			closest = (!radius || min <= radius) ? snapTo[closest] : raw;
+			return (is2D || closest === raw || _isNumber(raw)) ? closest : closest + getUnit(raw);
+		});
+	},
+	random = (min, max, roundingIncrement, returnFunction) => _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, () => _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? 10 ** ((roundingIncrement + "").length - 2) : 1) && (Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction)),
+	pipe = (...functions) => value => functions.reduce((v, f) => f(v), value),
+	unitize = (func, unit) => value => func(parseFloat(value)) + (unit || getUnit(value)),
+	normalize = (min, max, value) => mapRange(min, max, 0, 1, value),
+	_wrapArray = (a, wrapper, value) => _conditionalReturn(value, index => a[~~wrapper(index)]),
+	wrap = function(min, max, value) { // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).
+		let range = max - min;
+		return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, value => ((range + (value - min) % range) % range) + min);
+	},
+	wrapYoyo = (min, max, value) => {
+		let range = max - min,
+			total = range * 2;
+		return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, value => {
+			value = (total + (value - min) % total) % total || 0;
+			return min + ((value > range) ? (total - value) : value);
+		});
+	},
+	_replaceRandom = value => { //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])
+		let prev = 0,
+			s = "",
+			i, nums, end, isArray;
+		while (~(i = value.indexOf("random(", prev))) {
+			end = value.indexOf(")", i);
+			isArray = value.charAt(i + 7) === "[";
+			nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
+			s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);
+			prev = end + 1;
+		}
+		return s + value.substr(prev, value.length - prev);
+	},
+	mapRange = (inMin, inMax, outMin, outMax, value) => {
+		let inRange = inMax - inMin,
+			outRange = outMax - outMin;
+		return _conditionalReturn(value, value => outMin + ((((value - inMin) / inRange) * outRange) || 0));
+	},
+	interpolate = (start, end, progress, mutate) => {
+		let func = isNaN(start + end) ? 0 : p => (1 - p) * start + p * end;
+		if (!func) {
+			let isString = _isString(start),
+				master = {},
+				p, i, interpolators, l, il;
+			progress === true && (mutate = 1) && (progress = null);
+			if (isString) {
+				start = {p: start};
+				end = {p: end};
+
+			} else if (_isArray(start) && !_isArray(end)) {
+				interpolators = [];
+				l = start.length;
+				il = l - 2;
+				for (i = 1; i < l; i++) {
+					interpolators.push(interpolate(start[i-1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.
+				}
+				l--;
+				func = p => {
+					p *= l;
+					let i = Math.min(il, ~~p);
+					return interpolators[i](p - i);
+				};
+				progress = end;
+			} else if (!mutate) {
+				start = _merge(_isArray(start) ? [] : {}, start);
+			}
+			if (!interpolators) {
+				for (p in end) {
+					_addPropTween.call(master, start, p, "get", end[p]);
+				}
+				func = p => _renderPropTweens(p, master) || (isString ? start.p : start);
+			}
+		}
+		return _conditionalReturn(progress, func);
+	},
+	_getLabelInDirection = (timeline, fromTime, backward) => { //used for nextLabel() and previousLabel()
+		let labels = timeline.labels,
+			min = _bigNum,
+			p, distance, label;
+		for (p in labels) {
+			distance = labels[p] - fromTime;
+			if ((distance < 0) === !!backward && distance && min > (distance = Math.abs(distance))) {
+				label = p;
+				min = distance;
+			}
+		}
+		return label;
+	},
+	_callback = (animation, type, executeLazyFirst) => {
+		let v = animation.vars,
+			callback = v[type],
+			prevContext = _context,
+			context = animation._ctx,
+			params, scope, result;
+		if (!callback) {
+			return;
+		}
+		params = v[type + "Params"];
+		scope = v.callbackScope || animation;
+		executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
+		context && (_context = context);
+		result = params ? callback.apply(scope, params) : callback.call(scope);
+		_context = prevContext;
+		return result;
+	},
+	_interrupt = animation => {
+		_removeFromParent(animation);
+		animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting);
+		animation.progress() < 1 && _callback(animation, "onInterrupt");
+		return animation;
+	},
+	_quickTween,
+	_registerPluginQueue = [],
+	_createPlugin = config => {
+		if (!config) return;
+		config = (!config.name && config.default) || config; // UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.
+		if (_windowExists() || config.headless) { // edge case: some build tools may pass in a null/undefined value
+			let name = config.name,
+				isFunc = _isFunction(config),
+				Plugin = (name && !isFunc && config.init) ? function () {
+					this._props = [];
+				} : config, //in case someone passes in an object that's not a plugin, like CustomEase
+				instanceDefaults = {init: _emptyFunc, render: _renderPropTweens, add: _addPropTween, kill: _killPropTweensOf, modifier: _addPluginModifier, rawVars: 0},
+				statics = {targetTest: 0, get: 0, getSetter: _getSetter, aliases: {}, register: 0};
+			_wake();
+			if (config !== Plugin) {
+				if (_plugins[name]) {
+					return;
+				}
+				_setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics)); //static methods
+				_merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods
+				_plugins[(Plugin.prop = name)] = Plugin;
+				if (config.targetTest) {
+					_harnessPlugins.push(Plugin);
+					_reservedProps[name] = 1;
+				}
+				name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin"; //for the global name. "motionPath" should become MotionPathPlugin
+			}
+			_addGlobal(name, Plugin);
+			config.register && config.register(gsap, Plugin, PropTween);
+		} else {
+			_registerPluginQueue.push(config);
+		}
+	},
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * COLORS
+ * --------------------------------------------------------------------------------------
+ */
+
+	_255 = 255,
+	_colorLookup = {
+		aqua:[0,_255,_255],
+		lime:[0,_255,0],
+		silver:[192,192,192],
+		black:[0,0,0],
+		maroon:[128,0,0],
+		teal:[0,128,128],
+		blue:[0,0,_255],
+		navy:[0,0,128],
+		white:[_255,_255,_255],
+		olive:[128,128,0],
+		yellow:[_255,_255,0],
+		orange:[_255,165,0],
+		gray:[128,128,128],
+		purple:[128,0,128],
+		green:[0,128,0],
+		red:[_255,0,0],
+		pink:[_255,192,203],
+		cyan:[0,_255,_255],
+		transparent:[_255,_255,_255,0]
+	},
+	// possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:
+	// let ctx = _doc.createElement("canvas").getContext("2d");
+	// _forEachName("aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});
+	_hue = (h, m1, m2) => {
+		h += h < 0 ? 1 : h > 1 ? -1 : 0;
+		return ((((h * 6 < 1) ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : (h * 3 < 2) ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255) + .5) | 0;
+	},
+	splitColor = (v, toHSL, forceAlpha) => {
+		let a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, (v >> 8) & _255, v & _255] : 0,
+			r, g, b, h, s, l, max, min, d, wasHSL;
+		if (!a) {
+			if (v.substr(-1) === ",") { //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
+				v = v.substr(0, v.length - 1);
+			}
+			if (_colorLookup[v]) {
+				a = _colorLookup[v];
+			} else if (v.charAt(0) === "#") {
+				if (v.length < 6) { //for shorthand like #9F0 or #9F0F (could have alpha)
+					r = v.charAt(1);
+					g = v.charAt(2);
+					b = v.charAt(3);
+					v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
+				}
+				if (v.length === 9) { // hex with alpha, like #fd5e53ff
+					a = parseInt(v.substr(1, 6), 16);
+					return [a >> 16, (a >> 8) & _255, a & _255, parseInt(v.substr(7), 16) / 255];
+				}
+				v = parseInt(v.substr(1), 16);
+				a = [v >> 16, (v >> 8) & _255, v & _255];
+			} else if (v.substr(0, 3) === "hsl") {
+				a = wasHSL = v.match(_strictNumExp);
+				if (!toHSL) {
+					h = (+a[0] % 360) / 360;
+					s = +a[1] / 100;
+					l = +a[2] / 100;
+					g = (l <= .5) ? l * (s + 1) : l + s - l * s;
+					r = l * 2 - g;
+					a.length > 3 && (a[3] *= 1); //cast as number
+					a[0] = _hue(h + 1 / 3, r, g);
+					a[1] = _hue(h, r, g);
+					a[2] = _hue(h - 1 / 3, r, g);
+				} else if (~v.indexOf("=")) { //if relative values are found, just return the raw strings with the relative prefixes in place.
+					a = v.match(_numExp);
+					forceAlpha && a.length < 4 && (a[3] = 1);
+					return a;
+				}
+			} else {
+				a = v.match(_strictNumExp) || _colorLookup.transparent;
+			}
+			a = a.map(Number);
+		}
+		if (toHSL && !wasHSL) {
+			r = a[0] / _255;
+			g = a[1] / _255;
+			b = a[2] / _255;
+			max = Math.max(r, g, b);
+			min = Math.min(r, g, b);
+			l = (max + min) / 2;
+			if (max === min) {
+				h = s = 0;
+			} else {
+				d = max - min;
+				s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
+				h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
+				h *= 60;
+			}
+			a[0] = ~~(h + .5);
+			a[1] = ~~(s * 100 + .5);
+			a[2] = ~~(l * 100 + .5);
+		}
+		forceAlpha && a.length < 4 && (a[3] = 1);
+		return a;
+	},
+	_colorOrderData = v => { // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()
+		let values = [],
+			c = [],
+			i = -1;
+		v.split(_colorExp).forEach(v => {
+			let a = v.match(_numWithUnitExp) || [];
+			values.push(...a);
+			c.push(i += a.length + 1);
+		});
+		values.c = c;
+		return values;
+	},
+	_formatColors = (s, toHSL, orderMatchData) => {
+		let result = "",
+			colors = (s + result).match(_colorExp),
+			type = toHSL ? "hsla(" : "rgba(",
+			i = 0,
+			c, shell, d, l;
+		if (!colors) {
+			return s;
+		}
+		colors = colors.map(color => (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")");
+		if (orderMatchData) {
+			d = _colorOrderData(s);
+			c = orderMatchData.c;
+			if (c.join(result) !== d.c.join(result)) {
+				shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
+				l = shell.length - 1;
+				for (; i < l; i++) {
+					result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
+				}
+			}
+		}
+		if (!shell) {
+			shell = s.split(_colorExp);
+			l = shell.length - 1;
+			for (; i < l; i++) {
+				result += shell[i] + colors[i];
+			}
+		}
+		return result + shell[l];
+	},
+	_colorExp = (function() {
+		let s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b", //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,
+			p;
+		for (p in _colorLookup) {
+			s += "|" + p + "\\b";
+		}
+		return new RegExp(s + ")", "gi");
+	})(),
+	_hslExp = /hsl[a]?\(/,
+	_colorStringFilter = a => {
+		let combined = a.join(" "),
+			toHSL;
+		_colorExp.lastIndex = 0;
+		if (_colorExp.test(combined)) {
+			toHSL = _hslExp.test(combined);
+			a[1] = _formatColors(a[1], toHSL);
+			a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.
+			return true;
+		}
+	},
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * TICKER
+ * --------------------------------------------------------------------------------------
+ */
+	_tickerActive,
+	_ticker = (function() {
+		let _getTime = Date.now,
+			_lagThreshold = 500,
+			_adjustedLag = 33,
+			_startTime = _getTime(),
+			_lastUpdate = _startTime,
+			_gap = 1000 / 240,
+			_nextTime = _gap,
+			_listeners = [],
+			_id, _req, _raf, _self, _delta, _i,
+			_tick = v => {
+				let elapsed = _getTime() - _lastUpdate,
+					manual = v === true,
+					overlap, dispatch, time, frame;
+				(elapsed > _lagThreshold || elapsed < 0) && (_startTime += elapsed - _adjustedLag);
+				_lastUpdate += elapsed;
+				time = _lastUpdate - _startTime;
+				overlap = time - _nextTime;
+				if (overlap > 0 || manual) {
+					frame = ++_self.frame;
+					_delta = time - _self.time * 1000;
+					_self.time = time = time / 1000;
+					_nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
+					dispatch = 1;
+				}
+				manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.
+				if (dispatch) {
+					for (_i = 0; _i < _listeners.length; _i++) { // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.
+						_listeners[_i](time, _delta, frame, v);
+					}
+				}
+			};
+		_self = {
+			time:0,
+			frame:0,
+			tick() {
+				_tick(true);
+			},
+			deltaRatio(fps) {
+				return _delta / (1000 / (fps || 60));
+			},
+			wake() {
+				if (_coreReady) {
+					if (!_coreInitted && _windowExists()) {
+						_win = _coreInitted = window;
+						_doc = _win.document || {};
+						_globals.gsap = gsap;
+						(_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);
+						_install(_installScope || _win.GreenSockGlobals || (!_win.gsap && _win) || {});
+						_registerPluginQueue.forEach(_createPlugin);
+					}
+					_raf = typeof(requestAnimationFrame) !== "undefined" && requestAnimationFrame;
+					_id && _self.sleep();
+					_req = _raf || (f => setTimeout(f, (_nextTime - _self.time * 1000 + 1) | 0));
+					_tickerActive = 1;
+					_tick(2);
+				}
+			},
+			sleep() {
+				(_raf ? cancelAnimationFrame : clearTimeout)(_id);
+				_tickerActive = 0;
+				_req = _emptyFunc;
+			},
+			lagSmoothing(threshold, adjustedLag) {
+				_lagThreshold = threshold || Infinity; // zero should be interpreted as basically unlimited
+				_adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);
+			},
+			fps(fps) {
+				_gap = 1000 / (fps || 240);
+				_nextTime = _self.time * 1000 + _gap;
+			},
+			add(callback, once, prioritize) {
+				let func = once ? (t, d, f, v) => {callback(t, d, f, v); _self.remove(func);} : callback;
+				_self.remove(callback);
+				_listeners[prioritize ? "unshift" : "push"](func);
+				_wake();
+				return func;
+			},
+			remove(callback, i) {
+				~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;
+			},
+			_listeners:_listeners
+		};
+		return _self;
+	})(),
+	_wake = () => !_tickerActive && _ticker.wake(), //also ensures the core classes are initialized.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+* -------------------------------------------------
+* EASING
+* -------------------------------------------------
+*/
+	_easeMap = {},
+	_customEaseExp = /^[\d.\-M][\d.\-,\s]/,
+	_quotesExp = /["']/g,
+	_parseObjectInString = value => { //takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.
+		let obj = {},
+			split = value.substr(1, value.length-3).split(":"),
+			key = split[0],
+			i = 1,
+			l = split.length,
+			index, val, parsedVal;
+		for (; i < l; i++) {
+			val = split[i];
+			index = i !== l-1 ? val.lastIndexOf(",") : val.length;
+			parsedVal = val.substr(0, index);
+			obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
+			key = val.substr(index+1).trim();
+		}
+		return obj;
+	},
+	_valueInParentheses = value => {
+		let open = value.indexOf("(") + 1,
+			close = value.indexOf(")"),
+			nested = value.indexOf("(", open);
+		return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
+	},
+	_configEaseFromString = name => { //name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).
+		let split = (name + "").split("("),
+			ease = _easeMap[split[0]];
+		return (ease && split.length > 1 && ease.config) ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : (_easeMap._CE && _customEaseExp.test(name)) ? _easeMap._CE("", name) : ease;
+	},
+	_invertEase = ease => p => 1 - ease(1 - p),
+	// allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.
+	_propagateYoyoEase = (timeline, isYoyo) => {
+		let child = timeline._first, ease;
+		while (child) {
+			if (child instanceof Timeline) {
+				_propagateYoyoEase(child, isYoyo);
+			} else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
+				if (child.timeline) {
+					_propagateYoyoEase(child.timeline, isYoyo);
+				} else {
+					ease = child._ease;
+					child._ease = child._yEase;
+					child._yEase = ease;
+					child._yoyo = isYoyo;
+				}
+			}
+			child = child._next;
+		}
+	},
+	_parseEase = (ease, defaultEase) => !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase,
+	_insertEase = (names, easeIn, easeOut = p => 1 - easeIn(1 - p), easeInOut = (p => p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2)) => {
+		let ease = {easeIn, easeOut, easeInOut},
+			lowercaseName;
+		_forEachName(names, name => {
+			_easeMap[name] = _globals[name] = ease;
+			_easeMap[(lowercaseName = name.toLowerCase())] = easeOut;
+			for (let p in ease) {
+				_easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
+			}
+		});
+		return ease;
+	},
+	_easeInOutFromOut = easeOut => (p => p < .5 ? (1 - easeOut(1 - (p * 2))) / 2 : .5 + easeOut((p - .5) * 2) / 2),
+	_configElastic = (type, amplitude, period) => {
+		let p1 = (amplitude >= 1) ? amplitude : 1, //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
+			p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
+			p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
+			easeOut = p => p === 1 ? 1 : p1 * (2 ** (-10 * p)) * _sin((p - p3) * p2) + 1,
+			ease = (type === "out") ? easeOut : (type === "in") ? p => 1 - easeOut(1 - p) : _easeInOutFromOut(easeOut);
+		p2 = _2PI / p2; //precalculate to optimize
+		ease.config = (amplitude, period) => _configElastic(type, amplitude, period);
+		return ease;
+	},
+	_configBack = (type, overshoot = 1.70158) => {
+		let easeOut = p => p ? ((--p) * p * ((overshoot + 1) * p + overshoot) + 1) : 0,
+			ease = type === "out" ? easeOut : type === "in" ? p => 1 - easeOut(1 - p) : _easeInOutFromOut(easeOut);
+		ease.config = overshoot => _configBack(type, overshoot);
+		return ease;
+	};
+	// a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
+	// _weightedEase = ratio => {
+	// 	let y = 0.5 + ratio / 2;
+	// 	return p => (2 * (1 - p) * p * y + p * p);
+	// },
+	// a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
+	// _weightedEaseStrong = ratio => {
+	// 	ratio = .5 + ratio / 2;
+	// 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),
+	// 		b = ratio - o,
+	// 		c = ratio + o;
+	// 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;
+	// };
+
+_forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", (name, i) => {
+	let power = i < 5 ? i + 1 : i;
+	_insertEase(name + ",Power" + (power - 1), i ? p => p ** power : p => p, p => 1 - (1 - p) ** power, p => p < .5 ? (p * 2) ** power / 2 : 1 - ((1 - p) * 2) ** power / 2);
+});
+_easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;
+_insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());
+((n, c) => {
+	let n1 = 1 / c,
+		n2 = 2 * n1,
+		n3 = 2.5 * n1,
+		easeOut = p => (p < n1) ? n * p * p : (p < n2) ? n * (p - 1.5 / c) ** 2 + .75 : (p < n3) ? n * (p -= 2.25 / c) * p + .9375 : n * (p - 2.625 / c) ** 2 + .984375;
+	_insertEase("Bounce", p => 1 - easeOut(1 - p), easeOut);
+})(7.5625, 2.75);
+_insertEase("Expo", p => p ? 2 ** (10 * (p - 1)) : 0);
+_insertEase("Circ", p => -(_sqrt(1 - (p * p)) - 1));
+_insertEase("Sine", p => p === 1 ? 1 : -_cos(p * _HALF_PI) + 1);
+_insertEase("Back", _configBack("in"), _configBack("out"), _configBack());
+_easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
+	config(steps = 1, immediateStart) {
+		let p1 = 1 / steps,
+			p2 = steps + (immediateStart ? 0 : 1),
+			p3 = immediateStart ? 1 : 0,
+			max = 1 - _tinyNum;
+		return p => (((p2 * _clamp(0, max, p)) | 0) + p3) * p1;
+	}
+};
+_defaults.ease = _easeMap["quad.out"];
+
+
+_forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", name => _callbackNames += name + "," + name + "Params,");
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * CACHE
+ * --------------------------------------------------------------------------------------
+ */
+class GSCache {
+
+	constructor(target, harness) {
+		this.id = _gsID++;
+		target._gsap = this;
+		this.target = target;
+		this.harness = harness;
+		this.get = harness ? harness.get : _getProperty;
+		this.set = harness ? harness.getSetter : _getSetter;
+	}
+
+}
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * ANIMATION
+ * --------------------------------------------------------------------------------------
+ */
+
+class Animation {
+
+	constructor(vars) {
+		this.vars = vars;
+		this._delay = +vars.delay || 0;
+		if ((this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0)) { // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.
+			this._rDelay = vars.repeatDelay || 0;
+			this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
+		}
+		this._ts = 1;
+		_setDuration(this, +vars.duration, 1, 1);
+		this.data = vars.data;
+		if (_context) {
+			this._ctx = _context;
+			_context.data.push(this);
+		}
+		_tickerActive || _ticker.wake();
+	}
+
+	delay(value) {
+		if (value || value === 0) {
+			this.parent && this.parent.smoothChildTiming && (this.startTime(this._start + value - this._delay));
+			this._delay = value;
+			return this;
+		}
+		return this._delay;
+	}
+
+	duration(value) {
+		return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
+	}
+
+	totalDuration(value) {
+		if (!arguments.length) {
+			return this._tDur;
+		}
+		this._dirty = 0;
+		return _setDuration(this, this._repeat < 0 ? value : (value - (this._repeat * this._rDelay)) / (this._repeat + 1));
+	}
+
+	totalTime(totalTime, suppressEvents) {
+		_wake();
+		if (!arguments.length) {
+			return this._tTime;
+		}
+		let parent = this._dp;
+		if (parent && parent.smoothChildTiming && this._ts) {
+			_alignPlayhead(this, totalTime);
+			!parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.
+			//in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.
+			while (parent && parent.parent) {
+				if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
+					parent.totalTime(parent._tTime, true);
+				}
+				parent = parent.parent;
+			}
+			if (!this.parent && this._dp.autoRemoveChildren && ((this._ts > 0 && totalTime < this._tDur) || (this._ts < 0 && totalTime > 0) || (!this._tDur && !totalTime) )) { //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.
+				_addToTimeline(this._dp, this, this._start - this._delay);
+			}
+		}
+        if (this._tTime !== totalTime || (!this._dur && !suppressEvents) || (this._initted && Math.abs(this._zTime) === _tinyNum) || (!totalTime && !this._initted && (this.add || this._ptLookup))) { // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)
+        	this._ts || (this._pTime = totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause
+	        //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)
+		    //   this._lock = 1;
+		        _lazySafeRender(this, totalTime, suppressEvents);
+		    //   this._lock = 0;
+	        //}
+		}
+		return this;
+	}
+
+	time(value, suppressEvents) {
+		return arguments.length ? this.totalTime((Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay)) || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!
+	}
+
+	totalProgress(value, suppressEvents) {
+		return arguments.length ? this.totalTime( this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.rawTime() > 0 ? 1 : 0;
+	}
+
+	progress(value, suppressEvents) {
+		return arguments.length ? this.totalTime( this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : (this.duration() ? Math.min(1, this._time / this._dur) : this.rawTime() > 0 ? 1 : 0);
+	}
+
+	iteration(value, suppressEvents) {
+		let cycleDuration = this.duration() + this._rDelay;
+		return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
+	}
+
+	// potential future addition:
+	// isPlayingBackwards() {
+	// 	let animation = this,
+	// 		orientation = 1; // 1 = forward, -1 = backward
+	// 	while (animation) {
+	// 		orientation *= animation.reversed() || (animation.repeat() && !(animation.iteration() & 1)) ? -1 : 1;
+	// 		animation = animation.parent;
+	// 	}
+	// 	return orientation < 0;
+	// }
+
+	timeScale(value, suppressEvents) {
+		if (!arguments.length) {
+			return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.
+		}
+		if (this._rts === value) {
+			return this;
+		}
+		let tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.
+
+		// future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.
+		//(+value < 0 && this._rts >= 0) && _callback(this, "onReverse", true);
+
+		// prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.
+		this._rts = +value || 0;
+		this._ts = (this._ps || value === -_tinyNum) ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.
+		this.totalTime(_clamp(-Math.abs(this._delay), this._tDur, tTime), suppressEvents !== false);
+		_setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.
+		return _recacheAncestors(this);
+	}
+
+	paused(value) {
+		if (!arguments.length) {
+			return this._ps;
+		}
+		if (this._ps !== value) {
+			this._ps = value;
+			if (value) {
+				this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.
+				this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the "real" timeScale as _rts (recorded time scale)
+			} else {
+				_wake();
+				this._ts = this._rts;
+				//only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.
+				this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, (this.progress() === 1) && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum)); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.
+			}
+		}
+		return this;
+	}
+
+	startTime(value) {
+		if (arguments.length) {
+			this._start = value;
+			let parent = this.parent || this._dp;
+			parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
+			return this;
+		}
+		return this._start;
+	}
+
+	endTime(includeRepeats) {
+		return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
+	}
+
+	rawTime(wrapRepeats) {
+		let parent = this.parent || this._dp; // _dp = detached parent
+		return !parent ? this._tTime : (wrapRepeats && (!this._ts || (this._repeat && this._time && this.totalProgress() < 1))) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
+	}
+
+	revert(config= _revertConfig) {
+		let prevIsReverting = _reverting;
+		_reverting = config;
+		if (this._initted || this._startAt) {
+			this.timeline && this.timeline.revert(config);
+			this.totalTime(-0.01, config.suppressEvents);
+		}
+		this.data !== "nested" && config.kill !== false && this.kill();
+		_reverting = prevIsReverting;
+		return this;
+	}
+
+	globalTime(rawTime) {
+		let animation = this,
+			time = arguments.length ? rawTime : animation.rawTime();
+		while (animation) {
+			time = animation._start + time / (Math.abs(animation._ts) || 1);
+			animation = animation._dp;
+		}
+		return !this.parent && this._sat ? this._sat.globalTime(rawTime) : time; // the _startAt tweens for .fromTo() and .from() that have immediateRender should always be FIRST in the timeline (important for context.revert()). "_sat" stands for _startAtTween, referring to the parent tween that created the _startAt. We must discern if that tween had immediateRender so that we can know whether or not to prioritize it in revert().
+	}
+
+	repeat(value) {
+		if (arguments.length) {
+			this._repeat = value === Infinity ? -2 : value;
+			return _onUpdateTotalDuration(this);
+		}
+		return this._repeat === -2 ? Infinity : this._repeat;
+	}
+
+	repeatDelay(value) {
+		if (arguments.length) {
+			let time = this._time;
+			this._rDelay = value;
+			_onUpdateTotalDuration(this);
+			return time ? this.time(time) : this;
+		}
+		return this._rDelay;
+	}
+
+	yoyo(value) {
+		if (arguments.length) {
+			this._yoyo = value;
+			return this;
+		}
+		return this._yoyo;
+	}
+
+	seek(position, suppressEvents) {
+		return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
+	}
+
+	restart(includeDelay, suppressEvents) {
+		return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
+	}
+
+	play(from, suppressEvents) {
+		from != null && this.seek(from, suppressEvents);
+		return this.reversed(false).paused(false);
+	}
+
+	reverse(from, suppressEvents) {
+		from != null && this.seek(from || this.totalDuration(), suppressEvents);
+		return this.reversed(true).paused(false);
+	}
+
+	pause(atTime, suppressEvents) {
+		atTime != null && this.seek(atTime, suppressEvents);
+		return this.paused(true);
+	}
+
+	resume() {
+		return this.paused(false);
+	}
+
+	reversed(value) {
+		if (arguments.length) {
+			!!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.
+			return this;
+		}
+		return this._rts < 0;
+	}
+
+	invalidate() {
+		this._initted = this._act = 0;
+		this._zTime = -_tinyNum;
+		return this;
+	}
+
+	isActive() {
+		let parent = this.parent || this._dp,
+			start = this._start,
+			rawTime;
+		return !!(!parent || (this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum));
+	}
+
+	eventCallback(type, callback, params) {
+		let vars = this.vars;
+		if (arguments.length > 1) {
+			if (!callback) {
+				delete vars[type];
+			} else {
+				vars[type] = callback;
+				params && (vars[type + "Params"] = params);
+				type === "onUpdate" && (this._onUpdate = callback);
+			}
+			return this;
+		}
+		return vars[type];
+	}
+
+	then(onFulfilled) {
+		let self = this;
+		return new Promise(resolve => {
+			let f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
+				_resolve = () => {
+					let _then = self.then;
+					self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)
+					_isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
+					resolve(f);
+					self.then = _then;
+				};
+			if (self._initted && (self.totalProgress() === 1 && self._ts >= 0) || (!self._tTime && self._ts < 0)) {
+				_resolve();
+			} else {
+				self._prom = _resolve;
+			}
+		});
+	}
+
+	kill() {
+		_interrupt(this);
+	}
+
+}
+
+_setDefaults(Animation.prototype, {_time:0, _start:0, _end:0, _tTime:0, _tDur:0, _dirty:0, _repeat:0, _yoyo:false, parent:null, _initted:false, _rDelay:0, _ts:1, _dp:0, ratio:0, _zTime:-_tinyNum, _prom:0, _ps:false, _rts:1});
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * -------------------------------------------------
+ * TIMELINE
+ * -------------------------------------------------
+ */
+
+class Timeline extends Animation {
+
+	constructor(vars = {}, position) {
+		super(vars);
+		this.labels = {};
+		this.smoothChildTiming = !!vars.smoothChildTiming;
+		this.autoRemoveChildren = !!vars.autoRemoveChildren;
+		this._sort = _isNotFalse(vars.sortChildren);
+		_globalTimeline && _addToTimeline(vars.parent || _globalTimeline, this, position);
+		vars.reversed && this.reverse();
+		vars.paused && this.paused(true);
+		vars.scrollTrigger && _scrollTrigger(this, vars.scrollTrigger);
+	}
+
+	to(targets, vars, position) {
+		_createTweenType(0, arguments, this);
+		return this;
+	}
+
+	from(targets, vars, position) {
+		_createTweenType(1, arguments, this);
+		return this;
+	}
+
+	fromTo(targets, fromVars, toVars, position) {
+		_createTweenType(2, arguments, this);
+		return this;
+	}
+
+	set(targets, vars, position) {
+		vars.duration = 0;
+		vars.parent = this;
+		_inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
+		vars.immediateRender = !!vars.immediateRender;
+		new Tween(targets, vars, _parsePosition(this, position), 1);
+		return this;
+	}
+
+	call(callback, params, position) {
+		return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);
+	}
+
+	//ONLY for backward compatibility! Maybe delete?
+	staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
+		vars.duration = duration;
+		vars.stagger = vars.stagger || stagger;
+		vars.onComplete = onCompleteAll;
+		vars.onCompleteParams = onCompleteAllParams;
+		vars.parent = this;
+		new Tween(targets, vars, _parsePosition(this, position));
+		return this;
+	}
+
+	staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
+		vars.runBackwards = 1;
+		_inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
+		return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
+	}
+
+	staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
+		toVars.startAt = fromVars;
+		_inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
+		return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
+	}
+
+	render(totalTime, suppressEvents, force) {
+		let prevTime = this._time,
+			tDur = this._dirty ? this.totalDuration() : this._tDur,
+			dur = this._dur,
+			tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime), // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.
+			crossingStart = (this._zTime < 0) !== (totalTime < 0) && (this._initted || !dur),
+			time, child, next, iteration, cycleDuration, prevPaused, pauseTween, timeScale, prevStart, prevIteration, yoyo, isYoyo;
+		this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);
+		if (tTime !== this._tTime || force || crossingStart) {
+			if (prevTime !== this._time && dur) { //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
+				tTime += this._time - prevTime;
+				totalTime += this._time - prevTime;
+			}
+			time = tTime;
+			prevStart = this._start;
+			timeScale = this._ts;
+			prevPaused = !timeScale;
+			if (crossingStart) {
+				dur || (prevTime = this._zTime);
+				 //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.
+				(totalTime || !suppressEvents) && (this._zTime = totalTime);
+			}
+			if (this._repeat) { //adjust the time for repeats and yoyos
+				yoyo = this._yoyo;
+				cycleDuration = dur + this._rDelay;
+				if (this._repeat < -1 && totalTime < 0) {
+					return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
+				}
+				time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)
+				if (tTime === tDur) { // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
+					iteration = this._repeat;
+					time = dur;
+				} else {
+					iteration = ~~(tTime / cycleDuration);
+					if (iteration && iteration === tTime / cycleDuration) {
+						time = dur;
+						iteration--;
+					}
+					time > dur && (time = dur);
+				}
+				prevIteration = _animationCycle(this._tTime, cycleDuration);
+				!prevTime && this._tTime && prevIteration !== iteration && this._tTime - prevIteration * cycleDuration - this._dur <= 0 && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://gsap.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005 also, this._tTime - prevIteration * cycleDuration - this._dur <= 0 just checks to make sure it wasn't previously in the "repeatDelay" portion
+				if (yoyo && (iteration & 1)) {
+					time = dur - time;
+					isYoyo = 1;
+				}
+				/*
+				make sure children at the end/beginning of the timeline are rendered properly. If, for example,
+				a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
+				would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
+				could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
+				we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
+				ensure that zero-duration tweens at the very beginning or end of the Timeline work.
+				*/
+				if (iteration !== prevIteration && !this._lock) {
+					let rewinding = (yoyo && (prevIteration & 1)),
+						doesWrap = (rewinding === (yoyo && (iteration & 1)));
+					iteration < prevIteration && (rewinding = !rewinding);
+					prevTime = rewinding ? 0 : tTime % dur ? dur : tTime; // if the playhead is landing exactly at the end of an iteration, use that totalTime rather than only the duration, otherwise it'll skip the 2nd render since it's effectively at the same time.
+					this._lock = 1;
+					this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
+					this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.
+					!suppressEvents && this.parent && _callback(this, "onRepeat");
+					this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);
+					if ((prevTime && prevTime !== this._time) || prevPaused !== !this._ts || (this.vars.onRepeat && !this.parent && !this._act)) { // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.
+						return this;
+					}
+					dur = this._dur; // in case the duration changed in the onRepeat
+					tDur = this._tDur;
+					if (doesWrap) {
+						this._lock = 2;
+						prevTime = rewinding ? dur : -0.0001;
+						this.render(prevTime, true);
+						this.vars.repeatRefresh && !isYoyo && this.invalidate();
+					}
+					this._lock = 0;
+					if (!this._ts && !prevPaused) {
+						return this;
+					}
+					//in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.
+					_propagateYoyoEase(this, isYoyo);
+				}
+			}
+			if (this._hasPause && !this._forcing && this._lock < 2) {
+				pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));
+				if (pauseTween) {
+					tTime -= time - (time = pauseTween._start);
+				}
+			}
+
+			this._tTime = tTime;
+			this._time = time;
+			this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.
+
+			if (!this._initted) {
+				this._onUpdate = this.vars.onUpdate;
+				this._initted = 1;
+				this._zTime = totalTime;
+				prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).
+			}
+			if (!prevTime && time && !suppressEvents && !iteration) {
+				_callback(this, "onStart");
+				if (this._tTime !== tTime) { // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
+					return this;
+				}
+			}
+			if (time >= prevTime && totalTime >= 0) {
+				child = this._first;
+				while (child) {
+					next = child._next;
+					if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
+						if (child.parent !== this) { // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
+							return this.render(totalTime, suppressEvents, force);
+						}
+						child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);
+						if (time !== this._time || (!this._ts && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
+							pauseTween = 0;
+							next && (tTime += (this._zTime = -_tinyNum));  // it didn't finish rendering, so flag zTime as negative so that so that the next time render() is called it'll be forced (to render any remaining children)
+							break;
+						}
+					}
+					child = next;
+				}
+			} else {
+				child = this._last;
+				let adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.
+				while (child) {
+					next = child._prev;
+					if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
+						if (child.parent !== this) { // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
+							return this.render(totalTime, suppressEvents, force);
+						}
+						child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || (_reverting && (child._initted || child._startAt)));  // if reverting, we should always force renders of initted tweens (but remember that .fromTo() or .from() may have a _startAt but not _initted yet). If, for example, a .fromTo() tween with a stagger (which creates an internal timeline) gets reverted BEFORE some of its child tweens render for the first time, it may not properly trigger them to revert.
+						if (time !== this._time || (!this._ts && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
+							pauseTween = 0;
+							next && (tTime += (this._zTime = adjustedTime ? -_tinyNum : _tinyNum)); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)
+							break;
+						}
+					}
+					child = next;
+				}
+			}
+			if (pauseTween && !suppressEvents) {
+				this.pause();
+				pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;
+				if (this._ts) { //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).
+					this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.
+					_setEnd(this);
+					return this.render(totalTime, suppressEvents, force);
+				}
+			}
+			this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
+			if ((tTime === tDur && this._tTime >= this.totalDuration()) || (!tTime && prevTime)) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) { // remember, a child's callback may alter this timeline's playhead or timeScale which is why we need to add some of these checks.
+				(totalTime || !dur) && ((tTime === tDur && this._ts > 0) || (!tTime && this._ts < 0)) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.
+				if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {
+					_callback(this, (tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete"), true);
+					this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
+				}
+			}
+		}
+		return this;
+	}
+
+	add(child, position) {
+		_isNumber(position) || (position = _parsePosition(this, position, child));
+		if (!(child instanceof Animation)) {
+			if (_isArray(child)) {
+				child.forEach(obj => this.add(obj, position));
+				return this;
+			}
+			if (_isString(child)) {
+				return this.addLabel(child, position);
+			}
+			if (_isFunction(child)) {
+				child = Tween.delayedCall(0, child);
+			} else {
+				return this;
+			}
+		}
+		return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!
+	}
+
+	getChildren(nested = true, tweens = true, timelines = true, ignoreBeforeTime = -_bigNum) {
+		let a = [],
+			child = this._first;
+		while (child) {
+			if (child._start >= ignoreBeforeTime) {
+				if (child instanceof Tween) {
+					tweens && a.push(child);
+				} else {
+					timelines && a.push(child);
+					nested && a.push(...child.getChildren(true, tweens, timelines));
+				}
+			}
+			child = child._next;
+		}
+		return a;
+	}
+
+	getById(id) {
+		let animations = this.getChildren(1, 1, 1),
+			i = animations.length;
+		while(i--) {
+			if (animations[i].vars.id === id) {
+				return animations[i];
+			}
+		}
+	}
+
+	remove(child) {
+		if (_isString(child)) {
+			return this.removeLabel(child);
+		}
+		if (_isFunction(child)) {
+			return this.killTweensOf(child);
+		}
+		_removeLinkedListItem(this, child);
+		if (child === this._recent) {
+			this._recent = this._last;
+		}
+		return _uncache(this);
+	}
+
+	totalTime(totalTime, suppressEvents) {
+		if (!arguments.length) {
+			return this._tTime;
+		}
+		this._forcing = 1;
+		if (!this._dp && this._ts) { //special case for the global timeline (or any other that has no parent or detached parent).
+			this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? totalTime / this._ts : (this.totalDuration() - totalTime) / -this._ts));
+		}
+		super.totalTime(totalTime, suppressEvents);
+		this._forcing = 0;
+		return this;
+	}
+
+	addLabel(label, position) {
+		this.labels[label] = _parsePosition(this, position);
+		return this;
+	}
+
+	removeLabel(label) {
+		delete this.labels[label];
+		return this;
+	}
+
+	addPause(position, callback, params) {
+		let t = Tween.delayedCall(0, callback || _emptyFunc, params);
+		t.data = "isPause";
+		this._hasPause = 1;
+		return _addToTimeline(this, t, _parsePosition(this, position));
+	}
+
+	removePause(position) {
+		let child = this._first;
+		position = _parsePosition(this, position);
+		while (child) {
+			if (child._start === position && child.data === "isPause") {
+				_removeFromParent(child);
+			}
+			child = child._next;
+		}
+	}
+
+	killTweensOf(targets, props, onlyActive) {
+		let tweens = this.getTweensOf(targets, onlyActive),
+			i = tweens.length;
+		while (i--) {
+			(_overwritingTween !== tweens[i]) && tweens[i].kill(targets, props);
+		}
+		return this;
+	}
+
+	getTweensOf(targets, onlyActive) {
+		let a = [],
+			parsedTargets = toArray(targets),
+			child = this._first,
+			isGlobalTime = _isNumber(onlyActive), // a number is interpreted as a global time. If the animation spans
+			children;
+		while (child) {
+			if (child instanceof Tween) {
+				if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || (child._initted && child._ts)) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) { // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.
+					a.push(child);
+				}
+			} else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
+				a.push(...children);
+			}
+			child = child._next;
+		}
+		return a;
+	}
+
+	// potential future feature - targets() on timelines
+	// targets() {
+	// 	let result = [];
+	// 	this.getChildren(true, true, false).forEach(t => result.push(...t.targets()));
+	// 	return result.filter((v, i) => result.indexOf(v) === i);
+	// }
+
+	tweenTo(position, vars) {
+		vars = vars || {};
+		let tl = this,
+			endTime = _parsePosition(tl, position),
+			{ startAt, onStart, onStartParams, immediateRender } = vars,
+			initted,
+			tween = Tween.to(tl, _setDefaults({
+				ease: vars.ease || "none",
+				lazy: false,
+				immediateRender: false,
+				time: endTime,
+				overwrite: "auto",
+				duration: vars.duration || (Math.abs((endTime - ((startAt && "time" in startAt) ? startAt.time : tl._time)) / tl.timeScale())) || _tinyNum,
+				onStart: () => {
+					tl.pause();
+					if (!initted) {
+						let duration = vars.duration || Math.abs((endTime - ((startAt && "time" in startAt) ? startAt.time : tl._time)) / tl.timeScale());
+						(tween._dur !== duration) && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);
+						initted = 1;
+					}
+					onStart && onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.
+				}
+			}, vars));
+		return immediateRender ? tween.render(0) : tween;
+	}
+
+	tweenFromTo(fromPosition, toPosition, vars) {
+		return this.tweenTo(toPosition, _setDefaults({startAt:{time:_parsePosition(this, fromPosition)}}, vars));
+	}
+
+	recent() {
+		return this._recent;
+	}
+
+	nextLabel(afterTime = this._time) {
+		return _getLabelInDirection(this, _parsePosition(this, afterTime));
+	}
+
+	previousLabel(beforeTime = this._time) {
+		return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
+	}
+
+	currentLabel(value) {
+		return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
+	}
+
+	shiftChildren(amount, adjustLabels, ignoreBeforeTime = 0) {
+		let child = this._first,
+			labels = this.labels,
+			p;
+		while (child) {
+			if (child._start >= ignoreBeforeTime) {
+				child._start += amount;
+				child._end += amount;
+			}
+			child = child._next;
+		}
+		if (adjustLabels) {
+			for (p in labels) {
+				if (labels[p] >= ignoreBeforeTime) {
+					labels[p] += amount;
+				}
+			}
+		}
+		return _uncache(this);
+	}
+
+	invalidate(soft) {
+		let child = this._first;
+		this._lock = 0;
+		while (child) {
+			child.invalidate(soft);
+			child = child._next;
+		}
+		return super.invalidate(soft);
+	}
+
+	clear(includeLabels = true) {
+		let child = this._first,
+			next;
+		while (child) {
+			next = child._next;
+			this.remove(child);
+			child = next;
+		}
+		this._dp && (this._time = this._tTime = this._pTime = 0);
+		includeLabels && (this.labels = {});
+		return _uncache(this);
+	}
+
+	totalDuration(value) {
+		let max = 0,
+			self = this,
+			child = self._last,
+			prevStart = _bigNum,
+			prev, start, parent;
+		if (arguments.length) {
+			return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
+		}
+		if (self._dirty) {
+			parent = self.parent;
+			while (child) {
+				prev = child._prev; //record it here in case the tween changes position in the sequence...
+				child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.
+				start = child._start;
+				if (start > prevStart && self._sort && child._ts && !self._lock) { //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
+					self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().
+					_addToTimeline(self, child, start - child._delay, 1)._lock = 0;
+				} else {
+					prevStart = start;
+				}
+				if (start < 0 && child._ts) { //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
+					max -= start;
+					if ((!parent && !self._dp) || (parent && parent.smoothChildTiming)) {
+						self._start += start / self._ts;
+						self._time -= start;
+						self._tTime -= start;
+					}
+					self.shiftChildren(-start, false, -1e999);
+					prevStart = 0;
+				}
+				child._end > max && child._ts && (max = child._end);
+				child = prev;
+			}
+			_setDuration(self, (self === _globalTimeline && self._time > max) ? self._time : max, 1, 1);
+			self._dirty = 0;
+		}
+		return self._tDur;
+	}
+
+	static updateRoot(time) {
+		if (_globalTimeline._ts) {
+			_lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));
+			_lastRenderedFrame = _ticker.frame;
+		}
+		if (_ticker.frame >= _nextGCFrame) {
+			_nextGCFrame += _config.autoSleep || 120;
+			let child = _globalTimeline._first;
+			if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
+				while (child && !child._ts) {
+					child = child._next;
+				}
+				child || _ticker.sleep();
+			}
+		}
+	}
+
+}
+
+_setDefaults(Timeline.prototype, {_lock:0, _hasPause:0, _forcing:0});
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+let _addComplexStringPropTween = function(target, prop, start, end, setter, stringFilter, funcParam) { //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
+		let pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
+			index = 0,
+			matchIndex = 0,
+			result,	startNums, color, endNum, chunk, startNum, hasRandom, a;
+		pt.b = start;
+		pt.e = end;
+		start += ""; //ensure values are strings
+		end += "";
+		if ((hasRandom = ~end.indexOf("random("))) {
+			end = _replaceRandom(end);
+		}
+		if (stringFilter) {
+			a = [start, end];
+			stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.
+			start = a[0];
+			end = a[1];
+		}
+		startNums = start.match(_complexStringNumExp) || [];
+		while ((result = _complexStringNumExp.exec(end))) {
+			endNum = result[0];
+			chunk = end.substring(index, result.index);
+			if (color) {
+				color = (color + 1) % 5;
+			} else if (chunk.substr(-5) === "rgba(") {
+				color = 1;
+			}
+			if (endNum !== startNums[matchIndex++]) {
+				startNum = parseFloat(startNums[matchIndex-1]) || 0;
+				//these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.
+				pt._pt = {
+					_next: pt._pt,
+					p: (chunk || matchIndex === 1) ? chunk : ",", //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
+					s: startNum,
+					c: endNum.charAt(1) === "=" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,
+					m: (color && color < 4) ? Math.round : 0
+				};
+				index = _complexStringNumExp.lastIndex;
+			}
+		}
+		pt.c = (index < end.length) ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
+		pt.fp = funcParam;
+		if (_relExp.test(end) || hasRandom) {
+			pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
+		}
+		this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
+		return pt;
+	},
+	_addPropTween = function(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {
+		_isFunction(end) && (end = end(index || 0, target, targets));
+		let currentValue = target[prop],
+			parsedStart = (start !== "get") ? start : !_isFunction(currentValue) ? currentValue : (funcParam ? target[(prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)])) ? prop : "get" + prop.substr(3)](funcParam) : target[prop]()),
+			setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
+			pt;
+		if (_isString(end)) {
+			if (~end.indexOf("random(")) {
+				end = _replaceRandom(end);
+			}
+			if (end.charAt(1) === "=") {
+				pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);
+				if (pt || pt === 0) { // to avoid isNaN, like if someone passes in a value like "!= whatever"
+					end = pt;
+				}
+			}
+		}
+		if (!optional || parsedStart !== end || _forceAllPropTweens) {
+			if (!isNaN(parsedStart * end) && end !== "") { // fun fact: any number multiplied by "" is evaluated as the number 0!
+				pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof(currentValue) === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
+				funcParam && (pt.fp = funcParam);
+				modifier && pt.modifier(modifier, this, target);
+				return (this._pt = pt);
+			}
+			!currentValue && !(prop in target) && _missingPlugin(prop, end);
+			return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
+		}
+	},
+	//creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with "random()" in them. It does NOT process relative values.
+	_processVars = (vars, index, target, targets, tween) => {
+		_isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));
+		if (!_isObject(vars) || (vars.style && vars.nodeType) || _isArray(vars) || _isTypedArray(vars)) {
+			return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
+		}
+		let copy = {},
+			p;
+		for (p in vars) {
+			copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
+		}
+		return copy;
+	},
+	_checkPlugin = (property, vars, tween, index, target, targets) => {
+		let plugin, pt, ptLookup, i;
+		if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
+			tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);
+			if (tween !== _quickTween) {
+				ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.
+				i = plugin._props.length;
+				while (i--) {
+					ptLookup[plugin._props[i]] = pt;
+				}
+			}
+		}
+		return plugin;
+	},
+	_overwritingTween, //store a reference temporarily so we can avoid overwriting itself.
+	_forceAllPropTweens,
+	_initTween = (tween, time, tTime) => {
+		let vars = tween.vars,
+			{ ease, startAt, immediateRender, lazy, onUpdate, runBackwards, yoyoEase, keyframes, autoRevert } = vars,
+			dur = tween._dur,
+			prevStartAt = tween._startAt,
+			targets = tween._targets,
+			parent = tween.parent,
+			//when a stagger (or function-based duration/delay) is on a Tween instance, we create a nested timeline which means that the "targets" of that tween don't reflect the parent. This function allows us to discern when it's a nested tween and in that case, return the full targets array so that function-based values get calculated properly. Also remember that if the tween has a stagger AND keyframes, it could be multiple levels deep which is why we store the targets Array in the vars of the timeline.
+			fullTargets = (parent && parent.data === "nested") ? parent.vars.targets : targets,
+			autoOverwrite = (tween._overwrite === "auto") && !_suppressOverwrites,
+			tl = tween.timeline,
+			cleanVars, i, p, pt, target, hasPriority, gsData, harness, plugin, ptLookup, index, harnessVars, overwritten;
+		tl && (!keyframes || !ease) && (ease = "none");
+		tween._ease = _parseEase(ease, _defaults.ease);
+		tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;
+		if (yoyoEase && tween._yoyo && !tween._repeat) { //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.
+			yoyoEase = tween._yEase;
+			tween._yEase = tween._ease;
+			tween._ease = yoyoEase;
+		}
+		tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.
+		if (!tl || (keyframes && !vars.stagger)) { //if there's an internal timeline, skip all the parsing because we passed that task down the chain.
+			harness = targets[0] ? _getCache(targets[0]).harness : 0;
+			harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.
+			cleanVars = _copyExcluding(vars, _reservedProps);
+			if (prevStartAt) {
+				prevStartAt._zTime < 0 && prevStartAt.progress(1); // in case it's a lazy startAt that hasn't rendered yet.
+				(time < 0 && runBackwards && immediateRender && !autoRevert) ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig); // if it's a "startAt" (not "from()" or runBackwards: true), we only need to do a shallow revert (keep transforms cached in CSSPlugin)
+				// don't just _removeFromParent(prevStartAt.render(-1, true)) because that'll leave inline styles. We're creating a new _startAt for "startAt" tweens that re-capture things to ensure that if the pre-tween values changed since the tween was created, they're recorded.
+				prevStartAt._lazy = 0;
+			}
+			if (startAt) {
+				_removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({data: "isStart", overwrite: false, parent: parent, immediateRender: true, lazy: !prevStartAt && _isNotFalse(lazy), startAt: null, delay: 0, onUpdate: onUpdate && (() => _callback(tween, "onUpdate")), stagger: 0}, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);
+				tween._startAt._dp = 0; // don't allow it to get put back into root timeline! Like when revert() is called and totalTime() gets set.
+				tween._startAt._sat = tween; // used in globalTime(). _sat stands for _startAtTween
+				(time < 0 && (_reverting || (!immediateRender && !autoRevert))) && tween._startAt.revert(_revertConfigNoKill); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.
+				if (immediateRender) {
+					if (dur && time <= 0 && tTime <= 0) { // check tTime here because in the case of a yoyo tween whose playhead gets pushed to the end like tween.progress(1), we should allow it through so that the onComplete gets fired properly.
+						time && (tween._zTime = time);
+						return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
+					}
+				}
+			} else if (runBackwards && dur) {
+				//from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
+				if (!prevStartAt) {
+					time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0
+					p = _setDefaults({
+						overwrite: false,
+						data: "isFromStart", //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
+						lazy: immediateRender && !prevStartAt && _isNotFalse(lazy),
+						immediateRender: immediateRender, //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
+						stagger: 0,
+						parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y: gsap.utils.wrap([-100,100]), stagger: 0.5})
+					}, cleanVars);
+					harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})
+					_removeFromParent(tween._startAt = Tween.set(targets, p));
+					tween._startAt._dp = 0; // don't allow it to get put back into root timeline!
+					tween._startAt._sat = tween; // used in globalTime()
+					(time < 0) && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));
+					tween._zTime = time;
+					if (!immediateRender) {
+						_initTween(tween._startAt, _tinyNum, _tinyNum); //ensures that the initial values are recorded
+					} else if (!time) {
+						return;
+					}
+				}
+			}
+			tween._pt = tween._ptCache = 0;
+			lazy = (dur && _isNotFalse(lazy)) || (lazy && !dur);
+			for (i = 0; i < targets.length; i++) {
+				target = targets[i];
+				gsData = target._gsap || _harness(targets)[i]._gsap;
+				tween._ptLookup[i] = ptLookup = {};
+				_lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)
+				index = fullTargets === targets ? i : fullTargets.indexOf(target);
+				if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
+					tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);
+					plugin._props.forEach(name => {ptLookup[name] = pt;});
+					plugin.priority && (hasPriority = 1);
+				}
+				if (!harness || harnessVars) {
+					for (p in cleanVars) {
+						if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
+							plugin.priority && (hasPriority = 1);
+						} else {
+							ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
+						}
+					}
+				}
+				tween._op && tween._op[i] && tween.kill(target, tween._op[i]);
+				if (autoOverwrite && tween._pt) {
+					_overwritingTween = tween;
+					_globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time)); // make sure the overwriting doesn't overwrite THIS tween!!!
+					overwritten = !tween.parent;
+					_overwritingTween = 0;
+				}
+				tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
+			}
+			hasPriority && _sortPropTweensByPriority(tween);
+			tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.
+		}
+		tween._onUpdate = onUpdate;
+		tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.
+		(keyframes && time <= 0) && tl.render(_bigNum, true, true); // if there's a 0% keyframe, it'll render in the "before" state for any staggered/delayed animations thus when the following tween initializes, it'll use the "before" state instead of the "after" state as the initial values.
+	},
+	_updatePropTweens = (tween, property, value, start, startIsRelative, ratio, time, skipRecursion) => {
+		let ptCache = ((tween._pt && tween._ptCache) || (tween._ptCache = {}))[property],
+			pt, rootPT, lookup, i;
+		if (!ptCache) {
+			ptCache = tween._ptCache[property] = [];
+			lookup = tween._ptLookup;
+			i = tween._targets.length;
+			while (i--) {
+				pt = lookup[i][property];
+				if (pt && pt.d && pt.d._pt) { // it's a plugin, so find the nested PropTween
+					pt = pt.d._pt;
+					while (pt && pt.p !== property && pt.fp !== property) { // "fp" is functionParam for things like setting CSS variables which require .setProperty("--var-name", value)
+						pt = pt._next;
+					}
+				}
+				if (!pt) { // there is no PropTween associated with that property, so we must FORCE one to be created and ditch out of this
+					// if the tween has other properties that already rendered at new positions, we'd normally have to rewind to put them back like tween.render(0, true) before forcing an _initTween(), but that can create another edge case like tweening a timeline's progress would trigger onUpdates to fire which could move other things around. It's better to just inform users that .resetTo() should ONLY be used for tweens that already have that property. For example, you can't gsap.to(...{ y: 0 }) and then tween.restTo("x", 200) for example.
+					_forceAllPropTweens = 1; // otherwise, when we _addPropTween() and it finds no change between the start and end values, it skips creating a PropTween (for efficiency...why tween when there's no difference?) but in this case we NEED that PropTween created so we can edit it.
+					tween.vars[property] = "+=0";
+					_initTween(tween, time);
+					_forceAllPropTweens = 0;
+					return skipRecursion ? _warn(property + " not eligible for reset") : 1; // if someone tries to do a quickTo() on a special property like borderRadius which must get split into 4 different properties, that's not eligible for .resetTo().
+				}
+				ptCache.push(pt);
+			}
+		}
+		i = ptCache.length;
+		while (i--) {
+			rootPT = ptCache[i];
+			pt = rootPT._pt || rootPT; // complex values may have nested PropTweens. We only accommodate the FIRST value.
+			pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;
+			pt.c = value - pt.s;
+			rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e)); // mainly for CSSPlugin (end value)
+			rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b));          // (beginning value)
+		}
+	},
+	_addAliasesToVars = (targets, vars) => {
+		let harness = targets[0] ? _getCache(targets[0]).harness : 0,
+			propertyAliases = (harness && harness.aliases),
+			copy, p, i, aliases;
+		if (!propertyAliases) {
+			return vars;
+		}
+		copy = _merge({}, vars);
+		for (p in propertyAliases) {
+			if (p in copy) {
+				aliases = propertyAliases[p].split(",");
+				i = aliases.length;
+				while(i--) {
+					copy[aliases[i]] = copy[p];
+				}
+			}
+
+		}
+		return copy;
+	},
+	// parses multiple formats, like {"0%": {x: 100}, {"50%": {x: -20}} and { x: {"0%": 100, "50%": -20} }, and an "ease" can be set on any object. We populate an "allProps" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a "t" (time), "v", (value), and "e" (ease) property. This allows us to piece together a timeline later.
+	_parseKeyframe = (prop, obj, allProps, easeEach) => {
+		let ease = obj.ease || easeEach || "power1.inOut",
+			p, a;
+		if (_isArray(obj)) {
+			a = allProps[prop] || (allProps[prop] = []);
+			// t = time (out of 100), v = value, e = ease
+			obj.forEach((value, i) => a.push({t: i / (obj.length - 1) * 100, v: value, e: ease}));
+		} else {
+			for (p in obj) {
+				a = allProps[p] || (allProps[p] = []);
+				p === "ease" || a.push({t: parseFloat(prop), v: obj[p], e: ease});
+			}
+		}
+	},
+	_parseFuncOrString = (value, tween, i, target, targets) => (_isFunction(value) ? value.call(tween, i, target, targets) : (_isString(value) && ~value.indexOf("random(")) ? _replaceRandom(value) : value),
+	_staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",
+	_staggerPropsToSkip = {};
+_forEachName(_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger", name => _staggerPropsToSkip[name] = 1);
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * TWEEN
+ * --------------------------------------------------------------------------------------
+ */
+
+class Tween extends Animation {
+
+	constructor(targets, vars, position, skipInherit) {
+		if (typeof(vars) === "number") {
+			position.duration = vars;
+			vars = position;
+			position = null;
+		}
+		super(skipInherit ? vars : _inheritDefaults(vars));
+		let { duration, delay, immediateRender, stagger, overwrite, keyframes, defaults, scrollTrigger, yoyoEase } = this.vars,
+			parent = vars.parent || _globalTimeline,
+			parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : ("length" in vars)) ? [targets] : toArray(targets), // edge case: someone might try animating the "length" of an object with a "length" property that's initially set to 0 so don't interpret that as an empty Array-like object.
+			tl, i, copy, l, p, curTarget, staggerFunc, staggerVarsToMerge;
+		this._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://gsap.com", !_config.nullTargetWarn) || [];
+		this._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property
+		this._overwrite = overwrite;
+		if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
+			vars = this.vars;
+			tl = this.timeline = new Timeline({data: "nested", defaults: defaults || {}, targets: parent && parent.data === "nested" ? parent.vars.targets : parsedTargets}); // we need to store the targets because for staggers and keyframes, we end up creating an individual tween for each but function-based values need to know the index and the whole Array of targets.
+			tl.kill();
+			tl.parent = tl._dp = this;
+			tl._start = 0;
+			if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
+				l = parsedTargets.length;
+				staggerFunc = stagger && distribute(stagger);
+				if (_isObject(stagger)) { //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.
+					for (p in stagger) {
+						if (~_staggerTweenProps.indexOf(p)) {
+							staggerVarsToMerge || (staggerVarsToMerge = {});
+							staggerVarsToMerge[p] = stagger[p];
+						}
+					}
+				}
+				for (i = 0; i < l; i++) {
+					copy = _copyExcluding(vars, _staggerPropsToSkip);
+					copy.stagger = 0;
+					yoyoEase && (copy.yoyoEase = yoyoEase);
+					staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
+					curTarget = parsedTargets[i];
+					//don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.
+					copy.duration = +_parseFuncOrString(duration, this, i, curTarget, parsedTargets);
+					copy.delay = (+_parseFuncOrString(delay, this, i, curTarget, parsedTargets) || 0) - this._delay;
+					if (!stagger && l === 1 && copy.delay) { // if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.
+						this._delay = delay = copy.delay;
+						this._start += delay;
+						copy.delay = 0;
+					}
+					tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);
+					tl._ease = _easeMap.none;
+				}
+				tl.duration() ? (duration = delay = 0) : (this.timeline = 0); // if the timeline's duration is 0, we don't need a timeline internally!
+			} else if (keyframes) {
+				_inheritDefaults(_setDefaults(tl.vars.defaults, {ease:"none"}));
+				tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
+				let time = 0,
+					a, kf, v;
+				if (_isArray(keyframes)) {
+					keyframes.forEach(frame => tl.to(parsedTargets, frame, ">"));
+					tl.duration(); // to ensure tl._dur is cached because we tap into it for performance purposes in the render() method.
+				} else {
+					copy = {};
+					for (p in keyframes) {
+						p === "ease" || p === "easeEach" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
+					}
+					for (p in copy) {
+						a = copy[p].sort((a, b) => a.t - b.t);
+						time = 0;
+						for (i = 0; i < a.length; i++) {
+							kf = a[i];
+							v = {ease: kf.e, duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration};
+							v[p] = kf.v;
+							tl.to(parsedTargets, v, time);
+							time += v.duration;
+						}
+					}
+					tl.duration() < duration && tl.to({}, {duration: duration - tl.duration()}); // in case keyframes didn't go to 100%
+				}
+			}
+			duration || this.duration((duration = tl.duration()));
+
+		} else {
+			this.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)
+		}
+
+		if (overwrite === true && !_suppressOverwrites) {
+			_overwritingTween = this;
+			_globalTimeline.killTweensOf(parsedTargets);
+			_overwritingTween = 0;
+		}
+		_addToTimeline(parent, this, position);
+		vars.reversed && this.reverse();
+		vars.paused && this.paused(true);
+		if (immediateRender || (!duration && !keyframes && this._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(this) && parent.data !== "nested")) {
+			this._tTime = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
+			this.render(Math.max(0, -delay) || 0); //in case delay is negative
+		}
+		scrollTrigger && _scrollTrigger(this, scrollTrigger);
+	}
+
+	render(totalTime, suppressEvents, force) {
+		let prevTime = this._time,
+			tDur = this._tDur,
+			dur = this._dur,
+			isNegative = totalTime < 0,
+			tTime = (totalTime > tDur - _tinyNum && !isNegative) ? tDur : (totalTime < _tinyNum) ? 0 : totalTime,
+			time, pt, iteration, cycleDuration, prevIteration, isYoyo, ratio, timeline, yoyoEase;
+		if (!dur) {
+			_renderZeroDurationTween(this, totalTime, suppressEvents, force);
+		} else if (tTime !== this._tTime || !totalTime || force || (!this._initted && this._tTime) || (this._startAt && (this._zTime < 0) !== isNegative)) { //this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)
+			time = tTime;
+			timeline = this.timeline;
+			if (this._repeat) { //adjust the time for repeats and yoyos
+				cycleDuration = dur + this._rDelay;
+				if (this._repeat < -1 && isNegative) {
+					return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
+				}
+				time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)
+				if (tTime === tDur) { // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
+					iteration = this._repeat;
+					time = dur;
+				} else {
+					iteration = ~~(tTime / cycleDuration);
+					if (iteration && iteration === _roundPrecise(tTime / cycleDuration)) {
+						time = dur;
+						iteration--;
+					}
+					time > dur && (time = dur);
+				}
+				isYoyo = this._yoyo && (iteration & 1);
+				if (isYoyo) {
+					yoyoEase = this._yEase;
+					time = dur - time;
+				}
+				prevIteration = _animationCycle(this._tTime, cycleDuration);
+				if (time === prevTime && !force && this._initted && iteration === prevIteration) {
+					//could be during the repeatDelay part. No need to render and fire callbacks.
+					this._tTime = tTime;
+					return this;
+				}
+				if (iteration !== prevIteration) {
+					timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo);
+					//repeatRefresh functionality
+					if (this.vars.repeatRefresh && !isYoyo && !this._lock && this._time !== cycleDuration && this._initted) { // this._time will === cycleDuration when we render at EXACTLY the end of an iteration. Without this condition, it'd often do the repeatRefresh render TWICE (again on the very next tick).
+						this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.
+						this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;
+					}
+				}
+			}
+
+			if (!this._initted) {
+				if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {
+					this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.
+					return this;
+				}
+				if (prevTime !== this._time && !(force && this.vars.repeatRefresh && iteration !== prevIteration)) { // rare edge case - during initialization, an onUpdate in the _startAt (.fromTo()) might force this tween to render at a different spot in which case we should ditch this render() call so that it doesn't revert the values. But we also don't want to dump if we're doing a repeatRefresh render!
+					return this;
+				}
+				if (dur !== this._dur) { // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.
+					return this.render(totalTime, suppressEvents, force);
+				}
+			}
+
+			this._tTime = tTime;
+			this._time = time;
+
+			if (!this._act && this._ts) {
+				this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.
+				this._lazy = 0;
+			}
+
+			this.ratio = ratio = (yoyoEase || this._ease)(time / dur);
+			if (this._from) {
+				this.ratio = ratio = 1 - ratio;
+			}
+
+			if (time && !prevTime && !suppressEvents && !iteration) {
+				_callback(this, "onStart");
+				if (this._tTime !== tTime) { // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
+					return this;
+				}
+			}
+			pt = this._pt;
+			while (pt) {
+				pt.r(ratio, pt.d);
+				pt = pt._next;
+			}
+			(timeline && timeline.render(totalTime < 0 ? totalTime : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force)) || (this._startAt && (this._zTime = totalTime));
+
+			if (this._onUpdate && !suppressEvents) {
+				isNegative && _rewindStartAt(this, totalTime, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
+				_callback(this, "onUpdate");
+			}
+
+			this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");
+
+			if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
+				isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);
+				(totalTime || !dur) && ((tTime === this._tDur && this._ts > 0) || (!tTime && this._ts < 0)) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.
+			    if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) { // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();
+					_callback(this, (tTime === tDur ? "onComplete" : "onReverseComplete"), true);
+					this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
+				}
+			}
+
+		}
+		return this;
+	}
+
+	targets() {
+		return this._targets;
+	}
+
+	invalidate(soft) { // "soft" gives us a way to clear out everything EXCEPT the recorded pre-"from" portion of from() tweens. Otherwise, for example, if you tween.progress(1).render(0, true true).invalidate(), the "from" values would persist and then on the next render, the from() tweens would initialize and the current value would match the "from" values, thus animate from the same value to the same value (no animation). We tap into this in ScrollTrigger's refresh() where we must push a tween to completion and then back again but honor its init state in case the tween is dependent on another tween further up on the page.
+		(!soft || !this.vars.runBackwards) && (this._startAt = 0);
+		this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;
+		this._ptLookup = [];
+		this.timeline && this.timeline.invalidate(soft);
+		return super.invalidate(soft);
+	}
+
+	resetTo(property, value, start, startIsRelative, skipRecursion) {
+		_tickerActive || _ticker.wake();
+		this._ts || this.play();
+		let time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),
+			ratio;
+		this._initted || _initTween(this, time);
+		ratio = this._ease(time / this._dur); // don't just get tween.ratio because it may not have rendered yet.
+		// possible future addition to allow an object with multiple values to update, like tween.resetTo({x: 100, y: 200}); At this point, it doesn't seem worth the added kb given the fact that most users will likely opt for the convenient gsap.quickTo() way of interacting with this method.
+		// if (_isObject(property)) { // performance optimization
+		// 	for (p in property) {
+		// 		if (_updatePropTweens(this, p, property[p], value ? value[p] : null, start, ratio, time)) {
+		// 			return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
+		// 		}
+		// 	}
+		// } else {
+			if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time, skipRecursion)) {
+				return this.resetTo(property, value, start, startIsRelative, 1); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
+			}
+		//}
+		_alignPlayhead(this, 0);
+		this.parent || _addLinkedListItem(this._dp, this, "_first", "_last", this._dp._sort ? "_start" : 0);
+		return this.render(0);
+	}
+
+	kill(targets, vars = "all") {
+		if (!targets && (!vars || vars === "all")) {
+			this._lazy = this._pt = 0;
+			return this.parent ? _interrupt(this) : this;
+		}
+		if (this.timeline) {
+			let tDur = this.timeline.totalDuration();
+			this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweening, interrupt.
+			this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.
+			return this;
+		}
+		let parsedTargets = this._targets,
+			killingTargets = targets ? toArray(targets) : parsedTargets,
+			propTweenLookup = this._ptLookup,
+			firstPT = this._pt,
+			overwrittenProps, curLookup, curOverwriteProps, props, p, pt, i;
+		if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
+			vars === "all" && (this._pt = 0);
+			return _interrupt(this);
+		}
+		overwrittenProps = this._op = this._op || [];
+		if (vars !== "all") { //so people can pass in a comma-delimited list of property names
+			if (_isString(vars)) {
+				p = {};
+				_forEachName(vars, name => p[name] = 1);
+				vars = p;
+			}
+			vars = _addAliasesToVars(parsedTargets, vars);
+		}
+		i = parsedTargets.length;
+		while (i--) {
+			if (~killingTargets.indexOf(parsedTargets[i])) {
+				curLookup = propTweenLookup[i];
+				if (vars === "all") {
+					overwrittenProps[i] = vars;
+					props = curLookup;
+					curOverwriteProps = {};
+				} else {
+					curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
+					props = vars;
+				}
+				for (p in props) {
+					pt = curLookup && curLookup[p];
+					if (pt) {
+						if (!("kill" in pt.d) || pt.d.kill(p) === true) {
+							_removeLinkedListItem(this, pt, "_pt");
+						}
+						delete curLookup[p];
+					}
+					if (curOverwriteProps !== "all") {
+						curOverwriteProps[p] = 1;
+					}
+				}
+			}
+		}
+		this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.
+		return this;
+	}
+
+
+	static to(targets, vars) {
+		return new Tween(targets, vars, arguments[2]);
+	}
+
+	static from(targets, vars) {
+		return _createTweenType(1, arguments);
+	}
+
+	static delayedCall(delay, callback, params, scope) {
+		return new Tween(callback, 0, {immediateRender:false, lazy:false, overwrite:false, delay:delay, onComplete:callback, onReverseComplete:callback, onCompleteParams:params, onReverseCompleteParams:params, callbackScope:scope}); // we must use onReverseComplete too for things like timeline.add(() => {...}) which should be triggered in BOTH directions (forward and reverse)
+	}
+
+	static fromTo(targets, fromVars, toVars) {
+		return _createTweenType(2, arguments);
+	}
+
+	static set(targets, vars) {
+		vars.duration = 0;
+		vars.repeatDelay || (vars.repeat = 0);
+		return new Tween(targets, vars);
+	}
+
+	static killTweensOf(targets, props, onlyActive) {
+		return _globalTimeline.killTweensOf(targets, props, onlyActive);
+	}
+}
+
+_setDefaults(Tween.prototype, {_targets:[], _lazy:0, _startAt:0, _op:0, _onInit:0});
+
+//add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)
+// _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {
+// 	Tween.prototype[name] = function() {
+// 		let tl = new Timeline();
+// 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));
+// 	}
+// });
+
+//for backward compatibility. Leverage the timeline calls.
+_forEachName("staggerTo,staggerFrom,staggerFromTo", name => {
+	Tween[name] = function() {
+		let tl = new Timeline(),
+			params = _slice.call(arguments, 0);
+		params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
+		return tl[name].apply(tl, params);
+	};
+});
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * PROPTWEEN
+ * --------------------------------------------------------------------------------------
+ */
+let _setterPlain = (target, property, value) => target[property] = value,
+	_setterFunc = (target, property, value) => target[property](value),
+	_setterFuncWithParam = (target, property, value, data) => target[property](data.fp, value),
+	_setterAttribute = (target, property, value) => target.setAttribute(property, value),
+	_getSetter = (target, property) => _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain,
+	_renderPlain = (ratio, data) => data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data),
+	_renderBoolean = (ratio, data) => data.set(data.t, data.p, !!(data.s + data.c * ratio), data),
+	_renderComplexString = function(ratio, data) {
+		let pt = data._pt,
+			s = "";
+		if (!ratio && data.b) { //b = beginning string
+			s = data.b;
+		} else if (ratio === 1 && data.e) { //e = ending string
+			s = data.e;
+		} else {
+			while (pt) {
+				s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : (Math.round((pt.s + pt.c * ratio) * 10000) / 10000)) + s; //we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.
+				pt = pt._next;
+			}
+			s += data.c; //we use the "c" of the PropTween to store the final chunk of non-numeric text.
+		}
+		data.set(data.t, data.p, s, data);
+	},
+	_renderPropTweens = function(ratio, data) {
+		let pt = data._pt;
+		while (pt) {
+			pt.r(ratio, pt.d);
+			pt = pt._next;
+		}
+	},
+	_addPluginModifier = function(modifier, tween, target, property) {
+		let pt = this._pt,
+			next;
+		while (pt) {
+			next = pt._next;
+			pt.p === property && pt.modifier(modifier, tween, target);
+			pt = next;
+		}
+	},
+	_killPropTweensOf = function(property) {
+		let pt = this._pt,
+			hasNonDependentRemaining, next;
+		while (pt) {
+			next = pt._next;
+			if ((pt.p === property && !pt.op) || pt.op === property) {
+				_removeLinkedListItem(this, pt, "_pt");
+			} else if (!pt.dep) {
+				hasNonDependentRemaining = 1;
+			}
+			pt = next;
+		}
+		return !hasNonDependentRemaining;
+	},
+	_setterWithModifier = (target, property, value, data) => {
+		data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
+	},
+	_sortPropTweensByPriority = parent => {
+		let pt = parent._pt,
+			next, pt2, first, last;
+		//sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)
+		while (pt) {
+			next = pt._next;
+			pt2 = first;
+			while (pt2 && pt2.pr > pt.pr) {
+				pt2 = pt2._next;
+			}
+			if ((pt._prev = pt2 ? pt2._prev : last)) {
+				pt._prev._next = pt;
+			} else {
+				first = pt;
+			}
+			if ((pt._next = pt2)) {
+				pt2._prev = pt;
+			} else {
+				last = pt;
+			}
+			pt = next;
+		}
+		parent._pt = first;
+	};
+
+//PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)
+class PropTween {
+
+	constructor(next, target, prop, start, change, renderer, data, setter, priority) {
+		this.t = target;
+		this.s = start;
+		this.c = change;
+		this.p = prop;
+		this.r = renderer || _renderPlain;
+		this.d = data || this;
+		this.set = setter || _setterPlain;
+		this.pr = priority || 0;
+		this._next = next;
+		if (next) {
+			next._prev = this;
+		}
+	}
+
+	modifier(func, tween, target) {
+		this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)
+		this.set = _setterWithModifier;
+		this.m = func;
+		this.mt = target; //modifier target
+		this.tween = tween;
+	}
+}
+
+
+
+//Initialization tasks
+_forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", name => _reservedProps[name] = 1);
+_globals.TweenMax = _globals.TweenLite = Tween;
+_globals.TimelineLite = _globals.TimelineMax = Timeline;
+_globalTimeline = new Timeline({sortChildren: false, defaults: _defaults, autoRemoveChildren: true, id:"root", smoothChildTiming: true});
+_config.stringFilter = _colorStringFilter;
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+let _media = [],
+	_listeners = {},
+	_emptyArray = [],
+	_lastMediaTime = 0,
+	_contextID = 0,
+	_dispatch = type => (_listeners[type] || _emptyArray).map(f => f()),
+	_onMediaChange = () => {
+		let time = Date.now(),
+			matches = [];
+		if (time - _lastMediaTime > 2) {
+			_dispatch("matchMediaInit");
+			_media.forEach(c => {
+				let queries = c.queries,
+					conditions = c.conditions,
+					match, p, anyMatch, toggled;
+				for (p in queries) {
+					match = _win.matchMedia(queries[p]).matches; // Firefox doesn't update the "matches" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.
+					match && (anyMatch = 1);
+					if (match !== conditions[p]) {
+						conditions[p] = match;
+						toggled = 1;
+					}
+				}
+				if (toggled) {
+					c.revert();
+					anyMatch && matches.push(c);
+				}
+			});
+			_dispatch("matchMediaRevert");
+			matches.forEach(c => c.onMatch(c, func => c.add(null, func)));
+			_lastMediaTime = time;
+			_dispatch("matchMedia");
+		}
+	};
+
+class Context {
+	constructor(func, scope) {
+		this.selector = scope && selector(scope);
+		this.data = [];
+		this._r = []; // returned/cleanup functions
+		this.isReverted = false;
+		this.id = _contextID++; // to work around issues that frameworks like Vue cause by making things into Proxies which make it impossible to do something like _media.indexOf(this) because "this" would no longer refer to the Context instance itself - it'd refer to a Proxy! We needed a way to identify the context uniquely
+		func && this.add(func);
+	}
+	add(name, func, scope) {
+		// possible future addition if we need the ability to add() an animation to a context and for whatever reason cannot create that animation inside of a context.add(() => {...}) function.
+		// if (name && _isFunction(name.revert)) {
+		// 	this.data.push(name);
+		// 	return (name._ctx = this);
+		// }
+		if (_isFunction(name)) {
+			scope = func;
+			func = name;
+			name = _isFunction;
+		}
+		let self = this,
+			f = function() {
+				let prev = _context,
+					prevSelector = self.selector,
+					result;
+				prev && prev !== self && prev.data.push(self);
+				scope && (self.selector = selector(scope));
+				_context = self;
+				result = func.apply(self, arguments);
+				_isFunction(result) && self._r.push(result);
+				_context = prev;
+				self.selector = prevSelector;
+				self.isReverted = false;
+				return result;
+			};
+		self.last = f;
+		return name === _isFunction ? f(self, func => self.add(null, func)) : name ? (self[name] = f) : f;
+	}
+	ignore(func) {
+		let prev = _context;
+		_context = null;
+		func(this);
+		_context = prev;
+	}
+	getTweens() {
+		let a = [];
+		this.data.forEach(e => (e instanceof Context) ? a.push(...e.getTweens()) : (e instanceof Tween) && !(e.parent && e.parent.data === "nested") && a.push(e));
+		return a;
+	}
+	clear() {
+		this._r.length = this.data.length = 0;
+	}
+	kill(revert, matchMedia) {
+		if (revert) {
+			let tweens = this.getTweens(),
+				i = this.data.length,
+				t;
+			while (i--) { // Flip plugin tweens are very different in that they should actually be pushed to their end. The plugin replaces the timeline's .revert() method to do exactly that. But we also need to remove any of those nested tweens inside the flip timeline so that they don't get individually reverted.
+				t = this.data[i];
+				if (t.data === "isFlip") {
+					t.revert();
+					t.getChildren(true, true, false).forEach(tween => tweens.splice(tweens.indexOf(tween), 1));
+				}
+			}
+			// save as an object so that we can cache the globalTime for each tween to optimize performance during the sort
+			tweens.map(t => { return {g: t._dur || t._delay || (t._sat && !t._sat.vars.immediateRender) ? t.globalTime(0) : -Infinity, t}}).sort((a, b) => b.g - a.g || -Infinity).forEach(o => o.t.revert(revert)); // note: all of the _startAt tweens should be reverted in reverse order that they were created, and they'll all have the same globalTime (-1) so the " || -1" in the sort keeps the order properly.
+			i = this.data.length;
+			while (i--) { // make sure we loop backwards so that, for example, SplitTexts that were created later on the same element get reverted first
+				t = this.data[i];
+				if (t instanceof Timeline) {
+					if (t.data !== "nested") {
+						t.scrollTrigger && t.scrollTrigger.revert();
+						t.kill(); // don't revert() the timeline because that's duplicating efforts since we already reverted all the tweens
+					}
+				} else {
+					!(t instanceof Tween) && t.revert && t.revert(revert);
+				}
+			}
+			this._r.forEach(f => f(revert, this));
+			this.isReverted = true;
+		} else {
+			this.data.forEach(e => e.kill && e.kill());
+		}
+		this.clear();
+		if (matchMedia) {
+			let i = _media.length;
+			while (i--) { // previously, we checked _media.indexOf(this), but some frameworks like Vue enforce Proxy objects that make it impossible to get the proper result that way, so we must use a unique ID number instead.
+				_media[i].id === this.id && _media.splice(i, 1);
+			}
+		}
+	}
+	revert(config) {
+		this.kill(config || {});
+	}
+}
+
+
+
+
+class MatchMedia {
+	constructor(scope) {
+		this.contexts = [];
+		this.scope = scope;
+		_context && _context.data.push(this);
+	}
+	add(conditions, func, scope) {
+		_isObject(conditions) || (conditions = {matches: conditions});
+		let context = new Context(0, scope || this.scope),
+			cond = context.conditions = {},
+			mq, p, active;
+		_context && !context.selector && (context.selector = _context.selector); // in case a context is created inside a context. Like a gsap.matchMedia() that's inside a scoped gsap.context()
+		this.contexts.push(context);
+		func = context.add("onMatch", func);
+		context.queries = conditions;
+		for (p in conditions) {
+			if (p === "all") {
+				active = 1;
+			} else {
+				mq = _win.matchMedia(conditions[p]);
+				if (mq) {
+					_media.indexOf(context) < 0 && _media.push(context);
+					(cond[p] = mq.matches) && (active = 1);
+					mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener("change", _onMediaChange);
+				}
+			}
+		}
+		active && func(context, f => context.add(null, f));
+		return this;
+	}
+	// refresh() {
+	// 	let time = _lastMediaTime,
+	// 		media = _media;
+	// 	_lastMediaTime = -1;
+	// 	_media = this.contexts;
+	// 	_onMediaChange();
+	// 	_lastMediaTime = time;
+	// 	_media = media;
+	// }
+	revert(config) {
+		this.kill(config || {});
+	}
+	kill(revert) {
+		this.contexts.forEach(c => c.kill(revert, true));
+	}
+}
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * GSAP
+ * --------------------------------------------------------------------------------------
+ */
+const _gsap = {
+	registerPlugin(...args) {
+		args.forEach(config => _createPlugin(config));
+	},
+	timeline(vars) {
+		return new Timeline(vars);
+	},
+	getTweensOf(targets, onlyActive) {
+		return _globalTimeline.getTweensOf(targets, onlyActive);
+	},
+	getProperty(target, property, unit, uncache) {
+		_isString(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in
+		let getter = _getCache(target || {}).get,
+			format = unit ? _passThrough : _numericIfPossible;
+		unit === "native" && (unit = "");
+		return !target ? target : !property ? (property, unit, uncache) => format(((_plugins[property] && _plugins[property].get) || getter)(target, property, unit, uncache)) : format(((_plugins[property] && _plugins[property].get) || getter)(target, property, unit, uncache));
+	},
+	quickSetter(target, property, unit) {
+		target = toArray(target);
+		if (target.length > 1) {
+			let setters = target.map(t => gsap.quickSetter(t, property, unit)),
+				l = setters.length;
+			return value => {
+				let i = l;
+				while(i--) {
+					setters[i](value);
+				}
+			}
+		}
+		target = target[0] || {};
+		let Plugin = _plugins[property],
+			cache = _getCache(target),
+			p = (cache.harness && (cache.harness.aliases || {})[property]) || property, // in case it's an alias, like "rotate" for "rotation".
+			setter = Plugin ? value => {
+				let p = new Plugin();
+				_quickTween._pt = 0;
+				p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
+				p.render(1, p);
+				_quickTween._pt && _renderPropTweens(1, _quickTween);
+			} : cache.set(target, p);
+		return Plugin ? setter : value => setter(target, p, unit ? value + unit : value, cache, 1);
+	},
+	quickTo(target, property, vars) {
+		let tween = gsap.to(target, _merge({[property]: "+=0.1", paused: true}, vars || {})),
+			func = (value, start, startIsRelative) => tween.resetTo(property, value, start, startIsRelative);
+		func.tween = tween;
+		return func;
+	},
+	isTweening(targets) {
+		return _globalTimeline.getTweensOf(targets, true).length > 0;
+	},
+	defaults(value) {
+		value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));
+		return _mergeDeep(_defaults, value || {});
+	},
+	config(value) {
+		return _mergeDeep(_config, value || {});
+	},
+	registerEffect({name, effect, plugins, defaults, extendTimeline}) {
+		(plugins || "").split(",").forEach(pluginName => pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin."));
+		_effects[name] = (targets, vars, tl) => effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);
+		if (extendTimeline) {
+			Timeline.prototype[name] = function(targets, vars, position) {
+				return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
+			};
+		}
+	},
+	registerEase(name, ease) {
+		_easeMap[name] = _parseEase(ease);
+	},
+	parseEase(ease, defaultEase) {
+		return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
+	},
+	getById(id) {
+		return _globalTimeline.getById(id);
+	},
+	exportRoot(vars = {}, includeDelayedCalls) {
+		let tl = new Timeline(vars),
+			child, next;
+		tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);
+		_globalTimeline.remove(tl);
+		tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).
+		tl._time = tl._tTime = _globalTimeline._time;
+		child = _globalTimeline._first;
+		while (child) {
+			next = child._next;
+			if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
+				_addToTimeline(tl, child, child._start - child._delay);
+			}
+			child = next;
+		}
+		_addToTimeline(_globalTimeline, tl, 0);
+		return tl;
+	},
+	context: (func, scope) => func ? new Context(func, scope) : _context,
+	matchMedia: scope => new MatchMedia(scope),
+	matchMediaRefresh: () => _media.forEach(c => {
+		let cond = c.conditions,
+			found, p;
+		for (p in cond) {
+			if (cond[p]) {
+				cond[p] = false;
+				found = 1;
+			}
+		}
+		found && c.revert();
+	}) || _onMediaChange(),
+	addEventListener(type, callback) {
+		let a = _listeners[type] || (_listeners[type] = []);
+		~a.indexOf(callback) || a.push(callback);
+	},
+	removeEventListener(type, callback) {
+		let a = _listeners[type],
+			i = a && a.indexOf(callback);
+		i >= 0 && a.splice(i, 1);
+	},
+	utils: { wrap, wrapYoyo, distribute, random, snap, normalize, getUnit, clamp, splitColor, toArray, selector, mapRange, pipe, unitize, interpolate, shuffle },
+	install: _install,
+	effects: _effects,
+	ticker: _ticker,
+	updateRoot: Timeline.updateRoot,
+	plugins: _plugins,
+	globalTimeline: _globalTimeline,
+	core: {PropTween, globals: _addGlobal, Tween, Timeline, Animation, getCache: _getCache, _removeLinkedListItem, reverting: () => _reverting, context: toAdd => {if (toAdd && _context) { _context.data.push(toAdd); toAdd._ctx = _context;} return _context; }, suppressOverwrites: value => _suppressOverwrites = value}
+};
+
+_forEachName("to,from,fromTo,delayedCall,set,killTweensOf", name => _gsap[name] = Tween[name]);
+_ticker.add(Timeline.updateRoot);
+_quickTween = _gsap.to({}, {duration:0});
+
+
+
+
+// ---- EXTRA PLUGINS --------------------------------------------------------
+
+
+let _getPluginPropTween = (plugin, prop) => {
+		let pt = plugin._pt;
+		while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
+			pt = pt._next;
+		}
+		return pt;
+	},
+	_addModifiers = (tween, modifiers) => {
+			let	targets = tween._targets,
+				p, i, pt;
+			for (p in modifiers) {
+				i = targets.length;
+				while (i--) {
+					pt = tween._ptLookup[i][p];
+					if (pt && (pt = pt.d)) {
+						if (pt._pt) { // is a plugin
+							pt = _getPluginPropTween(pt, p);
+						}
+						pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
+					}
+				}
+			}
+	},
+	_buildModifierPlugin = (name, modifier) => {
+		return {
+			name: name,
+			rawVars: 1, //don't pre-process function-based values or "random()" strings.
+			init(target, vars, tween) {
+				tween._onInit = tween => {
+					let temp, p;
+					if (_isString(vars)) {
+						temp = {};
+						_forEachName(vars, name => temp[name] = 1); //if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.
+						vars = temp;
+					}
+					if (modifier) {
+						temp = {};
+						for (p in vars) {
+							temp[p] = modifier(vars[p]);
+						}
+						vars = temp;
+					}
+					_addModifiers(tween, vars);
+				};
+			}
+		};
+	};
+
+//register core plugins
+const gsap = _gsap.registerPlugin({
+		name:"attr",
+		init(target, vars, tween, index, targets) {
+			let p, pt, v;
+			this.tween = tween;
+			for (p in vars) {
+				v = target.getAttribute(p) || "";
+				pt = this.add(target, "setAttribute", (v || 0) + "", vars[p], index, targets, 0, 0, p);
+				pt.op = p;
+				pt.b = v; // record the beginning value so we can revert()
+				this._props.push(p);
+			}
+		},
+		render(ratio, data) {
+			let pt = data._pt;
+			while (pt) {
+				_reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d); // if reverting, go back to the original (pt.b)
+				pt = pt._next;
+			}
+		}
+	}, {
+		name:"endArray",
+		init(target, value) {
+			let i = value.length;
+			while (i--) {
+				this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);
+			}
+		}
+	},
+	_buildModifierPlugin("roundProps", _roundModifier),
+	_buildModifierPlugin("modifiers"),
+	_buildModifierPlugin("snap", snap)
+) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.
+
+Tween.version = Timeline.version = gsap.version = "3.12.5";
+_coreReady = 1;
+_windowExists() && _wake();
+
+const { Power0, Power1, Power2, Power3, Power4, Linear, Quad, Cubic, Quart, Quint, Strong, Elastic, Back, SteppedEase, Bounce, Sine, Expo, Circ } = _easeMap;
+
+exports.Animation = Animation;
+exports.Back = Back;
+exports.Bounce = Bounce;
+exports.Circ = Circ;
+exports.Cubic = Cubic;
+exports.Elastic = Elastic;
+exports.Expo = Expo;
+exports.GSCache = GSCache;
+exports.Linear = Linear;
+exports.Power0 = Power0;
+exports.Power1 = Power1;
+exports.Power2 = Power2;
+exports.Power3 = Power3;
+exports.Power4 = Power4;
+exports.PropTween = PropTween;
+exports.Quad = Quad;
+exports.Quart = Quart;
+exports.Quint = Quint;
+exports.Sine = Sine;
+exports.SteppedEase = SteppedEase;
+exports.Strong = Strong;
+exports.Timeline = Timeline;
+exports.TimelineLite = Timeline;
+exports.TimelineMax = Timeline;
+exports.Tween = Tween;
+exports.TweenLite = Tween;
+exports.TweenMax = Tween;
+exports._checkPlugin = _checkPlugin;
+exports._colorExp = _colorExp;
+exports._colorStringFilter = _colorStringFilter;
+exports._config = _config;
+exports._forEachName = _forEachName;
+exports._getCache = _getCache;
+exports._getProperty = _getProperty;
+exports._getSetter = _getSetter;
+exports._isString = _isString;
+exports._isUndefined = _isUndefined;
+exports._missingPlugin = _missingPlugin;
+exports._numExp = _numExp;
+exports._numWithUnitExp = _numWithUnitExp;
+exports._parseRelative = _parseRelative;
+exports._plugins = _plugins;
+exports._relExp = _relExp;
+exports._removeLinkedListItem = _removeLinkedListItem;
+exports._renderComplexString = _renderComplexString;
+exports._replaceRandom = _replaceRandom;
+exports._round = _round;
+exports._roundModifier = _roundModifier;
+exports._setDefaults = _setDefaults;
+exports._sortPropTweensByPriority = _sortPropTweensByPriority;
+exports._ticker = _ticker;
+exports.clamp = clamp;
+exports.default = gsap;
+exports.distribute = distribute;
+exports.getUnit = getUnit;
+exports.gsap = gsap;
+exports.interpolate = interpolate;
+exports.mapRange = mapRange;
+exports.normalize = normalize;
+exports.pipe = pipe;
+exports.random = random;
+exports.selector = selector;
+exports.shuffle = shuffle;
+exports.snap = snap;
+exports.splitColor = splitColor;
+exports.toArray = toArray;
+exports.unitize = unitize;
+exports.wrap = wrap;
+exports.wrapYoyo = wrapYoyo;
diff --git a/src/gsap-core.js b/dist/gsap-core.d.cts
similarity index 99%
rename from src/gsap-core.js
rename to dist/gsap-core.d.cts
index 60ade220f7da70ee2d0746ad56235c0abf09e857..91311e0edcffab9234144c9877a8d8f7f500436c 100644
--- a/src/gsap-core.js
+++ b/dist/gsap-core.d.cts
@@ -1137,7 +1137,7 @@ _forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt
  * CACHE
  * --------------------------------------------------------------------------------------
  */
-export class GSCache {
+class GSCache {
 
 	constructor(target, harness) {
 		this.id = _gsID++;
@@ -1170,7 +1170,7 @@ export class GSCache {
  * --------------------------------------------------------------------------------------
  */
 
-export class Animation {
+class Animation {
 
 	constructor(vars) {
 		this.vars = vars;
@@ -1488,7 +1488,7 @@ _setDefaults(Animation.prototype, {_time:0, _start:0, _end:0, _tTime:0, _tDur:0,
  * -------------------------------------------------
  */
 
-export class Timeline extends Animation {
+class Timeline extends Animation {
 
 	constructor(vars = {}, position) {
 		super(vars);
@@ -2336,7 +2336,7 @@ _forEachName(_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigg
  * --------------------------------------------------------------------------------------
  */
 
-export class Tween extends Animation {
+class Tween extends Animation {
 
 	constructor(targets, vars, position, skipInherit) {
 		if (typeof(vars) === "number") {
@@ -2549,7 +2549,7 @@ export class Tween extends Animation {
 	}
 
 	invalidate(soft) { // "soft" gives us a way to clear out everything EXCEPT the recorded pre-"from" portion of from() tweens. Otherwise, for example, if you tween.progress(1).render(0, true true).invalidate(), the "from" values would persist and then on the next render, the from() tweens would initialize and the current value would match the "from" values, thus animate from the same value to the same value (no animation). We tap into this in ScrollTrigger's refresh() where we must push a tween to completion and then back again but honor its init state in case the tween is dependent on another tween further up on the page.
-		(!soft || !this.vars.runBackwards) && (this._startAt = 0)
+		(!soft || !this.vars.runBackwards) && (this._startAt = 0);
 		this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;
 		this._ptLookup = [];
 		this.timeline && this.timeline.invalidate(soft);
@@ -2684,7 +2684,7 @@ _forEachName("staggerTo,staggerFrom,staggerFromTo", name => {
 			params = _slice.call(arguments, 0);
 		params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
 		return tl[name].apply(tl, params);
-	}
+	};
 });
 
 
@@ -2789,7 +2789,7 @@ let _setterPlain = (target, property, value) => target[property] = value,
 	};
 
 //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)
-export class PropTween {
+class PropTween {
 
 	constructor(next, target, prop, start, change, renderer, data, setter, priority) {
 		this.t = target;
@@ -2947,7 +2947,7 @@ class Context {
 						t.kill(); // don't revert() the timeline because that's duplicating efforts since we already reverted all the tweens
 					}
 				} else {
-					!(t instanceof Tween) && t.revert && t.revert(revert)
+					!(t instanceof Tween) && t.revert && t.revert(revert);
 				}
 			}
 			this._r.forEach(f => f(revert, this));
@@ -3148,7 +3148,7 @@ const _gsap = {
 	updateRoot: Timeline.updateRoot,
 	plugins: _plugins,
 	globalTimeline: _globalTimeline,
-	core: {PropTween, globals: _addGlobal, Tween, Timeline, Animation, getCache: _getCache, _removeLinkedListItem, reverting: () => _reverting, context: toAdd => {if (toAdd && _context) { _context.data.push(toAdd); toAdd._ctx = _context} return _context; }, suppressOverwrites: value => _suppressOverwrites = value}
+	core: {PropTween, globals: _addGlobal, Tween, Timeline, Animation, getCache: _getCache, _removeLinkedListItem, reverting: () => _reverting, context: toAdd => {if (toAdd && _context) { _context.data.push(toAdd); toAdd._ctx = _context;} return _context; }, suppressOverwrites: value => _suppressOverwrites = value}
 };
 
 _forEachName("to,from,fromTo,delayedCall,set,killTweensOf", name => _gsap[name] = Tween[name]);
@@ -3210,7 +3210,7 @@ let _getPluginPropTween = (plugin, prop) => {
 	};
 
 //register core plugins
-export const gsap = _gsap.registerPlugin({
+const gsap = _gsap.registerPlugin({
 		name:"attr",
 		init(target, vars, tween, index, targets) {
 			let p, pt, v;
@@ -3248,7 +3248,6 @@ Tween.version = Timeline.version = gsap.version = "3.12.5";
 _coreReady = 1;
 _windowExists() && _wake();
 
-export const { Power0, Power1, Power2, Power3, Power4, Linear, Quad, Cubic, Quart, Quint, Strong, Elastic, Back, SteppedEase, Bounce, Sine, Expo, Circ } = _easeMap;
-export { Tween as TweenMax, Tween as TweenLite, Timeline as TimelineMax, Timeline as TimelineLite, gsap as default, wrap, wrapYoyo, distribute, random, snap, normalize, getUnit, clamp, splitColor, toArray, selector, mapRange, pipe, unitize, interpolate, shuffle };
-//export some internal methods/orojects for use in CSSPlugin so that we can externalize that file and allow custom builds that exclude it.
-export { _getProperty, _numExp, _numWithUnitExp, _isString, _isUndefined, _renderComplexString, _relExp, _setDefaults, _removeLinkedListItem, _forEachName, _sortPropTweensByPriority, _colorStringFilter, _replaceRandom, _checkPlugin, _plugins, _ticker, _config, _roundModifier, _round, _missingPlugin, _getSetter, _getCache, _colorExp, _parseRelative }
\ No newline at end of file
+const { Power0, Power1, Power2, Power3, Power4, Linear, Quad, Cubic, Quart, Quint, Strong, Elastic, Back, SteppedEase, Bounce, Sine, Expo, Circ } = _easeMap;
+
+export { Animation, Back, Bounce, Circ, Cubic, Elastic, Expo, GSCache, Linear, Power0, Power1, Power2, Power3, Power4, PropTween, Quad, Quart, Quint, Sine, SteppedEase, Strong, Timeline, Timeline as TimelineLite, Timeline as TimelineMax, Tween, Tween as TweenLite, Tween as TweenMax, _checkPlugin, _colorExp, _colorStringFilter, _config, _forEachName, _getCache, _getProperty, _getSetter, _isString, _isUndefined, _missingPlugin, _numExp, _numWithUnitExp, _parseRelative, _plugins, _relExp, _removeLinkedListItem, _renderComplexString, _replaceRandom, _round, _roundModifier, _setDefaults, _sortPropTweensByPriority, _ticker, clamp, gsap as default, distribute, getUnit, gsap, interpolate, mapRange, normalize, pipe, random, selector, shuffle, snap, splitColor, toArray, unitize, wrap, wrapYoyo };
diff --git a/dist/gsap-core.d.mts b/dist/gsap-core.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..91311e0edcffab9234144c9877a8d8f7f500436c
--- /dev/null
+++ b/dist/gsap-core.d.mts
@@ -0,0 +1,3253 @@
+/*!
+ * GSAP 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let _config = {
+		autoSleep: 120,
+		force3D: "auto",
+		nullTargetWarn: 1,
+		units: {lineHeight:""}
+	},
+	_defaults = {
+		duration: .5,
+		overwrite: false,
+		delay: 0
+	},
+	_suppressOverwrites,
+	_reverting, _context,
+	_bigNum = 1e8,
+	_tinyNum = 1 / _bigNum,
+	_2PI = Math.PI * 2,
+	_HALF_PI = _2PI / 4,
+	_gsID = 0,
+	_sqrt = Math.sqrt,
+	_cos = Math.cos,
+	_sin = Math.sin,
+	_isString = value => typeof(value) === "string",
+	_isFunction = value => typeof(value) === "function",
+	_isNumber = value => typeof(value) === "number",
+	_isUndefined = value => typeof(value) === "undefined",
+	_isObject = value => typeof(value) === "object",
+	_isNotFalse = value => value !== false,
+	_windowExists = () => typeof(window) !== "undefined",
+	_isFuncOrString = value => _isFunction(value) || _isString(value),
+	_isTypedArray = (typeof ArrayBuffer === "function" && ArrayBuffer.isView) || function() {}, // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().
+	_isArray = Array.isArray,
+	_strictNumExp = /(?:-?\.?\d|\.)+/gi, //only numbers (including negatives and decimals) but NOT relative values.
+	_numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g, //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
+	_numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
+	_complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi, //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.
+	_relExp = /[+-]=-?[.\d]+/,
+	_delimitedValueExp = /[^,'"\[\]\s]+/gi, // previously /[#\-+.]*\b[a-z\d\-=+%.]+/gi but didn't catch special characters.
+	_unitExp = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,
+	_globalTimeline, _win, _coreInitted, _doc,
+	_globals = {},
+	_installScope = {},
+	_coreReady,
+	_install = scope => (_installScope = _merge(scope, _globals)) && gsap,
+	_missingPlugin = (property, value) => console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()"),
+	_warn = (message, suppress) => !suppress && console.warn(message),
+	_addGlobal = (name, obj) => (name && (_globals[name] = obj) && (_installScope && (_installScope[name] = obj))) || _globals,
+	_emptyFunc = () => 0,
+	_startAtRevertConfig = {suppressEvents: true, isStart: true, kill: false},
+	_revertConfigNoKill = {suppressEvents: true, kill: false},
+	_revertConfig = {suppressEvents: true},
+	_reservedProps = {},
+	_lazyTweens = [],
+	_lazyLookup = {},
+	_lastRenderedFrame,
+	_plugins = {},
+	_effects = {},
+	_nextGCFrame = 30,
+	_harnessPlugins = [],
+	_callbackNames = "",
+	_harness = targets => {
+		let target = targets[0],
+			harnessPlugin, i;
+		_isObject(target) || _isFunction(target) || (targets = [targets]);
+		if (!(harnessPlugin = (target._gsap || {}).harness)) { // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)
+			i = _harnessPlugins.length;
+			while (i-- && !_harnessPlugins[i].targetTest(target)) {	}
+			harnessPlugin = _harnessPlugins[i];
+		}
+		i = targets.length;
+		while (i--) {
+			(targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin)))) || targets.splice(i, 1);
+		}
+		return targets;
+	},
+	_getCache = target => target._gsap || _harness(toArray(target))[0]._gsap,
+	_getProperty = (target, property, v) => (v = target[property]) && _isFunction(v) ? target[property]() : (_isUndefined(v) && target.getAttribute && target.getAttribute(property)) || v,
+	_forEachName = (names, func) => ((names = names.split(",")).forEach(func)) || names, //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).
+	_round = value => Math.round(value * 100000) / 100000 || 0,
+	_roundPrecise = value => Math.round(value * 10000000) / 10000000 || 0, // increased precision mostly for timing values.
+	_parseRelative = (start, value) => {
+		let operator = value.charAt(0),
+			end = parseFloat(value.substr(2));
+		start = parseFloat(start);
+		return operator === "+" ? start + end : operator === "-" ? start - end : operator === "*" ? start * end : start / end;
+	},
+	_arrayContainsAny = (toSearch, toFind) => { //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.
+		let l = toFind.length,
+			i = 0;
+		for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) { }
+		return (i < l);
+	},
+	_lazyRender = () => {
+		let l = _lazyTweens.length,
+			a = _lazyTweens.slice(0),
+			i, tween;
+		_lazyLookup = {};
+		_lazyTweens.length = 0;
+		for (i = 0; i < l; i++) {
+			tween = a[i];
+			tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
+		}
+	},
+	_lazySafeRender = (animation, time, suppressEvents, force) => {
+		_lazyTweens.length && !_reverting && _lazyRender();
+		animation.render(time, suppressEvents, force || (_reverting && time < 0 && (animation._initted || animation._startAt)));
+		_lazyTweens.length && !_reverting && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
+	},
+	_numericIfPossible = value => {
+		let n = parseFloat(value);
+		return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;
+	},
+	_passThrough = p => p,
+	_setDefaults = (obj, defaults) => {
+		for (let p in defaults) {
+			(p in obj) || (obj[p] = defaults[p]);
+		}
+		return obj;
+	},
+	_setKeyframeDefaults = excludeDuration => (obj, defaults) => {
+		for (let p in defaults) {
+			(p in obj) || (p === "duration" && excludeDuration) || p === "ease" || (obj[p] = defaults[p]);
+		}
+	},
+	_merge = (base, toMerge) => {
+		for (let p in toMerge) {
+			base[p] = toMerge[p];
+		}
+		return base;
+	},
+	_mergeDeep = (base, toMerge) => {
+		for (let p in toMerge) {
+			p !== "__proto__" && p !== "constructor" && p !== "prototype" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);
+		}
+		return base;
+	},
+	_copyExcluding = (obj, excluding) => {
+		let copy = {},
+			p;
+		for (p in obj) {
+			(p in excluding) || (copy[p] = obj[p]);
+		}
+		return copy;
+	},
+	_inheritDefaults = vars => {
+		let parent = vars.parent || _globalTimeline,
+			func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;
+		if (_isNotFalse(vars.inherit)) {
+			while (parent) {
+				func(vars, parent.vars.defaults);
+				parent = parent.parent || parent._dp;
+			}
+		}
+		return vars;
+	},
+	_arraysMatch = (a1, a2) => {
+		let i = a1.length,
+			match = i === a2.length;
+		while (match && i-- && a1[i] === a2[i]) { }
+		return i < 0;
+	},
+	_addLinkedListItem = (parent, child, firstProp = "_first", lastProp = "_last", sortBy) => {
+		let prev = parent[lastProp],
+			t;
+		if (sortBy) {
+			t = child[sortBy];
+			while (prev && prev[sortBy] > t) {
+				prev = prev._prev;
+			}
+		}
+		if (prev) {
+			child._next = prev._next;
+			prev._next = child;
+		} else {
+			child._next = parent[firstProp];
+			parent[firstProp] = child;
+		}
+		if (child._next) {
+			child._next._prev = child;
+		} else {
+			parent[lastProp] = child;
+		}
+		child._prev = prev;
+		child.parent = child._dp = parent;
+		return child;
+	},
+	_removeLinkedListItem = (parent, child, firstProp = "_first", lastProp = "_last") => {
+		let prev = child._prev,
+			next = child._next;
+		if (prev) {
+			prev._next = next;
+		} else if (parent[firstProp] === child) {
+			parent[firstProp] = next;
+		}
+		if (next) {
+			next._prev = prev;
+		} else if (parent[lastProp] === child) {
+			parent[lastProp] = prev;
+		}
+		child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.
+	},
+	_removeFromParent = (child, onlyIfParentHasAutoRemove) => {
+		child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove && child.parent.remove(child);
+		child._act = 0;
+	},
+	_uncache = (animation, child) => {
+		if (animation && (!child || child._end > animation._dur || child._start < 0)) { // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)
+			let a = animation;
+			while (a) {
+				a._dirty = 1;
+				a = a.parent;
+			}
+		}
+		return animation;
+	},
+	_recacheAncestors = animation => {
+		let parent = animation.parent;
+		while (parent && parent.parent) { //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
+			parent._dirty = 1;
+			parent.totalDuration();
+			parent = parent.parent;
+		}
+		return animation;
+	},
+	_rewindStartAt = (tween, totalTime, suppressEvents, force) => tween._startAt && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : (tween.vars.immediateRender && !tween.vars.autoRevert) || tween._startAt.render(totalTime, true, force)),
+	_hasNoPausedAncestors = animation => !animation || (animation._ts && _hasNoPausedAncestors(animation.parent)),
+	_elapsedCycleDuration = animation => animation._repeat ? _animationCycle(animation._tTime, (animation = animation.duration() + animation._rDelay)) * animation : 0,
+	// feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.
+	_animationCycle = (tTime, cycleDuration) => {
+		let whole = Math.floor(tTime /= cycleDuration);
+		return tTime && (whole === tTime) ? whole - 1 : whole;
+	},
+	_parentToChildTotalTime = (parentTime, child) => (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : (child._dirty ? child.totalDuration() : child._tDur)),
+	_setEnd = animation => (animation._end = _roundPrecise(animation._start + ((animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum)) || 0))),
+	_alignPlayhead = (animation, totalTime) => { // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.
+		let parent = animation._dp;
+		if (parent && parent.smoothChildTiming && animation._ts) {
+			animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));
+			_setEnd(animation);
+			parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
+		}
+		return animation;
+	},
+	/*
+	_totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
+		let cycleDuration = duration + repeatDelay,
+			time = _round(clampedTotalTime % cycleDuration);
+		if (time > duration) {
+			time = duration;
+		}
+		return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
+	},
+	*/
+	_postAddChecks = (timeline, child) => {
+		let t;
+		if (child._time || (!child._dur && child._initted) || (child._start < timeline._time && (child._dur || !child.add))) { // in case, for example, the _start is moved on a tween that has already rendered, or if it's being inserted into a timeline BEFORE where the playhead is currently. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning. Special case: if it's a timeline (has .add() method) and no duration, we can skip rendering because the user may be populating it AFTER adding it to a parent timeline (unconventional, but possible, and we wouldn't want it to get removed if the parent's autoRemoveChildren is true).
+			t = _parentToChildTotalTime(timeline.rawTime(), child);
+			if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
+				child.render(t, true);
+			}
+		}
+		//if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.
+		if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
+			//in case any of the ancestors had completed but should now be enabled...
+			if (timeline._dur < timeline.duration()) {
+				t = timeline;
+				while (t._dp) {
+					(t.rawTime() >= 0) && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.
+					t = t._dp;
+				}
+			}
+			timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.
+		}
+	},
+	_addToTimeline = (timeline, child, position, skipChecks) => {
+		child.parent && _removeFromParent(child);
+		child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);
+		child._end = _roundPrecise(child._start + ((child.totalDuration() / Math.abs(child.timeScale())) || 0));
+		_addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);
+		_isFromOrFromStart(child) || (timeline._recent = child);
+		skipChecks || _postAddChecks(timeline, child);
+		timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime); // if the timeline is reversed and the new child makes it longer, we may need to adjust the parent's _start (push it back)
+		return timeline;
+	},
+	_scrollTrigger = (animation, trigger) => (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation),
+	_attemptInitTween = (tween, time, force, suppressEvents, tTime) => {
+		_initTween(tween, time, tTime);
+		if (!tween._initted) {
+			return 1;
+		}
+		if (!force && tween._pt && !_reverting && ((tween._dur && tween.vars.lazy !== false) || (!tween._dur && tween.vars.lazy)) && _lastRenderedFrame !== _ticker.frame) {
+			_lazyTweens.push(tween);
+			tween._lazy = [tTime, suppressEvents];
+			return 1;
+		}
+	},
+	_parentPlayheadIsBeforeStart = ({parent}) => parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent)), // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0
+	_isFromOrFromStart = ({data}) => data === "isFromStart" || data === "isStart",
+	_renderZeroDurationTween = (tween, totalTime, suppressEvents, force) => {
+		let prevRatio = tween.ratio,
+			ratio = totalTime < 0 || (!totalTime && ((!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween))) || ((tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)))) ? 0 : 1, // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the "startAt" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any "from" and "fromTo" startAt tweens are rendered the first time at a ratio of 1.
+			repeatDelay = tween._rDelay,
+			tTime = 0,
+			pt, iteration, prevIteration;
+		if (repeatDelay && tween._repeat) { // in case there's a zero-duration tween that has a repeat with a repeatDelay
+			tTime = _clamp(0, tween._tDur, totalTime);
+			iteration = _animationCycle(tTime, repeatDelay);
+			tween._yoyo && (iteration & 1) && (ratio = 1 - ratio);
+			if (iteration !== _animationCycle(tween._tTime, repeatDelay)) { // if iteration changed
+				prevRatio = 1 - ratio;
+				tween.vars.repeatRefresh && tween._initted && tween.invalidate();
+			}
+		}
+		if (ratio !== prevRatio || _reverting || force || tween._zTime === _tinyNum || (!totalTime && tween._zTime)) {
+			if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) { // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
+				return;
+			}
+			prevIteration = tween._zTime;
+			tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.
+			suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.
+			tween.ratio = ratio;
+			tween._from && (ratio = 1 - ratio);
+			tween._time = 0;
+			tween._tTime = tTime;
+			pt = tween._pt;
+			while (pt) {
+				pt.r(ratio, pt.d);
+				pt = pt._next;
+			}
+			totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);
+			tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
+			tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");
+			if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
+				ratio && _removeFromParent(tween, 1);
+				if (!suppressEvents && !_reverting) {
+					_callback(tween, (ratio ? "onComplete" : "onReverseComplete"), true);
+					tween._prom && tween._prom();
+				}
+			}
+		} else if (!tween._zTime) {
+			tween._zTime = totalTime;
+		}
+	},
+	_findNextPauseTween = (animation, prevTime, time) => {
+		let child;
+		if (time > prevTime) {
+			child = animation._first;
+			while (child && child._start <= time) {
+				if (child.data === "isPause" && child._start > prevTime) {
+					return child;
+				}
+				child = child._next;
+			}
+		} else {
+			child = animation._last;
+			while (child && child._start >= time) {
+				if (child.data === "isPause" && child._start < prevTime) {
+					return child;
+				}
+				child = child._prev;
+			}
+		}
+	},
+	_setDuration = (animation, duration, skipUncache, leavePlayhead) => {
+		let repeat = animation._repeat,
+			dur = _roundPrecise(duration) || 0,
+			totalProgress = animation._tTime / animation._tDur;
+		totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
+		animation._dur = dur;
+		animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + (animation._rDelay * repeat));
+		totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, (animation._tTime = animation._tDur * totalProgress));
+		animation.parent && _setEnd(animation);
+		skipUncache || _uncache(animation.parent, animation);
+		return animation;
+	},
+	_onUpdateTotalDuration = animation => (animation instanceof Timeline) ? _uncache(animation) : _setDuration(animation, animation._dur),
+	_zeroPosition = {_start:0, endTime:_emptyFunc, totalDuration:_emptyFunc},
+	_parsePosition = (animation, position, percentAnimation) => {
+		let labels = animation.labels,
+			recent = animation._recent || _zeroPosition,
+			clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur, //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
+			i, offset, isPercent;
+		if (_isString(position) && (isNaN(position) || (position in labels))) { //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
+			offset = position.charAt(0);
+			isPercent = position.substr(-1) === "%";
+			i = position.indexOf("=");
+			if (offset === "<" || offset === ">") {
+				i >= 0 && (position = position.replace(/=/, ""));
+				return (offset === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);
+			}
+			if (i < 0) {
+				(position in labels) || (labels[position] = clippedDuration);
+				return labels[position];
+			}
+			offset = parseFloat(position.charAt(i-1) + position.substr(i+1));
+			if (isPercent && percentAnimation) {
+				offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();
+			}
+			return (i > 1) ? _parsePosition(animation, position.substr(0, i-1), percentAnimation) + offset : clippedDuration + offset;
+		}
+		return (position == null) ? clippedDuration : +position;
+	},
+	_createTweenType = (type, params, timeline) => {
+		let isLegacy = _isNumber(params[1]),
+			varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
+			vars = params[varsIndex],
+			irVars, parent;
+		isLegacy && (vars.duration = params[1]);
+		vars.parent = timeline;
+		if (type) {
+			irVars = vars;
+			parent = timeline;
+			while (parent && !("immediateRender" in irVars)) { // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.
+				irVars = parent.vars.defaults || {};
+				parent = _isNotFalse(parent.vars.inherit) && parent.parent;
+			}
+			vars.immediateRender = _isNotFalse(irVars.immediateRender);
+			type < 2 ? (vars.runBackwards = 1) : (vars.startAt = params[varsIndex - 1]); // "from" vars
+		}
+		return new Tween(params[0], vars, params[varsIndex + 1]);
+	},
+	_conditionalReturn = (value, func) => value || value === 0 ? func(value) : func,
+	_clamp = (min, max, value) => value < min ? min : value > max ? max : value,
+	getUnit = (value, v) => !_isString(value) || !(v = _unitExp.exec(value)) ? "" : v[1], // note: protect against padded numbers as strings, like "100.100". That shouldn't return "00" as the unit. If it's numeric, return no unit.
+	clamp = (min, max, value) => _conditionalReturn(value, v => _clamp(min, max, v)),
+	_slice = [].slice,
+	_isArrayLike = (value, nonEmpty) => value && (_isObject(value) && "length" in value && ((!nonEmpty && !value.length) || ((value.length - 1) in value && _isObject(value[0]))) && !value.nodeType && value !== _win),
+	_flatten = (ar, leaveStrings, accumulator = []) => ar.forEach(value => (_isString(value) && !leaveStrings) || _isArrayLike(value, 1) ? accumulator.push(...toArray(value)) : accumulator.push(value)) || accumulator,
+	//takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
+	toArray = (value, scope, leaveStrings) => _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [],
+	selector = value => {
+		value = toArray(value)[0] || _warn("Invalid scope") || {};
+		return v => {
+			let el = value.current || value.nativeElement || value;
+			return toArray(v, el.querySelectorAll ? el : el === value ? _warn("Invalid scope") || _doc.createElement("div") : value);
+		};
+	},
+	shuffle = a => a.sort(() => .5 - Math.random()), // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = Math.floor(Math.random() * i), v = a[--i], a[i] = a[j], a[j] = v); return a;
+	//for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following
+	distribute = v => {
+		if (_isFunction(v)) {
+			return v;
+		}
+		let vars = _isObject(v) ? v : {each:v}, //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.
+			ease = _parseEase(vars.ease),
+			from = vars.from || 0,
+			base = parseFloat(vars.base) || 0,
+			cache = {},
+			isDecimal = (from > 0 && from < 1),
+			ratios = isNaN(from) || isDecimal,
+			axis = vars.axis,
+			ratioX = from,
+			ratioY = from;
+		if (_isString(from)) {
+			ratioX = ratioY = {center:.5, edges:.5, end:1}[from] || 0;
+		} else if (!isDecimal && ratios) {
+			ratioX = from[0];
+			ratioY = from[1];
+		}
+		return (i, target, a) => {
+			let l = (a || vars).length,
+				distances = cache[l],
+				originX, originY, x, y, d, j, max, min, wrapAt;
+			if (!distances) {
+				wrapAt = (vars.grid === "auto") ? 0 : (vars.grid || [1, _bigNum])[1];
+				if (!wrapAt) {
+					max = -_bigNum;
+					while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) { }
+					wrapAt < l && wrapAt--;
+				}
+				distances = cache[l] = [];
+				originX = ratios ? (Math.min(wrapAt, l) * ratioX) - .5 : from % wrapAt;
+				originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : (from / wrapAt) | 0;
+				max = 0;
+				min = _bigNum;
+				for (j = 0; j < l; j++) {
+					x = (j % wrapAt) - originX;
+					y = originY - ((j / wrapAt) | 0);
+					distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs((axis === "y") ? y : x);
+					(d > max) && (max = d);
+					(d < min) && (min = d);
+				}
+				(from === "random") && shuffle(distances);
+				distances.max = max - min;
+				distances.min = min;
+				distances.v = l = (parseFloat(vars.amount) || (parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt)) || 0) * (from === "edges" ? -1 : 1);
+				distances.b = (l < 0) ? base - l : base;
+				distances.u = getUnit(vars.amount || vars.each) || 0; //unit
+				ease = (ease && l < 0) ? _invertEase(ease) : ease;
+			}
+			l = ((distances[i] - distances.min) / distances.max) || 0;
+			return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors
+		};
+	},
+	_roundModifier = v => { //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
+		let p = Math.pow(10, ((v + "").split(".")[1] || "").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())
+		return raw => {
+			let n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);
+			return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!
+		};
+	},
+	snap = (snapTo, value) => {
+		let isArray = _isArray(snapTo),
+			radius, is2D;
+		if (!isArray && _isObject(snapTo)) {
+			radius = isArray = snapTo.radius || _bigNum;
+			if (snapTo.values) {
+				snapTo = toArray(snapTo.values);
+				if ((is2D = !_isNumber(snapTo[0]))) {
+					radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.
+				}
+			} else {
+				snapTo = _roundModifier(snapTo.increment);
+			}
+		}
+		return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? raw => {is2D = snapTo(raw); return Math.abs(is2D - raw) <= radius ? is2D : raw; } : raw => {
+			let x = parseFloat(is2D ? raw.x : raw),
+				y = parseFloat(is2D ? raw.y : 0),
+				min = _bigNum,
+				closest = 0,
+				i = snapTo.length,
+				dx, dy;
+			while (i--) {
+				if (is2D) {
+					dx = snapTo[i].x - x;
+					dy = snapTo[i].y - y;
+					dx = dx * dx + dy * dy;
+				} else {
+					dx = Math.abs(snapTo[i] - x);
+				}
+				if (dx < min) {
+					min = dx;
+					closest = i;
+				}
+			}
+			closest = (!radius || min <= radius) ? snapTo[closest] : raw;
+			return (is2D || closest === raw || _isNumber(raw)) ? closest : closest + getUnit(raw);
+		});
+	},
+	random = (min, max, roundingIncrement, returnFunction) => _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, () => _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? 10 ** ((roundingIncrement + "").length - 2) : 1) && (Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction)),
+	pipe = (...functions) => value => functions.reduce((v, f) => f(v), value),
+	unitize = (func, unit) => value => func(parseFloat(value)) + (unit || getUnit(value)),
+	normalize = (min, max, value) => mapRange(min, max, 0, 1, value),
+	_wrapArray = (a, wrapper, value) => _conditionalReturn(value, index => a[~~wrapper(index)]),
+	wrap = function(min, max, value) { // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).
+		let range = max - min;
+		return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, value => ((range + (value - min) % range) % range) + min);
+	},
+	wrapYoyo = (min, max, value) => {
+		let range = max - min,
+			total = range * 2;
+		return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, value => {
+			value = (total + (value - min) % total) % total || 0;
+			return min + ((value > range) ? (total - value) : value);
+		});
+	},
+	_replaceRandom = value => { //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])
+		let prev = 0,
+			s = "",
+			i, nums, end, isArray;
+		while (~(i = value.indexOf("random(", prev))) {
+			end = value.indexOf(")", i);
+			isArray = value.charAt(i + 7) === "[";
+			nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
+			s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);
+			prev = end + 1;
+		}
+		return s + value.substr(prev, value.length - prev);
+	},
+	mapRange = (inMin, inMax, outMin, outMax, value) => {
+		let inRange = inMax - inMin,
+			outRange = outMax - outMin;
+		return _conditionalReturn(value, value => outMin + ((((value - inMin) / inRange) * outRange) || 0));
+	},
+	interpolate = (start, end, progress, mutate) => {
+		let func = isNaN(start + end) ? 0 : p => (1 - p) * start + p * end;
+		if (!func) {
+			let isString = _isString(start),
+				master = {},
+				p, i, interpolators, l, il;
+			progress === true && (mutate = 1) && (progress = null);
+			if (isString) {
+				start = {p: start};
+				end = {p: end};
+
+			} else if (_isArray(start) && !_isArray(end)) {
+				interpolators = [];
+				l = start.length;
+				il = l - 2;
+				for (i = 1; i < l; i++) {
+					interpolators.push(interpolate(start[i-1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.
+				}
+				l--;
+				func = p => {
+					p *= l;
+					let i = Math.min(il, ~~p);
+					return interpolators[i](p - i);
+				};
+				progress = end;
+			} else if (!mutate) {
+				start = _merge(_isArray(start) ? [] : {}, start);
+			}
+			if (!interpolators) {
+				for (p in end) {
+					_addPropTween.call(master, start, p, "get", end[p]);
+				}
+				func = p => _renderPropTweens(p, master) || (isString ? start.p : start);
+			}
+		}
+		return _conditionalReturn(progress, func);
+	},
+	_getLabelInDirection = (timeline, fromTime, backward) => { //used for nextLabel() and previousLabel()
+		let labels = timeline.labels,
+			min = _bigNum,
+			p, distance, label;
+		for (p in labels) {
+			distance = labels[p] - fromTime;
+			if ((distance < 0) === !!backward && distance && min > (distance = Math.abs(distance))) {
+				label = p;
+				min = distance;
+			}
+		}
+		return label;
+	},
+	_callback = (animation, type, executeLazyFirst) => {
+		let v = animation.vars,
+			callback = v[type],
+			prevContext = _context,
+			context = animation._ctx,
+			params, scope, result;
+		if (!callback) {
+			return;
+		}
+		params = v[type + "Params"];
+		scope = v.callbackScope || animation;
+		executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
+		context && (_context = context);
+		result = params ? callback.apply(scope, params) : callback.call(scope);
+		_context = prevContext;
+		return result;
+	},
+	_interrupt = animation => {
+		_removeFromParent(animation);
+		animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting);
+		animation.progress() < 1 && _callback(animation, "onInterrupt");
+		return animation;
+	},
+	_quickTween,
+	_registerPluginQueue = [],
+	_createPlugin = config => {
+		if (!config) return;
+		config = (!config.name && config.default) || config; // UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.
+		if (_windowExists() || config.headless) { // edge case: some build tools may pass in a null/undefined value
+			let name = config.name,
+				isFunc = _isFunction(config),
+				Plugin = (name && !isFunc && config.init) ? function () {
+					this._props = [];
+				} : config, //in case someone passes in an object that's not a plugin, like CustomEase
+				instanceDefaults = {init: _emptyFunc, render: _renderPropTweens, add: _addPropTween, kill: _killPropTweensOf, modifier: _addPluginModifier, rawVars: 0},
+				statics = {targetTest: 0, get: 0, getSetter: _getSetter, aliases: {}, register: 0};
+			_wake();
+			if (config !== Plugin) {
+				if (_plugins[name]) {
+					return;
+				}
+				_setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics)); //static methods
+				_merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods
+				_plugins[(Plugin.prop = name)] = Plugin;
+				if (config.targetTest) {
+					_harnessPlugins.push(Plugin);
+					_reservedProps[name] = 1;
+				}
+				name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin"; //for the global name. "motionPath" should become MotionPathPlugin
+			}
+			_addGlobal(name, Plugin);
+			config.register && config.register(gsap, Plugin, PropTween);
+		} else {
+			_registerPluginQueue.push(config);
+		}
+	},
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * COLORS
+ * --------------------------------------------------------------------------------------
+ */
+
+	_255 = 255,
+	_colorLookup = {
+		aqua:[0,_255,_255],
+		lime:[0,_255,0],
+		silver:[192,192,192],
+		black:[0,0,0],
+		maroon:[128,0,0],
+		teal:[0,128,128],
+		blue:[0,0,_255],
+		navy:[0,0,128],
+		white:[_255,_255,_255],
+		olive:[128,128,0],
+		yellow:[_255,_255,0],
+		orange:[_255,165,0],
+		gray:[128,128,128],
+		purple:[128,0,128],
+		green:[0,128,0],
+		red:[_255,0,0],
+		pink:[_255,192,203],
+		cyan:[0,_255,_255],
+		transparent:[_255,_255,_255,0]
+	},
+	// possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:
+	// let ctx = _doc.createElement("canvas").getContext("2d");
+	// _forEachName("aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});
+	_hue = (h, m1, m2) => {
+		h += h < 0 ? 1 : h > 1 ? -1 : 0;
+		return ((((h * 6 < 1) ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : (h * 3 < 2) ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255) + .5) | 0;
+	},
+	splitColor = (v, toHSL, forceAlpha) => {
+		let a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, (v >> 8) & _255, v & _255] : 0,
+			r, g, b, h, s, l, max, min, d, wasHSL;
+		if (!a) {
+			if (v.substr(-1) === ",") { //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
+				v = v.substr(0, v.length - 1);
+			}
+			if (_colorLookup[v]) {
+				a = _colorLookup[v];
+			} else if (v.charAt(0) === "#") {
+				if (v.length < 6) { //for shorthand like #9F0 or #9F0F (could have alpha)
+					r = v.charAt(1);
+					g = v.charAt(2);
+					b = v.charAt(3);
+					v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
+				}
+				if (v.length === 9) { // hex with alpha, like #fd5e53ff
+					a = parseInt(v.substr(1, 6), 16);
+					return [a >> 16, (a >> 8) & _255, a & _255, parseInt(v.substr(7), 16) / 255];
+				}
+				v = parseInt(v.substr(1), 16);
+				a = [v >> 16, (v >> 8) & _255, v & _255];
+			} else if (v.substr(0, 3) === "hsl") {
+				a = wasHSL = v.match(_strictNumExp);
+				if (!toHSL) {
+					h = (+a[0] % 360) / 360;
+					s = +a[1] / 100;
+					l = +a[2] / 100;
+					g = (l <= .5) ? l * (s + 1) : l + s - l * s;
+					r = l * 2 - g;
+					a.length > 3 && (a[3] *= 1); //cast as number
+					a[0] = _hue(h + 1 / 3, r, g);
+					a[1] = _hue(h, r, g);
+					a[2] = _hue(h - 1 / 3, r, g);
+				} else if (~v.indexOf("=")) { //if relative values are found, just return the raw strings with the relative prefixes in place.
+					a = v.match(_numExp);
+					forceAlpha && a.length < 4 && (a[3] = 1);
+					return a;
+				}
+			} else {
+				a = v.match(_strictNumExp) || _colorLookup.transparent;
+			}
+			a = a.map(Number);
+		}
+		if (toHSL && !wasHSL) {
+			r = a[0] / _255;
+			g = a[1] / _255;
+			b = a[2] / _255;
+			max = Math.max(r, g, b);
+			min = Math.min(r, g, b);
+			l = (max + min) / 2;
+			if (max === min) {
+				h = s = 0;
+			} else {
+				d = max - min;
+				s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
+				h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
+				h *= 60;
+			}
+			a[0] = ~~(h + .5);
+			a[1] = ~~(s * 100 + .5);
+			a[2] = ~~(l * 100 + .5);
+		}
+		forceAlpha && a.length < 4 && (a[3] = 1);
+		return a;
+	},
+	_colorOrderData = v => { // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()
+		let values = [],
+			c = [],
+			i = -1;
+		v.split(_colorExp).forEach(v => {
+			let a = v.match(_numWithUnitExp) || [];
+			values.push(...a);
+			c.push(i += a.length + 1);
+		});
+		values.c = c;
+		return values;
+	},
+	_formatColors = (s, toHSL, orderMatchData) => {
+		let result = "",
+			colors = (s + result).match(_colorExp),
+			type = toHSL ? "hsla(" : "rgba(",
+			i = 0,
+			c, shell, d, l;
+		if (!colors) {
+			return s;
+		}
+		colors = colors.map(color => (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")");
+		if (orderMatchData) {
+			d = _colorOrderData(s);
+			c = orderMatchData.c;
+			if (c.join(result) !== d.c.join(result)) {
+				shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
+				l = shell.length - 1;
+				for (; i < l; i++) {
+					result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
+				}
+			}
+		}
+		if (!shell) {
+			shell = s.split(_colorExp);
+			l = shell.length - 1;
+			for (; i < l; i++) {
+				result += shell[i] + colors[i];
+			}
+		}
+		return result + shell[l];
+	},
+	_colorExp = (function() {
+		let s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b", //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,
+			p;
+		for (p in _colorLookup) {
+			s += "|" + p + "\\b";
+		}
+		return new RegExp(s + ")", "gi");
+	})(),
+	_hslExp = /hsl[a]?\(/,
+	_colorStringFilter = a => {
+		let combined = a.join(" "),
+			toHSL;
+		_colorExp.lastIndex = 0;
+		if (_colorExp.test(combined)) {
+			toHSL = _hslExp.test(combined);
+			a[1] = _formatColors(a[1], toHSL);
+			a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.
+			return true;
+		}
+	},
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * TICKER
+ * --------------------------------------------------------------------------------------
+ */
+	_tickerActive,
+	_ticker = (function() {
+		let _getTime = Date.now,
+			_lagThreshold = 500,
+			_adjustedLag = 33,
+			_startTime = _getTime(),
+			_lastUpdate = _startTime,
+			_gap = 1000 / 240,
+			_nextTime = _gap,
+			_listeners = [],
+			_id, _req, _raf, _self, _delta, _i,
+			_tick = v => {
+				let elapsed = _getTime() - _lastUpdate,
+					manual = v === true,
+					overlap, dispatch, time, frame;
+				(elapsed > _lagThreshold || elapsed < 0) && (_startTime += elapsed - _adjustedLag);
+				_lastUpdate += elapsed;
+				time = _lastUpdate - _startTime;
+				overlap = time - _nextTime;
+				if (overlap > 0 || manual) {
+					frame = ++_self.frame;
+					_delta = time - _self.time * 1000;
+					_self.time = time = time / 1000;
+					_nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
+					dispatch = 1;
+				}
+				manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.
+				if (dispatch) {
+					for (_i = 0; _i < _listeners.length; _i++) { // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.
+						_listeners[_i](time, _delta, frame, v);
+					}
+				}
+			};
+		_self = {
+			time:0,
+			frame:0,
+			tick() {
+				_tick(true);
+			},
+			deltaRatio(fps) {
+				return _delta / (1000 / (fps || 60));
+			},
+			wake() {
+				if (_coreReady) {
+					if (!_coreInitted && _windowExists()) {
+						_win = _coreInitted = window;
+						_doc = _win.document || {};
+						_globals.gsap = gsap;
+						(_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);
+						_install(_installScope || _win.GreenSockGlobals || (!_win.gsap && _win) || {});
+						_registerPluginQueue.forEach(_createPlugin);
+					}
+					_raf = typeof(requestAnimationFrame) !== "undefined" && requestAnimationFrame;
+					_id && _self.sleep();
+					_req = _raf || (f => setTimeout(f, (_nextTime - _self.time * 1000 + 1) | 0));
+					_tickerActive = 1;
+					_tick(2);
+				}
+			},
+			sleep() {
+				(_raf ? cancelAnimationFrame : clearTimeout)(_id);
+				_tickerActive = 0;
+				_req = _emptyFunc;
+			},
+			lagSmoothing(threshold, adjustedLag) {
+				_lagThreshold = threshold || Infinity; // zero should be interpreted as basically unlimited
+				_adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);
+			},
+			fps(fps) {
+				_gap = 1000 / (fps || 240);
+				_nextTime = _self.time * 1000 + _gap;
+			},
+			add(callback, once, prioritize) {
+				let func = once ? (t, d, f, v) => {callback(t, d, f, v); _self.remove(func);} : callback;
+				_self.remove(callback);
+				_listeners[prioritize ? "unshift" : "push"](func);
+				_wake();
+				return func;
+			},
+			remove(callback, i) {
+				~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;
+			},
+			_listeners:_listeners
+		};
+		return _self;
+	})(),
+	_wake = () => !_tickerActive && _ticker.wake(), //also ensures the core classes are initialized.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+* -------------------------------------------------
+* EASING
+* -------------------------------------------------
+*/
+	_easeMap = {},
+	_customEaseExp = /^[\d.\-M][\d.\-,\s]/,
+	_quotesExp = /["']/g,
+	_parseObjectInString = value => { //takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.
+		let obj = {},
+			split = value.substr(1, value.length-3).split(":"),
+			key = split[0],
+			i = 1,
+			l = split.length,
+			index, val, parsedVal;
+		for (; i < l; i++) {
+			val = split[i];
+			index = i !== l-1 ? val.lastIndexOf(",") : val.length;
+			parsedVal = val.substr(0, index);
+			obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
+			key = val.substr(index+1).trim();
+		}
+		return obj;
+	},
+	_valueInParentheses = value => {
+		let open = value.indexOf("(") + 1,
+			close = value.indexOf(")"),
+			nested = value.indexOf("(", open);
+		return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
+	},
+	_configEaseFromString = name => { //name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).
+		let split = (name + "").split("("),
+			ease = _easeMap[split[0]];
+		return (ease && split.length > 1 && ease.config) ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : (_easeMap._CE && _customEaseExp.test(name)) ? _easeMap._CE("", name) : ease;
+	},
+	_invertEase = ease => p => 1 - ease(1 - p),
+	// allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.
+	_propagateYoyoEase = (timeline, isYoyo) => {
+		let child = timeline._first, ease;
+		while (child) {
+			if (child instanceof Timeline) {
+				_propagateYoyoEase(child, isYoyo);
+			} else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
+				if (child.timeline) {
+					_propagateYoyoEase(child.timeline, isYoyo);
+				} else {
+					ease = child._ease;
+					child._ease = child._yEase;
+					child._yEase = ease;
+					child._yoyo = isYoyo;
+				}
+			}
+			child = child._next;
+		}
+	},
+	_parseEase = (ease, defaultEase) => !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase,
+	_insertEase = (names, easeIn, easeOut = p => 1 - easeIn(1 - p), easeInOut = (p => p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2)) => {
+		let ease = {easeIn, easeOut, easeInOut},
+			lowercaseName;
+		_forEachName(names, name => {
+			_easeMap[name] = _globals[name] = ease;
+			_easeMap[(lowercaseName = name.toLowerCase())] = easeOut;
+			for (let p in ease) {
+				_easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
+			}
+		});
+		return ease;
+	},
+	_easeInOutFromOut = easeOut => (p => p < .5 ? (1 - easeOut(1 - (p * 2))) / 2 : .5 + easeOut((p - .5) * 2) / 2),
+	_configElastic = (type, amplitude, period) => {
+		let p1 = (amplitude >= 1) ? amplitude : 1, //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
+			p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
+			p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
+			easeOut = p => p === 1 ? 1 : p1 * (2 ** (-10 * p)) * _sin((p - p3) * p2) + 1,
+			ease = (type === "out") ? easeOut : (type === "in") ? p => 1 - easeOut(1 - p) : _easeInOutFromOut(easeOut);
+		p2 = _2PI / p2; //precalculate to optimize
+		ease.config = (amplitude, period) => _configElastic(type, amplitude, period);
+		return ease;
+	},
+	_configBack = (type, overshoot = 1.70158) => {
+		let easeOut = p => p ? ((--p) * p * ((overshoot + 1) * p + overshoot) + 1) : 0,
+			ease = type === "out" ? easeOut : type === "in" ? p => 1 - easeOut(1 - p) : _easeInOutFromOut(easeOut);
+		ease.config = overshoot => _configBack(type, overshoot);
+		return ease;
+	};
+	// a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
+	// _weightedEase = ratio => {
+	// 	let y = 0.5 + ratio / 2;
+	// 	return p => (2 * (1 - p) * p * y + p * p);
+	// },
+	// a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
+	// _weightedEaseStrong = ratio => {
+	// 	ratio = .5 + ratio / 2;
+	// 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),
+	// 		b = ratio - o,
+	// 		c = ratio + o;
+	// 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;
+	// };
+
+_forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", (name, i) => {
+	let power = i < 5 ? i + 1 : i;
+	_insertEase(name + ",Power" + (power - 1), i ? p => p ** power : p => p, p => 1 - (1 - p) ** power, p => p < .5 ? (p * 2) ** power / 2 : 1 - ((1 - p) * 2) ** power / 2);
+});
+_easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;
+_insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());
+((n, c) => {
+	let n1 = 1 / c,
+		n2 = 2 * n1,
+		n3 = 2.5 * n1,
+		easeOut = p => (p < n1) ? n * p * p : (p < n2) ? n * (p - 1.5 / c) ** 2 + .75 : (p < n3) ? n * (p -= 2.25 / c) * p + .9375 : n * (p - 2.625 / c) ** 2 + .984375;
+	_insertEase("Bounce", p => 1 - easeOut(1 - p), easeOut);
+})(7.5625, 2.75);
+_insertEase("Expo", p => p ? 2 ** (10 * (p - 1)) : 0);
+_insertEase("Circ", p => -(_sqrt(1 - (p * p)) - 1));
+_insertEase("Sine", p => p === 1 ? 1 : -_cos(p * _HALF_PI) + 1);
+_insertEase("Back", _configBack("in"), _configBack("out"), _configBack());
+_easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
+	config(steps = 1, immediateStart) {
+		let p1 = 1 / steps,
+			p2 = steps + (immediateStart ? 0 : 1),
+			p3 = immediateStart ? 1 : 0,
+			max = 1 - _tinyNum;
+		return p => (((p2 * _clamp(0, max, p)) | 0) + p3) * p1;
+	}
+};
+_defaults.ease = _easeMap["quad.out"];
+
+
+_forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", name => _callbackNames += name + "," + name + "Params,");
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * CACHE
+ * --------------------------------------------------------------------------------------
+ */
+class GSCache {
+
+	constructor(target, harness) {
+		this.id = _gsID++;
+		target._gsap = this;
+		this.target = target;
+		this.harness = harness;
+		this.get = harness ? harness.get : _getProperty;
+		this.set = harness ? harness.getSetter : _getSetter;
+	}
+
+}
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * ANIMATION
+ * --------------------------------------------------------------------------------------
+ */
+
+class Animation {
+
+	constructor(vars) {
+		this.vars = vars;
+		this._delay = +vars.delay || 0;
+		if ((this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0)) { // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.
+			this._rDelay = vars.repeatDelay || 0;
+			this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
+		}
+		this._ts = 1;
+		_setDuration(this, +vars.duration, 1, 1);
+		this.data = vars.data;
+		if (_context) {
+			this._ctx = _context;
+			_context.data.push(this);
+		}
+		_tickerActive || _ticker.wake();
+	}
+
+	delay(value) {
+		if (value || value === 0) {
+			this.parent && this.parent.smoothChildTiming && (this.startTime(this._start + value - this._delay));
+			this._delay = value;
+			return this;
+		}
+		return this._delay;
+	}
+
+	duration(value) {
+		return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
+	}
+
+	totalDuration(value) {
+		if (!arguments.length) {
+			return this._tDur;
+		}
+		this._dirty = 0;
+		return _setDuration(this, this._repeat < 0 ? value : (value - (this._repeat * this._rDelay)) / (this._repeat + 1));
+	}
+
+	totalTime(totalTime, suppressEvents) {
+		_wake();
+		if (!arguments.length) {
+			return this._tTime;
+		}
+		let parent = this._dp;
+		if (parent && parent.smoothChildTiming && this._ts) {
+			_alignPlayhead(this, totalTime);
+			!parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.
+			//in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.
+			while (parent && parent.parent) {
+				if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
+					parent.totalTime(parent._tTime, true);
+				}
+				parent = parent.parent;
+			}
+			if (!this.parent && this._dp.autoRemoveChildren && ((this._ts > 0 && totalTime < this._tDur) || (this._ts < 0 && totalTime > 0) || (!this._tDur && !totalTime) )) { //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.
+				_addToTimeline(this._dp, this, this._start - this._delay);
+			}
+		}
+        if (this._tTime !== totalTime || (!this._dur && !suppressEvents) || (this._initted && Math.abs(this._zTime) === _tinyNum) || (!totalTime && !this._initted && (this.add || this._ptLookup))) { // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)
+        	this._ts || (this._pTime = totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause
+	        //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)
+		    //   this._lock = 1;
+		        _lazySafeRender(this, totalTime, suppressEvents);
+		    //   this._lock = 0;
+	        //}
+		}
+		return this;
+	}
+
+	time(value, suppressEvents) {
+		return arguments.length ? this.totalTime((Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay)) || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!
+	}
+
+	totalProgress(value, suppressEvents) {
+		return arguments.length ? this.totalTime( this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.rawTime() > 0 ? 1 : 0;
+	}
+
+	progress(value, suppressEvents) {
+		return arguments.length ? this.totalTime( this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : (this.duration() ? Math.min(1, this._time / this._dur) : this.rawTime() > 0 ? 1 : 0);
+	}
+
+	iteration(value, suppressEvents) {
+		let cycleDuration = this.duration() + this._rDelay;
+		return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
+	}
+
+	// potential future addition:
+	// isPlayingBackwards() {
+	// 	let animation = this,
+	// 		orientation = 1; // 1 = forward, -1 = backward
+	// 	while (animation) {
+	// 		orientation *= animation.reversed() || (animation.repeat() && !(animation.iteration() & 1)) ? -1 : 1;
+	// 		animation = animation.parent;
+	// 	}
+	// 	return orientation < 0;
+	// }
+
+	timeScale(value, suppressEvents) {
+		if (!arguments.length) {
+			return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.
+		}
+		if (this._rts === value) {
+			return this;
+		}
+		let tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.
+
+		// future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.
+		//(+value < 0 && this._rts >= 0) && _callback(this, "onReverse", true);
+
+		// prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.
+		this._rts = +value || 0;
+		this._ts = (this._ps || value === -_tinyNum) ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.
+		this.totalTime(_clamp(-Math.abs(this._delay), this._tDur, tTime), suppressEvents !== false);
+		_setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.
+		return _recacheAncestors(this);
+	}
+
+	paused(value) {
+		if (!arguments.length) {
+			return this._ps;
+		}
+		if (this._ps !== value) {
+			this._ps = value;
+			if (value) {
+				this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.
+				this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the "real" timeScale as _rts (recorded time scale)
+			} else {
+				_wake();
+				this._ts = this._rts;
+				//only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.
+				this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, (this.progress() === 1) && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum)); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.
+			}
+		}
+		return this;
+	}
+
+	startTime(value) {
+		if (arguments.length) {
+			this._start = value;
+			let parent = this.parent || this._dp;
+			parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
+			return this;
+		}
+		return this._start;
+	}
+
+	endTime(includeRepeats) {
+		return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
+	}
+
+	rawTime(wrapRepeats) {
+		let parent = this.parent || this._dp; // _dp = detached parent
+		return !parent ? this._tTime : (wrapRepeats && (!this._ts || (this._repeat && this._time && this.totalProgress() < 1))) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
+	}
+
+	revert(config= _revertConfig) {
+		let prevIsReverting = _reverting;
+		_reverting = config;
+		if (this._initted || this._startAt) {
+			this.timeline && this.timeline.revert(config);
+			this.totalTime(-0.01, config.suppressEvents);
+		}
+		this.data !== "nested" && config.kill !== false && this.kill();
+		_reverting = prevIsReverting;
+		return this;
+	}
+
+	globalTime(rawTime) {
+		let animation = this,
+			time = arguments.length ? rawTime : animation.rawTime();
+		while (animation) {
+			time = animation._start + time / (Math.abs(animation._ts) || 1);
+			animation = animation._dp;
+		}
+		return !this.parent && this._sat ? this._sat.globalTime(rawTime) : time; // the _startAt tweens for .fromTo() and .from() that have immediateRender should always be FIRST in the timeline (important for context.revert()). "_sat" stands for _startAtTween, referring to the parent tween that created the _startAt. We must discern if that tween had immediateRender so that we can know whether or not to prioritize it in revert().
+	}
+
+	repeat(value) {
+		if (arguments.length) {
+			this._repeat = value === Infinity ? -2 : value;
+			return _onUpdateTotalDuration(this);
+		}
+		return this._repeat === -2 ? Infinity : this._repeat;
+	}
+
+	repeatDelay(value) {
+		if (arguments.length) {
+			let time = this._time;
+			this._rDelay = value;
+			_onUpdateTotalDuration(this);
+			return time ? this.time(time) : this;
+		}
+		return this._rDelay;
+	}
+
+	yoyo(value) {
+		if (arguments.length) {
+			this._yoyo = value;
+			return this;
+		}
+		return this._yoyo;
+	}
+
+	seek(position, suppressEvents) {
+		return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
+	}
+
+	restart(includeDelay, suppressEvents) {
+		return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
+	}
+
+	play(from, suppressEvents) {
+		from != null && this.seek(from, suppressEvents);
+		return this.reversed(false).paused(false);
+	}
+
+	reverse(from, suppressEvents) {
+		from != null && this.seek(from || this.totalDuration(), suppressEvents);
+		return this.reversed(true).paused(false);
+	}
+
+	pause(atTime, suppressEvents) {
+		atTime != null && this.seek(atTime, suppressEvents);
+		return this.paused(true);
+	}
+
+	resume() {
+		return this.paused(false);
+	}
+
+	reversed(value) {
+		if (arguments.length) {
+			!!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.
+			return this;
+		}
+		return this._rts < 0;
+	}
+
+	invalidate() {
+		this._initted = this._act = 0;
+		this._zTime = -_tinyNum;
+		return this;
+	}
+
+	isActive() {
+		let parent = this.parent || this._dp,
+			start = this._start,
+			rawTime;
+		return !!(!parent || (this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum));
+	}
+
+	eventCallback(type, callback, params) {
+		let vars = this.vars;
+		if (arguments.length > 1) {
+			if (!callback) {
+				delete vars[type];
+			} else {
+				vars[type] = callback;
+				params && (vars[type + "Params"] = params);
+				type === "onUpdate" && (this._onUpdate = callback);
+			}
+			return this;
+		}
+		return vars[type];
+	}
+
+	then(onFulfilled) {
+		let self = this;
+		return new Promise(resolve => {
+			let f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
+				_resolve = () => {
+					let _then = self.then;
+					self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)
+					_isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
+					resolve(f);
+					self.then = _then;
+				};
+			if (self._initted && (self.totalProgress() === 1 && self._ts >= 0) || (!self._tTime && self._ts < 0)) {
+				_resolve();
+			} else {
+				self._prom = _resolve;
+			}
+		});
+	}
+
+	kill() {
+		_interrupt(this);
+	}
+
+}
+
+_setDefaults(Animation.prototype, {_time:0, _start:0, _end:0, _tTime:0, _tDur:0, _dirty:0, _repeat:0, _yoyo:false, parent:null, _initted:false, _rDelay:0, _ts:1, _dp:0, ratio:0, _zTime:-_tinyNum, _prom:0, _ps:false, _rts:1});
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * -------------------------------------------------
+ * TIMELINE
+ * -------------------------------------------------
+ */
+
+class Timeline extends Animation {
+
+	constructor(vars = {}, position) {
+		super(vars);
+		this.labels = {};
+		this.smoothChildTiming = !!vars.smoothChildTiming;
+		this.autoRemoveChildren = !!vars.autoRemoveChildren;
+		this._sort = _isNotFalse(vars.sortChildren);
+		_globalTimeline && _addToTimeline(vars.parent || _globalTimeline, this, position);
+		vars.reversed && this.reverse();
+		vars.paused && this.paused(true);
+		vars.scrollTrigger && _scrollTrigger(this, vars.scrollTrigger);
+	}
+
+	to(targets, vars, position) {
+		_createTweenType(0, arguments, this);
+		return this;
+	}
+
+	from(targets, vars, position) {
+		_createTweenType(1, arguments, this);
+		return this;
+	}
+
+	fromTo(targets, fromVars, toVars, position) {
+		_createTweenType(2, arguments, this);
+		return this;
+	}
+
+	set(targets, vars, position) {
+		vars.duration = 0;
+		vars.parent = this;
+		_inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
+		vars.immediateRender = !!vars.immediateRender;
+		new Tween(targets, vars, _parsePosition(this, position), 1);
+		return this;
+	}
+
+	call(callback, params, position) {
+		return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);
+	}
+
+	//ONLY for backward compatibility! Maybe delete?
+	staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
+		vars.duration = duration;
+		vars.stagger = vars.stagger || stagger;
+		vars.onComplete = onCompleteAll;
+		vars.onCompleteParams = onCompleteAllParams;
+		vars.parent = this;
+		new Tween(targets, vars, _parsePosition(this, position));
+		return this;
+	}
+
+	staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
+		vars.runBackwards = 1;
+		_inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
+		return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
+	}
+
+	staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
+		toVars.startAt = fromVars;
+		_inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
+		return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
+	}
+
+	render(totalTime, suppressEvents, force) {
+		let prevTime = this._time,
+			tDur = this._dirty ? this.totalDuration() : this._tDur,
+			dur = this._dur,
+			tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime), // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.
+			crossingStart = (this._zTime < 0) !== (totalTime < 0) && (this._initted || !dur),
+			time, child, next, iteration, cycleDuration, prevPaused, pauseTween, timeScale, prevStart, prevIteration, yoyo, isYoyo;
+		this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);
+		if (tTime !== this._tTime || force || crossingStart) {
+			if (prevTime !== this._time && dur) { //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
+				tTime += this._time - prevTime;
+				totalTime += this._time - prevTime;
+			}
+			time = tTime;
+			prevStart = this._start;
+			timeScale = this._ts;
+			prevPaused = !timeScale;
+			if (crossingStart) {
+				dur || (prevTime = this._zTime);
+				 //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.
+				(totalTime || !suppressEvents) && (this._zTime = totalTime);
+			}
+			if (this._repeat) { //adjust the time for repeats and yoyos
+				yoyo = this._yoyo;
+				cycleDuration = dur + this._rDelay;
+				if (this._repeat < -1 && totalTime < 0) {
+					return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
+				}
+				time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)
+				if (tTime === tDur) { // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
+					iteration = this._repeat;
+					time = dur;
+				} else {
+					iteration = ~~(tTime / cycleDuration);
+					if (iteration && iteration === tTime / cycleDuration) {
+						time = dur;
+						iteration--;
+					}
+					time > dur && (time = dur);
+				}
+				prevIteration = _animationCycle(this._tTime, cycleDuration);
+				!prevTime && this._tTime && prevIteration !== iteration && this._tTime - prevIteration * cycleDuration - this._dur <= 0 && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://gsap.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005 also, this._tTime - prevIteration * cycleDuration - this._dur <= 0 just checks to make sure it wasn't previously in the "repeatDelay" portion
+				if (yoyo && (iteration & 1)) {
+					time = dur - time;
+					isYoyo = 1;
+				}
+				/*
+				make sure children at the end/beginning of the timeline are rendered properly. If, for example,
+				a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
+				would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
+				could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
+				we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
+				ensure that zero-duration tweens at the very beginning or end of the Timeline work.
+				*/
+				if (iteration !== prevIteration && !this._lock) {
+					let rewinding = (yoyo && (prevIteration & 1)),
+						doesWrap = (rewinding === (yoyo && (iteration & 1)));
+					iteration < prevIteration && (rewinding = !rewinding);
+					prevTime = rewinding ? 0 : tTime % dur ? dur : tTime; // if the playhead is landing exactly at the end of an iteration, use that totalTime rather than only the duration, otherwise it'll skip the 2nd render since it's effectively at the same time.
+					this._lock = 1;
+					this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
+					this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.
+					!suppressEvents && this.parent && _callback(this, "onRepeat");
+					this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);
+					if ((prevTime && prevTime !== this._time) || prevPaused !== !this._ts || (this.vars.onRepeat && !this.parent && !this._act)) { // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.
+						return this;
+					}
+					dur = this._dur; // in case the duration changed in the onRepeat
+					tDur = this._tDur;
+					if (doesWrap) {
+						this._lock = 2;
+						prevTime = rewinding ? dur : -0.0001;
+						this.render(prevTime, true);
+						this.vars.repeatRefresh && !isYoyo && this.invalidate();
+					}
+					this._lock = 0;
+					if (!this._ts && !prevPaused) {
+						return this;
+					}
+					//in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.
+					_propagateYoyoEase(this, isYoyo);
+				}
+			}
+			if (this._hasPause && !this._forcing && this._lock < 2) {
+				pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));
+				if (pauseTween) {
+					tTime -= time - (time = pauseTween._start);
+				}
+			}
+
+			this._tTime = tTime;
+			this._time = time;
+			this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.
+
+			if (!this._initted) {
+				this._onUpdate = this.vars.onUpdate;
+				this._initted = 1;
+				this._zTime = totalTime;
+				prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).
+			}
+			if (!prevTime && time && !suppressEvents && !iteration) {
+				_callback(this, "onStart");
+				if (this._tTime !== tTime) { // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
+					return this;
+				}
+			}
+			if (time >= prevTime && totalTime >= 0) {
+				child = this._first;
+				while (child) {
+					next = child._next;
+					if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
+						if (child.parent !== this) { // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
+							return this.render(totalTime, suppressEvents, force);
+						}
+						child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);
+						if (time !== this._time || (!this._ts && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
+							pauseTween = 0;
+							next && (tTime += (this._zTime = -_tinyNum));  // it didn't finish rendering, so flag zTime as negative so that so that the next time render() is called it'll be forced (to render any remaining children)
+							break;
+						}
+					}
+					child = next;
+				}
+			} else {
+				child = this._last;
+				let adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.
+				while (child) {
+					next = child._prev;
+					if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
+						if (child.parent !== this) { // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
+							return this.render(totalTime, suppressEvents, force);
+						}
+						child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || (_reverting && (child._initted || child._startAt)));  // if reverting, we should always force renders of initted tweens (but remember that .fromTo() or .from() may have a _startAt but not _initted yet). If, for example, a .fromTo() tween with a stagger (which creates an internal timeline) gets reverted BEFORE some of its child tweens render for the first time, it may not properly trigger them to revert.
+						if (time !== this._time || (!this._ts && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
+							pauseTween = 0;
+							next && (tTime += (this._zTime = adjustedTime ? -_tinyNum : _tinyNum)); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)
+							break;
+						}
+					}
+					child = next;
+				}
+			}
+			if (pauseTween && !suppressEvents) {
+				this.pause();
+				pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;
+				if (this._ts) { //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).
+					this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.
+					_setEnd(this);
+					return this.render(totalTime, suppressEvents, force);
+				}
+			}
+			this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
+			if ((tTime === tDur && this._tTime >= this.totalDuration()) || (!tTime && prevTime)) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) { // remember, a child's callback may alter this timeline's playhead or timeScale which is why we need to add some of these checks.
+				(totalTime || !dur) && ((tTime === tDur && this._ts > 0) || (!tTime && this._ts < 0)) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.
+				if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {
+					_callback(this, (tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete"), true);
+					this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
+				}
+			}
+		}
+		return this;
+	}
+
+	add(child, position) {
+		_isNumber(position) || (position = _parsePosition(this, position, child));
+		if (!(child instanceof Animation)) {
+			if (_isArray(child)) {
+				child.forEach(obj => this.add(obj, position));
+				return this;
+			}
+			if (_isString(child)) {
+				return this.addLabel(child, position);
+			}
+			if (_isFunction(child)) {
+				child = Tween.delayedCall(0, child);
+			} else {
+				return this;
+			}
+		}
+		return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!
+	}
+
+	getChildren(nested = true, tweens = true, timelines = true, ignoreBeforeTime = -_bigNum) {
+		let a = [],
+			child = this._first;
+		while (child) {
+			if (child._start >= ignoreBeforeTime) {
+				if (child instanceof Tween) {
+					tweens && a.push(child);
+				} else {
+					timelines && a.push(child);
+					nested && a.push(...child.getChildren(true, tweens, timelines));
+				}
+			}
+			child = child._next;
+		}
+		return a;
+	}
+
+	getById(id) {
+		let animations = this.getChildren(1, 1, 1),
+			i = animations.length;
+		while(i--) {
+			if (animations[i].vars.id === id) {
+				return animations[i];
+			}
+		}
+	}
+
+	remove(child) {
+		if (_isString(child)) {
+			return this.removeLabel(child);
+		}
+		if (_isFunction(child)) {
+			return this.killTweensOf(child);
+		}
+		_removeLinkedListItem(this, child);
+		if (child === this._recent) {
+			this._recent = this._last;
+		}
+		return _uncache(this);
+	}
+
+	totalTime(totalTime, suppressEvents) {
+		if (!arguments.length) {
+			return this._tTime;
+		}
+		this._forcing = 1;
+		if (!this._dp && this._ts) { //special case for the global timeline (or any other that has no parent or detached parent).
+			this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? totalTime / this._ts : (this.totalDuration() - totalTime) / -this._ts));
+		}
+		super.totalTime(totalTime, suppressEvents);
+		this._forcing = 0;
+		return this;
+	}
+
+	addLabel(label, position) {
+		this.labels[label] = _parsePosition(this, position);
+		return this;
+	}
+
+	removeLabel(label) {
+		delete this.labels[label];
+		return this;
+	}
+
+	addPause(position, callback, params) {
+		let t = Tween.delayedCall(0, callback || _emptyFunc, params);
+		t.data = "isPause";
+		this._hasPause = 1;
+		return _addToTimeline(this, t, _parsePosition(this, position));
+	}
+
+	removePause(position) {
+		let child = this._first;
+		position = _parsePosition(this, position);
+		while (child) {
+			if (child._start === position && child.data === "isPause") {
+				_removeFromParent(child);
+			}
+			child = child._next;
+		}
+	}
+
+	killTweensOf(targets, props, onlyActive) {
+		let tweens = this.getTweensOf(targets, onlyActive),
+			i = tweens.length;
+		while (i--) {
+			(_overwritingTween !== tweens[i]) && tweens[i].kill(targets, props);
+		}
+		return this;
+	}
+
+	getTweensOf(targets, onlyActive) {
+		let a = [],
+			parsedTargets = toArray(targets),
+			child = this._first,
+			isGlobalTime = _isNumber(onlyActive), // a number is interpreted as a global time. If the animation spans
+			children;
+		while (child) {
+			if (child instanceof Tween) {
+				if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || (child._initted && child._ts)) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) { // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.
+					a.push(child);
+				}
+			} else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
+				a.push(...children);
+			}
+			child = child._next;
+		}
+		return a;
+	}
+
+	// potential future feature - targets() on timelines
+	// targets() {
+	// 	let result = [];
+	// 	this.getChildren(true, true, false).forEach(t => result.push(...t.targets()));
+	// 	return result.filter((v, i) => result.indexOf(v) === i);
+	// }
+
+	tweenTo(position, vars) {
+		vars = vars || {};
+		let tl = this,
+			endTime = _parsePosition(tl, position),
+			{ startAt, onStart, onStartParams, immediateRender } = vars,
+			initted,
+			tween = Tween.to(tl, _setDefaults({
+				ease: vars.ease || "none",
+				lazy: false,
+				immediateRender: false,
+				time: endTime,
+				overwrite: "auto",
+				duration: vars.duration || (Math.abs((endTime - ((startAt && "time" in startAt) ? startAt.time : tl._time)) / tl.timeScale())) || _tinyNum,
+				onStart: () => {
+					tl.pause();
+					if (!initted) {
+						let duration = vars.duration || Math.abs((endTime - ((startAt && "time" in startAt) ? startAt.time : tl._time)) / tl.timeScale());
+						(tween._dur !== duration) && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);
+						initted = 1;
+					}
+					onStart && onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.
+				}
+			}, vars));
+		return immediateRender ? tween.render(0) : tween;
+	}
+
+	tweenFromTo(fromPosition, toPosition, vars) {
+		return this.tweenTo(toPosition, _setDefaults({startAt:{time:_parsePosition(this, fromPosition)}}, vars));
+	}
+
+	recent() {
+		return this._recent;
+	}
+
+	nextLabel(afterTime = this._time) {
+		return _getLabelInDirection(this, _parsePosition(this, afterTime));
+	}
+
+	previousLabel(beforeTime = this._time) {
+		return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
+	}
+
+	currentLabel(value) {
+		return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
+	}
+
+	shiftChildren(amount, adjustLabels, ignoreBeforeTime = 0) {
+		let child = this._first,
+			labels = this.labels,
+			p;
+		while (child) {
+			if (child._start >= ignoreBeforeTime) {
+				child._start += amount;
+				child._end += amount;
+			}
+			child = child._next;
+		}
+		if (adjustLabels) {
+			for (p in labels) {
+				if (labels[p] >= ignoreBeforeTime) {
+					labels[p] += amount;
+				}
+			}
+		}
+		return _uncache(this);
+	}
+
+	invalidate(soft) {
+		let child = this._first;
+		this._lock = 0;
+		while (child) {
+			child.invalidate(soft);
+			child = child._next;
+		}
+		return super.invalidate(soft);
+	}
+
+	clear(includeLabels = true) {
+		let child = this._first,
+			next;
+		while (child) {
+			next = child._next;
+			this.remove(child);
+			child = next;
+		}
+		this._dp && (this._time = this._tTime = this._pTime = 0);
+		includeLabels && (this.labels = {});
+		return _uncache(this);
+	}
+
+	totalDuration(value) {
+		let max = 0,
+			self = this,
+			child = self._last,
+			prevStart = _bigNum,
+			prev, start, parent;
+		if (arguments.length) {
+			return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
+		}
+		if (self._dirty) {
+			parent = self.parent;
+			while (child) {
+				prev = child._prev; //record it here in case the tween changes position in the sequence...
+				child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.
+				start = child._start;
+				if (start > prevStart && self._sort && child._ts && !self._lock) { //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
+					self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().
+					_addToTimeline(self, child, start - child._delay, 1)._lock = 0;
+				} else {
+					prevStart = start;
+				}
+				if (start < 0 && child._ts) { //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
+					max -= start;
+					if ((!parent && !self._dp) || (parent && parent.smoothChildTiming)) {
+						self._start += start / self._ts;
+						self._time -= start;
+						self._tTime -= start;
+					}
+					self.shiftChildren(-start, false, -1e999);
+					prevStart = 0;
+				}
+				child._end > max && child._ts && (max = child._end);
+				child = prev;
+			}
+			_setDuration(self, (self === _globalTimeline && self._time > max) ? self._time : max, 1, 1);
+			self._dirty = 0;
+		}
+		return self._tDur;
+	}
+
+	static updateRoot(time) {
+		if (_globalTimeline._ts) {
+			_lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));
+			_lastRenderedFrame = _ticker.frame;
+		}
+		if (_ticker.frame >= _nextGCFrame) {
+			_nextGCFrame += _config.autoSleep || 120;
+			let child = _globalTimeline._first;
+			if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
+				while (child && !child._ts) {
+					child = child._next;
+				}
+				child || _ticker.sleep();
+			}
+		}
+	}
+
+}
+
+_setDefaults(Timeline.prototype, {_lock:0, _hasPause:0, _forcing:0});
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+let _addComplexStringPropTween = function(target, prop, start, end, setter, stringFilter, funcParam) { //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
+		let pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
+			index = 0,
+			matchIndex = 0,
+			result,	startNums, color, endNum, chunk, startNum, hasRandom, a;
+		pt.b = start;
+		pt.e = end;
+		start += ""; //ensure values are strings
+		end += "";
+		if ((hasRandom = ~end.indexOf("random("))) {
+			end = _replaceRandom(end);
+		}
+		if (stringFilter) {
+			a = [start, end];
+			stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.
+			start = a[0];
+			end = a[1];
+		}
+		startNums = start.match(_complexStringNumExp) || [];
+		while ((result = _complexStringNumExp.exec(end))) {
+			endNum = result[0];
+			chunk = end.substring(index, result.index);
+			if (color) {
+				color = (color + 1) % 5;
+			} else if (chunk.substr(-5) === "rgba(") {
+				color = 1;
+			}
+			if (endNum !== startNums[matchIndex++]) {
+				startNum = parseFloat(startNums[matchIndex-1]) || 0;
+				//these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.
+				pt._pt = {
+					_next: pt._pt,
+					p: (chunk || matchIndex === 1) ? chunk : ",", //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
+					s: startNum,
+					c: endNum.charAt(1) === "=" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,
+					m: (color && color < 4) ? Math.round : 0
+				};
+				index = _complexStringNumExp.lastIndex;
+			}
+		}
+		pt.c = (index < end.length) ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
+		pt.fp = funcParam;
+		if (_relExp.test(end) || hasRandom) {
+			pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
+		}
+		this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
+		return pt;
+	},
+	_addPropTween = function(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {
+		_isFunction(end) && (end = end(index || 0, target, targets));
+		let currentValue = target[prop],
+			parsedStart = (start !== "get") ? start : !_isFunction(currentValue) ? currentValue : (funcParam ? target[(prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)])) ? prop : "get" + prop.substr(3)](funcParam) : target[prop]()),
+			setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
+			pt;
+		if (_isString(end)) {
+			if (~end.indexOf("random(")) {
+				end = _replaceRandom(end);
+			}
+			if (end.charAt(1) === "=") {
+				pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);
+				if (pt || pt === 0) { // to avoid isNaN, like if someone passes in a value like "!= whatever"
+					end = pt;
+				}
+			}
+		}
+		if (!optional || parsedStart !== end || _forceAllPropTweens) {
+			if (!isNaN(parsedStart * end) && end !== "") { // fun fact: any number multiplied by "" is evaluated as the number 0!
+				pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof(currentValue) === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
+				funcParam && (pt.fp = funcParam);
+				modifier && pt.modifier(modifier, this, target);
+				return (this._pt = pt);
+			}
+			!currentValue && !(prop in target) && _missingPlugin(prop, end);
+			return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
+		}
+	},
+	//creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with "random()" in them. It does NOT process relative values.
+	_processVars = (vars, index, target, targets, tween) => {
+		_isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));
+		if (!_isObject(vars) || (vars.style && vars.nodeType) || _isArray(vars) || _isTypedArray(vars)) {
+			return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
+		}
+		let copy = {},
+			p;
+		for (p in vars) {
+			copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
+		}
+		return copy;
+	},
+	_checkPlugin = (property, vars, tween, index, target, targets) => {
+		let plugin, pt, ptLookup, i;
+		if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
+			tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);
+			if (tween !== _quickTween) {
+				ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.
+				i = plugin._props.length;
+				while (i--) {
+					ptLookup[plugin._props[i]] = pt;
+				}
+			}
+		}
+		return plugin;
+	},
+	_overwritingTween, //store a reference temporarily so we can avoid overwriting itself.
+	_forceAllPropTweens,
+	_initTween = (tween, time, tTime) => {
+		let vars = tween.vars,
+			{ ease, startAt, immediateRender, lazy, onUpdate, runBackwards, yoyoEase, keyframes, autoRevert } = vars,
+			dur = tween._dur,
+			prevStartAt = tween._startAt,
+			targets = tween._targets,
+			parent = tween.parent,
+			//when a stagger (or function-based duration/delay) is on a Tween instance, we create a nested timeline which means that the "targets" of that tween don't reflect the parent. This function allows us to discern when it's a nested tween and in that case, return the full targets array so that function-based values get calculated properly. Also remember that if the tween has a stagger AND keyframes, it could be multiple levels deep which is why we store the targets Array in the vars of the timeline.
+			fullTargets = (parent && parent.data === "nested") ? parent.vars.targets : targets,
+			autoOverwrite = (tween._overwrite === "auto") && !_suppressOverwrites,
+			tl = tween.timeline,
+			cleanVars, i, p, pt, target, hasPriority, gsData, harness, plugin, ptLookup, index, harnessVars, overwritten;
+		tl && (!keyframes || !ease) && (ease = "none");
+		tween._ease = _parseEase(ease, _defaults.ease);
+		tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;
+		if (yoyoEase && tween._yoyo && !tween._repeat) { //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.
+			yoyoEase = tween._yEase;
+			tween._yEase = tween._ease;
+			tween._ease = yoyoEase;
+		}
+		tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.
+		if (!tl || (keyframes && !vars.stagger)) { //if there's an internal timeline, skip all the parsing because we passed that task down the chain.
+			harness = targets[0] ? _getCache(targets[0]).harness : 0;
+			harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.
+			cleanVars = _copyExcluding(vars, _reservedProps);
+			if (prevStartAt) {
+				prevStartAt._zTime < 0 && prevStartAt.progress(1); // in case it's a lazy startAt that hasn't rendered yet.
+				(time < 0 && runBackwards && immediateRender && !autoRevert) ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig); // if it's a "startAt" (not "from()" or runBackwards: true), we only need to do a shallow revert (keep transforms cached in CSSPlugin)
+				// don't just _removeFromParent(prevStartAt.render(-1, true)) because that'll leave inline styles. We're creating a new _startAt for "startAt" tweens that re-capture things to ensure that if the pre-tween values changed since the tween was created, they're recorded.
+				prevStartAt._lazy = 0;
+			}
+			if (startAt) {
+				_removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({data: "isStart", overwrite: false, parent: parent, immediateRender: true, lazy: !prevStartAt && _isNotFalse(lazy), startAt: null, delay: 0, onUpdate: onUpdate && (() => _callback(tween, "onUpdate")), stagger: 0}, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);
+				tween._startAt._dp = 0; // don't allow it to get put back into root timeline! Like when revert() is called and totalTime() gets set.
+				tween._startAt._sat = tween; // used in globalTime(). _sat stands for _startAtTween
+				(time < 0 && (_reverting || (!immediateRender && !autoRevert))) && tween._startAt.revert(_revertConfigNoKill); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.
+				if (immediateRender) {
+					if (dur && time <= 0 && tTime <= 0) { // check tTime here because in the case of a yoyo tween whose playhead gets pushed to the end like tween.progress(1), we should allow it through so that the onComplete gets fired properly.
+						time && (tween._zTime = time);
+						return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
+					}
+				}
+			} else if (runBackwards && dur) {
+				//from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
+				if (!prevStartAt) {
+					time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0
+					p = _setDefaults({
+						overwrite: false,
+						data: "isFromStart", //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
+						lazy: immediateRender && !prevStartAt && _isNotFalse(lazy),
+						immediateRender: immediateRender, //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
+						stagger: 0,
+						parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y: gsap.utils.wrap([-100,100]), stagger: 0.5})
+					}, cleanVars);
+					harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})
+					_removeFromParent(tween._startAt = Tween.set(targets, p));
+					tween._startAt._dp = 0; // don't allow it to get put back into root timeline!
+					tween._startAt._sat = tween; // used in globalTime()
+					(time < 0) && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));
+					tween._zTime = time;
+					if (!immediateRender) {
+						_initTween(tween._startAt, _tinyNum, _tinyNum); //ensures that the initial values are recorded
+					} else if (!time) {
+						return;
+					}
+				}
+			}
+			tween._pt = tween._ptCache = 0;
+			lazy = (dur && _isNotFalse(lazy)) || (lazy && !dur);
+			for (i = 0; i < targets.length; i++) {
+				target = targets[i];
+				gsData = target._gsap || _harness(targets)[i]._gsap;
+				tween._ptLookup[i] = ptLookup = {};
+				_lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)
+				index = fullTargets === targets ? i : fullTargets.indexOf(target);
+				if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
+					tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);
+					plugin._props.forEach(name => {ptLookup[name] = pt;});
+					plugin.priority && (hasPriority = 1);
+				}
+				if (!harness || harnessVars) {
+					for (p in cleanVars) {
+						if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
+							plugin.priority && (hasPriority = 1);
+						} else {
+							ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
+						}
+					}
+				}
+				tween._op && tween._op[i] && tween.kill(target, tween._op[i]);
+				if (autoOverwrite && tween._pt) {
+					_overwritingTween = tween;
+					_globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time)); // make sure the overwriting doesn't overwrite THIS tween!!!
+					overwritten = !tween.parent;
+					_overwritingTween = 0;
+				}
+				tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
+			}
+			hasPriority && _sortPropTweensByPriority(tween);
+			tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.
+		}
+		tween._onUpdate = onUpdate;
+		tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.
+		(keyframes && time <= 0) && tl.render(_bigNum, true, true); // if there's a 0% keyframe, it'll render in the "before" state for any staggered/delayed animations thus when the following tween initializes, it'll use the "before" state instead of the "after" state as the initial values.
+	},
+	_updatePropTweens = (tween, property, value, start, startIsRelative, ratio, time, skipRecursion) => {
+		let ptCache = ((tween._pt && tween._ptCache) || (tween._ptCache = {}))[property],
+			pt, rootPT, lookup, i;
+		if (!ptCache) {
+			ptCache = tween._ptCache[property] = [];
+			lookup = tween._ptLookup;
+			i = tween._targets.length;
+			while (i--) {
+				pt = lookup[i][property];
+				if (pt && pt.d && pt.d._pt) { // it's a plugin, so find the nested PropTween
+					pt = pt.d._pt;
+					while (pt && pt.p !== property && pt.fp !== property) { // "fp" is functionParam for things like setting CSS variables which require .setProperty("--var-name", value)
+						pt = pt._next;
+					}
+				}
+				if (!pt) { // there is no PropTween associated with that property, so we must FORCE one to be created and ditch out of this
+					// if the tween has other properties that already rendered at new positions, we'd normally have to rewind to put them back like tween.render(0, true) before forcing an _initTween(), but that can create another edge case like tweening a timeline's progress would trigger onUpdates to fire which could move other things around. It's better to just inform users that .resetTo() should ONLY be used for tweens that already have that property. For example, you can't gsap.to(...{ y: 0 }) and then tween.restTo("x", 200) for example.
+					_forceAllPropTweens = 1; // otherwise, when we _addPropTween() and it finds no change between the start and end values, it skips creating a PropTween (for efficiency...why tween when there's no difference?) but in this case we NEED that PropTween created so we can edit it.
+					tween.vars[property] = "+=0";
+					_initTween(tween, time);
+					_forceAllPropTweens = 0;
+					return skipRecursion ? _warn(property + " not eligible for reset") : 1; // if someone tries to do a quickTo() on a special property like borderRadius which must get split into 4 different properties, that's not eligible for .resetTo().
+				}
+				ptCache.push(pt);
+			}
+		}
+		i = ptCache.length;
+		while (i--) {
+			rootPT = ptCache[i];
+			pt = rootPT._pt || rootPT; // complex values may have nested PropTweens. We only accommodate the FIRST value.
+			pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;
+			pt.c = value - pt.s;
+			rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e)); // mainly for CSSPlugin (end value)
+			rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b));          // (beginning value)
+		}
+	},
+	_addAliasesToVars = (targets, vars) => {
+		let harness = targets[0] ? _getCache(targets[0]).harness : 0,
+			propertyAliases = (harness && harness.aliases),
+			copy, p, i, aliases;
+		if (!propertyAliases) {
+			return vars;
+		}
+		copy = _merge({}, vars);
+		for (p in propertyAliases) {
+			if (p in copy) {
+				aliases = propertyAliases[p].split(",");
+				i = aliases.length;
+				while(i--) {
+					copy[aliases[i]] = copy[p];
+				}
+			}
+
+		}
+		return copy;
+	},
+	// parses multiple formats, like {"0%": {x: 100}, {"50%": {x: -20}} and { x: {"0%": 100, "50%": -20} }, and an "ease" can be set on any object. We populate an "allProps" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a "t" (time), "v", (value), and "e" (ease) property. This allows us to piece together a timeline later.
+	_parseKeyframe = (prop, obj, allProps, easeEach) => {
+		let ease = obj.ease || easeEach || "power1.inOut",
+			p, a;
+		if (_isArray(obj)) {
+			a = allProps[prop] || (allProps[prop] = []);
+			// t = time (out of 100), v = value, e = ease
+			obj.forEach((value, i) => a.push({t: i / (obj.length - 1) * 100, v: value, e: ease}));
+		} else {
+			for (p in obj) {
+				a = allProps[p] || (allProps[p] = []);
+				p === "ease" || a.push({t: parseFloat(prop), v: obj[p], e: ease});
+			}
+		}
+	},
+	_parseFuncOrString = (value, tween, i, target, targets) => (_isFunction(value) ? value.call(tween, i, target, targets) : (_isString(value) && ~value.indexOf("random(")) ? _replaceRandom(value) : value),
+	_staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",
+	_staggerPropsToSkip = {};
+_forEachName(_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger", name => _staggerPropsToSkip[name] = 1);
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * TWEEN
+ * --------------------------------------------------------------------------------------
+ */
+
+class Tween extends Animation {
+
+	constructor(targets, vars, position, skipInherit) {
+		if (typeof(vars) === "number") {
+			position.duration = vars;
+			vars = position;
+			position = null;
+		}
+		super(skipInherit ? vars : _inheritDefaults(vars));
+		let { duration, delay, immediateRender, stagger, overwrite, keyframes, defaults, scrollTrigger, yoyoEase } = this.vars,
+			parent = vars.parent || _globalTimeline,
+			parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : ("length" in vars)) ? [targets] : toArray(targets), // edge case: someone might try animating the "length" of an object with a "length" property that's initially set to 0 so don't interpret that as an empty Array-like object.
+			tl, i, copy, l, p, curTarget, staggerFunc, staggerVarsToMerge;
+		this._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://gsap.com", !_config.nullTargetWarn) || [];
+		this._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property
+		this._overwrite = overwrite;
+		if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
+			vars = this.vars;
+			tl = this.timeline = new Timeline({data: "nested", defaults: defaults || {}, targets: parent && parent.data === "nested" ? parent.vars.targets : parsedTargets}); // we need to store the targets because for staggers and keyframes, we end up creating an individual tween for each but function-based values need to know the index and the whole Array of targets.
+			tl.kill();
+			tl.parent = tl._dp = this;
+			tl._start = 0;
+			if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
+				l = parsedTargets.length;
+				staggerFunc = stagger && distribute(stagger);
+				if (_isObject(stagger)) { //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.
+					for (p in stagger) {
+						if (~_staggerTweenProps.indexOf(p)) {
+							staggerVarsToMerge || (staggerVarsToMerge = {});
+							staggerVarsToMerge[p] = stagger[p];
+						}
+					}
+				}
+				for (i = 0; i < l; i++) {
+					copy = _copyExcluding(vars, _staggerPropsToSkip);
+					copy.stagger = 0;
+					yoyoEase && (copy.yoyoEase = yoyoEase);
+					staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
+					curTarget = parsedTargets[i];
+					//don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.
+					copy.duration = +_parseFuncOrString(duration, this, i, curTarget, parsedTargets);
+					copy.delay = (+_parseFuncOrString(delay, this, i, curTarget, parsedTargets) || 0) - this._delay;
+					if (!stagger && l === 1 && copy.delay) { // if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.
+						this._delay = delay = copy.delay;
+						this._start += delay;
+						copy.delay = 0;
+					}
+					tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);
+					tl._ease = _easeMap.none;
+				}
+				tl.duration() ? (duration = delay = 0) : (this.timeline = 0); // if the timeline's duration is 0, we don't need a timeline internally!
+			} else if (keyframes) {
+				_inheritDefaults(_setDefaults(tl.vars.defaults, {ease:"none"}));
+				tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
+				let time = 0,
+					a, kf, v;
+				if (_isArray(keyframes)) {
+					keyframes.forEach(frame => tl.to(parsedTargets, frame, ">"));
+					tl.duration(); // to ensure tl._dur is cached because we tap into it for performance purposes in the render() method.
+				} else {
+					copy = {};
+					for (p in keyframes) {
+						p === "ease" || p === "easeEach" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
+					}
+					for (p in copy) {
+						a = copy[p].sort((a, b) => a.t - b.t);
+						time = 0;
+						for (i = 0; i < a.length; i++) {
+							kf = a[i];
+							v = {ease: kf.e, duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration};
+							v[p] = kf.v;
+							tl.to(parsedTargets, v, time);
+							time += v.duration;
+						}
+					}
+					tl.duration() < duration && tl.to({}, {duration: duration - tl.duration()}); // in case keyframes didn't go to 100%
+				}
+			}
+			duration || this.duration((duration = tl.duration()));
+
+		} else {
+			this.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)
+		}
+
+		if (overwrite === true && !_suppressOverwrites) {
+			_overwritingTween = this;
+			_globalTimeline.killTweensOf(parsedTargets);
+			_overwritingTween = 0;
+		}
+		_addToTimeline(parent, this, position);
+		vars.reversed && this.reverse();
+		vars.paused && this.paused(true);
+		if (immediateRender || (!duration && !keyframes && this._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(this) && parent.data !== "nested")) {
+			this._tTime = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
+			this.render(Math.max(0, -delay) || 0); //in case delay is negative
+		}
+		scrollTrigger && _scrollTrigger(this, scrollTrigger);
+	}
+
+	render(totalTime, suppressEvents, force) {
+		let prevTime = this._time,
+			tDur = this._tDur,
+			dur = this._dur,
+			isNegative = totalTime < 0,
+			tTime = (totalTime > tDur - _tinyNum && !isNegative) ? tDur : (totalTime < _tinyNum) ? 0 : totalTime,
+			time, pt, iteration, cycleDuration, prevIteration, isYoyo, ratio, timeline, yoyoEase;
+		if (!dur) {
+			_renderZeroDurationTween(this, totalTime, suppressEvents, force);
+		} else if (tTime !== this._tTime || !totalTime || force || (!this._initted && this._tTime) || (this._startAt && (this._zTime < 0) !== isNegative)) { //this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)
+			time = tTime;
+			timeline = this.timeline;
+			if (this._repeat) { //adjust the time for repeats and yoyos
+				cycleDuration = dur + this._rDelay;
+				if (this._repeat < -1 && isNegative) {
+					return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
+				}
+				time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)
+				if (tTime === tDur) { // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
+					iteration = this._repeat;
+					time = dur;
+				} else {
+					iteration = ~~(tTime / cycleDuration);
+					if (iteration && iteration === _roundPrecise(tTime / cycleDuration)) {
+						time = dur;
+						iteration--;
+					}
+					time > dur && (time = dur);
+				}
+				isYoyo = this._yoyo && (iteration & 1);
+				if (isYoyo) {
+					yoyoEase = this._yEase;
+					time = dur - time;
+				}
+				prevIteration = _animationCycle(this._tTime, cycleDuration);
+				if (time === prevTime && !force && this._initted && iteration === prevIteration) {
+					//could be during the repeatDelay part. No need to render and fire callbacks.
+					this._tTime = tTime;
+					return this;
+				}
+				if (iteration !== prevIteration) {
+					timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo);
+					//repeatRefresh functionality
+					if (this.vars.repeatRefresh && !isYoyo && !this._lock && this._time !== cycleDuration && this._initted) { // this._time will === cycleDuration when we render at EXACTLY the end of an iteration. Without this condition, it'd often do the repeatRefresh render TWICE (again on the very next tick).
+						this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.
+						this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;
+					}
+				}
+			}
+
+			if (!this._initted) {
+				if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {
+					this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.
+					return this;
+				}
+				if (prevTime !== this._time && !(force && this.vars.repeatRefresh && iteration !== prevIteration)) { // rare edge case - during initialization, an onUpdate in the _startAt (.fromTo()) might force this tween to render at a different spot in which case we should ditch this render() call so that it doesn't revert the values. But we also don't want to dump if we're doing a repeatRefresh render!
+					return this;
+				}
+				if (dur !== this._dur) { // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.
+					return this.render(totalTime, suppressEvents, force);
+				}
+			}
+
+			this._tTime = tTime;
+			this._time = time;
+
+			if (!this._act && this._ts) {
+				this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.
+				this._lazy = 0;
+			}
+
+			this.ratio = ratio = (yoyoEase || this._ease)(time / dur);
+			if (this._from) {
+				this.ratio = ratio = 1 - ratio;
+			}
+
+			if (time && !prevTime && !suppressEvents && !iteration) {
+				_callback(this, "onStart");
+				if (this._tTime !== tTime) { // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
+					return this;
+				}
+			}
+			pt = this._pt;
+			while (pt) {
+				pt.r(ratio, pt.d);
+				pt = pt._next;
+			}
+			(timeline && timeline.render(totalTime < 0 ? totalTime : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force)) || (this._startAt && (this._zTime = totalTime));
+
+			if (this._onUpdate && !suppressEvents) {
+				isNegative && _rewindStartAt(this, totalTime, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
+				_callback(this, "onUpdate");
+			}
+
+			this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");
+
+			if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
+				isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);
+				(totalTime || !dur) && ((tTime === this._tDur && this._ts > 0) || (!tTime && this._ts < 0)) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.
+			    if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) { // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();
+					_callback(this, (tTime === tDur ? "onComplete" : "onReverseComplete"), true);
+					this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
+				}
+			}
+
+		}
+		return this;
+	}
+
+	targets() {
+		return this._targets;
+	}
+
+	invalidate(soft) { // "soft" gives us a way to clear out everything EXCEPT the recorded pre-"from" portion of from() tweens. Otherwise, for example, if you tween.progress(1).render(0, true true).invalidate(), the "from" values would persist and then on the next render, the from() tweens would initialize and the current value would match the "from" values, thus animate from the same value to the same value (no animation). We tap into this in ScrollTrigger's refresh() where we must push a tween to completion and then back again but honor its init state in case the tween is dependent on another tween further up on the page.
+		(!soft || !this.vars.runBackwards) && (this._startAt = 0);
+		this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;
+		this._ptLookup = [];
+		this.timeline && this.timeline.invalidate(soft);
+		return super.invalidate(soft);
+	}
+
+	resetTo(property, value, start, startIsRelative, skipRecursion) {
+		_tickerActive || _ticker.wake();
+		this._ts || this.play();
+		let time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),
+			ratio;
+		this._initted || _initTween(this, time);
+		ratio = this._ease(time / this._dur); // don't just get tween.ratio because it may not have rendered yet.
+		// possible future addition to allow an object with multiple values to update, like tween.resetTo({x: 100, y: 200}); At this point, it doesn't seem worth the added kb given the fact that most users will likely opt for the convenient gsap.quickTo() way of interacting with this method.
+		// if (_isObject(property)) { // performance optimization
+		// 	for (p in property) {
+		// 		if (_updatePropTweens(this, p, property[p], value ? value[p] : null, start, ratio, time)) {
+		// 			return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
+		// 		}
+		// 	}
+		// } else {
+			if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time, skipRecursion)) {
+				return this.resetTo(property, value, start, startIsRelative, 1); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
+			}
+		//}
+		_alignPlayhead(this, 0);
+		this.parent || _addLinkedListItem(this._dp, this, "_first", "_last", this._dp._sort ? "_start" : 0);
+		return this.render(0);
+	}
+
+	kill(targets, vars = "all") {
+		if (!targets && (!vars || vars === "all")) {
+			this._lazy = this._pt = 0;
+			return this.parent ? _interrupt(this) : this;
+		}
+		if (this.timeline) {
+			let tDur = this.timeline.totalDuration();
+			this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweening, interrupt.
+			this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.
+			return this;
+		}
+		let parsedTargets = this._targets,
+			killingTargets = targets ? toArray(targets) : parsedTargets,
+			propTweenLookup = this._ptLookup,
+			firstPT = this._pt,
+			overwrittenProps, curLookup, curOverwriteProps, props, p, pt, i;
+		if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
+			vars === "all" && (this._pt = 0);
+			return _interrupt(this);
+		}
+		overwrittenProps = this._op = this._op || [];
+		if (vars !== "all") { //so people can pass in a comma-delimited list of property names
+			if (_isString(vars)) {
+				p = {};
+				_forEachName(vars, name => p[name] = 1);
+				vars = p;
+			}
+			vars = _addAliasesToVars(parsedTargets, vars);
+		}
+		i = parsedTargets.length;
+		while (i--) {
+			if (~killingTargets.indexOf(parsedTargets[i])) {
+				curLookup = propTweenLookup[i];
+				if (vars === "all") {
+					overwrittenProps[i] = vars;
+					props = curLookup;
+					curOverwriteProps = {};
+				} else {
+					curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
+					props = vars;
+				}
+				for (p in props) {
+					pt = curLookup && curLookup[p];
+					if (pt) {
+						if (!("kill" in pt.d) || pt.d.kill(p) === true) {
+							_removeLinkedListItem(this, pt, "_pt");
+						}
+						delete curLookup[p];
+					}
+					if (curOverwriteProps !== "all") {
+						curOverwriteProps[p] = 1;
+					}
+				}
+			}
+		}
+		this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.
+		return this;
+	}
+
+
+	static to(targets, vars) {
+		return new Tween(targets, vars, arguments[2]);
+	}
+
+	static from(targets, vars) {
+		return _createTweenType(1, arguments);
+	}
+
+	static delayedCall(delay, callback, params, scope) {
+		return new Tween(callback, 0, {immediateRender:false, lazy:false, overwrite:false, delay:delay, onComplete:callback, onReverseComplete:callback, onCompleteParams:params, onReverseCompleteParams:params, callbackScope:scope}); // we must use onReverseComplete too for things like timeline.add(() => {...}) which should be triggered in BOTH directions (forward and reverse)
+	}
+
+	static fromTo(targets, fromVars, toVars) {
+		return _createTweenType(2, arguments);
+	}
+
+	static set(targets, vars) {
+		vars.duration = 0;
+		vars.repeatDelay || (vars.repeat = 0);
+		return new Tween(targets, vars);
+	}
+
+	static killTweensOf(targets, props, onlyActive) {
+		return _globalTimeline.killTweensOf(targets, props, onlyActive);
+	}
+}
+
+_setDefaults(Tween.prototype, {_targets:[], _lazy:0, _startAt:0, _op:0, _onInit:0});
+
+//add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)
+// _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {
+// 	Tween.prototype[name] = function() {
+// 		let tl = new Timeline();
+// 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));
+// 	}
+// });
+
+//for backward compatibility. Leverage the timeline calls.
+_forEachName("staggerTo,staggerFrom,staggerFromTo", name => {
+	Tween[name] = function() {
+		let tl = new Timeline(),
+			params = _slice.call(arguments, 0);
+		params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
+		return tl[name].apply(tl, params);
+	};
+});
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * PROPTWEEN
+ * --------------------------------------------------------------------------------------
+ */
+let _setterPlain = (target, property, value) => target[property] = value,
+	_setterFunc = (target, property, value) => target[property](value),
+	_setterFuncWithParam = (target, property, value, data) => target[property](data.fp, value),
+	_setterAttribute = (target, property, value) => target.setAttribute(property, value),
+	_getSetter = (target, property) => _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain,
+	_renderPlain = (ratio, data) => data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data),
+	_renderBoolean = (ratio, data) => data.set(data.t, data.p, !!(data.s + data.c * ratio), data),
+	_renderComplexString = function(ratio, data) {
+		let pt = data._pt,
+			s = "";
+		if (!ratio && data.b) { //b = beginning string
+			s = data.b;
+		} else if (ratio === 1 && data.e) { //e = ending string
+			s = data.e;
+		} else {
+			while (pt) {
+				s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : (Math.round((pt.s + pt.c * ratio) * 10000) / 10000)) + s; //we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.
+				pt = pt._next;
+			}
+			s += data.c; //we use the "c" of the PropTween to store the final chunk of non-numeric text.
+		}
+		data.set(data.t, data.p, s, data);
+	},
+	_renderPropTweens = function(ratio, data) {
+		let pt = data._pt;
+		while (pt) {
+			pt.r(ratio, pt.d);
+			pt = pt._next;
+		}
+	},
+	_addPluginModifier = function(modifier, tween, target, property) {
+		let pt = this._pt,
+			next;
+		while (pt) {
+			next = pt._next;
+			pt.p === property && pt.modifier(modifier, tween, target);
+			pt = next;
+		}
+	},
+	_killPropTweensOf = function(property) {
+		let pt = this._pt,
+			hasNonDependentRemaining, next;
+		while (pt) {
+			next = pt._next;
+			if ((pt.p === property && !pt.op) || pt.op === property) {
+				_removeLinkedListItem(this, pt, "_pt");
+			} else if (!pt.dep) {
+				hasNonDependentRemaining = 1;
+			}
+			pt = next;
+		}
+		return !hasNonDependentRemaining;
+	},
+	_setterWithModifier = (target, property, value, data) => {
+		data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
+	},
+	_sortPropTweensByPriority = parent => {
+		let pt = parent._pt,
+			next, pt2, first, last;
+		//sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)
+		while (pt) {
+			next = pt._next;
+			pt2 = first;
+			while (pt2 && pt2.pr > pt.pr) {
+				pt2 = pt2._next;
+			}
+			if ((pt._prev = pt2 ? pt2._prev : last)) {
+				pt._prev._next = pt;
+			} else {
+				first = pt;
+			}
+			if ((pt._next = pt2)) {
+				pt2._prev = pt;
+			} else {
+				last = pt;
+			}
+			pt = next;
+		}
+		parent._pt = first;
+	};
+
+//PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)
+class PropTween {
+
+	constructor(next, target, prop, start, change, renderer, data, setter, priority) {
+		this.t = target;
+		this.s = start;
+		this.c = change;
+		this.p = prop;
+		this.r = renderer || _renderPlain;
+		this.d = data || this;
+		this.set = setter || _setterPlain;
+		this.pr = priority || 0;
+		this._next = next;
+		if (next) {
+			next._prev = this;
+		}
+	}
+
+	modifier(func, tween, target) {
+		this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)
+		this.set = _setterWithModifier;
+		this.m = func;
+		this.mt = target; //modifier target
+		this.tween = tween;
+	}
+}
+
+
+
+//Initialization tasks
+_forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", name => _reservedProps[name] = 1);
+_globals.TweenMax = _globals.TweenLite = Tween;
+_globals.TimelineLite = _globals.TimelineMax = Timeline;
+_globalTimeline = new Timeline({sortChildren: false, defaults: _defaults, autoRemoveChildren: true, id:"root", smoothChildTiming: true});
+_config.stringFilter = _colorStringFilter;
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+let _media = [],
+	_listeners = {},
+	_emptyArray = [],
+	_lastMediaTime = 0,
+	_contextID = 0,
+	_dispatch = type => (_listeners[type] || _emptyArray).map(f => f()),
+	_onMediaChange = () => {
+		let time = Date.now(),
+			matches = [];
+		if (time - _lastMediaTime > 2) {
+			_dispatch("matchMediaInit");
+			_media.forEach(c => {
+				let queries = c.queries,
+					conditions = c.conditions,
+					match, p, anyMatch, toggled;
+				for (p in queries) {
+					match = _win.matchMedia(queries[p]).matches; // Firefox doesn't update the "matches" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.
+					match && (anyMatch = 1);
+					if (match !== conditions[p]) {
+						conditions[p] = match;
+						toggled = 1;
+					}
+				}
+				if (toggled) {
+					c.revert();
+					anyMatch && matches.push(c);
+				}
+			});
+			_dispatch("matchMediaRevert");
+			matches.forEach(c => c.onMatch(c, func => c.add(null, func)));
+			_lastMediaTime = time;
+			_dispatch("matchMedia");
+		}
+	};
+
+class Context {
+	constructor(func, scope) {
+		this.selector = scope && selector(scope);
+		this.data = [];
+		this._r = []; // returned/cleanup functions
+		this.isReverted = false;
+		this.id = _contextID++; // to work around issues that frameworks like Vue cause by making things into Proxies which make it impossible to do something like _media.indexOf(this) because "this" would no longer refer to the Context instance itself - it'd refer to a Proxy! We needed a way to identify the context uniquely
+		func && this.add(func);
+	}
+	add(name, func, scope) {
+		// possible future addition if we need the ability to add() an animation to a context and for whatever reason cannot create that animation inside of a context.add(() => {...}) function.
+		// if (name && _isFunction(name.revert)) {
+		// 	this.data.push(name);
+		// 	return (name._ctx = this);
+		// }
+		if (_isFunction(name)) {
+			scope = func;
+			func = name;
+			name = _isFunction;
+		}
+		let self = this,
+			f = function() {
+				let prev = _context,
+					prevSelector = self.selector,
+					result;
+				prev && prev !== self && prev.data.push(self);
+				scope && (self.selector = selector(scope));
+				_context = self;
+				result = func.apply(self, arguments);
+				_isFunction(result) && self._r.push(result);
+				_context = prev;
+				self.selector = prevSelector;
+				self.isReverted = false;
+				return result;
+			};
+		self.last = f;
+		return name === _isFunction ? f(self, func => self.add(null, func)) : name ? (self[name] = f) : f;
+	}
+	ignore(func) {
+		let prev = _context;
+		_context = null;
+		func(this);
+		_context = prev;
+	}
+	getTweens() {
+		let a = [];
+		this.data.forEach(e => (e instanceof Context) ? a.push(...e.getTweens()) : (e instanceof Tween) && !(e.parent && e.parent.data === "nested") && a.push(e));
+		return a;
+	}
+	clear() {
+		this._r.length = this.data.length = 0;
+	}
+	kill(revert, matchMedia) {
+		if (revert) {
+			let tweens = this.getTweens(),
+				i = this.data.length,
+				t;
+			while (i--) { // Flip plugin tweens are very different in that they should actually be pushed to their end. The plugin replaces the timeline's .revert() method to do exactly that. But we also need to remove any of those nested tweens inside the flip timeline so that they don't get individually reverted.
+				t = this.data[i];
+				if (t.data === "isFlip") {
+					t.revert();
+					t.getChildren(true, true, false).forEach(tween => tweens.splice(tweens.indexOf(tween), 1));
+				}
+			}
+			// save as an object so that we can cache the globalTime for each tween to optimize performance during the sort
+			tweens.map(t => { return {g: t._dur || t._delay || (t._sat && !t._sat.vars.immediateRender) ? t.globalTime(0) : -Infinity, t}}).sort((a, b) => b.g - a.g || -Infinity).forEach(o => o.t.revert(revert)); // note: all of the _startAt tweens should be reverted in reverse order that they were created, and they'll all have the same globalTime (-1) so the " || -1" in the sort keeps the order properly.
+			i = this.data.length;
+			while (i--) { // make sure we loop backwards so that, for example, SplitTexts that were created later on the same element get reverted first
+				t = this.data[i];
+				if (t instanceof Timeline) {
+					if (t.data !== "nested") {
+						t.scrollTrigger && t.scrollTrigger.revert();
+						t.kill(); // don't revert() the timeline because that's duplicating efforts since we already reverted all the tweens
+					}
+				} else {
+					!(t instanceof Tween) && t.revert && t.revert(revert);
+				}
+			}
+			this._r.forEach(f => f(revert, this));
+			this.isReverted = true;
+		} else {
+			this.data.forEach(e => e.kill && e.kill());
+		}
+		this.clear();
+		if (matchMedia) {
+			let i = _media.length;
+			while (i--) { // previously, we checked _media.indexOf(this), but some frameworks like Vue enforce Proxy objects that make it impossible to get the proper result that way, so we must use a unique ID number instead.
+				_media[i].id === this.id && _media.splice(i, 1);
+			}
+		}
+	}
+	revert(config) {
+		this.kill(config || {});
+	}
+}
+
+
+
+
+class MatchMedia {
+	constructor(scope) {
+		this.contexts = [];
+		this.scope = scope;
+		_context && _context.data.push(this);
+	}
+	add(conditions, func, scope) {
+		_isObject(conditions) || (conditions = {matches: conditions});
+		let context = new Context(0, scope || this.scope),
+			cond = context.conditions = {},
+			mq, p, active;
+		_context && !context.selector && (context.selector = _context.selector); // in case a context is created inside a context. Like a gsap.matchMedia() that's inside a scoped gsap.context()
+		this.contexts.push(context);
+		func = context.add("onMatch", func);
+		context.queries = conditions;
+		for (p in conditions) {
+			if (p === "all") {
+				active = 1;
+			} else {
+				mq = _win.matchMedia(conditions[p]);
+				if (mq) {
+					_media.indexOf(context) < 0 && _media.push(context);
+					(cond[p] = mq.matches) && (active = 1);
+					mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener("change", _onMediaChange);
+				}
+			}
+		}
+		active && func(context, f => context.add(null, f));
+		return this;
+	}
+	// refresh() {
+	// 	let time = _lastMediaTime,
+	// 		media = _media;
+	// 	_lastMediaTime = -1;
+	// 	_media = this.contexts;
+	// 	_onMediaChange();
+	// 	_lastMediaTime = time;
+	// 	_media = media;
+	// }
+	revert(config) {
+		this.kill(config || {});
+	}
+	kill(revert) {
+		this.contexts.forEach(c => c.kill(revert, true));
+	}
+}
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * GSAP
+ * --------------------------------------------------------------------------------------
+ */
+const _gsap = {
+	registerPlugin(...args) {
+		args.forEach(config => _createPlugin(config));
+	},
+	timeline(vars) {
+		return new Timeline(vars);
+	},
+	getTweensOf(targets, onlyActive) {
+		return _globalTimeline.getTweensOf(targets, onlyActive);
+	},
+	getProperty(target, property, unit, uncache) {
+		_isString(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in
+		let getter = _getCache(target || {}).get,
+			format = unit ? _passThrough : _numericIfPossible;
+		unit === "native" && (unit = "");
+		return !target ? target : !property ? (property, unit, uncache) => format(((_plugins[property] && _plugins[property].get) || getter)(target, property, unit, uncache)) : format(((_plugins[property] && _plugins[property].get) || getter)(target, property, unit, uncache));
+	},
+	quickSetter(target, property, unit) {
+		target = toArray(target);
+		if (target.length > 1) {
+			let setters = target.map(t => gsap.quickSetter(t, property, unit)),
+				l = setters.length;
+			return value => {
+				let i = l;
+				while(i--) {
+					setters[i](value);
+				}
+			}
+		}
+		target = target[0] || {};
+		let Plugin = _plugins[property],
+			cache = _getCache(target),
+			p = (cache.harness && (cache.harness.aliases || {})[property]) || property, // in case it's an alias, like "rotate" for "rotation".
+			setter = Plugin ? value => {
+				let p = new Plugin();
+				_quickTween._pt = 0;
+				p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
+				p.render(1, p);
+				_quickTween._pt && _renderPropTweens(1, _quickTween);
+			} : cache.set(target, p);
+		return Plugin ? setter : value => setter(target, p, unit ? value + unit : value, cache, 1);
+	},
+	quickTo(target, property, vars) {
+		let tween = gsap.to(target, _merge({[property]: "+=0.1", paused: true}, vars || {})),
+			func = (value, start, startIsRelative) => tween.resetTo(property, value, start, startIsRelative);
+		func.tween = tween;
+		return func;
+	},
+	isTweening(targets) {
+		return _globalTimeline.getTweensOf(targets, true).length > 0;
+	},
+	defaults(value) {
+		value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));
+		return _mergeDeep(_defaults, value || {});
+	},
+	config(value) {
+		return _mergeDeep(_config, value || {});
+	},
+	registerEffect({name, effect, plugins, defaults, extendTimeline}) {
+		(plugins || "").split(",").forEach(pluginName => pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin."));
+		_effects[name] = (targets, vars, tl) => effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);
+		if (extendTimeline) {
+			Timeline.prototype[name] = function(targets, vars, position) {
+				return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
+			};
+		}
+	},
+	registerEase(name, ease) {
+		_easeMap[name] = _parseEase(ease);
+	},
+	parseEase(ease, defaultEase) {
+		return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
+	},
+	getById(id) {
+		return _globalTimeline.getById(id);
+	},
+	exportRoot(vars = {}, includeDelayedCalls) {
+		let tl = new Timeline(vars),
+			child, next;
+		tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);
+		_globalTimeline.remove(tl);
+		tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).
+		tl._time = tl._tTime = _globalTimeline._time;
+		child = _globalTimeline._first;
+		while (child) {
+			next = child._next;
+			if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
+				_addToTimeline(tl, child, child._start - child._delay);
+			}
+			child = next;
+		}
+		_addToTimeline(_globalTimeline, tl, 0);
+		return tl;
+	},
+	context: (func, scope) => func ? new Context(func, scope) : _context,
+	matchMedia: scope => new MatchMedia(scope),
+	matchMediaRefresh: () => _media.forEach(c => {
+		let cond = c.conditions,
+			found, p;
+		for (p in cond) {
+			if (cond[p]) {
+				cond[p] = false;
+				found = 1;
+			}
+		}
+		found && c.revert();
+	}) || _onMediaChange(),
+	addEventListener(type, callback) {
+		let a = _listeners[type] || (_listeners[type] = []);
+		~a.indexOf(callback) || a.push(callback);
+	},
+	removeEventListener(type, callback) {
+		let a = _listeners[type],
+			i = a && a.indexOf(callback);
+		i >= 0 && a.splice(i, 1);
+	},
+	utils: { wrap, wrapYoyo, distribute, random, snap, normalize, getUnit, clamp, splitColor, toArray, selector, mapRange, pipe, unitize, interpolate, shuffle },
+	install: _install,
+	effects: _effects,
+	ticker: _ticker,
+	updateRoot: Timeline.updateRoot,
+	plugins: _plugins,
+	globalTimeline: _globalTimeline,
+	core: {PropTween, globals: _addGlobal, Tween, Timeline, Animation, getCache: _getCache, _removeLinkedListItem, reverting: () => _reverting, context: toAdd => {if (toAdd && _context) { _context.data.push(toAdd); toAdd._ctx = _context;} return _context; }, suppressOverwrites: value => _suppressOverwrites = value}
+};
+
+_forEachName("to,from,fromTo,delayedCall,set,killTweensOf", name => _gsap[name] = Tween[name]);
+_ticker.add(Timeline.updateRoot);
+_quickTween = _gsap.to({}, {duration:0});
+
+
+
+
+// ---- EXTRA PLUGINS --------------------------------------------------------
+
+
+let _getPluginPropTween = (plugin, prop) => {
+		let pt = plugin._pt;
+		while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
+			pt = pt._next;
+		}
+		return pt;
+	},
+	_addModifiers = (tween, modifiers) => {
+			let	targets = tween._targets,
+				p, i, pt;
+			for (p in modifiers) {
+				i = targets.length;
+				while (i--) {
+					pt = tween._ptLookup[i][p];
+					if (pt && (pt = pt.d)) {
+						if (pt._pt) { // is a plugin
+							pt = _getPluginPropTween(pt, p);
+						}
+						pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
+					}
+				}
+			}
+	},
+	_buildModifierPlugin = (name, modifier) => {
+		return {
+			name: name,
+			rawVars: 1, //don't pre-process function-based values or "random()" strings.
+			init(target, vars, tween) {
+				tween._onInit = tween => {
+					let temp, p;
+					if (_isString(vars)) {
+						temp = {};
+						_forEachName(vars, name => temp[name] = 1); //if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.
+						vars = temp;
+					}
+					if (modifier) {
+						temp = {};
+						for (p in vars) {
+							temp[p] = modifier(vars[p]);
+						}
+						vars = temp;
+					}
+					_addModifiers(tween, vars);
+				};
+			}
+		};
+	};
+
+//register core plugins
+const gsap = _gsap.registerPlugin({
+		name:"attr",
+		init(target, vars, tween, index, targets) {
+			let p, pt, v;
+			this.tween = tween;
+			for (p in vars) {
+				v = target.getAttribute(p) || "";
+				pt = this.add(target, "setAttribute", (v || 0) + "", vars[p], index, targets, 0, 0, p);
+				pt.op = p;
+				pt.b = v; // record the beginning value so we can revert()
+				this._props.push(p);
+			}
+		},
+		render(ratio, data) {
+			let pt = data._pt;
+			while (pt) {
+				_reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d); // if reverting, go back to the original (pt.b)
+				pt = pt._next;
+			}
+		}
+	}, {
+		name:"endArray",
+		init(target, value) {
+			let i = value.length;
+			while (i--) {
+				this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);
+			}
+		}
+	},
+	_buildModifierPlugin("roundProps", _roundModifier),
+	_buildModifierPlugin("modifiers"),
+	_buildModifierPlugin("snap", snap)
+) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.
+
+Tween.version = Timeline.version = gsap.version = "3.12.5";
+_coreReady = 1;
+_windowExists() && _wake();
+
+const { Power0, Power1, Power2, Power3, Power4, Linear, Quad, Cubic, Quart, Quint, Strong, Elastic, Back, SteppedEase, Bounce, Sine, Expo, Circ } = _easeMap;
+
+export { Animation, Back, Bounce, Circ, Cubic, Elastic, Expo, GSCache, Linear, Power0, Power1, Power2, Power3, Power4, PropTween, Quad, Quart, Quint, Sine, SteppedEase, Strong, Timeline, Timeline as TimelineLite, Timeline as TimelineMax, Tween, Tween as TweenLite, Tween as TweenMax, _checkPlugin, _colorExp, _colorStringFilter, _config, _forEachName, _getCache, _getProperty, _getSetter, _isString, _isUndefined, _missingPlugin, _numExp, _numWithUnitExp, _parseRelative, _plugins, _relExp, _removeLinkedListItem, _renderComplexString, _replaceRandom, _round, _roundModifier, _setDefaults, _sortPropTweensByPriority, _ticker, clamp, gsap as default, distribute, getUnit, gsap, interpolate, mapRange, normalize, pipe, random, selector, shuffle, snap, splitColor, toArray, unitize, wrap, wrapYoyo };
diff --git a/dist/gsap-core.d.ts b/dist/gsap-core.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..91311e0edcffab9234144c9877a8d8f7f500436c
--- /dev/null
+++ b/dist/gsap-core.d.ts
@@ -0,0 +1,3253 @@
+/*!
+ * GSAP 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let _config = {
+		autoSleep: 120,
+		force3D: "auto",
+		nullTargetWarn: 1,
+		units: {lineHeight:""}
+	},
+	_defaults = {
+		duration: .5,
+		overwrite: false,
+		delay: 0
+	},
+	_suppressOverwrites,
+	_reverting, _context,
+	_bigNum = 1e8,
+	_tinyNum = 1 / _bigNum,
+	_2PI = Math.PI * 2,
+	_HALF_PI = _2PI / 4,
+	_gsID = 0,
+	_sqrt = Math.sqrt,
+	_cos = Math.cos,
+	_sin = Math.sin,
+	_isString = value => typeof(value) === "string",
+	_isFunction = value => typeof(value) === "function",
+	_isNumber = value => typeof(value) === "number",
+	_isUndefined = value => typeof(value) === "undefined",
+	_isObject = value => typeof(value) === "object",
+	_isNotFalse = value => value !== false,
+	_windowExists = () => typeof(window) !== "undefined",
+	_isFuncOrString = value => _isFunction(value) || _isString(value),
+	_isTypedArray = (typeof ArrayBuffer === "function" && ArrayBuffer.isView) || function() {}, // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().
+	_isArray = Array.isArray,
+	_strictNumExp = /(?:-?\.?\d|\.)+/gi, //only numbers (including negatives and decimals) but NOT relative values.
+	_numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g, //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
+	_numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
+	_complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi, //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.
+	_relExp = /[+-]=-?[.\d]+/,
+	_delimitedValueExp = /[^,'"\[\]\s]+/gi, // previously /[#\-+.]*\b[a-z\d\-=+%.]+/gi but didn't catch special characters.
+	_unitExp = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,
+	_globalTimeline, _win, _coreInitted, _doc,
+	_globals = {},
+	_installScope = {},
+	_coreReady,
+	_install = scope => (_installScope = _merge(scope, _globals)) && gsap,
+	_missingPlugin = (property, value) => console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()"),
+	_warn = (message, suppress) => !suppress && console.warn(message),
+	_addGlobal = (name, obj) => (name && (_globals[name] = obj) && (_installScope && (_installScope[name] = obj))) || _globals,
+	_emptyFunc = () => 0,
+	_startAtRevertConfig = {suppressEvents: true, isStart: true, kill: false},
+	_revertConfigNoKill = {suppressEvents: true, kill: false},
+	_revertConfig = {suppressEvents: true},
+	_reservedProps = {},
+	_lazyTweens = [],
+	_lazyLookup = {},
+	_lastRenderedFrame,
+	_plugins = {},
+	_effects = {},
+	_nextGCFrame = 30,
+	_harnessPlugins = [],
+	_callbackNames = "",
+	_harness = targets => {
+		let target = targets[0],
+			harnessPlugin, i;
+		_isObject(target) || _isFunction(target) || (targets = [targets]);
+		if (!(harnessPlugin = (target._gsap || {}).harness)) { // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)
+			i = _harnessPlugins.length;
+			while (i-- && !_harnessPlugins[i].targetTest(target)) {	}
+			harnessPlugin = _harnessPlugins[i];
+		}
+		i = targets.length;
+		while (i--) {
+			(targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin)))) || targets.splice(i, 1);
+		}
+		return targets;
+	},
+	_getCache = target => target._gsap || _harness(toArray(target))[0]._gsap,
+	_getProperty = (target, property, v) => (v = target[property]) && _isFunction(v) ? target[property]() : (_isUndefined(v) && target.getAttribute && target.getAttribute(property)) || v,
+	_forEachName = (names, func) => ((names = names.split(",")).forEach(func)) || names, //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).
+	_round = value => Math.round(value * 100000) / 100000 || 0,
+	_roundPrecise = value => Math.round(value * 10000000) / 10000000 || 0, // increased precision mostly for timing values.
+	_parseRelative = (start, value) => {
+		let operator = value.charAt(0),
+			end = parseFloat(value.substr(2));
+		start = parseFloat(start);
+		return operator === "+" ? start + end : operator === "-" ? start - end : operator === "*" ? start * end : start / end;
+	},
+	_arrayContainsAny = (toSearch, toFind) => { //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.
+		let l = toFind.length,
+			i = 0;
+		for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) { }
+		return (i < l);
+	},
+	_lazyRender = () => {
+		let l = _lazyTweens.length,
+			a = _lazyTweens.slice(0),
+			i, tween;
+		_lazyLookup = {};
+		_lazyTweens.length = 0;
+		for (i = 0; i < l; i++) {
+			tween = a[i];
+			tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
+		}
+	},
+	_lazySafeRender = (animation, time, suppressEvents, force) => {
+		_lazyTweens.length && !_reverting && _lazyRender();
+		animation.render(time, suppressEvents, force || (_reverting && time < 0 && (animation._initted || animation._startAt)));
+		_lazyTweens.length && !_reverting && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
+	},
+	_numericIfPossible = value => {
+		let n = parseFloat(value);
+		return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;
+	},
+	_passThrough = p => p,
+	_setDefaults = (obj, defaults) => {
+		for (let p in defaults) {
+			(p in obj) || (obj[p] = defaults[p]);
+		}
+		return obj;
+	},
+	_setKeyframeDefaults = excludeDuration => (obj, defaults) => {
+		for (let p in defaults) {
+			(p in obj) || (p === "duration" && excludeDuration) || p === "ease" || (obj[p] = defaults[p]);
+		}
+	},
+	_merge = (base, toMerge) => {
+		for (let p in toMerge) {
+			base[p] = toMerge[p];
+		}
+		return base;
+	},
+	_mergeDeep = (base, toMerge) => {
+		for (let p in toMerge) {
+			p !== "__proto__" && p !== "constructor" && p !== "prototype" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);
+		}
+		return base;
+	},
+	_copyExcluding = (obj, excluding) => {
+		let copy = {},
+			p;
+		for (p in obj) {
+			(p in excluding) || (copy[p] = obj[p]);
+		}
+		return copy;
+	},
+	_inheritDefaults = vars => {
+		let parent = vars.parent || _globalTimeline,
+			func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;
+		if (_isNotFalse(vars.inherit)) {
+			while (parent) {
+				func(vars, parent.vars.defaults);
+				parent = parent.parent || parent._dp;
+			}
+		}
+		return vars;
+	},
+	_arraysMatch = (a1, a2) => {
+		let i = a1.length,
+			match = i === a2.length;
+		while (match && i-- && a1[i] === a2[i]) { }
+		return i < 0;
+	},
+	_addLinkedListItem = (parent, child, firstProp = "_first", lastProp = "_last", sortBy) => {
+		let prev = parent[lastProp],
+			t;
+		if (sortBy) {
+			t = child[sortBy];
+			while (prev && prev[sortBy] > t) {
+				prev = prev._prev;
+			}
+		}
+		if (prev) {
+			child._next = prev._next;
+			prev._next = child;
+		} else {
+			child._next = parent[firstProp];
+			parent[firstProp] = child;
+		}
+		if (child._next) {
+			child._next._prev = child;
+		} else {
+			parent[lastProp] = child;
+		}
+		child._prev = prev;
+		child.parent = child._dp = parent;
+		return child;
+	},
+	_removeLinkedListItem = (parent, child, firstProp = "_first", lastProp = "_last") => {
+		let prev = child._prev,
+			next = child._next;
+		if (prev) {
+			prev._next = next;
+		} else if (parent[firstProp] === child) {
+			parent[firstProp] = next;
+		}
+		if (next) {
+			next._prev = prev;
+		} else if (parent[lastProp] === child) {
+			parent[lastProp] = prev;
+		}
+		child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.
+	},
+	_removeFromParent = (child, onlyIfParentHasAutoRemove) => {
+		child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove && child.parent.remove(child);
+		child._act = 0;
+	},
+	_uncache = (animation, child) => {
+		if (animation && (!child || child._end > animation._dur || child._start < 0)) { // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)
+			let a = animation;
+			while (a) {
+				a._dirty = 1;
+				a = a.parent;
+			}
+		}
+		return animation;
+	},
+	_recacheAncestors = animation => {
+		let parent = animation.parent;
+		while (parent && parent.parent) { //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
+			parent._dirty = 1;
+			parent.totalDuration();
+			parent = parent.parent;
+		}
+		return animation;
+	},
+	_rewindStartAt = (tween, totalTime, suppressEvents, force) => tween._startAt && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : (tween.vars.immediateRender && !tween.vars.autoRevert) || tween._startAt.render(totalTime, true, force)),
+	_hasNoPausedAncestors = animation => !animation || (animation._ts && _hasNoPausedAncestors(animation.parent)),
+	_elapsedCycleDuration = animation => animation._repeat ? _animationCycle(animation._tTime, (animation = animation.duration() + animation._rDelay)) * animation : 0,
+	// feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.
+	_animationCycle = (tTime, cycleDuration) => {
+		let whole = Math.floor(tTime /= cycleDuration);
+		return tTime && (whole === tTime) ? whole - 1 : whole;
+	},
+	_parentToChildTotalTime = (parentTime, child) => (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : (child._dirty ? child.totalDuration() : child._tDur)),
+	_setEnd = animation => (animation._end = _roundPrecise(animation._start + ((animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum)) || 0))),
+	_alignPlayhead = (animation, totalTime) => { // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.
+		let parent = animation._dp;
+		if (parent && parent.smoothChildTiming && animation._ts) {
+			animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));
+			_setEnd(animation);
+			parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
+		}
+		return animation;
+	},
+	/*
+	_totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
+		let cycleDuration = duration + repeatDelay,
+			time = _round(clampedTotalTime % cycleDuration);
+		if (time > duration) {
+			time = duration;
+		}
+		return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
+	},
+	*/
+	_postAddChecks = (timeline, child) => {
+		let t;
+		if (child._time || (!child._dur && child._initted) || (child._start < timeline._time && (child._dur || !child.add))) { // in case, for example, the _start is moved on a tween that has already rendered, or if it's being inserted into a timeline BEFORE where the playhead is currently. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning. Special case: if it's a timeline (has .add() method) and no duration, we can skip rendering because the user may be populating it AFTER adding it to a parent timeline (unconventional, but possible, and we wouldn't want it to get removed if the parent's autoRemoveChildren is true).
+			t = _parentToChildTotalTime(timeline.rawTime(), child);
+			if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
+				child.render(t, true);
+			}
+		}
+		//if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.
+		if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
+			//in case any of the ancestors had completed but should now be enabled...
+			if (timeline._dur < timeline.duration()) {
+				t = timeline;
+				while (t._dp) {
+					(t.rawTime() >= 0) && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.
+					t = t._dp;
+				}
+			}
+			timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.
+		}
+	},
+	_addToTimeline = (timeline, child, position, skipChecks) => {
+		child.parent && _removeFromParent(child);
+		child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);
+		child._end = _roundPrecise(child._start + ((child.totalDuration() / Math.abs(child.timeScale())) || 0));
+		_addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);
+		_isFromOrFromStart(child) || (timeline._recent = child);
+		skipChecks || _postAddChecks(timeline, child);
+		timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime); // if the timeline is reversed and the new child makes it longer, we may need to adjust the parent's _start (push it back)
+		return timeline;
+	},
+	_scrollTrigger = (animation, trigger) => (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation),
+	_attemptInitTween = (tween, time, force, suppressEvents, tTime) => {
+		_initTween(tween, time, tTime);
+		if (!tween._initted) {
+			return 1;
+		}
+		if (!force && tween._pt && !_reverting && ((tween._dur && tween.vars.lazy !== false) || (!tween._dur && tween.vars.lazy)) && _lastRenderedFrame !== _ticker.frame) {
+			_lazyTweens.push(tween);
+			tween._lazy = [tTime, suppressEvents];
+			return 1;
+		}
+	},
+	_parentPlayheadIsBeforeStart = ({parent}) => parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent)), // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0
+	_isFromOrFromStart = ({data}) => data === "isFromStart" || data === "isStart",
+	_renderZeroDurationTween = (tween, totalTime, suppressEvents, force) => {
+		let prevRatio = tween.ratio,
+			ratio = totalTime < 0 || (!totalTime && ((!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween))) || ((tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)))) ? 0 : 1, // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the "startAt" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any "from" and "fromTo" startAt tweens are rendered the first time at a ratio of 1.
+			repeatDelay = tween._rDelay,
+			tTime = 0,
+			pt, iteration, prevIteration;
+		if (repeatDelay && tween._repeat) { // in case there's a zero-duration tween that has a repeat with a repeatDelay
+			tTime = _clamp(0, tween._tDur, totalTime);
+			iteration = _animationCycle(tTime, repeatDelay);
+			tween._yoyo && (iteration & 1) && (ratio = 1 - ratio);
+			if (iteration !== _animationCycle(tween._tTime, repeatDelay)) { // if iteration changed
+				prevRatio = 1 - ratio;
+				tween.vars.repeatRefresh && tween._initted && tween.invalidate();
+			}
+		}
+		if (ratio !== prevRatio || _reverting || force || tween._zTime === _tinyNum || (!totalTime && tween._zTime)) {
+			if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) { // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
+				return;
+			}
+			prevIteration = tween._zTime;
+			tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.
+			suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.
+			tween.ratio = ratio;
+			tween._from && (ratio = 1 - ratio);
+			tween._time = 0;
+			tween._tTime = tTime;
+			pt = tween._pt;
+			while (pt) {
+				pt.r(ratio, pt.d);
+				pt = pt._next;
+			}
+			totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);
+			tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
+			tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");
+			if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
+				ratio && _removeFromParent(tween, 1);
+				if (!suppressEvents && !_reverting) {
+					_callback(tween, (ratio ? "onComplete" : "onReverseComplete"), true);
+					tween._prom && tween._prom();
+				}
+			}
+		} else if (!tween._zTime) {
+			tween._zTime = totalTime;
+		}
+	},
+	_findNextPauseTween = (animation, prevTime, time) => {
+		let child;
+		if (time > prevTime) {
+			child = animation._first;
+			while (child && child._start <= time) {
+				if (child.data === "isPause" && child._start > prevTime) {
+					return child;
+				}
+				child = child._next;
+			}
+		} else {
+			child = animation._last;
+			while (child && child._start >= time) {
+				if (child.data === "isPause" && child._start < prevTime) {
+					return child;
+				}
+				child = child._prev;
+			}
+		}
+	},
+	_setDuration = (animation, duration, skipUncache, leavePlayhead) => {
+		let repeat = animation._repeat,
+			dur = _roundPrecise(duration) || 0,
+			totalProgress = animation._tTime / animation._tDur;
+		totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
+		animation._dur = dur;
+		animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + (animation._rDelay * repeat));
+		totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, (animation._tTime = animation._tDur * totalProgress));
+		animation.parent && _setEnd(animation);
+		skipUncache || _uncache(animation.parent, animation);
+		return animation;
+	},
+	_onUpdateTotalDuration = animation => (animation instanceof Timeline) ? _uncache(animation) : _setDuration(animation, animation._dur),
+	_zeroPosition = {_start:0, endTime:_emptyFunc, totalDuration:_emptyFunc},
+	_parsePosition = (animation, position, percentAnimation) => {
+		let labels = animation.labels,
+			recent = animation._recent || _zeroPosition,
+			clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur, //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
+			i, offset, isPercent;
+		if (_isString(position) && (isNaN(position) || (position in labels))) { //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
+			offset = position.charAt(0);
+			isPercent = position.substr(-1) === "%";
+			i = position.indexOf("=");
+			if (offset === "<" || offset === ">") {
+				i >= 0 && (position = position.replace(/=/, ""));
+				return (offset === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);
+			}
+			if (i < 0) {
+				(position in labels) || (labels[position] = clippedDuration);
+				return labels[position];
+			}
+			offset = parseFloat(position.charAt(i-1) + position.substr(i+1));
+			if (isPercent && percentAnimation) {
+				offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();
+			}
+			return (i > 1) ? _parsePosition(animation, position.substr(0, i-1), percentAnimation) + offset : clippedDuration + offset;
+		}
+		return (position == null) ? clippedDuration : +position;
+	},
+	_createTweenType = (type, params, timeline) => {
+		let isLegacy = _isNumber(params[1]),
+			varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
+			vars = params[varsIndex],
+			irVars, parent;
+		isLegacy && (vars.duration = params[1]);
+		vars.parent = timeline;
+		if (type) {
+			irVars = vars;
+			parent = timeline;
+			while (parent && !("immediateRender" in irVars)) { // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.
+				irVars = parent.vars.defaults || {};
+				parent = _isNotFalse(parent.vars.inherit) && parent.parent;
+			}
+			vars.immediateRender = _isNotFalse(irVars.immediateRender);
+			type < 2 ? (vars.runBackwards = 1) : (vars.startAt = params[varsIndex - 1]); // "from" vars
+		}
+		return new Tween(params[0], vars, params[varsIndex + 1]);
+	},
+	_conditionalReturn = (value, func) => value || value === 0 ? func(value) : func,
+	_clamp = (min, max, value) => value < min ? min : value > max ? max : value,
+	getUnit = (value, v) => !_isString(value) || !(v = _unitExp.exec(value)) ? "" : v[1], // note: protect against padded numbers as strings, like "100.100". That shouldn't return "00" as the unit. If it's numeric, return no unit.
+	clamp = (min, max, value) => _conditionalReturn(value, v => _clamp(min, max, v)),
+	_slice = [].slice,
+	_isArrayLike = (value, nonEmpty) => value && (_isObject(value) && "length" in value && ((!nonEmpty && !value.length) || ((value.length - 1) in value && _isObject(value[0]))) && !value.nodeType && value !== _win),
+	_flatten = (ar, leaveStrings, accumulator = []) => ar.forEach(value => (_isString(value) && !leaveStrings) || _isArrayLike(value, 1) ? accumulator.push(...toArray(value)) : accumulator.push(value)) || accumulator,
+	//takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
+	toArray = (value, scope, leaveStrings) => _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [],
+	selector = value => {
+		value = toArray(value)[0] || _warn("Invalid scope") || {};
+		return v => {
+			let el = value.current || value.nativeElement || value;
+			return toArray(v, el.querySelectorAll ? el : el === value ? _warn("Invalid scope") || _doc.createElement("div") : value);
+		};
+	},
+	shuffle = a => a.sort(() => .5 - Math.random()), // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = Math.floor(Math.random() * i), v = a[--i], a[i] = a[j], a[j] = v); return a;
+	//for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following
+	distribute = v => {
+		if (_isFunction(v)) {
+			return v;
+		}
+		let vars = _isObject(v) ? v : {each:v}, //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.
+			ease = _parseEase(vars.ease),
+			from = vars.from || 0,
+			base = parseFloat(vars.base) || 0,
+			cache = {},
+			isDecimal = (from > 0 && from < 1),
+			ratios = isNaN(from) || isDecimal,
+			axis = vars.axis,
+			ratioX = from,
+			ratioY = from;
+		if (_isString(from)) {
+			ratioX = ratioY = {center:.5, edges:.5, end:1}[from] || 0;
+		} else if (!isDecimal && ratios) {
+			ratioX = from[0];
+			ratioY = from[1];
+		}
+		return (i, target, a) => {
+			let l = (a || vars).length,
+				distances = cache[l],
+				originX, originY, x, y, d, j, max, min, wrapAt;
+			if (!distances) {
+				wrapAt = (vars.grid === "auto") ? 0 : (vars.grid || [1, _bigNum])[1];
+				if (!wrapAt) {
+					max = -_bigNum;
+					while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) { }
+					wrapAt < l && wrapAt--;
+				}
+				distances = cache[l] = [];
+				originX = ratios ? (Math.min(wrapAt, l) * ratioX) - .5 : from % wrapAt;
+				originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : (from / wrapAt) | 0;
+				max = 0;
+				min = _bigNum;
+				for (j = 0; j < l; j++) {
+					x = (j % wrapAt) - originX;
+					y = originY - ((j / wrapAt) | 0);
+					distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs((axis === "y") ? y : x);
+					(d > max) && (max = d);
+					(d < min) && (min = d);
+				}
+				(from === "random") && shuffle(distances);
+				distances.max = max - min;
+				distances.min = min;
+				distances.v = l = (parseFloat(vars.amount) || (parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt)) || 0) * (from === "edges" ? -1 : 1);
+				distances.b = (l < 0) ? base - l : base;
+				distances.u = getUnit(vars.amount || vars.each) || 0; //unit
+				ease = (ease && l < 0) ? _invertEase(ease) : ease;
+			}
+			l = ((distances[i] - distances.min) / distances.max) || 0;
+			return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors
+		};
+	},
+	_roundModifier = v => { //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
+		let p = Math.pow(10, ((v + "").split(".")[1] || "").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())
+		return raw => {
+			let n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);
+			return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!
+		};
+	},
+	snap = (snapTo, value) => {
+		let isArray = _isArray(snapTo),
+			radius, is2D;
+		if (!isArray && _isObject(snapTo)) {
+			radius = isArray = snapTo.radius || _bigNum;
+			if (snapTo.values) {
+				snapTo = toArray(snapTo.values);
+				if ((is2D = !_isNumber(snapTo[0]))) {
+					radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.
+				}
+			} else {
+				snapTo = _roundModifier(snapTo.increment);
+			}
+		}
+		return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? raw => {is2D = snapTo(raw); return Math.abs(is2D - raw) <= radius ? is2D : raw; } : raw => {
+			let x = parseFloat(is2D ? raw.x : raw),
+				y = parseFloat(is2D ? raw.y : 0),
+				min = _bigNum,
+				closest = 0,
+				i = snapTo.length,
+				dx, dy;
+			while (i--) {
+				if (is2D) {
+					dx = snapTo[i].x - x;
+					dy = snapTo[i].y - y;
+					dx = dx * dx + dy * dy;
+				} else {
+					dx = Math.abs(snapTo[i] - x);
+				}
+				if (dx < min) {
+					min = dx;
+					closest = i;
+				}
+			}
+			closest = (!radius || min <= radius) ? snapTo[closest] : raw;
+			return (is2D || closest === raw || _isNumber(raw)) ? closest : closest + getUnit(raw);
+		});
+	},
+	random = (min, max, roundingIncrement, returnFunction) => _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, () => _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? 10 ** ((roundingIncrement + "").length - 2) : 1) && (Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction)),
+	pipe = (...functions) => value => functions.reduce((v, f) => f(v), value),
+	unitize = (func, unit) => value => func(parseFloat(value)) + (unit || getUnit(value)),
+	normalize = (min, max, value) => mapRange(min, max, 0, 1, value),
+	_wrapArray = (a, wrapper, value) => _conditionalReturn(value, index => a[~~wrapper(index)]),
+	wrap = function(min, max, value) { // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).
+		let range = max - min;
+		return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, value => ((range + (value - min) % range) % range) + min);
+	},
+	wrapYoyo = (min, max, value) => {
+		let range = max - min,
+			total = range * 2;
+		return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, value => {
+			value = (total + (value - min) % total) % total || 0;
+			return min + ((value > range) ? (total - value) : value);
+		});
+	},
+	_replaceRandom = value => { //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])
+		let prev = 0,
+			s = "",
+			i, nums, end, isArray;
+		while (~(i = value.indexOf("random(", prev))) {
+			end = value.indexOf(")", i);
+			isArray = value.charAt(i + 7) === "[";
+			nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
+			s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);
+			prev = end + 1;
+		}
+		return s + value.substr(prev, value.length - prev);
+	},
+	mapRange = (inMin, inMax, outMin, outMax, value) => {
+		let inRange = inMax - inMin,
+			outRange = outMax - outMin;
+		return _conditionalReturn(value, value => outMin + ((((value - inMin) / inRange) * outRange) || 0));
+	},
+	interpolate = (start, end, progress, mutate) => {
+		let func = isNaN(start + end) ? 0 : p => (1 - p) * start + p * end;
+		if (!func) {
+			let isString = _isString(start),
+				master = {},
+				p, i, interpolators, l, il;
+			progress === true && (mutate = 1) && (progress = null);
+			if (isString) {
+				start = {p: start};
+				end = {p: end};
+
+			} else if (_isArray(start) && !_isArray(end)) {
+				interpolators = [];
+				l = start.length;
+				il = l - 2;
+				for (i = 1; i < l; i++) {
+					interpolators.push(interpolate(start[i-1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.
+				}
+				l--;
+				func = p => {
+					p *= l;
+					let i = Math.min(il, ~~p);
+					return interpolators[i](p - i);
+				};
+				progress = end;
+			} else if (!mutate) {
+				start = _merge(_isArray(start) ? [] : {}, start);
+			}
+			if (!interpolators) {
+				for (p in end) {
+					_addPropTween.call(master, start, p, "get", end[p]);
+				}
+				func = p => _renderPropTweens(p, master) || (isString ? start.p : start);
+			}
+		}
+		return _conditionalReturn(progress, func);
+	},
+	_getLabelInDirection = (timeline, fromTime, backward) => { //used for nextLabel() and previousLabel()
+		let labels = timeline.labels,
+			min = _bigNum,
+			p, distance, label;
+		for (p in labels) {
+			distance = labels[p] - fromTime;
+			if ((distance < 0) === !!backward && distance && min > (distance = Math.abs(distance))) {
+				label = p;
+				min = distance;
+			}
+		}
+		return label;
+	},
+	_callback = (animation, type, executeLazyFirst) => {
+		let v = animation.vars,
+			callback = v[type],
+			prevContext = _context,
+			context = animation._ctx,
+			params, scope, result;
+		if (!callback) {
+			return;
+		}
+		params = v[type + "Params"];
+		scope = v.callbackScope || animation;
+		executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
+		context && (_context = context);
+		result = params ? callback.apply(scope, params) : callback.call(scope);
+		_context = prevContext;
+		return result;
+	},
+	_interrupt = animation => {
+		_removeFromParent(animation);
+		animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting);
+		animation.progress() < 1 && _callback(animation, "onInterrupt");
+		return animation;
+	},
+	_quickTween,
+	_registerPluginQueue = [],
+	_createPlugin = config => {
+		if (!config) return;
+		config = (!config.name && config.default) || config; // UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.
+		if (_windowExists() || config.headless) { // edge case: some build tools may pass in a null/undefined value
+			let name = config.name,
+				isFunc = _isFunction(config),
+				Plugin = (name && !isFunc && config.init) ? function () {
+					this._props = [];
+				} : config, //in case someone passes in an object that's not a plugin, like CustomEase
+				instanceDefaults = {init: _emptyFunc, render: _renderPropTweens, add: _addPropTween, kill: _killPropTweensOf, modifier: _addPluginModifier, rawVars: 0},
+				statics = {targetTest: 0, get: 0, getSetter: _getSetter, aliases: {}, register: 0};
+			_wake();
+			if (config !== Plugin) {
+				if (_plugins[name]) {
+					return;
+				}
+				_setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics)); //static methods
+				_merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods
+				_plugins[(Plugin.prop = name)] = Plugin;
+				if (config.targetTest) {
+					_harnessPlugins.push(Plugin);
+					_reservedProps[name] = 1;
+				}
+				name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin"; //for the global name. "motionPath" should become MotionPathPlugin
+			}
+			_addGlobal(name, Plugin);
+			config.register && config.register(gsap, Plugin, PropTween);
+		} else {
+			_registerPluginQueue.push(config);
+		}
+	},
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * COLORS
+ * --------------------------------------------------------------------------------------
+ */
+
+	_255 = 255,
+	_colorLookup = {
+		aqua:[0,_255,_255],
+		lime:[0,_255,0],
+		silver:[192,192,192],
+		black:[0,0,0],
+		maroon:[128,0,0],
+		teal:[0,128,128],
+		blue:[0,0,_255],
+		navy:[0,0,128],
+		white:[_255,_255,_255],
+		olive:[128,128,0],
+		yellow:[_255,_255,0],
+		orange:[_255,165,0],
+		gray:[128,128,128],
+		purple:[128,0,128],
+		green:[0,128,0],
+		red:[_255,0,0],
+		pink:[_255,192,203],
+		cyan:[0,_255,_255],
+		transparent:[_255,_255,_255,0]
+	},
+	// possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:
+	// let ctx = _doc.createElement("canvas").getContext("2d");
+	// _forEachName("aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});
+	_hue = (h, m1, m2) => {
+		h += h < 0 ? 1 : h > 1 ? -1 : 0;
+		return ((((h * 6 < 1) ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : (h * 3 < 2) ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255) + .5) | 0;
+	},
+	splitColor = (v, toHSL, forceAlpha) => {
+		let a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, (v >> 8) & _255, v & _255] : 0,
+			r, g, b, h, s, l, max, min, d, wasHSL;
+		if (!a) {
+			if (v.substr(-1) === ",") { //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
+				v = v.substr(0, v.length - 1);
+			}
+			if (_colorLookup[v]) {
+				a = _colorLookup[v];
+			} else if (v.charAt(0) === "#") {
+				if (v.length < 6) { //for shorthand like #9F0 or #9F0F (could have alpha)
+					r = v.charAt(1);
+					g = v.charAt(2);
+					b = v.charAt(3);
+					v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
+				}
+				if (v.length === 9) { // hex with alpha, like #fd5e53ff
+					a = parseInt(v.substr(1, 6), 16);
+					return [a >> 16, (a >> 8) & _255, a & _255, parseInt(v.substr(7), 16) / 255];
+				}
+				v = parseInt(v.substr(1), 16);
+				a = [v >> 16, (v >> 8) & _255, v & _255];
+			} else if (v.substr(0, 3) === "hsl") {
+				a = wasHSL = v.match(_strictNumExp);
+				if (!toHSL) {
+					h = (+a[0] % 360) / 360;
+					s = +a[1] / 100;
+					l = +a[2] / 100;
+					g = (l <= .5) ? l * (s + 1) : l + s - l * s;
+					r = l * 2 - g;
+					a.length > 3 && (a[3] *= 1); //cast as number
+					a[0] = _hue(h + 1 / 3, r, g);
+					a[1] = _hue(h, r, g);
+					a[2] = _hue(h - 1 / 3, r, g);
+				} else if (~v.indexOf("=")) { //if relative values are found, just return the raw strings with the relative prefixes in place.
+					a = v.match(_numExp);
+					forceAlpha && a.length < 4 && (a[3] = 1);
+					return a;
+				}
+			} else {
+				a = v.match(_strictNumExp) || _colorLookup.transparent;
+			}
+			a = a.map(Number);
+		}
+		if (toHSL && !wasHSL) {
+			r = a[0] / _255;
+			g = a[1] / _255;
+			b = a[2] / _255;
+			max = Math.max(r, g, b);
+			min = Math.min(r, g, b);
+			l = (max + min) / 2;
+			if (max === min) {
+				h = s = 0;
+			} else {
+				d = max - min;
+				s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
+				h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
+				h *= 60;
+			}
+			a[0] = ~~(h + .5);
+			a[1] = ~~(s * 100 + .5);
+			a[2] = ~~(l * 100 + .5);
+		}
+		forceAlpha && a.length < 4 && (a[3] = 1);
+		return a;
+	},
+	_colorOrderData = v => { // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()
+		let values = [],
+			c = [],
+			i = -1;
+		v.split(_colorExp).forEach(v => {
+			let a = v.match(_numWithUnitExp) || [];
+			values.push(...a);
+			c.push(i += a.length + 1);
+		});
+		values.c = c;
+		return values;
+	},
+	_formatColors = (s, toHSL, orderMatchData) => {
+		let result = "",
+			colors = (s + result).match(_colorExp),
+			type = toHSL ? "hsla(" : "rgba(",
+			i = 0,
+			c, shell, d, l;
+		if (!colors) {
+			return s;
+		}
+		colors = colors.map(color => (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")");
+		if (orderMatchData) {
+			d = _colorOrderData(s);
+			c = orderMatchData.c;
+			if (c.join(result) !== d.c.join(result)) {
+				shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
+				l = shell.length - 1;
+				for (; i < l; i++) {
+					result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
+				}
+			}
+		}
+		if (!shell) {
+			shell = s.split(_colorExp);
+			l = shell.length - 1;
+			for (; i < l; i++) {
+				result += shell[i] + colors[i];
+			}
+		}
+		return result + shell[l];
+	},
+	_colorExp = (function() {
+		let s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b", //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,
+			p;
+		for (p in _colorLookup) {
+			s += "|" + p + "\\b";
+		}
+		return new RegExp(s + ")", "gi");
+	})(),
+	_hslExp = /hsl[a]?\(/,
+	_colorStringFilter = a => {
+		let combined = a.join(" "),
+			toHSL;
+		_colorExp.lastIndex = 0;
+		if (_colorExp.test(combined)) {
+			toHSL = _hslExp.test(combined);
+			a[1] = _formatColors(a[1], toHSL);
+			a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.
+			return true;
+		}
+	},
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * TICKER
+ * --------------------------------------------------------------------------------------
+ */
+	_tickerActive,
+	_ticker = (function() {
+		let _getTime = Date.now,
+			_lagThreshold = 500,
+			_adjustedLag = 33,
+			_startTime = _getTime(),
+			_lastUpdate = _startTime,
+			_gap = 1000 / 240,
+			_nextTime = _gap,
+			_listeners = [],
+			_id, _req, _raf, _self, _delta, _i,
+			_tick = v => {
+				let elapsed = _getTime() - _lastUpdate,
+					manual = v === true,
+					overlap, dispatch, time, frame;
+				(elapsed > _lagThreshold || elapsed < 0) && (_startTime += elapsed - _adjustedLag);
+				_lastUpdate += elapsed;
+				time = _lastUpdate - _startTime;
+				overlap = time - _nextTime;
+				if (overlap > 0 || manual) {
+					frame = ++_self.frame;
+					_delta = time - _self.time * 1000;
+					_self.time = time = time / 1000;
+					_nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
+					dispatch = 1;
+				}
+				manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.
+				if (dispatch) {
+					for (_i = 0; _i < _listeners.length; _i++) { // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.
+						_listeners[_i](time, _delta, frame, v);
+					}
+				}
+			};
+		_self = {
+			time:0,
+			frame:0,
+			tick() {
+				_tick(true);
+			},
+			deltaRatio(fps) {
+				return _delta / (1000 / (fps || 60));
+			},
+			wake() {
+				if (_coreReady) {
+					if (!_coreInitted && _windowExists()) {
+						_win = _coreInitted = window;
+						_doc = _win.document || {};
+						_globals.gsap = gsap;
+						(_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);
+						_install(_installScope || _win.GreenSockGlobals || (!_win.gsap && _win) || {});
+						_registerPluginQueue.forEach(_createPlugin);
+					}
+					_raf = typeof(requestAnimationFrame) !== "undefined" && requestAnimationFrame;
+					_id && _self.sleep();
+					_req = _raf || (f => setTimeout(f, (_nextTime - _self.time * 1000 + 1) | 0));
+					_tickerActive = 1;
+					_tick(2);
+				}
+			},
+			sleep() {
+				(_raf ? cancelAnimationFrame : clearTimeout)(_id);
+				_tickerActive = 0;
+				_req = _emptyFunc;
+			},
+			lagSmoothing(threshold, adjustedLag) {
+				_lagThreshold = threshold || Infinity; // zero should be interpreted as basically unlimited
+				_adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);
+			},
+			fps(fps) {
+				_gap = 1000 / (fps || 240);
+				_nextTime = _self.time * 1000 + _gap;
+			},
+			add(callback, once, prioritize) {
+				let func = once ? (t, d, f, v) => {callback(t, d, f, v); _self.remove(func);} : callback;
+				_self.remove(callback);
+				_listeners[prioritize ? "unshift" : "push"](func);
+				_wake();
+				return func;
+			},
+			remove(callback, i) {
+				~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;
+			},
+			_listeners:_listeners
+		};
+		return _self;
+	})(),
+	_wake = () => !_tickerActive && _ticker.wake(), //also ensures the core classes are initialized.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+* -------------------------------------------------
+* EASING
+* -------------------------------------------------
+*/
+	_easeMap = {},
+	_customEaseExp = /^[\d.\-M][\d.\-,\s]/,
+	_quotesExp = /["']/g,
+	_parseObjectInString = value => { //takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.
+		let obj = {},
+			split = value.substr(1, value.length-3).split(":"),
+			key = split[0],
+			i = 1,
+			l = split.length,
+			index, val, parsedVal;
+		for (; i < l; i++) {
+			val = split[i];
+			index = i !== l-1 ? val.lastIndexOf(",") : val.length;
+			parsedVal = val.substr(0, index);
+			obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
+			key = val.substr(index+1).trim();
+		}
+		return obj;
+	},
+	_valueInParentheses = value => {
+		let open = value.indexOf("(") + 1,
+			close = value.indexOf(")"),
+			nested = value.indexOf("(", open);
+		return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
+	},
+	_configEaseFromString = name => { //name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).
+		let split = (name + "").split("("),
+			ease = _easeMap[split[0]];
+		return (ease && split.length > 1 && ease.config) ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : (_easeMap._CE && _customEaseExp.test(name)) ? _easeMap._CE("", name) : ease;
+	},
+	_invertEase = ease => p => 1 - ease(1 - p),
+	// allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.
+	_propagateYoyoEase = (timeline, isYoyo) => {
+		let child = timeline._first, ease;
+		while (child) {
+			if (child instanceof Timeline) {
+				_propagateYoyoEase(child, isYoyo);
+			} else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
+				if (child.timeline) {
+					_propagateYoyoEase(child.timeline, isYoyo);
+				} else {
+					ease = child._ease;
+					child._ease = child._yEase;
+					child._yEase = ease;
+					child._yoyo = isYoyo;
+				}
+			}
+			child = child._next;
+		}
+	},
+	_parseEase = (ease, defaultEase) => !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase,
+	_insertEase = (names, easeIn, easeOut = p => 1 - easeIn(1 - p), easeInOut = (p => p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2)) => {
+		let ease = {easeIn, easeOut, easeInOut},
+			lowercaseName;
+		_forEachName(names, name => {
+			_easeMap[name] = _globals[name] = ease;
+			_easeMap[(lowercaseName = name.toLowerCase())] = easeOut;
+			for (let p in ease) {
+				_easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
+			}
+		});
+		return ease;
+	},
+	_easeInOutFromOut = easeOut => (p => p < .5 ? (1 - easeOut(1 - (p * 2))) / 2 : .5 + easeOut((p - .5) * 2) / 2),
+	_configElastic = (type, amplitude, period) => {
+		let p1 = (amplitude >= 1) ? amplitude : 1, //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
+			p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
+			p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
+			easeOut = p => p === 1 ? 1 : p1 * (2 ** (-10 * p)) * _sin((p - p3) * p2) + 1,
+			ease = (type === "out") ? easeOut : (type === "in") ? p => 1 - easeOut(1 - p) : _easeInOutFromOut(easeOut);
+		p2 = _2PI / p2; //precalculate to optimize
+		ease.config = (amplitude, period) => _configElastic(type, amplitude, period);
+		return ease;
+	},
+	_configBack = (type, overshoot = 1.70158) => {
+		let easeOut = p => p ? ((--p) * p * ((overshoot + 1) * p + overshoot) + 1) : 0,
+			ease = type === "out" ? easeOut : type === "in" ? p => 1 - easeOut(1 - p) : _easeInOutFromOut(easeOut);
+		ease.config = overshoot => _configBack(type, overshoot);
+		return ease;
+	};
+	// a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
+	// _weightedEase = ratio => {
+	// 	let y = 0.5 + ratio / 2;
+	// 	return p => (2 * (1 - p) * p * y + p * p);
+	// },
+	// a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
+	// _weightedEaseStrong = ratio => {
+	// 	ratio = .5 + ratio / 2;
+	// 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),
+	// 		b = ratio - o,
+	// 		c = ratio + o;
+	// 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;
+	// };
+
+_forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", (name, i) => {
+	let power = i < 5 ? i + 1 : i;
+	_insertEase(name + ",Power" + (power - 1), i ? p => p ** power : p => p, p => 1 - (1 - p) ** power, p => p < .5 ? (p * 2) ** power / 2 : 1 - ((1 - p) * 2) ** power / 2);
+});
+_easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;
+_insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());
+((n, c) => {
+	let n1 = 1 / c,
+		n2 = 2 * n1,
+		n3 = 2.5 * n1,
+		easeOut = p => (p < n1) ? n * p * p : (p < n2) ? n * (p - 1.5 / c) ** 2 + .75 : (p < n3) ? n * (p -= 2.25 / c) * p + .9375 : n * (p - 2.625 / c) ** 2 + .984375;
+	_insertEase("Bounce", p => 1 - easeOut(1 - p), easeOut);
+})(7.5625, 2.75);
+_insertEase("Expo", p => p ? 2 ** (10 * (p - 1)) : 0);
+_insertEase("Circ", p => -(_sqrt(1 - (p * p)) - 1));
+_insertEase("Sine", p => p === 1 ? 1 : -_cos(p * _HALF_PI) + 1);
+_insertEase("Back", _configBack("in"), _configBack("out"), _configBack());
+_easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
+	config(steps = 1, immediateStart) {
+		let p1 = 1 / steps,
+			p2 = steps + (immediateStart ? 0 : 1),
+			p3 = immediateStart ? 1 : 0,
+			max = 1 - _tinyNum;
+		return p => (((p2 * _clamp(0, max, p)) | 0) + p3) * p1;
+	}
+};
+_defaults.ease = _easeMap["quad.out"];
+
+
+_forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", name => _callbackNames += name + "," + name + "Params,");
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * CACHE
+ * --------------------------------------------------------------------------------------
+ */
+class GSCache {
+
+	constructor(target, harness) {
+		this.id = _gsID++;
+		target._gsap = this;
+		this.target = target;
+		this.harness = harness;
+		this.get = harness ? harness.get : _getProperty;
+		this.set = harness ? harness.getSetter : _getSetter;
+	}
+
+}
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * ANIMATION
+ * --------------------------------------------------------------------------------------
+ */
+
+class Animation {
+
+	constructor(vars) {
+		this.vars = vars;
+		this._delay = +vars.delay || 0;
+		if ((this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0)) { // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.
+			this._rDelay = vars.repeatDelay || 0;
+			this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
+		}
+		this._ts = 1;
+		_setDuration(this, +vars.duration, 1, 1);
+		this.data = vars.data;
+		if (_context) {
+			this._ctx = _context;
+			_context.data.push(this);
+		}
+		_tickerActive || _ticker.wake();
+	}
+
+	delay(value) {
+		if (value || value === 0) {
+			this.parent && this.parent.smoothChildTiming && (this.startTime(this._start + value - this._delay));
+			this._delay = value;
+			return this;
+		}
+		return this._delay;
+	}
+
+	duration(value) {
+		return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
+	}
+
+	totalDuration(value) {
+		if (!arguments.length) {
+			return this._tDur;
+		}
+		this._dirty = 0;
+		return _setDuration(this, this._repeat < 0 ? value : (value - (this._repeat * this._rDelay)) / (this._repeat + 1));
+	}
+
+	totalTime(totalTime, suppressEvents) {
+		_wake();
+		if (!arguments.length) {
+			return this._tTime;
+		}
+		let parent = this._dp;
+		if (parent && parent.smoothChildTiming && this._ts) {
+			_alignPlayhead(this, totalTime);
+			!parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.
+			//in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.
+			while (parent && parent.parent) {
+				if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
+					parent.totalTime(parent._tTime, true);
+				}
+				parent = parent.parent;
+			}
+			if (!this.parent && this._dp.autoRemoveChildren && ((this._ts > 0 && totalTime < this._tDur) || (this._ts < 0 && totalTime > 0) || (!this._tDur && !totalTime) )) { //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.
+				_addToTimeline(this._dp, this, this._start - this._delay);
+			}
+		}
+        if (this._tTime !== totalTime || (!this._dur && !suppressEvents) || (this._initted && Math.abs(this._zTime) === _tinyNum) || (!totalTime && !this._initted && (this.add || this._ptLookup))) { // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)
+        	this._ts || (this._pTime = totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause
+	        //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)
+		    //   this._lock = 1;
+		        _lazySafeRender(this, totalTime, suppressEvents);
+		    //   this._lock = 0;
+	        //}
+		}
+		return this;
+	}
+
+	time(value, suppressEvents) {
+		return arguments.length ? this.totalTime((Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay)) || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!
+	}
+
+	totalProgress(value, suppressEvents) {
+		return arguments.length ? this.totalTime( this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.rawTime() > 0 ? 1 : 0;
+	}
+
+	progress(value, suppressEvents) {
+		return arguments.length ? this.totalTime( this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : (this.duration() ? Math.min(1, this._time / this._dur) : this.rawTime() > 0 ? 1 : 0);
+	}
+
+	iteration(value, suppressEvents) {
+		let cycleDuration = this.duration() + this._rDelay;
+		return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
+	}
+
+	// potential future addition:
+	// isPlayingBackwards() {
+	// 	let animation = this,
+	// 		orientation = 1; // 1 = forward, -1 = backward
+	// 	while (animation) {
+	// 		orientation *= animation.reversed() || (animation.repeat() && !(animation.iteration() & 1)) ? -1 : 1;
+	// 		animation = animation.parent;
+	// 	}
+	// 	return orientation < 0;
+	// }
+
+	timeScale(value, suppressEvents) {
+		if (!arguments.length) {
+			return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.
+		}
+		if (this._rts === value) {
+			return this;
+		}
+		let tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.
+
+		// future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.
+		//(+value < 0 && this._rts >= 0) && _callback(this, "onReverse", true);
+
+		// prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.
+		this._rts = +value || 0;
+		this._ts = (this._ps || value === -_tinyNum) ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.
+		this.totalTime(_clamp(-Math.abs(this._delay), this._tDur, tTime), suppressEvents !== false);
+		_setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.
+		return _recacheAncestors(this);
+	}
+
+	paused(value) {
+		if (!arguments.length) {
+			return this._ps;
+		}
+		if (this._ps !== value) {
+			this._ps = value;
+			if (value) {
+				this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.
+				this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the "real" timeScale as _rts (recorded time scale)
+			} else {
+				_wake();
+				this._ts = this._rts;
+				//only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.
+				this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, (this.progress() === 1) && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum)); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.
+			}
+		}
+		return this;
+	}
+
+	startTime(value) {
+		if (arguments.length) {
+			this._start = value;
+			let parent = this.parent || this._dp;
+			parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
+			return this;
+		}
+		return this._start;
+	}
+
+	endTime(includeRepeats) {
+		return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
+	}
+
+	rawTime(wrapRepeats) {
+		let parent = this.parent || this._dp; // _dp = detached parent
+		return !parent ? this._tTime : (wrapRepeats && (!this._ts || (this._repeat && this._time && this.totalProgress() < 1))) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
+	}
+
+	revert(config= _revertConfig) {
+		let prevIsReverting = _reverting;
+		_reverting = config;
+		if (this._initted || this._startAt) {
+			this.timeline && this.timeline.revert(config);
+			this.totalTime(-0.01, config.suppressEvents);
+		}
+		this.data !== "nested" && config.kill !== false && this.kill();
+		_reverting = prevIsReverting;
+		return this;
+	}
+
+	globalTime(rawTime) {
+		let animation = this,
+			time = arguments.length ? rawTime : animation.rawTime();
+		while (animation) {
+			time = animation._start + time / (Math.abs(animation._ts) || 1);
+			animation = animation._dp;
+		}
+		return !this.parent && this._sat ? this._sat.globalTime(rawTime) : time; // the _startAt tweens for .fromTo() and .from() that have immediateRender should always be FIRST in the timeline (important for context.revert()). "_sat" stands for _startAtTween, referring to the parent tween that created the _startAt. We must discern if that tween had immediateRender so that we can know whether or not to prioritize it in revert().
+	}
+
+	repeat(value) {
+		if (arguments.length) {
+			this._repeat = value === Infinity ? -2 : value;
+			return _onUpdateTotalDuration(this);
+		}
+		return this._repeat === -2 ? Infinity : this._repeat;
+	}
+
+	repeatDelay(value) {
+		if (arguments.length) {
+			let time = this._time;
+			this._rDelay = value;
+			_onUpdateTotalDuration(this);
+			return time ? this.time(time) : this;
+		}
+		return this._rDelay;
+	}
+
+	yoyo(value) {
+		if (arguments.length) {
+			this._yoyo = value;
+			return this;
+		}
+		return this._yoyo;
+	}
+
+	seek(position, suppressEvents) {
+		return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
+	}
+
+	restart(includeDelay, suppressEvents) {
+		return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
+	}
+
+	play(from, suppressEvents) {
+		from != null && this.seek(from, suppressEvents);
+		return this.reversed(false).paused(false);
+	}
+
+	reverse(from, suppressEvents) {
+		from != null && this.seek(from || this.totalDuration(), suppressEvents);
+		return this.reversed(true).paused(false);
+	}
+
+	pause(atTime, suppressEvents) {
+		atTime != null && this.seek(atTime, suppressEvents);
+		return this.paused(true);
+	}
+
+	resume() {
+		return this.paused(false);
+	}
+
+	reversed(value) {
+		if (arguments.length) {
+			!!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.
+			return this;
+		}
+		return this._rts < 0;
+	}
+
+	invalidate() {
+		this._initted = this._act = 0;
+		this._zTime = -_tinyNum;
+		return this;
+	}
+
+	isActive() {
+		let parent = this.parent || this._dp,
+			start = this._start,
+			rawTime;
+		return !!(!parent || (this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum));
+	}
+
+	eventCallback(type, callback, params) {
+		let vars = this.vars;
+		if (arguments.length > 1) {
+			if (!callback) {
+				delete vars[type];
+			} else {
+				vars[type] = callback;
+				params && (vars[type + "Params"] = params);
+				type === "onUpdate" && (this._onUpdate = callback);
+			}
+			return this;
+		}
+		return vars[type];
+	}
+
+	then(onFulfilled) {
+		let self = this;
+		return new Promise(resolve => {
+			let f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
+				_resolve = () => {
+					let _then = self.then;
+					self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)
+					_isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
+					resolve(f);
+					self.then = _then;
+				};
+			if (self._initted && (self.totalProgress() === 1 && self._ts >= 0) || (!self._tTime && self._ts < 0)) {
+				_resolve();
+			} else {
+				self._prom = _resolve;
+			}
+		});
+	}
+
+	kill() {
+		_interrupt(this);
+	}
+
+}
+
+_setDefaults(Animation.prototype, {_time:0, _start:0, _end:0, _tTime:0, _tDur:0, _dirty:0, _repeat:0, _yoyo:false, parent:null, _initted:false, _rDelay:0, _ts:1, _dp:0, ratio:0, _zTime:-_tinyNum, _prom:0, _ps:false, _rts:1});
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * -------------------------------------------------
+ * TIMELINE
+ * -------------------------------------------------
+ */
+
+class Timeline extends Animation {
+
+	constructor(vars = {}, position) {
+		super(vars);
+		this.labels = {};
+		this.smoothChildTiming = !!vars.smoothChildTiming;
+		this.autoRemoveChildren = !!vars.autoRemoveChildren;
+		this._sort = _isNotFalse(vars.sortChildren);
+		_globalTimeline && _addToTimeline(vars.parent || _globalTimeline, this, position);
+		vars.reversed && this.reverse();
+		vars.paused && this.paused(true);
+		vars.scrollTrigger && _scrollTrigger(this, vars.scrollTrigger);
+	}
+
+	to(targets, vars, position) {
+		_createTweenType(0, arguments, this);
+		return this;
+	}
+
+	from(targets, vars, position) {
+		_createTweenType(1, arguments, this);
+		return this;
+	}
+
+	fromTo(targets, fromVars, toVars, position) {
+		_createTweenType(2, arguments, this);
+		return this;
+	}
+
+	set(targets, vars, position) {
+		vars.duration = 0;
+		vars.parent = this;
+		_inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
+		vars.immediateRender = !!vars.immediateRender;
+		new Tween(targets, vars, _parsePosition(this, position), 1);
+		return this;
+	}
+
+	call(callback, params, position) {
+		return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);
+	}
+
+	//ONLY for backward compatibility! Maybe delete?
+	staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
+		vars.duration = duration;
+		vars.stagger = vars.stagger || stagger;
+		vars.onComplete = onCompleteAll;
+		vars.onCompleteParams = onCompleteAllParams;
+		vars.parent = this;
+		new Tween(targets, vars, _parsePosition(this, position));
+		return this;
+	}
+
+	staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
+		vars.runBackwards = 1;
+		_inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
+		return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
+	}
+
+	staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
+		toVars.startAt = fromVars;
+		_inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
+		return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
+	}
+
+	render(totalTime, suppressEvents, force) {
+		let prevTime = this._time,
+			tDur = this._dirty ? this.totalDuration() : this._tDur,
+			dur = this._dur,
+			tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime), // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.
+			crossingStart = (this._zTime < 0) !== (totalTime < 0) && (this._initted || !dur),
+			time, child, next, iteration, cycleDuration, prevPaused, pauseTween, timeScale, prevStart, prevIteration, yoyo, isYoyo;
+		this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);
+		if (tTime !== this._tTime || force || crossingStart) {
+			if (prevTime !== this._time && dur) { //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
+				tTime += this._time - prevTime;
+				totalTime += this._time - prevTime;
+			}
+			time = tTime;
+			prevStart = this._start;
+			timeScale = this._ts;
+			prevPaused = !timeScale;
+			if (crossingStart) {
+				dur || (prevTime = this._zTime);
+				 //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.
+				(totalTime || !suppressEvents) && (this._zTime = totalTime);
+			}
+			if (this._repeat) { //adjust the time for repeats and yoyos
+				yoyo = this._yoyo;
+				cycleDuration = dur + this._rDelay;
+				if (this._repeat < -1 && totalTime < 0) {
+					return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
+				}
+				time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)
+				if (tTime === tDur) { // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
+					iteration = this._repeat;
+					time = dur;
+				} else {
+					iteration = ~~(tTime / cycleDuration);
+					if (iteration && iteration === tTime / cycleDuration) {
+						time = dur;
+						iteration--;
+					}
+					time > dur && (time = dur);
+				}
+				prevIteration = _animationCycle(this._tTime, cycleDuration);
+				!prevTime && this._tTime && prevIteration !== iteration && this._tTime - prevIteration * cycleDuration - this._dur <= 0 && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://gsap.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005 also, this._tTime - prevIteration * cycleDuration - this._dur <= 0 just checks to make sure it wasn't previously in the "repeatDelay" portion
+				if (yoyo && (iteration & 1)) {
+					time = dur - time;
+					isYoyo = 1;
+				}
+				/*
+				make sure children at the end/beginning of the timeline are rendered properly. If, for example,
+				a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
+				would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
+				could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
+				we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
+				ensure that zero-duration tweens at the very beginning or end of the Timeline work.
+				*/
+				if (iteration !== prevIteration && !this._lock) {
+					let rewinding = (yoyo && (prevIteration & 1)),
+						doesWrap = (rewinding === (yoyo && (iteration & 1)));
+					iteration < prevIteration && (rewinding = !rewinding);
+					prevTime = rewinding ? 0 : tTime % dur ? dur : tTime; // if the playhead is landing exactly at the end of an iteration, use that totalTime rather than only the duration, otherwise it'll skip the 2nd render since it's effectively at the same time.
+					this._lock = 1;
+					this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
+					this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.
+					!suppressEvents && this.parent && _callback(this, "onRepeat");
+					this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);
+					if ((prevTime && prevTime !== this._time) || prevPaused !== !this._ts || (this.vars.onRepeat && !this.parent && !this._act)) { // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.
+						return this;
+					}
+					dur = this._dur; // in case the duration changed in the onRepeat
+					tDur = this._tDur;
+					if (doesWrap) {
+						this._lock = 2;
+						prevTime = rewinding ? dur : -0.0001;
+						this.render(prevTime, true);
+						this.vars.repeatRefresh && !isYoyo && this.invalidate();
+					}
+					this._lock = 0;
+					if (!this._ts && !prevPaused) {
+						return this;
+					}
+					//in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.
+					_propagateYoyoEase(this, isYoyo);
+				}
+			}
+			if (this._hasPause && !this._forcing && this._lock < 2) {
+				pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));
+				if (pauseTween) {
+					tTime -= time - (time = pauseTween._start);
+				}
+			}
+
+			this._tTime = tTime;
+			this._time = time;
+			this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.
+
+			if (!this._initted) {
+				this._onUpdate = this.vars.onUpdate;
+				this._initted = 1;
+				this._zTime = totalTime;
+				prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).
+			}
+			if (!prevTime && time && !suppressEvents && !iteration) {
+				_callback(this, "onStart");
+				if (this._tTime !== tTime) { // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
+					return this;
+				}
+			}
+			if (time >= prevTime && totalTime >= 0) {
+				child = this._first;
+				while (child) {
+					next = child._next;
+					if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
+						if (child.parent !== this) { // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
+							return this.render(totalTime, suppressEvents, force);
+						}
+						child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);
+						if (time !== this._time || (!this._ts && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
+							pauseTween = 0;
+							next && (tTime += (this._zTime = -_tinyNum));  // it didn't finish rendering, so flag zTime as negative so that so that the next time render() is called it'll be forced (to render any remaining children)
+							break;
+						}
+					}
+					child = next;
+				}
+			} else {
+				child = this._last;
+				let adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.
+				while (child) {
+					next = child._prev;
+					if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
+						if (child.parent !== this) { // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
+							return this.render(totalTime, suppressEvents, force);
+						}
+						child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || (_reverting && (child._initted || child._startAt)));  // if reverting, we should always force renders of initted tweens (but remember that .fromTo() or .from() may have a _startAt but not _initted yet). If, for example, a .fromTo() tween with a stagger (which creates an internal timeline) gets reverted BEFORE some of its child tweens render for the first time, it may not properly trigger them to revert.
+						if (time !== this._time || (!this._ts && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
+							pauseTween = 0;
+							next && (tTime += (this._zTime = adjustedTime ? -_tinyNum : _tinyNum)); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)
+							break;
+						}
+					}
+					child = next;
+				}
+			}
+			if (pauseTween && !suppressEvents) {
+				this.pause();
+				pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;
+				if (this._ts) { //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).
+					this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.
+					_setEnd(this);
+					return this.render(totalTime, suppressEvents, force);
+				}
+			}
+			this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
+			if ((tTime === tDur && this._tTime >= this.totalDuration()) || (!tTime && prevTime)) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) { // remember, a child's callback may alter this timeline's playhead or timeScale which is why we need to add some of these checks.
+				(totalTime || !dur) && ((tTime === tDur && this._ts > 0) || (!tTime && this._ts < 0)) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.
+				if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {
+					_callback(this, (tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete"), true);
+					this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
+				}
+			}
+		}
+		return this;
+	}
+
+	add(child, position) {
+		_isNumber(position) || (position = _parsePosition(this, position, child));
+		if (!(child instanceof Animation)) {
+			if (_isArray(child)) {
+				child.forEach(obj => this.add(obj, position));
+				return this;
+			}
+			if (_isString(child)) {
+				return this.addLabel(child, position);
+			}
+			if (_isFunction(child)) {
+				child = Tween.delayedCall(0, child);
+			} else {
+				return this;
+			}
+		}
+		return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!
+	}
+
+	getChildren(nested = true, tweens = true, timelines = true, ignoreBeforeTime = -_bigNum) {
+		let a = [],
+			child = this._first;
+		while (child) {
+			if (child._start >= ignoreBeforeTime) {
+				if (child instanceof Tween) {
+					tweens && a.push(child);
+				} else {
+					timelines && a.push(child);
+					nested && a.push(...child.getChildren(true, tweens, timelines));
+				}
+			}
+			child = child._next;
+		}
+		return a;
+	}
+
+	getById(id) {
+		let animations = this.getChildren(1, 1, 1),
+			i = animations.length;
+		while(i--) {
+			if (animations[i].vars.id === id) {
+				return animations[i];
+			}
+		}
+	}
+
+	remove(child) {
+		if (_isString(child)) {
+			return this.removeLabel(child);
+		}
+		if (_isFunction(child)) {
+			return this.killTweensOf(child);
+		}
+		_removeLinkedListItem(this, child);
+		if (child === this._recent) {
+			this._recent = this._last;
+		}
+		return _uncache(this);
+	}
+
+	totalTime(totalTime, suppressEvents) {
+		if (!arguments.length) {
+			return this._tTime;
+		}
+		this._forcing = 1;
+		if (!this._dp && this._ts) { //special case for the global timeline (or any other that has no parent or detached parent).
+			this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? totalTime / this._ts : (this.totalDuration() - totalTime) / -this._ts));
+		}
+		super.totalTime(totalTime, suppressEvents);
+		this._forcing = 0;
+		return this;
+	}
+
+	addLabel(label, position) {
+		this.labels[label] = _parsePosition(this, position);
+		return this;
+	}
+
+	removeLabel(label) {
+		delete this.labels[label];
+		return this;
+	}
+
+	addPause(position, callback, params) {
+		let t = Tween.delayedCall(0, callback || _emptyFunc, params);
+		t.data = "isPause";
+		this._hasPause = 1;
+		return _addToTimeline(this, t, _parsePosition(this, position));
+	}
+
+	removePause(position) {
+		let child = this._first;
+		position = _parsePosition(this, position);
+		while (child) {
+			if (child._start === position && child.data === "isPause") {
+				_removeFromParent(child);
+			}
+			child = child._next;
+		}
+	}
+
+	killTweensOf(targets, props, onlyActive) {
+		let tweens = this.getTweensOf(targets, onlyActive),
+			i = tweens.length;
+		while (i--) {
+			(_overwritingTween !== tweens[i]) && tweens[i].kill(targets, props);
+		}
+		return this;
+	}
+
+	getTweensOf(targets, onlyActive) {
+		let a = [],
+			parsedTargets = toArray(targets),
+			child = this._first,
+			isGlobalTime = _isNumber(onlyActive), // a number is interpreted as a global time. If the animation spans
+			children;
+		while (child) {
+			if (child instanceof Tween) {
+				if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || (child._initted && child._ts)) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) { // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.
+					a.push(child);
+				}
+			} else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
+				a.push(...children);
+			}
+			child = child._next;
+		}
+		return a;
+	}
+
+	// potential future feature - targets() on timelines
+	// targets() {
+	// 	let result = [];
+	// 	this.getChildren(true, true, false).forEach(t => result.push(...t.targets()));
+	// 	return result.filter((v, i) => result.indexOf(v) === i);
+	// }
+
+	tweenTo(position, vars) {
+		vars = vars || {};
+		let tl = this,
+			endTime = _parsePosition(tl, position),
+			{ startAt, onStart, onStartParams, immediateRender } = vars,
+			initted,
+			tween = Tween.to(tl, _setDefaults({
+				ease: vars.ease || "none",
+				lazy: false,
+				immediateRender: false,
+				time: endTime,
+				overwrite: "auto",
+				duration: vars.duration || (Math.abs((endTime - ((startAt && "time" in startAt) ? startAt.time : tl._time)) / tl.timeScale())) || _tinyNum,
+				onStart: () => {
+					tl.pause();
+					if (!initted) {
+						let duration = vars.duration || Math.abs((endTime - ((startAt && "time" in startAt) ? startAt.time : tl._time)) / tl.timeScale());
+						(tween._dur !== duration) && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);
+						initted = 1;
+					}
+					onStart && onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.
+				}
+			}, vars));
+		return immediateRender ? tween.render(0) : tween;
+	}
+
+	tweenFromTo(fromPosition, toPosition, vars) {
+		return this.tweenTo(toPosition, _setDefaults({startAt:{time:_parsePosition(this, fromPosition)}}, vars));
+	}
+
+	recent() {
+		return this._recent;
+	}
+
+	nextLabel(afterTime = this._time) {
+		return _getLabelInDirection(this, _parsePosition(this, afterTime));
+	}
+
+	previousLabel(beforeTime = this._time) {
+		return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
+	}
+
+	currentLabel(value) {
+		return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
+	}
+
+	shiftChildren(amount, adjustLabels, ignoreBeforeTime = 0) {
+		let child = this._first,
+			labels = this.labels,
+			p;
+		while (child) {
+			if (child._start >= ignoreBeforeTime) {
+				child._start += amount;
+				child._end += amount;
+			}
+			child = child._next;
+		}
+		if (adjustLabels) {
+			for (p in labels) {
+				if (labels[p] >= ignoreBeforeTime) {
+					labels[p] += amount;
+				}
+			}
+		}
+		return _uncache(this);
+	}
+
+	invalidate(soft) {
+		let child = this._first;
+		this._lock = 0;
+		while (child) {
+			child.invalidate(soft);
+			child = child._next;
+		}
+		return super.invalidate(soft);
+	}
+
+	clear(includeLabels = true) {
+		let child = this._first,
+			next;
+		while (child) {
+			next = child._next;
+			this.remove(child);
+			child = next;
+		}
+		this._dp && (this._time = this._tTime = this._pTime = 0);
+		includeLabels && (this.labels = {});
+		return _uncache(this);
+	}
+
+	totalDuration(value) {
+		let max = 0,
+			self = this,
+			child = self._last,
+			prevStart = _bigNum,
+			prev, start, parent;
+		if (arguments.length) {
+			return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
+		}
+		if (self._dirty) {
+			parent = self.parent;
+			while (child) {
+				prev = child._prev; //record it here in case the tween changes position in the sequence...
+				child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.
+				start = child._start;
+				if (start > prevStart && self._sort && child._ts && !self._lock) { //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
+					self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().
+					_addToTimeline(self, child, start - child._delay, 1)._lock = 0;
+				} else {
+					prevStart = start;
+				}
+				if (start < 0 && child._ts) { //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
+					max -= start;
+					if ((!parent && !self._dp) || (parent && parent.smoothChildTiming)) {
+						self._start += start / self._ts;
+						self._time -= start;
+						self._tTime -= start;
+					}
+					self.shiftChildren(-start, false, -1e999);
+					prevStart = 0;
+				}
+				child._end > max && child._ts && (max = child._end);
+				child = prev;
+			}
+			_setDuration(self, (self === _globalTimeline && self._time > max) ? self._time : max, 1, 1);
+			self._dirty = 0;
+		}
+		return self._tDur;
+	}
+
+	static updateRoot(time) {
+		if (_globalTimeline._ts) {
+			_lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));
+			_lastRenderedFrame = _ticker.frame;
+		}
+		if (_ticker.frame >= _nextGCFrame) {
+			_nextGCFrame += _config.autoSleep || 120;
+			let child = _globalTimeline._first;
+			if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
+				while (child && !child._ts) {
+					child = child._next;
+				}
+				child || _ticker.sleep();
+			}
+		}
+	}
+
+}
+
+_setDefaults(Timeline.prototype, {_lock:0, _hasPause:0, _forcing:0});
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+let _addComplexStringPropTween = function(target, prop, start, end, setter, stringFilter, funcParam) { //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
+		let pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
+			index = 0,
+			matchIndex = 0,
+			result,	startNums, color, endNum, chunk, startNum, hasRandom, a;
+		pt.b = start;
+		pt.e = end;
+		start += ""; //ensure values are strings
+		end += "";
+		if ((hasRandom = ~end.indexOf("random("))) {
+			end = _replaceRandom(end);
+		}
+		if (stringFilter) {
+			a = [start, end];
+			stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.
+			start = a[0];
+			end = a[1];
+		}
+		startNums = start.match(_complexStringNumExp) || [];
+		while ((result = _complexStringNumExp.exec(end))) {
+			endNum = result[0];
+			chunk = end.substring(index, result.index);
+			if (color) {
+				color = (color + 1) % 5;
+			} else if (chunk.substr(-5) === "rgba(") {
+				color = 1;
+			}
+			if (endNum !== startNums[matchIndex++]) {
+				startNum = parseFloat(startNums[matchIndex-1]) || 0;
+				//these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.
+				pt._pt = {
+					_next: pt._pt,
+					p: (chunk || matchIndex === 1) ? chunk : ",", //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
+					s: startNum,
+					c: endNum.charAt(1) === "=" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,
+					m: (color && color < 4) ? Math.round : 0
+				};
+				index = _complexStringNumExp.lastIndex;
+			}
+		}
+		pt.c = (index < end.length) ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
+		pt.fp = funcParam;
+		if (_relExp.test(end) || hasRandom) {
+			pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
+		}
+		this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
+		return pt;
+	},
+	_addPropTween = function(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {
+		_isFunction(end) && (end = end(index || 0, target, targets));
+		let currentValue = target[prop],
+			parsedStart = (start !== "get") ? start : !_isFunction(currentValue) ? currentValue : (funcParam ? target[(prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)])) ? prop : "get" + prop.substr(3)](funcParam) : target[prop]()),
+			setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
+			pt;
+		if (_isString(end)) {
+			if (~end.indexOf("random(")) {
+				end = _replaceRandom(end);
+			}
+			if (end.charAt(1) === "=") {
+				pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);
+				if (pt || pt === 0) { // to avoid isNaN, like if someone passes in a value like "!= whatever"
+					end = pt;
+				}
+			}
+		}
+		if (!optional || parsedStart !== end || _forceAllPropTweens) {
+			if (!isNaN(parsedStart * end) && end !== "") { // fun fact: any number multiplied by "" is evaluated as the number 0!
+				pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof(currentValue) === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
+				funcParam && (pt.fp = funcParam);
+				modifier && pt.modifier(modifier, this, target);
+				return (this._pt = pt);
+			}
+			!currentValue && !(prop in target) && _missingPlugin(prop, end);
+			return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
+		}
+	},
+	//creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with "random()" in them. It does NOT process relative values.
+	_processVars = (vars, index, target, targets, tween) => {
+		_isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));
+		if (!_isObject(vars) || (vars.style && vars.nodeType) || _isArray(vars) || _isTypedArray(vars)) {
+			return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
+		}
+		let copy = {},
+			p;
+		for (p in vars) {
+			copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
+		}
+		return copy;
+	},
+	_checkPlugin = (property, vars, tween, index, target, targets) => {
+		let plugin, pt, ptLookup, i;
+		if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
+			tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);
+			if (tween !== _quickTween) {
+				ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.
+				i = plugin._props.length;
+				while (i--) {
+					ptLookup[plugin._props[i]] = pt;
+				}
+			}
+		}
+		return plugin;
+	},
+	_overwritingTween, //store a reference temporarily so we can avoid overwriting itself.
+	_forceAllPropTweens,
+	_initTween = (tween, time, tTime) => {
+		let vars = tween.vars,
+			{ ease, startAt, immediateRender, lazy, onUpdate, runBackwards, yoyoEase, keyframes, autoRevert } = vars,
+			dur = tween._dur,
+			prevStartAt = tween._startAt,
+			targets = tween._targets,
+			parent = tween.parent,
+			//when a stagger (or function-based duration/delay) is on a Tween instance, we create a nested timeline which means that the "targets" of that tween don't reflect the parent. This function allows us to discern when it's a nested tween and in that case, return the full targets array so that function-based values get calculated properly. Also remember that if the tween has a stagger AND keyframes, it could be multiple levels deep which is why we store the targets Array in the vars of the timeline.
+			fullTargets = (parent && parent.data === "nested") ? parent.vars.targets : targets,
+			autoOverwrite = (tween._overwrite === "auto") && !_suppressOverwrites,
+			tl = tween.timeline,
+			cleanVars, i, p, pt, target, hasPriority, gsData, harness, plugin, ptLookup, index, harnessVars, overwritten;
+		tl && (!keyframes || !ease) && (ease = "none");
+		tween._ease = _parseEase(ease, _defaults.ease);
+		tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;
+		if (yoyoEase && tween._yoyo && !tween._repeat) { //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.
+			yoyoEase = tween._yEase;
+			tween._yEase = tween._ease;
+			tween._ease = yoyoEase;
+		}
+		tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.
+		if (!tl || (keyframes && !vars.stagger)) { //if there's an internal timeline, skip all the parsing because we passed that task down the chain.
+			harness = targets[0] ? _getCache(targets[0]).harness : 0;
+			harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.
+			cleanVars = _copyExcluding(vars, _reservedProps);
+			if (prevStartAt) {
+				prevStartAt._zTime < 0 && prevStartAt.progress(1); // in case it's a lazy startAt that hasn't rendered yet.
+				(time < 0 && runBackwards && immediateRender && !autoRevert) ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig); // if it's a "startAt" (not "from()" or runBackwards: true), we only need to do a shallow revert (keep transforms cached in CSSPlugin)
+				// don't just _removeFromParent(prevStartAt.render(-1, true)) because that'll leave inline styles. We're creating a new _startAt for "startAt" tweens that re-capture things to ensure that if the pre-tween values changed since the tween was created, they're recorded.
+				prevStartAt._lazy = 0;
+			}
+			if (startAt) {
+				_removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({data: "isStart", overwrite: false, parent: parent, immediateRender: true, lazy: !prevStartAt && _isNotFalse(lazy), startAt: null, delay: 0, onUpdate: onUpdate && (() => _callback(tween, "onUpdate")), stagger: 0}, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);
+				tween._startAt._dp = 0; // don't allow it to get put back into root timeline! Like when revert() is called and totalTime() gets set.
+				tween._startAt._sat = tween; // used in globalTime(). _sat stands for _startAtTween
+				(time < 0 && (_reverting || (!immediateRender && !autoRevert))) && tween._startAt.revert(_revertConfigNoKill); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.
+				if (immediateRender) {
+					if (dur && time <= 0 && tTime <= 0) { // check tTime here because in the case of a yoyo tween whose playhead gets pushed to the end like tween.progress(1), we should allow it through so that the onComplete gets fired properly.
+						time && (tween._zTime = time);
+						return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
+					}
+				}
+			} else if (runBackwards && dur) {
+				//from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
+				if (!prevStartAt) {
+					time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0
+					p = _setDefaults({
+						overwrite: false,
+						data: "isFromStart", //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
+						lazy: immediateRender && !prevStartAt && _isNotFalse(lazy),
+						immediateRender: immediateRender, //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
+						stagger: 0,
+						parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y: gsap.utils.wrap([-100,100]), stagger: 0.5})
+					}, cleanVars);
+					harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})
+					_removeFromParent(tween._startAt = Tween.set(targets, p));
+					tween._startAt._dp = 0; // don't allow it to get put back into root timeline!
+					tween._startAt._sat = tween; // used in globalTime()
+					(time < 0) && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));
+					tween._zTime = time;
+					if (!immediateRender) {
+						_initTween(tween._startAt, _tinyNum, _tinyNum); //ensures that the initial values are recorded
+					} else if (!time) {
+						return;
+					}
+				}
+			}
+			tween._pt = tween._ptCache = 0;
+			lazy = (dur && _isNotFalse(lazy)) || (lazy && !dur);
+			for (i = 0; i < targets.length; i++) {
+				target = targets[i];
+				gsData = target._gsap || _harness(targets)[i]._gsap;
+				tween._ptLookup[i] = ptLookup = {};
+				_lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)
+				index = fullTargets === targets ? i : fullTargets.indexOf(target);
+				if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
+					tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);
+					plugin._props.forEach(name => {ptLookup[name] = pt;});
+					plugin.priority && (hasPriority = 1);
+				}
+				if (!harness || harnessVars) {
+					for (p in cleanVars) {
+						if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
+							plugin.priority && (hasPriority = 1);
+						} else {
+							ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
+						}
+					}
+				}
+				tween._op && tween._op[i] && tween.kill(target, tween._op[i]);
+				if (autoOverwrite && tween._pt) {
+					_overwritingTween = tween;
+					_globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time)); // make sure the overwriting doesn't overwrite THIS tween!!!
+					overwritten = !tween.parent;
+					_overwritingTween = 0;
+				}
+				tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
+			}
+			hasPriority && _sortPropTweensByPriority(tween);
+			tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.
+		}
+		tween._onUpdate = onUpdate;
+		tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.
+		(keyframes && time <= 0) && tl.render(_bigNum, true, true); // if there's a 0% keyframe, it'll render in the "before" state for any staggered/delayed animations thus when the following tween initializes, it'll use the "before" state instead of the "after" state as the initial values.
+	},
+	_updatePropTweens = (tween, property, value, start, startIsRelative, ratio, time, skipRecursion) => {
+		let ptCache = ((tween._pt && tween._ptCache) || (tween._ptCache = {}))[property],
+			pt, rootPT, lookup, i;
+		if (!ptCache) {
+			ptCache = tween._ptCache[property] = [];
+			lookup = tween._ptLookup;
+			i = tween._targets.length;
+			while (i--) {
+				pt = lookup[i][property];
+				if (pt && pt.d && pt.d._pt) { // it's a plugin, so find the nested PropTween
+					pt = pt.d._pt;
+					while (pt && pt.p !== property && pt.fp !== property) { // "fp" is functionParam for things like setting CSS variables which require .setProperty("--var-name", value)
+						pt = pt._next;
+					}
+				}
+				if (!pt) { // there is no PropTween associated with that property, so we must FORCE one to be created and ditch out of this
+					// if the tween has other properties that already rendered at new positions, we'd normally have to rewind to put them back like tween.render(0, true) before forcing an _initTween(), but that can create another edge case like tweening a timeline's progress would trigger onUpdates to fire which could move other things around. It's better to just inform users that .resetTo() should ONLY be used for tweens that already have that property. For example, you can't gsap.to(...{ y: 0 }) and then tween.restTo("x", 200) for example.
+					_forceAllPropTweens = 1; // otherwise, when we _addPropTween() and it finds no change between the start and end values, it skips creating a PropTween (for efficiency...why tween when there's no difference?) but in this case we NEED that PropTween created so we can edit it.
+					tween.vars[property] = "+=0";
+					_initTween(tween, time);
+					_forceAllPropTweens = 0;
+					return skipRecursion ? _warn(property + " not eligible for reset") : 1; // if someone tries to do a quickTo() on a special property like borderRadius which must get split into 4 different properties, that's not eligible for .resetTo().
+				}
+				ptCache.push(pt);
+			}
+		}
+		i = ptCache.length;
+		while (i--) {
+			rootPT = ptCache[i];
+			pt = rootPT._pt || rootPT; // complex values may have nested PropTweens. We only accommodate the FIRST value.
+			pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;
+			pt.c = value - pt.s;
+			rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e)); // mainly for CSSPlugin (end value)
+			rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b));          // (beginning value)
+		}
+	},
+	_addAliasesToVars = (targets, vars) => {
+		let harness = targets[0] ? _getCache(targets[0]).harness : 0,
+			propertyAliases = (harness && harness.aliases),
+			copy, p, i, aliases;
+		if (!propertyAliases) {
+			return vars;
+		}
+		copy = _merge({}, vars);
+		for (p in propertyAliases) {
+			if (p in copy) {
+				aliases = propertyAliases[p].split(",");
+				i = aliases.length;
+				while(i--) {
+					copy[aliases[i]] = copy[p];
+				}
+			}
+
+		}
+		return copy;
+	},
+	// parses multiple formats, like {"0%": {x: 100}, {"50%": {x: -20}} and { x: {"0%": 100, "50%": -20} }, and an "ease" can be set on any object. We populate an "allProps" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a "t" (time), "v", (value), and "e" (ease) property. This allows us to piece together a timeline later.
+	_parseKeyframe = (prop, obj, allProps, easeEach) => {
+		let ease = obj.ease || easeEach || "power1.inOut",
+			p, a;
+		if (_isArray(obj)) {
+			a = allProps[prop] || (allProps[prop] = []);
+			// t = time (out of 100), v = value, e = ease
+			obj.forEach((value, i) => a.push({t: i / (obj.length - 1) * 100, v: value, e: ease}));
+		} else {
+			for (p in obj) {
+				a = allProps[p] || (allProps[p] = []);
+				p === "ease" || a.push({t: parseFloat(prop), v: obj[p], e: ease});
+			}
+		}
+	},
+	_parseFuncOrString = (value, tween, i, target, targets) => (_isFunction(value) ? value.call(tween, i, target, targets) : (_isString(value) && ~value.indexOf("random(")) ? _replaceRandom(value) : value),
+	_staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",
+	_staggerPropsToSkip = {};
+_forEachName(_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger", name => _staggerPropsToSkip[name] = 1);
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * TWEEN
+ * --------------------------------------------------------------------------------------
+ */
+
+class Tween extends Animation {
+
+	constructor(targets, vars, position, skipInherit) {
+		if (typeof(vars) === "number") {
+			position.duration = vars;
+			vars = position;
+			position = null;
+		}
+		super(skipInherit ? vars : _inheritDefaults(vars));
+		let { duration, delay, immediateRender, stagger, overwrite, keyframes, defaults, scrollTrigger, yoyoEase } = this.vars,
+			parent = vars.parent || _globalTimeline,
+			parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : ("length" in vars)) ? [targets] : toArray(targets), // edge case: someone might try animating the "length" of an object with a "length" property that's initially set to 0 so don't interpret that as an empty Array-like object.
+			tl, i, copy, l, p, curTarget, staggerFunc, staggerVarsToMerge;
+		this._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://gsap.com", !_config.nullTargetWarn) || [];
+		this._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property
+		this._overwrite = overwrite;
+		if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
+			vars = this.vars;
+			tl = this.timeline = new Timeline({data: "nested", defaults: defaults || {}, targets: parent && parent.data === "nested" ? parent.vars.targets : parsedTargets}); // we need to store the targets because for staggers and keyframes, we end up creating an individual tween for each but function-based values need to know the index and the whole Array of targets.
+			tl.kill();
+			tl.parent = tl._dp = this;
+			tl._start = 0;
+			if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
+				l = parsedTargets.length;
+				staggerFunc = stagger && distribute(stagger);
+				if (_isObject(stagger)) { //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.
+					for (p in stagger) {
+						if (~_staggerTweenProps.indexOf(p)) {
+							staggerVarsToMerge || (staggerVarsToMerge = {});
+							staggerVarsToMerge[p] = stagger[p];
+						}
+					}
+				}
+				for (i = 0; i < l; i++) {
+					copy = _copyExcluding(vars, _staggerPropsToSkip);
+					copy.stagger = 0;
+					yoyoEase && (copy.yoyoEase = yoyoEase);
+					staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
+					curTarget = parsedTargets[i];
+					//don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.
+					copy.duration = +_parseFuncOrString(duration, this, i, curTarget, parsedTargets);
+					copy.delay = (+_parseFuncOrString(delay, this, i, curTarget, parsedTargets) || 0) - this._delay;
+					if (!stagger && l === 1 && copy.delay) { // if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.
+						this._delay = delay = copy.delay;
+						this._start += delay;
+						copy.delay = 0;
+					}
+					tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);
+					tl._ease = _easeMap.none;
+				}
+				tl.duration() ? (duration = delay = 0) : (this.timeline = 0); // if the timeline's duration is 0, we don't need a timeline internally!
+			} else if (keyframes) {
+				_inheritDefaults(_setDefaults(tl.vars.defaults, {ease:"none"}));
+				tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
+				let time = 0,
+					a, kf, v;
+				if (_isArray(keyframes)) {
+					keyframes.forEach(frame => tl.to(parsedTargets, frame, ">"));
+					tl.duration(); // to ensure tl._dur is cached because we tap into it for performance purposes in the render() method.
+				} else {
+					copy = {};
+					for (p in keyframes) {
+						p === "ease" || p === "easeEach" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
+					}
+					for (p in copy) {
+						a = copy[p].sort((a, b) => a.t - b.t);
+						time = 0;
+						for (i = 0; i < a.length; i++) {
+							kf = a[i];
+							v = {ease: kf.e, duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration};
+							v[p] = kf.v;
+							tl.to(parsedTargets, v, time);
+							time += v.duration;
+						}
+					}
+					tl.duration() < duration && tl.to({}, {duration: duration - tl.duration()}); // in case keyframes didn't go to 100%
+				}
+			}
+			duration || this.duration((duration = tl.duration()));
+
+		} else {
+			this.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)
+		}
+
+		if (overwrite === true && !_suppressOverwrites) {
+			_overwritingTween = this;
+			_globalTimeline.killTweensOf(parsedTargets);
+			_overwritingTween = 0;
+		}
+		_addToTimeline(parent, this, position);
+		vars.reversed && this.reverse();
+		vars.paused && this.paused(true);
+		if (immediateRender || (!duration && !keyframes && this._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(this) && parent.data !== "nested")) {
+			this._tTime = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
+			this.render(Math.max(0, -delay) || 0); //in case delay is negative
+		}
+		scrollTrigger && _scrollTrigger(this, scrollTrigger);
+	}
+
+	render(totalTime, suppressEvents, force) {
+		let prevTime = this._time,
+			tDur = this._tDur,
+			dur = this._dur,
+			isNegative = totalTime < 0,
+			tTime = (totalTime > tDur - _tinyNum && !isNegative) ? tDur : (totalTime < _tinyNum) ? 0 : totalTime,
+			time, pt, iteration, cycleDuration, prevIteration, isYoyo, ratio, timeline, yoyoEase;
+		if (!dur) {
+			_renderZeroDurationTween(this, totalTime, suppressEvents, force);
+		} else if (tTime !== this._tTime || !totalTime || force || (!this._initted && this._tTime) || (this._startAt && (this._zTime < 0) !== isNegative)) { //this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)
+			time = tTime;
+			timeline = this.timeline;
+			if (this._repeat) { //adjust the time for repeats and yoyos
+				cycleDuration = dur + this._rDelay;
+				if (this._repeat < -1 && isNegative) {
+					return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
+				}
+				time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)
+				if (tTime === tDur) { // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
+					iteration = this._repeat;
+					time = dur;
+				} else {
+					iteration = ~~(tTime / cycleDuration);
+					if (iteration && iteration === _roundPrecise(tTime / cycleDuration)) {
+						time = dur;
+						iteration--;
+					}
+					time > dur && (time = dur);
+				}
+				isYoyo = this._yoyo && (iteration & 1);
+				if (isYoyo) {
+					yoyoEase = this._yEase;
+					time = dur - time;
+				}
+				prevIteration = _animationCycle(this._tTime, cycleDuration);
+				if (time === prevTime && !force && this._initted && iteration === prevIteration) {
+					//could be during the repeatDelay part. No need to render and fire callbacks.
+					this._tTime = tTime;
+					return this;
+				}
+				if (iteration !== prevIteration) {
+					timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo);
+					//repeatRefresh functionality
+					if (this.vars.repeatRefresh && !isYoyo && !this._lock && this._time !== cycleDuration && this._initted) { // this._time will === cycleDuration when we render at EXACTLY the end of an iteration. Without this condition, it'd often do the repeatRefresh render TWICE (again on the very next tick).
+						this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.
+						this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;
+					}
+				}
+			}
+
+			if (!this._initted) {
+				if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {
+					this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.
+					return this;
+				}
+				if (prevTime !== this._time && !(force && this.vars.repeatRefresh && iteration !== prevIteration)) { // rare edge case - during initialization, an onUpdate in the _startAt (.fromTo()) might force this tween to render at a different spot in which case we should ditch this render() call so that it doesn't revert the values. But we also don't want to dump if we're doing a repeatRefresh render!
+					return this;
+				}
+				if (dur !== this._dur) { // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.
+					return this.render(totalTime, suppressEvents, force);
+				}
+			}
+
+			this._tTime = tTime;
+			this._time = time;
+
+			if (!this._act && this._ts) {
+				this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.
+				this._lazy = 0;
+			}
+
+			this.ratio = ratio = (yoyoEase || this._ease)(time / dur);
+			if (this._from) {
+				this.ratio = ratio = 1 - ratio;
+			}
+
+			if (time && !prevTime && !suppressEvents && !iteration) {
+				_callback(this, "onStart");
+				if (this._tTime !== tTime) { // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
+					return this;
+				}
+			}
+			pt = this._pt;
+			while (pt) {
+				pt.r(ratio, pt.d);
+				pt = pt._next;
+			}
+			(timeline && timeline.render(totalTime < 0 ? totalTime : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force)) || (this._startAt && (this._zTime = totalTime));
+
+			if (this._onUpdate && !suppressEvents) {
+				isNegative && _rewindStartAt(this, totalTime, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
+				_callback(this, "onUpdate");
+			}
+
+			this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");
+
+			if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
+				isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);
+				(totalTime || !dur) && ((tTime === this._tDur && this._ts > 0) || (!tTime && this._ts < 0)) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.
+			    if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) { // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();
+					_callback(this, (tTime === tDur ? "onComplete" : "onReverseComplete"), true);
+					this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
+				}
+			}
+
+		}
+		return this;
+	}
+
+	targets() {
+		return this._targets;
+	}
+
+	invalidate(soft) { // "soft" gives us a way to clear out everything EXCEPT the recorded pre-"from" portion of from() tweens. Otherwise, for example, if you tween.progress(1).render(0, true true).invalidate(), the "from" values would persist and then on the next render, the from() tweens would initialize and the current value would match the "from" values, thus animate from the same value to the same value (no animation). We tap into this in ScrollTrigger's refresh() where we must push a tween to completion and then back again but honor its init state in case the tween is dependent on another tween further up on the page.
+		(!soft || !this.vars.runBackwards) && (this._startAt = 0);
+		this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;
+		this._ptLookup = [];
+		this.timeline && this.timeline.invalidate(soft);
+		return super.invalidate(soft);
+	}
+
+	resetTo(property, value, start, startIsRelative, skipRecursion) {
+		_tickerActive || _ticker.wake();
+		this._ts || this.play();
+		let time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),
+			ratio;
+		this._initted || _initTween(this, time);
+		ratio = this._ease(time / this._dur); // don't just get tween.ratio because it may not have rendered yet.
+		// possible future addition to allow an object with multiple values to update, like tween.resetTo({x: 100, y: 200}); At this point, it doesn't seem worth the added kb given the fact that most users will likely opt for the convenient gsap.quickTo() way of interacting with this method.
+		// if (_isObject(property)) { // performance optimization
+		// 	for (p in property) {
+		// 		if (_updatePropTweens(this, p, property[p], value ? value[p] : null, start, ratio, time)) {
+		// 			return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
+		// 		}
+		// 	}
+		// } else {
+			if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time, skipRecursion)) {
+				return this.resetTo(property, value, start, startIsRelative, 1); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
+			}
+		//}
+		_alignPlayhead(this, 0);
+		this.parent || _addLinkedListItem(this._dp, this, "_first", "_last", this._dp._sort ? "_start" : 0);
+		return this.render(0);
+	}
+
+	kill(targets, vars = "all") {
+		if (!targets && (!vars || vars === "all")) {
+			this._lazy = this._pt = 0;
+			return this.parent ? _interrupt(this) : this;
+		}
+		if (this.timeline) {
+			let tDur = this.timeline.totalDuration();
+			this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweening, interrupt.
+			this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.
+			return this;
+		}
+		let parsedTargets = this._targets,
+			killingTargets = targets ? toArray(targets) : parsedTargets,
+			propTweenLookup = this._ptLookup,
+			firstPT = this._pt,
+			overwrittenProps, curLookup, curOverwriteProps, props, p, pt, i;
+		if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
+			vars === "all" && (this._pt = 0);
+			return _interrupt(this);
+		}
+		overwrittenProps = this._op = this._op || [];
+		if (vars !== "all") { //so people can pass in a comma-delimited list of property names
+			if (_isString(vars)) {
+				p = {};
+				_forEachName(vars, name => p[name] = 1);
+				vars = p;
+			}
+			vars = _addAliasesToVars(parsedTargets, vars);
+		}
+		i = parsedTargets.length;
+		while (i--) {
+			if (~killingTargets.indexOf(parsedTargets[i])) {
+				curLookup = propTweenLookup[i];
+				if (vars === "all") {
+					overwrittenProps[i] = vars;
+					props = curLookup;
+					curOverwriteProps = {};
+				} else {
+					curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
+					props = vars;
+				}
+				for (p in props) {
+					pt = curLookup && curLookup[p];
+					if (pt) {
+						if (!("kill" in pt.d) || pt.d.kill(p) === true) {
+							_removeLinkedListItem(this, pt, "_pt");
+						}
+						delete curLookup[p];
+					}
+					if (curOverwriteProps !== "all") {
+						curOverwriteProps[p] = 1;
+					}
+				}
+			}
+		}
+		this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.
+		return this;
+	}
+
+
+	static to(targets, vars) {
+		return new Tween(targets, vars, arguments[2]);
+	}
+
+	static from(targets, vars) {
+		return _createTweenType(1, arguments);
+	}
+
+	static delayedCall(delay, callback, params, scope) {
+		return new Tween(callback, 0, {immediateRender:false, lazy:false, overwrite:false, delay:delay, onComplete:callback, onReverseComplete:callback, onCompleteParams:params, onReverseCompleteParams:params, callbackScope:scope}); // we must use onReverseComplete too for things like timeline.add(() => {...}) which should be triggered in BOTH directions (forward and reverse)
+	}
+
+	static fromTo(targets, fromVars, toVars) {
+		return _createTweenType(2, arguments);
+	}
+
+	static set(targets, vars) {
+		vars.duration = 0;
+		vars.repeatDelay || (vars.repeat = 0);
+		return new Tween(targets, vars);
+	}
+
+	static killTweensOf(targets, props, onlyActive) {
+		return _globalTimeline.killTweensOf(targets, props, onlyActive);
+	}
+}
+
+_setDefaults(Tween.prototype, {_targets:[], _lazy:0, _startAt:0, _op:0, _onInit:0});
+
+//add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)
+// _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {
+// 	Tween.prototype[name] = function() {
+// 		let tl = new Timeline();
+// 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));
+// 	}
+// });
+
+//for backward compatibility. Leverage the timeline calls.
+_forEachName("staggerTo,staggerFrom,staggerFromTo", name => {
+	Tween[name] = function() {
+		let tl = new Timeline(),
+			params = _slice.call(arguments, 0);
+		params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
+		return tl[name].apply(tl, params);
+	};
+});
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * PROPTWEEN
+ * --------------------------------------------------------------------------------------
+ */
+let _setterPlain = (target, property, value) => target[property] = value,
+	_setterFunc = (target, property, value) => target[property](value),
+	_setterFuncWithParam = (target, property, value, data) => target[property](data.fp, value),
+	_setterAttribute = (target, property, value) => target.setAttribute(property, value),
+	_getSetter = (target, property) => _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain,
+	_renderPlain = (ratio, data) => data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data),
+	_renderBoolean = (ratio, data) => data.set(data.t, data.p, !!(data.s + data.c * ratio), data),
+	_renderComplexString = function(ratio, data) {
+		let pt = data._pt,
+			s = "";
+		if (!ratio && data.b) { //b = beginning string
+			s = data.b;
+		} else if (ratio === 1 && data.e) { //e = ending string
+			s = data.e;
+		} else {
+			while (pt) {
+				s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : (Math.round((pt.s + pt.c * ratio) * 10000) / 10000)) + s; //we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.
+				pt = pt._next;
+			}
+			s += data.c; //we use the "c" of the PropTween to store the final chunk of non-numeric text.
+		}
+		data.set(data.t, data.p, s, data);
+	},
+	_renderPropTweens = function(ratio, data) {
+		let pt = data._pt;
+		while (pt) {
+			pt.r(ratio, pt.d);
+			pt = pt._next;
+		}
+	},
+	_addPluginModifier = function(modifier, tween, target, property) {
+		let pt = this._pt,
+			next;
+		while (pt) {
+			next = pt._next;
+			pt.p === property && pt.modifier(modifier, tween, target);
+			pt = next;
+		}
+	},
+	_killPropTweensOf = function(property) {
+		let pt = this._pt,
+			hasNonDependentRemaining, next;
+		while (pt) {
+			next = pt._next;
+			if ((pt.p === property && !pt.op) || pt.op === property) {
+				_removeLinkedListItem(this, pt, "_pt");
+			} else if (!pt.dep) {
+				hasNonDependentRemaining = 1;
+			}
+			pt = next;
+		}
+		return !hasNonDependentRemaining;
+	},
+	_setterWithModifier = (target, property, value, data) => {
+		data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
+	},
+	_sortPropTweensByPriority = parent => {
+		let pt = parent._pt,
+			next, pt2, first, last;
+		//sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)
+		while (pt) {
+			next = pt._next;
+			pt2 = first;
+			while (pt2 && pt2.pr > pt.pr) {
+				pt2 = pt2._next;
+			}
+			if ((pt._prev = pt2 ? pt2._prev : last)) {
+				pt._prev._next = pt;
+			} else {
+				first = pt;
+			}
+			if ((pt._next = pt2)) {
+				pt2._prev = pt;
+			} else {
+				last = pt;
+			}
+			pt = next;
+		}
+		parent._pt = first;
+	};
+
+//PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)
+class PropTween {
+
+	constructor(next, target, prop, start, change, renderer, data, setter, priority) {
+		this.t = target;
+		this.s = start;
+		this.c = change;
+		this.p = prop;
+		this.r = renderer || _renderPlain;
+		this.d = data || this;
+		this.set = setter || _setterPlain;
+		this.pr = priority || 0;
+		this._next = next;
+		if (next) {
+			next._prev = this;
+		}
+	}
+
+	modifier(func, tween, target) {
+		this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)
+		this.set = _setterWithModifier;
+		this.m = func;
+		this.mt = target; //modifier target
+		this.tween = tween;
+	}
+}
+
+
+
+//Initialization tasks
+_forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", name => _reservedProps[name] = 1);
+_globals.TweenMax = _globals.TweenLite = Tween;
+_globals.TimelineLite = _globals.TimelineMax = Timeline;
+_globalTimeline = new Timeline({sortChildren: false, defaults: _defaults, autoRemoveChildren: true, id:"root", smoothChildTiming: true});
+_config.stringFilter = _colorStringFilter;
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+let _media = [],
+	_listeners = {},
+	_emptyArray = [],
+	_lastMediaTime = 0,
+	_contextID = 0,
+	_dispatch = type => (_listeners[type] || _emptyArray).map(f => f()),
+	_onMediaChange = () => {
+		let time = Date.now(),
+			matches = [];
+		if (time - _lastMediaTime > 2) {
+			_dispatch("matchMediaInit");
+			_media.forEach(c => {
+				let queries = c.queries,
+					conditions = c.conditions,
+					match, p, anyMatch, toggled;
+				for (p in queries) {
+					match = _win.matchMedia(queries[p]).matches; // Firefox doesn't update the "matches" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.
+					match && (anyMatch = 1);
+					if (match !== conditions[p]) {
+						conditions[p] = match;
+						toggled = 1;
+					}
+				}
+				if (toggled) {
+					c.revert();
+					anyMatch && matches.push(c);
+				}
+			});
+			_dispatch("matchMediaRevert");
+			matches.forEach(c => c.onMatch(c, func => c.add(null, func)));
+			_lastMediaTime = time;
+			_dispatch("matchMedia");
+		}
+	};
+
+class Context {
+	constructor(func, scope) {
+		this.selector = scope && selector(scope);
+		this.data = [];
+		this._r = []; // returned/cleanup functions
+		this.isReverted = false;
+		this.id = _contextID++; // to work around issues that frameworks like Vue cause by making things into Proxies which make it impossible to do something like _media.indexOf(this) because "this" would no longer refer to the Context instance itself - it'd refer to a Proxy! We needed a way to identify the context uniquely
+		func && this.add(func);
+	}
+	add(name, func, scope) {
+		// possible future addition if we need the ability to add() an animation to a context and for whatever reason cannot create that animation inside of a context.add(() => {...}) function.
+		// if (name && _isFunction(name.revert)) {
+		// 	this.data.push(name);
+		// 	return (name._ctx = this);
+		// }
+		if (_isFunction(name)) {
+			scope = func;
+			func = name;
+			name = _isFunction;
+		}
+		let self = this,
+			f = function() {
+				let prev = _context,
+					prevSelector = self.selector,
+					result;
+				prev && prev !== self && prev.data.push(self);
+				scope && (self.selector = selector(scope));
+				_context = self;
+				result = func.apply(self, arguments);
+				_isFunction(result) && self._r.push(result);
+				_context = prev;
+				self.selector = prevSelector;
+				self.isReverted = false;
+				return result;
+			};
+		self.last = f;
+		return name === _isFunction ? f(self, func => self.add(null, func)) : name ? (self[name] = f) : f;
+	}
+	ignore(func) {
+		let prev = _context;
+		_context = null;
+		func(this);
+		_context = prev;
+	}
+	getTweens() {
+		let a = [];
+		this.data.forEach(e => (e instanceof Context) ? a.push(...e.getTweens()) : (e instanceof Tween) && !(e.parent && e.parent.data === "nested") && a.push(e));
+		return a;
+	}
+	clear() {
+		this._r.length = this.data.length = 0;
+	}
+	kill(revert, matchMedia) {
+		if (revert) {
+			let tweens = this.getTweens(),
+				i = this.data.length,
+				t;
+			while (i--) { // Flip plugin tweens are very different in that they should actually be pushed to their end. The plugin replaces the timeline's .revert() method to do exactly that. But we also need to remove any of those nested tweens inside the flip timeline so that they don't get individually reverted.
+				t = this.data[i];
+				if (t.data === "isFlip") {
+					t.revert();
+					t.getChildren(true, true, false).forEach(tween => tweens.splice(tweens.indexOf(tween), 1));
+				}
+			}
+			// save as an object so that we can cache the globalTime for each tween to optimize performance during the sort
+			tweens.map(t => { return {g: t._dur || t._delay || (t._sat && !t._sat.vars.immediateRender) ? t.globalTime(0) : -Infinity, t}}).sort((a, b) => b.g - a.g || -Infinity).forEach(o => o.t.revert(revert)); // note: all of the _startAt tweens should be reverted in reverse order that they were created, and they'll all have the same globalTime (-1) so the " || -1" in the sort keeps the order properly.
+			i = this.data.length;
+			while (i--) { // make sure we loop backwards so that, for example, SplitTexts that were created later on the same element get reverted first
+				t = this.data[i];
+				if (t instanceof Timeline) {
+					if (t.data !== "nested") {
+						t.scrollTrigger && t.scrollTrigger.revert();
+						t.kill(); // don't revert() the timeline because that's duplicating efforts since we already reverted all the tweens
+					}
+				} else {
+					!(t instanceof Tween) && t.revert && t.revert(revert);
+				}
+			}
+			this._r.forEach(f => f(revert, this));
+			this.isReverted = true;
+		} else {
+			this.data.forEach(e => e.kill && e.kill());
+		}
+		this.clear();
+		if (matchMedia) {
+			let i = _media.length;
+			while (i--) { // previously, we checked _media.indexOf(this), but some frameworks like Vue enforce Proxy objects that make it impossible to get the proper result that way, so we must use a unique ID number instead.
+				_media[i].id === this.id && _media.splice(i, 1);
+			}
+		}
+	}
+	revert(config) {
+		this.kill(config || {});
+	}
+}
+
+
+
+
+class MatchMedia {
+	constructor(scope) {
+		this.contexts = [];
+		this.scope = scope;
+		_context && _context.data.push(this);
+	}
+	add(conditions, func, scope) {
+		_isObject(conditions) || (conditions = {matches: conditions});
+		let context = new Context(0, scope || this.scope),
+			cond = context.conditions = {},
+			mq, p, active;
+		_context && !context.selector && (context.selector = _context.selector); // in case a context is created inside a context. Like a gsap.matchMedia() that's inside a scoped gsap.context()
+		this.contexts.push(context);
+		func = context.add("onMatch", func);
+		context.queries = conditions;
+		for (p in conditions) {
+			if (p === "all") {
+				active = 1;
+			} else {
+				mq = _win.matchMedia(conditions[p]);
+				if (mq) {
+					_media.indexOf(context) < 0 && _media.push(context);
+					(cond[p] = mq.matches) && (active = 1);
+					mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener("change", _onMediaChange);
+				}
+			}
+		}
+		active && func(context, f => context.add(null, f));
+		return this;
+	}
+	// refresh() {
+	// 	let time = _lastMediaTime,
+	// 		media = _media;
+	// 	_lastMediaTime = -1;
+	// 	_media = this.contexts;
+	// 	_onMediaChange();
+	// 	_lastMediaTime = time;
+	// 	_media = media;
+	// }
+	revert(config) {
+		this.kill(config || {});
+	}
+	kill(revert) {
+		this.contexts.forEach(c => c.kill(revert, true));
+	}
+}
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * GSAP
+ * --------------------------------------------------------------------------------------
+ */
+const _gsap = {
+	registerPlugin(...args) {
+		args.forEach(config => _createPlugin(config));
+	},
+	timeline(vars) {
+		return new Timeline(vars);
+	},
+	getTweensOf(targets, onlyActive) {
+		return _globalTimeline.getTweensOf(targets, onlyActive);
+	},
+	getProperty(target, property, unit, uncache) {
+		_isString(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in
+		let getter = _getCache(target || {}).get,
+			format = unit ? _passThrough : _numericIfPossible;
+		unit === "native" && (unit = "");
+		return !target ? target : !property ? (property, unit, uncache) => format(((_plugins[property] && _plugins[property].get) || getter)(target, property, unit, uncache)) : format(((_plugins[property] && _plugins[property].get) || getter)(target, property, unit, uncache));
+	},
+	quickSetter(target, property, unit) {
+		target = toArray(target);
+		if (target.length > 1) {
+			let setters = target.map(t => gsap.quickSetter(t, property, unit)),
+				l = setters.length;
+			return value => {
+				let i = l;
+				while(i--) {
+					setters[i](value);
+				}
+			}
+		}
+		target = target[0] || {};
+		let Plugin = _plugins[property],
+			cache = _getCache(target),
+			p = (cache.harness && (cache.harness.aliases || {})[property]) || property, // in case it's an alias, like "rotate" for "rotation".
+			setter = Plugin ? value => {
+				let p = new Plugin();
+				_quickTween._pt = 0;
+				p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
+				p.render(1, p);
+				_quickTween._pt && _renderPropTweens(1, _quickTween);
+			} : cache.set(target, p);
+		return Plugin ? setter : value => setter(target, p, unit ? value + unit : value, cache, 1);
+	},
+	quickTo(target, property, vars) {
+		let tween = gsap.to(target, _merge({[property]: "+=0.1", paused: true}, vars || {})),
+			func = (value, start, startIsRelative) => tween.resetTo(property, value, start, startIsRelative);
+		func.tween = tween;
+		return func;
+	},
+	isTweening(targets) {
+		return _globalTimeline.getTweensOf(targets, true).length > 0;
+	},
+	defaults(value) {
+		value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));
+		return _mergeDeep(_defaults, value || {});
+	},
+	config(value) {
+		return _mergeDeep(_config, value || {});
+	},
+	registerEffect({name, effect, plugins, defaults, extendTimeline}) {
+		(plugins || "").split(",").forEach(pluginName => pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin."));
+		_effects[name] = (targets, vars, tl) => effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);
+		if (extendTimeline) {
+			Timeline.prototype[name] = function(targets, vars, position) {
+				return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
+			};
+		}
+	},
+	registerEase(name, ease) {
+		_easeMap[name] = _parseEase(ease);
+	},
+	parseEase(ease, defaultEase) {
+		return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
+	},
+	getById(id) {
+		return _globalTimeline.getById(id);
+	},
+	exportRoot(vars = {}, includeDelayedCalls) {
+		let tl = new Timeline(vars),
+			child, next;
+		tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);
+		_globalTimeline.remove(tl);
+		tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).
+		tl._time = tl._tTime = _globalTimeline._time;
+		child = _globalTimeline._first;
+		while (child) {
+			next = child._next;
+			if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
+				_addToTimeline(tl, child, child._start - child._delay);
+			}
+			child = next;
+		}
+		_addToTimeline(_globalTimeline, tl, 0);
+		return tl;
+	},
+	context: (func, scope) => func ? new Context(func, scope) : _context,
+	matchMedia: scope => new MatchMedia(scope),
+	matchMediaRefresh: () => _media.forEach(c => {
+		let cond = c.conditions,
+			found, p;
+		for (p in cond) {
+			if (cond[p]) {
+				cond[p] = false;
+				found = 1;
+			}
+		}
+		found && c.revert();
+	}) || _onMediaChange(),
+	addEventListener(type, callback) {
+		let a = _listeners[type] || (_listeners[type] = []);
+		~a.indexOf(callback) || a.push(callback);
+	},
+	removeEventListener(type, callback) {
+		let a = _listeners[type],
+			i = a && a.indexOf(callback);
+		i >= 0 && a.splice(i, 1);
+	},
+	utils: { wrap, wrapYoyo, distribute, random, snap, normalize, getUnit, clamp, splitColor, toArray, selector, mapRange, pipe, unitize, interpolate, shuffle },
+	install: _install,
+	effects: _effects,
+	ticker: _ticker,
+	updateRoot: Timeline.updateRoot,
+	plugins: _plugins,
+	globalTimeline: _globalTimeline,
+	core: {PropTween, globals: _addGlobal, Tween, Timeline, Animation, getCache: _getCache, _removeLinkedListItem, reverting: () => _reverting, context: toAdd => {if (toAdd && _context) { _context.data.push(toAdd); toAdd._ctx = _context;} return _context; }, suppressOverwrites: value => _suppressOverwrites = value}
+};
+
+_forEachName("to,from,fromTo,delayedCall,set,killTweensOf", name => _gsap[name] = Tween[name]);
+_ticker.add(Timeline.updateRoot);
+_quickTween = _gsap.to({}, {duration:0});
+
+
+
+
+// ---- EXTRA PLUGINS --------------------------------------------------------
+
+
+let _getPluginPropTween = (plugin, prop) => {
+		let pt = plugin._pt;
+		while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
+			pt = pt._next;
+		}
+		return pt;
+	},
+	_addModifiers = (tween, modifiers) => {
+			let	targets = tween._targets,
+				p, i, pt;
+			for (p in modifiers) {
+				i = targets.length;
+				while (i--) {
+					pt = tween._ptLookup[i][p];
+					if (pt && (pt = pt.d)) {
+						if (pt._pt) { // is a plugin
+							pt = _getPluginPropTween(pt, p);
+						}
+						pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
+					}
+				}
+			}
+	},
+	_buildModifierPlugin = (name, modifier) => {
+		return {
+			name: name,
+			rawVars: 1, //don't pre-process function-based values or "random()" strings.
+			init(target, vars, tween) {
+				tween._onInit = tween => {
+					let temp, p;
+					if (_isString(vars)) {
+						temp = {};
+						_forEachName(vars, name => temp[name] = 1); //if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.
+						vars = temp;
+					}
+					if (modifier) {
+						temp = {};
+						for (p in vars) {
+							temp[p] = modifier(vars[p]);
+						}
+						vars = temp;
+					}
+					_addModifiers(tween, vars);
+				};
+			}
+		};
+	};
+
+//register core plugins
+const gsap = _gsap.registerPlugin({
+		name:"attr",
+		init(target, vars, tween, index, targets) {
+			let p, pt, v;
+			this.tween = tween;
+			for (p in vars) {
+				v = target.getAttribute(p) || "";
+				pt = this.add(target, "setAttribute", (v || 0) + "", vars[p], index, targets, 0, 0, p);
+				pt.op = p;
+				pt.b = v; // record the beginning value so we can revert()
+				this._props.push(p);
+			}
+		},
+		render(ratio, data) {
+			let pt = data._pt;
+			while (pt) {
+				_reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d); // if reverting, go back to the original (pt.b)
+				pt = pt._next;
+			}
+		}
+	}, {
+		name:"endArray",
+		init(target, value) {
+			let i = value.length;
+			while (i--) {
+				this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);
+			}
+		}
+	},
+	_buildModifierPlugin("roundProps", _roundModifier),
+	_buildModifierPlugin("modifiers"),
+	_buildModifierPlugin("snap", snap)
+) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.
+
+Tween.version = Timeline.version = gsap.version = "3.12.5";
+_coreReady = 1;
+_windowExists() && _wake();
+
+const { Power0, Power1, Power2, Power3, Power4, Linear, Quad, Cubic, Quart, Quint, Strong, Elastic, Back, SteppedEase, Bounce, Sine, Expo, Circ } = _easeMap;
+
+export { Animation, Back, Bounce, Circ, Cubic, Elastic, Expo, GSCache, Linear, Power0, Power1, Power2, Power3, Power4, PropTween, Quad, Quart, Quint, Sine, SteppedEase, Strong, Timeline, Timeline as TimelineLite, Timeline as TimelineMax, Tween, Tween as TweenLite, Tween as TweenMax, _checkPlugin, _colorExp, _colorStringFilter, _config, _forEachName, _getCache, _getProperty, _getSetter, _isString, _isUndefined, _missingPlugin, _numExp, _numWithUnitExp, _parseRelative, _plugins, _relExp, _removeLinkedListItem, _renderComplexString, _replaceRandom, _round, _roundModifier, _setDefaults, _sortPropTweensByPriority, _ticker, clamp, gsap as default, distribute, getUnit, gsap, interpolate, mapRange, normalize, pipe, random, selector, shuffle, snap, splitColor, toArray, unitize, wrap, wrapYoyo };
diff --git a/dist/gsap-core.mjs b/dist/gsap-core.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..91311e0edcffab9234144c9877a8d8f7f500436c
--- /dev/null
+++ b/dist/gsap-core.mjs
@@ -0,0 +1,3253 @@
+/*!
+ * GSAP 3.12.5
+ * https://gsap.com
+ *
+ * @license Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let _config = {
+		autoSleep: 120,
+		force3D: "auto",
+		nullTargetWarn: 1,
+		units: {lineHeight:""}
+	},
+	_defaults = {
+		duration: .5,
+		overwrite: false,
+		delay: 0
+	},
+	_suppressOverwrites,
+	_reverting, _context,
+	_bigNum = 1e8,
+	_tinyNum = 1 / _bigNum,
+	_2PI = Math.PI * 2,
+	_HALF_PI = _2PI / 4,
+	_gsID = 0,
+	_sqrt = Math.sqrt,
+	_cos = Math.cos,
+	_sin = Math.sin,
+	_isString = value => typeof(value) === "string",
+	_isFunction = value => typeof(value) === "function",
+	_isNumber = value => typeof(value) === "number",
+	_isUndefined = value => typeof(value) === "undefined",
+	_isObject = value => typeof(value) === "object",
+	_isNotFalse = value => value !== false,
+	_windowExists = () => typeof(window) !== "undefined",
+	_isFuncOrString = value => _isFunction(value) || _isString(value),
+	_isTypedArray = (typeof ArrayBuffer === "function" && ArrayBuffer.isView) || function() {}, // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().
+	_isArray = Array.isArray,
+	_strictNumExp = /(?:-?\.?\d|\.)+/gi, //only numbers (including negatives and decimals) but NOT relative values.
+	_numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g, //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
+	_numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
+	_complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi, //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.
+	_relExp = /[+-]=-?[.\d]+/,
+	_delimitedValueExp = /[^,'"\[\]\s]+/gi, // previously /[#\-+.]*\b[a-z\d\-=+%.]+/gi but didn't catch special characters.
+	_unitExp = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,
+	_globalTimeline, _win, _coreInitted, _doc,
+	_globals = {},
+	_installScope = {},
+	_coreReady,
+	_install = scope => (_installScope = _merge(scope, _globals)) && gsap,
+	_missingPlugin = (property, value) => console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()"),
+	_warn = (message, suppress) => !suppress && console.warn(message),
+	_addGlobal = (name, obj) => (name && (_globals[name] = obj) && (_installScope && (_installScope[name] = obj))) || _globals,
+	_emptyFunc = () => 0,
+	_startAtRevertConfig = {suppressEvents: true, isStart: true, kill: false},
+	_revertConfigNoKill = {suppressEvents: true, kill: false},
+	_revertConfig = {suppressEvents: true},
+	_reservedProps = {},
+	_lazyTweens = [],
+	_lazyLookup = {},
+	_lastRenderedFrame,
+	_plugins = {},
+	_effects = {},
+	_nextGCFrame = 30,
+	_harnessPlugins = [],
+	_callbackNames = "",
+	_harness = targets => {
+		let target = targets[0],
+			harnessPlugin, i;
+		_isObject(target) || _isFunction(target) || (targets = [targets]);
+		if (!(harnessPlugin = (target._gsap || {}).harness)) { // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)
+			i = _harnessPlugins.length;
+			while (i-- && !_harnessPlugins[i].targetTest(target)) {	}
+			harnessPlugin = _harnessPlugins[i];
+		}
+		i = targets.length;
+		while (i--) {
+			(targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin)))) || targets.splice(i, 1);
+		}
+		return targets;
+	},
+	_getCache = target => target._gsap || _harness(toArray(target))[0]._gsap,
+	_getProperty = (target, property, v) => (v = target[property]) && _isFunction(v) ? target[property]() : (_isUndefined(v) && target.getAttribute && target.getAttribute(property)) || v,
+	_forEachName = (names, func) => ((names = names.split(",")).forEach(func)) || names, //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).
+	_round = value => Math.round(value * 100000) / 100000 || 0,
+	_roundPrecise = value => Math.round(value * 10000000) / 10000000 || 0, // increased precision mostly for timing values.
+	_parseRelative = (start, value) => {
+		let operator = value.charAt(0),
+			end = parseFloat(value.substr(2));
+		start = parseFloat(start);
+		return operator === "+" ? start + end : operator === "-" ? start - end : operator === "*" ? start * end : start / end;
+	},
+	_arrayContainsAny = (toSearch, toFind) => { //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.
+		let l = toFind.length,
+			i = 0;
+		for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) { }
+		return (i < l);
+	},
+	_lazyRender = () => {
+		let l = _lazyTweens.length,
+			a = _lazyTweens.slice(0),
+			i, tween;
+		_lazyLookup = {};
+		_lazyTweens.length = 0;
+		for (i = 0; i < l; i++) {
+			tween = a[i];
+			tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
+		}
+	},
+	_lazySafeRender = (animation, time, suppressEvents, force) => {
+		_lazyTweens.length && !_reverting && _lazyRender();
+		animation.render(time, suppressEvents, force || (_reverting && time < 0 && (animation._initted || animation._startAt)));
+		_lazyTweens.length && !_reverting && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
+	},
+	_numericIfPossible = value => {
+		let n = parseFloat(value);
+		return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;
+	},
+	_passThrough = p => p,
+	_setDefaults = (obj, defaults) => {
+		for (let p in defaults) {
+			(p in obj) || (obj[p] = defaults[p]);
+		}
+		return obj;
+	},
+	_setKeyframeDefaults = excludeDuration => (obj, defaults) => {
+		for (let p in defaults) {
+			(p in obj) || (p === "duration" && excludeDuration) || p === "ease" || (obj[p] = defaults[p]);
+		}
+	},
+	_merge = (base, toMerge) => {
+		for (let p in toMerge) {
+			base[p] = toMerge[p];
+		}
+		return base;
+	},
+	_mergeDeep = (base, toMerge) => {
+		for (let p in toMerge) {
+			p !== "__proto__" && p !== "constructor" && p !== "prototype" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);
+		}
+		return base;
+	},
+	_copyExcluding = (obj, excluding) => {
+		let copy = {},
+			p;
+		for (p in obj) {
+			(p in excluding) || (copy[p] = obj[p]);
+		}
+		return copy;
+	},
+	_inheritDefaults = vars => {
+		let parent = vars.parent || _globalTimeline,
+			func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;
+		if (_isNotFalse(vars.inherit)) {
+			while (parent) {
+				func(vars, parent.vars.defaults);
+				parent = parent.parent || parent._dp;
+			}
+		}
+		return vars;
+	},
+	_arraysMatch = (a1, a2) => {
+		let i = a1.length,
+			match = i === a2.length;
+		while (match && i-- && a1[i] === a2[i]) { }
+		return i < 0;
+	},
+	_addLinkedListItem = (parent, child, firstProp = "_first", lastProp = "_last", sortBy) => {
+		let prev = parent[lastProp],
+			t;
+		if (sortBy) {
+			t = child[sortBy];
+			while (prev && prev[sortBy] > t) {
+				prev = prev._prev;
+			}
+		}
+		if (prev) {
+			child._next = prev._next;
+			prev._next = child;
+		} else {
+			child._next = parent[firstProp];
+			parent[firstProp] = child;
+		}
+		if (child._next) {
+			child._next._prev = child;
+		} else {
+			parent[lastProp] = child;
+		}
+		child._prev = prev;
+		child.parent = child._dp = parent;
+		return child;
+	},
+	_removeLinkedListItem = (parent, child, firstProp = "_first", lastProp = "_last") => {
+		let prev = child._prev,
+			next = child._next;
+		if (prev) {
+			prev._next = next;
+		} else if (parent[firstProp] === child) {
+			parent[firstProp] = next;
+		}
+		if (next) {
+			next._prev = prev;
+		} else if (parent[lastProp] === child) {
+			parent[lastProp] = prev;
+		}
+		child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.
+	},
+	_removeFromParent = (child, onlyIfParentHasAutoRemove) => {
+		child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove && child.parent.remove(child);
+		child._act = 0;
+	},
+	_uncache = (animation, child) => {
+		if (animation && (!child || child._end > animation._dur || child._start < 0)) { // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)
+			let a = animation;
+			while (a) {
+				a._dirty = 1;
+				a = a.parent;
+			}
+		}
+		return animation;
+	},
+	_recacheAncestors = animation => {
+		let parent = animation.parent;
+		while (parent && parent.parent) { //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
+			parent._dirty = 1;
+			parent.totalDuration();
+			parent = parent.parent;
+		}
+		return animation;
+	},
+	_rewindStartAt = (tween, totalTime, suppressEvents, force) => tween._startAt && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : (tween.vars.immediateRender && !tween.vars.autoRevert) || tween._startAt.render(totalTime, true, force)),
+	_hasNoPausedAncestors = animation => !animation || (animation._ts && _hasNoPausedAncestors(animation.parent)),
+	_elapsedCycleDuration = animation => animation._repeat ? _animationCycle(animation._tTime, (animation = animation.duration() + animation._rDelay)) * animation : 0,
+	// feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.
+	_animationCycle = (tTime, cycleDuration) => {
+		let whole = Math.floor(tTime /= cycleDuration);
+		return tTime && (whole === tTime) ? whole - 1 : whole;
+	},
+	_parentToChildTotalTime = (parentTime, child) => (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : (child._dirty ? child.totalDuration() : child._tDur)),
+	_setEnd = animation => (animation._end = _roundPrecise(animation._start + ((animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum)) || 0))),
+	_alignPlayhead = (animation, totalTime) => { // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.
+		let parent = animation._dp;
+		if (parent && parent.smoothChildTiming && animation._ts) {
+			animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));
+			_setEnd(animation);
+			parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
+		}
+		return animation;
+	},
+	/*
+	_totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
+		let cycleDuration = duration + repeatDelay,
+			time = _round(clampedTotalTime % cycleDuration);
+		if (time > duration) {
+			time = duration;
+		}
+		return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
+	},
+	*/
+	_postAddChecks = (timeline, child) => {
+		let t;
+		if (child._time || (!child._dur && child._initted) || (child._start < timeline._time && (child._dur || !child.add))) { // in case, for example, the _start is moved on a tween that has already rendered, or if it's being inserted into a timeline BEFORE where the playhead is currently. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning. Special case: if it's a timeline (has .add() method) and no duration, we can skip rendering because the user may be populating it AFTER adding it to a parent timeline (unconventional, but possible, and we wouldn't want it to get removed if the parent's autoRemoveChildren is true).
+			t = _parentToChildTotalTime(timeline.rawTime(), child);
+			if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
+				child.render(t, true);
+			}
+		}
+		//if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.
+		if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
+			//in case any of the ancestors had completed but should now be enabled...
+			if (timeline._dur < timeline.duration()) {
+				t = timeline;
+				while (t._dp) {
+					(t.rawTime() >= 0) && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.
+					t = t._dp;
+				}
+			}
+			timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.
+		}
+	},
+	_addToTimeline = (timeline, child, position, skipChecks) => {
+		child.parent && _removeFromParent(child);
+		child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);
+		child._end = _roundPrecise(child._start + ((child.totalDuration() / Math.abs(child.timeScale())) || 0));
+		_addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);
+		_isFromOrFromStart(child) || (timeline._recent = child);
+		skipChecks || _postAddChecks(timeline, child);
+		timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime); // if the timeline is reversed and the new child makes it longer, we may need to adjust the parent's _start (push it back)
+		return timeline;
+	},
+	_scrollTrigger = (animation, trigger) => (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation),
+	_attemptInitTween = (tween, time, force, suppressEvents, tTime) => {
+		_initTween(tween, time, tTime);
+		if (!tween._initted) {
+			return 1;
+		}
+		if (!force && tween._pt && !_reverting && ((tween._dur && tween.vars.lazy !== false) || (!tween._dur && tween.vars.lazy)) && _lastRenderedFrame !== _ticker.frame) {
+			_lazyTweens.push(tween);
+			tween._lazy = [tTime, suppressEvents];
+			return 1;
+		}
+	},
+	_parentPlayheadIsBeforeStart = ({parent}) => parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent)), // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0
+	_isFromOrFromStart = ({data}) => data === "isFromStart" || data === "isStart",
+	_renderZeroDurationTween = (tween, totalTime, suppressEvents, force) => {
+		let prevRatio = tween.ratio,
+			ratio = totalTime < 0 || (!totalTime && ((!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween))) || ((tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)))) ? 0 : 1, // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the "startAt" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any "from" and "fromTo" startAt tweens are rendered the first time at a ratio of 1.
+			repeatDelay = tween._rDelay,
+			tTime = 0,
+			pt, iteration, prevIteration;
+		if (repeatDelay && tween._repeat) { // in case there's a zero-duration tween that has a repeat with a repeatDelay
+			tTime = _clamp(0, tween._tDur, totalTime);
+			iteration = _animationCycle(tTime, repeatDelay);
+			tween._yoyo && (iteration & 1) && (ratio = 1 - ratio);
+			if (iteration !== _animationCycle(tween._tTime, repeatDelay)) { // if iteration changed
+				prevRatio = 1 - ratio;
+				tween.vars.repeatRefresh && tween._initted && tween.invalidate();
+			}
+		}
+		if (ratio !== prevRatio || _reverting || force || tween._zTime === _tinyNum || (!totalTime && tween._zTime)) {
+			if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) { // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
+				return;
+			}
+			prevIteration = tween._zTime;
+			tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.
+			suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.
+			tween.ratio = ratio;
+			tween._from && (ratio = 1 - ratio);
+			tween._time = 0;
+			tween._tTime = tTime;
+			pt = tween._pt;
+			while (pt) {
+				pt.r(ratio, pt.d);
+				pt = pt._next;
+			}
+			totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);
+			tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
+			tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");
+			if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
+				ratio && _removeFromParent(tween, 1);
+				if (!suppressEvents && !_reverting) {
+					_callback(tween, (ratio ? "onComplete" : "onReverseComplete"), true);
+					tween._prom && tween._prom();
+				}
+			}
+		} else if (!tween._zTime) {
+			tween._zTime = totalTime;
+		}
+	},
+	_findNextPauseTween = (animation, prevTime, time) => {
+		let child;
+		if (time > prevTime) {
+			child = animation._first;
+			while (child && child._start <= time) {
+				if (child.data === "isPause" && child._start > prevTime) {
+					return child;
+				}
+				child = child._next;
+			}
+		} else {
+			child = animation._last;
+			while (child && child._start >= time) {
+				if (child.data === "isPause" && child._start < prevTime) {
+					return child;
+				}
+				child = child._prev;
+			}
+		}
+	},
+	_setDuration = (animation, duration, skipUncache, leavePlayhead) => {
+		let repeat = animation._repeat,
+			dur = _roundPrecise(duration) || 0,
+			totalProgress = animation._tTime / animation._tDur;
+		totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
+		animation._dur = dur;
+		animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + (animation._rDelay * repeat));
+		totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, (animation._tTime = animation._tDur * totalProgress));
+		animation.parent && _setEnd(animation);
+		skipUncache || _uncache(animation.parent, animation);
+		return animation;
+	},
+	_onUpdateTotalDuration = animation => (animation instanceof Timeline) ? _uncache(animation) : _setDuration(animation, animation._dur),
+	_zeroPosition = {_start:0, endTime:_emptyFunc, totalDuration:_emptyFunc},
+	_parsePosition = (animation, position, percentAnimation) => {
+		let labels = animation.labels,
+			recent = animation._recent || _zeroPosition,
+			clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur, //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
+			i, offset, isPercent;
+		if (_isString(position) && (isNaN(position) || (position in labels))) { //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
+			offset = position.charAt(0);
+			isPercent = position.substr(-1) === "%";
+			i = position.indexOf("=");
+			if (offset === "<" || offset === ">") {
+				i >= 0 && (position = position.replace(/=/, ""));
+				return (offset === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);
+			}
+			if (i < 0) {
+				(position in labels) || (labels[position] = clippedDuration);
+				return labels[position];
+			}
+			offset = parseFloat(position.charAt(i-1) + position.substr(i+1));
+			if (isPercent && percentAnimation) {
+				offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();
+			}
+			return (i > 1) ? _parsePosition(animation, position.substr(0, i-1), percentAnimation) + offset : clippedDuration + offset;
+		}
+		return (position == null) ? clippedDuration : +position;
+	},
+	_createTweenType = (type, params, timeline) => {
+		let isLegacy = _isNumber(params[1]),
+			varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
+			vars = params[varsIndex],
+			irVars, parent;
+		isLegacy && (vars.duration = params[1]);
+		vars.parent = timeline;
+		if (type) {
+			irVars = vars;
+			parent = timeline;
+			while (parent && !("immediateRender" in irVars)) { // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.
+				irVars = parent.vars.defaults || {};
+				parent = _isNotFalse(parent.vars.inherit) && parent.parent;
+			}
+			vars.immediateRender = _isNotFalse(irVars.immediateRender);
+			type < 2 ? (vars.runBackwards = 1) : (vars.startAt = params[varsIndex - 1]); // "from" vars
+		}
+		return new Tween(params[0], vars, params[varsIndex + 1]);
+	},
+	_conditionalReturn = (value, func) => value || value === 0 ? func(value) : func,
+	_clamp = (min, max, value) => value < min ? min : value > max ? max : value,
+	getUnit = (value, v) => !_isString(value) || !(v = _unitExp.exec(value)) ? "" : v[1], // note: protect against padded numbers as strings, like "100.100". That shouldn't return "00" as the unit. If it's numeric, return no unit.
+	clamp = (min, max, value) => _conditionalReturn(value, v => _clamp(min, max, v)),
+	_slice = [].slice,
+	_isArrayLike = (value, nonEmpty) => value && (_isObject(value) && "length" in value && ((!nonEmpty && !value.length) || ((value.length - 1) in value && _isObject(value[0]))) && !value.nodeType && value !== _win),
+	_flatten = (ar, leaveStrings, accumulator = []) => ar.forEach(value => (_isString(value) && !leaveStrings) || _isArrayLike(value, 1) ? accumulator.push(...toArray(value)) : accumulator.push(value)) || accumulator,
+	//takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
+	toArray = (value, scope, leaveStrings) => _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [],
+	selector = value => {
+		value = toArray(value)[0] || _warn("Invalid scope") || {};
+		return v => {
+			let el = value.current || value.nativeElement || value;
+			return toArray(v, el.querySelectorAll ? el : el === value ? _warn("Invalid scope") || _doc.createElement("div") : value);
+		};
+	},
+	shuffle = a => a.sort(() => .5 - Math.random()), // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = Math.floor(Math.random() * i), v = a[--i], a[i] = a[j], a[j] = v); return a;
+	//for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following
+	distribute = v => {
+		if (_isFunction(v)) {
+			return v;
+		}
+		let vars = _isObject(v) ? v : {each:v}, //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.
+			ease = _parseEase(vars.ease),
+			from = vars.from || 0,
+			base = parseFloat(vars.base) || 0,
+			cache = {},
+			isDecimal = (from > 0 && from < 1),
+			ratios = isNaN(from) || isDecimal,
+			axis = vars.axis,
+			ratioX = from,
+			ratioY = from;
+		if (_isString(from)) {
+			ratioX = ratioY = {center:.5, edges:.5, end:1}[from] || 0;
+		} else if (!isDecimal && ratios) {
+			ratioX = from[0];
+			ratioY = from[1];
+		}
+		return (i, target, a) => {
+			let l = (a || vars).length,
+				distances = cache[l],
+				originX, originY, x, y, d, j, max, min, wrapAt;
+			if (!distances) {
+				wrapAt = (vars.grid === "auto") ? 0 : (vars.grid || [1, _bigNum])[1];
+				if (!wrapAt) {
+					max = -_bigNum;
+					while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) { }
+					wrapAt < l && wrapAt--;
+				}
+				distances = cache[l] = [];
+				originX = ratios ? (Math.min(wrapAt, l) * ratioX) - .5 : from % wrapAt;
+				originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : (from / wrapAt) | 0;
+				max = 0;
+				min = _bigNum;
+				for (j = 0; j < l; j++) {
+					x = (j % wrapAt) - originX;
+					y = originY - ((j / wrapAt) | 0);
+					distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs((axis === "y") ? y : x);
+					(d > max) && (max = d);
+					(d < min) && (min = d);
+				}
+				(from === "random") && shuffle(distances);
+				distances.max = max - min;
+				distances.min = min;
+				distances.v = l = (parseFloat(vars.amount) || (parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt)) || 0) * (from === "edges" ? -1 : 1);
+				distances.b = (l < 0) ? base - l : base;
+				distances.u = getUnit(vars.amount || vars.each) || 0; //unit
+				ease = (ease && l < 0) ? _invertEase(ease) : ease;
+			}
+			l = ((distances[i] - distances.min) / distances.max) || 0;
+			return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors
+		};
+	},
+	_roundModifier = v => { //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
+		let p = Math.pow(10, ((v + "").split(".")[1] || "").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())
+		return raw => {
+			let n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);
+			return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!
+		};
+	},
+	snap = (snapTo, value) => {
+		let isArray = _isArray(snapTo),
+			radius, is2D;
+		if (!isArray && _isObject(snapTo)) {
+			radius = isArray = snapTo.radius || _bigNum;
+			if (snapTo.values) {
+				snapTo = toArray(snapTo.values);
+				if ((is2D = !_isNumber(snapTo[0]))) {
+					radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.
+				}
+			} else {
+				snapTo = _roundModifier(snapTo.increment);
+			}
+		}
+		return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? raw => {is2D = snapTo(raw); return Math.abs(is2D - raw) <= radius ? is2D : raw; } : raw => {
+			let x = parseFloat(is2D ? raw.x : raw),
+				y = parseFloat(is2D ? raw.y : 0),
+				min = _bigNum,
+				closest = 0,
+				i = snapTo.length,
+				dx, dy;
+			while (i--) {
+				if (is2D) {
+					dx = snapTo[i].x - x;
+					dy = snapTo[i].y - y;
+					dx = dx * dx + dy * dy;
+				} else {
+					dx = Math.abs(snapTo[i] - x);
+				}
+				if (dx < min) {
+					min = dx;
+					closest = i;
+				}
+			}
+			closest = (!radius || min <= radius) ? snapTo[closest] : raw;
+			return (is2D || closest === raw || _isNumber(raw)) ? closest : closest + getUnit(raw);
+		});
+	},
+	random = (min, max, roundingIncrement, returnFunction) => _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, () => _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? 10 ** ((roundingIncrement + "").length - 2) : 1) && (Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction)),
+	pipe = (...functions) => value => functions.reduce((v, f) => f(v), value),
+	unitize = (func, unit) => value => func(parseFloat(value)) + (unit || getUnit(value)),
+	normalize = (min, max, value) => mapRange(min, max, 0, 1, value),
+	_wrapArray = (a, wrapper, value) => _conditionalReturn(value, index => a[~~wrapper(index)]),
+	wrap = function(min, max, value) { // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).
+		let range = max - min;
+		return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, value => ((range + (value - min) % range) % range) + min);
+	},
+	wrapYoyo = (min, max, value) => {
+		let range = max - min,
+			total = range * 2;
+		return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, value => {
+			value = (total + (value - min) % total) % total || 0;
+			return min + ((value > range) ? (total - value) : value);
+		});
+	},
+	_replaceRandom = value => { //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])
+		let prev = 0,
+			s = "",
+			i, nums, end, isArray;
+		while (~(i = value.indexOf("random(", prev))) {
+			end = value.indexOf(")", i);
+			isArray = value.charAt(i + 7) === "[";
+			nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
+			s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);
+			prev = end + 1;
+		}
+		return s + value.substr(prev, value.length - prev);
+	},
+	mapRange = (inMin, inMax, outMin, outMax, value) => {
+		let inRange = inMax - inMin,
+			outRange = outMax - outMin;
+		return _conditionalReturn(value, value => outMin + ((((value - inMin) / inRange) * outRange) || 0));
+	},
+	interpolate = (start, end, progress, mutate) => {
+		let func = isNaN(start + end) ? 0 : p => (1 - p) * start + p * end;
+		if (!func) {
+			let isString = _isString(start),
+				master = {},
+				p, i, interpolators, l, il;
+			progress === true && (mutate = 1) && (progress = null);
+			if (isString) {
+				start = {p: start};
+				end = {p: end};
+
+			} else if (_isArray(start) && !_isArray(end)) {
+				interpolators = [];
+				l = start.length;
+				il = l - 2;
+				for (i = 1; i < l; i++) {
+					interpolators.push(interpolate(start[i-1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.
+				}
+				l--;
+				func = p => {
+					p *= l;
+					let i = Math.min(il, ~~p);
+					return interpolators[i](p - i);
+				};
+				progress = end;
+			} else if (!mutate) {
+				start = _merge(_isArray(start) ? [] : {}, start);
+			}
+			if (!interpolators) {
+				for (p in end) {
+					_addPropTween.call(master, start, p, "get", end[p]);
+				}
+				func = p => _renderPropTweens(p, master) || (isString ? start.p : start);
+			}
+		}
+		return _conditionalReturn(progress, func);
+	},
+	_getLabelInDirection = (timeline, fromTime, backward) => { //used for nextLabel() and previousLabel()
+		let labels = timeline.labels,
+			min = _bigNum,
+			p, distance, label;
+		for (p in labels) {
+			distance = labels[p] - fromTime;
+			if ((distance < 0) === !!backward && distance && min > (distance = Math.abs(distance))) {
+				label = p;
+				min = distance;
+			}
+		}
+		return label;
+	},
+	_callback = (animation, type, executeLazyFirst) => {
+		let v = animation.vars,
+			callback = v[type],
+			prevContext = _context,
+			context = animation._ctx,
+			params, scope, result;
+		if (!callback) {
+			return;
+		}
+		params = v[type + "Params"];
+		scope = v.callbackScope || animation;
+		executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
+		context && (_context = context);
+		result = params ? callback.apply(scope, params) : callback.call(scope);
+		_context = prevContext;
+		return result;
+	},
+	_interrupt = animation => {
+		_removeFromParent(animation);
+		animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting);
+		animation.progress() < 1 && _callback(animation, "onInterrupt");
+		return animation;
+	},
+	_quickTween,
+	_registerPluginQueue = [],
+	_createPlugin = config => {
+		if (!config) return;
+		config = (!config.name && config.default) || config; // UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.
+		if (_windowExists() || config.headless) { // edge case: some build tools may pass in a null/undefined value
+			let name = config.name,
+				isFunc = _isFunction(config),
+				Plugin = (name && !isFunc && config.init) ? function () {
+					this._props = [];
+				} : config, //in case someone passes in an object that's not a plugin, like CustomEase
+				instanceDefaults = {init: _emptyFunc, render: _renderPropTweens, add: _addPropTween, kill: _killPropTweensOf, modifier: _addPluginModifier, rawVars: 0},
+				statics = {targetTest: 0, get: 0, getSetter: _getSetter, aliases: {}, register: 0};
+			_wake();
+			if (config !== Plugin) {
+				if (_plugins[name]) {
+					return;
+				}
+				_setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics)); //static methods
+				_merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods
+				_plugins[(Plugin.prop = name)] = Plugin;
+				if (config.targetTest) {
+					_harnessPlugins.push(Plugin);
+					_reservedProps[name] = 1;
+				}
+				name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin"; //for the global name. "motionPath" should become MotionPathPlugin
+			}
+			_addGlobal(name, Plugin);
+			config.register && config.register(gsap, Plugin, PropTween);
+		} else {
+			_registerPluginQueue.push(config);
+		}
+	},
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * COLORS
+ * --------------------------------------------------------------------------------------
+ */
+
+	_255 = 255,
+	_colorLookup = {
+		aqua:[0,_255,_255],
+		lime:[0,_255,0],
+		silver:[192,192,192],
+		black:[0,0,0],
+		maroon:[128,0,0],
+		teal:[0,128,128],
+		blue:[0,0,_255],
+		navy:[0,0,128],
+		white:[_255,_255,_255],
+		olive:[128,128,0],
+		yellow:[_255,_255,0],
+		orange:[_255,165,0],
+		gray:[128,128,128],
+		purple:[128,0,128],
+		green:[0,128,0],
+		red:[_255,0,0],
+		pink:[_255,192,203],
+		cyan:[0,_255,_255],
+		transparent:[_255,_255,_255,0]
+	},
+	// possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:
+	// let ctx = _doc.createElement("canvas").getContext("2d");
+	// _forEachName("aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});
+	_hue = (h, m1, m2) => {
+		h += h < 0 ? 1 : h > 1 ? -1 : 0;
+		return ((((h * 6 < 1) ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : (h * 3 < 2) ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255) + .5) | 0;
+	},
+	splitColor = (v, toHSL, forceAlpha) => {
+		let a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, (v >> 8) & _255, v & _255] : 0,
+			r, g, b, h, s, l, max, min, d, wasHSL;
+		if (!a) {
+			if (v.substr(-1) === ",") { //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
+				v = v.substr(0, v.length - 1);
+			}
+			if (_colorLookup[v]) {
+				a = _colorLookup[v];
+			} else if (v.charAt(0) === "#") {
+				if (v.length < 6) { //for shorthand like #9F0 or #9F0F (could have alpha)
+					r = v.charAt(1);
+					g = v.charAt(2);
+					b = v.charAt(3);
+					v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
+				}
+				if (v.length === 9) { // hex with alpha, like #fd5e53ff
+					a = parseInt(v.substr(1, 6), 16);
+					return [a >> 16, (a >> 8) & _255, a & _255, parseInt(v.substr(7), 16) / 255];
+				}
+				v = parseInt(v.substr(1), 16);
+				a = [v >> 16, (v >> 8) & _255, v & _255];
+			} else if (v.substr(0, 3) === "hsl") {
+				a = wasHSL = v.match(_strictNumExp);
+				if (!toHSL) {
+					h = (+a[0] % 360) / 360;
+					s = +a[1] / 100;
+					l = +a[2] / 100;
+					g = (l <= .5) ? l * (s + 1) : l + s - l * s;
+					r = l * 2 - g;
+					a.length > 3 && (a[3] *= 1); //cast as number
+					a[0] = _hue(h + 1 / 3, r, g);
+					a[1] = _hue(h, r, g);
+					a[2] = _hue(h - 1 / 3, r, g);
+				} else if (~v.indexOf("=")) { //if relative values are found, just return the raw strings with the relative prefixes in place.
+					a = v.match(_numExp);
+					forceAlpha && a.length < 4 && (a[3] = 1);
+					return a;
+				}
+			} else {
+				a = v.match(_strictNumExp) || _colorLookup.transparent;
+			}
+			a = a.map(Number);
+		}
+		if (toHSL && !wasHSL) {
+			r = a[0] / _255;
+			g = a[1] / _255;
+			b = a[2] / _255;
+			max = Math.max(r, g, b);
+			min = Math.min(r, g, b);
+			l = (max + min) / 2;
+			if (max === min) {
+				h = s = 0;
+			} else {
+				d = max - min;
+				s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
+				h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
+				h *= 60;
+			}
+			a[0] = ~~(h + .5);
+			a[1] = ~~(s * 100 + .5);
+			a[2] = ~~(l * 100 + .5);
+		}
+		forceAlpha && a.length < 4 && (a[3] = 1);
+		return a;
+	},
+	_colorOrderData = v => { // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()
+		let values = [],
+			c = [],
+			i = -1;
+		v.split(_colorExp).forEach(v => {
+			let a = v.match(_numWithUnitExp) || [];
+			values.push(...a);
+			c.push(i += a.length + 1);
+		});
+		values.c = c;
+		return values;
+	},
+	_formatColors = (s, toHSL, orderMatchData) => {
+		let result = "",
+			colors = (s + result).match(_colorExp),
+			type = toHSL ? "hsla(" : "rgba(",
+			i = 0,
+			c, shell, d, l;
+		if (!colors) {
+			return s;
+		}
+		colors = colors.map(color => (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")");
+		if (orderMatchData) {
+			d = _colorOrderData(s);
+			c = orderMatchData.c;
+			if (c.join(result) !== d.c.join(result)) {
+				shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
+				l = shell.length - 1;
+				for (; i < l; i++) {
+					result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
+				}
+			}
+		}
+		if (!shell) {
+			shell = s.split(_colorExp);
+			l = shell.length - 1;
+			for (; i < l; i++) {
+				result += shell[i] + colors[i];
+			}
+		}
+		return result + shell[l];
+	},
+	_colorExp = (function() {
+		let s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b", //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,
+			p;
+		for (p in _colorLookup) {
+			s += "|" + p + "\\b";
+		}
+		return new RegExp(s + ")", "gi");
+	})(),
+	_hslExp = /hsl[a]?\(/,
+	_colorStringFilter = a => {
+		let combined = a.join(" "),
+			toHSL;
+		_colorExp.lastIndex = 0;
+		if (_colorExp.test(combined)) {
+			toHSL = _hslExp.test(combined);
+			a[1] = _formatColors(a[1], toHSL);
+			a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.
+			return true;
+		}
+	},
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * TICKER
+ * --------------------------------------------------------------------------------------
+ */
+	_tickerActive,
+	_ticker = (function() {
+		let _getTime = Date.now,
+			_lagThreshold = 500,
+			_adjustedLag = 33,
+			_startTime = _getTime(),
+			_lastUpdate = _startTime,
+			_gap = 1000 / 240,
+			_nextTime = _gap,
+			_listeners = [],
+			_id, _req, _raf, _self, _delta, _i,
+			_tick = v => {
+				let elapsed = _getTime() - _lastUpdate,
+					manual = v === true,
+					overlap, dispatch, time, frame;
+				(elapsed > _lagThreshold || elapsed < 0) && (_startTime += elapsed - _adjustedLag);
+				_lastUpdate += elapsed;
+				time = _lastUpdate - _startTime;
+				overlap = time - _nextTime;
+				if (overlap > 0 || manual) {
+					frame = ++_self.frame;
+					_delta = time - _self.time * 1000;
+					_self.time = time = time / 1000;
+					_nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
+					dispatch = 1;
+				}
+				manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.
+				if (dispatch) {
+					for (_i = 0; _i < _listeners.length; _i++) { // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.
+						_listeners[_i](time, _delta, frame, v);
+					}
+				}
+			};
+		_self = {
+			time:0,
+			frame:0,
+			tick() {
+				_tick(true);
+			},
+			deltaRatio(fps) {
+				return _delta / (1000 / (fps || 60));
+			},
+			wake() {
+				if (_coreReady) {
+					if (!_coreInitted && _windowExists()) {
+						_win = _coreInitted = window;
+						_doc = _win.document || {};
+						_globals.gsap = gsap;
+						(_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);
+						_install(_installScope || _win.GreenSockGlobals || (!_win.gsap && _win) || {});
+						_registerPluginQueue.forEach(_createPlugin);
+					}
+					_raf = typeof(requestAnimationFrame) !== "undefined" && requestAnimationFrame;
+					_id && _self.sleep();
+					_req = _raf || (f => setTimeout(f, (_nextTime - _self.time * 1000 + 1) | 0));
+					_tickerActive = 1;
+					_tick(2);
+				}
+			},
+			sleep() {
+				(_raf ? cancelAnimationFrame : clearTimeout)(_id);
+				_tickerActive = 0;
+				_req = _emptyFunc;
+			},
+			lagSmoothing(threshold, adjustedLag) {
+				_lagThreshold = threshold || Infinity; // zero should be interpreted as basically unlimited
+				_adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);
+			},
+			fps(fps) {
+				_gap = 1000 / (fps || 240);
+				_nextTime = _self.time * 1000 + _gap;
+			},
+			add(callback, once, prioritize) {
+				let func = once ? (t, d, f, v) => {callback(t, d, f, v); _self.remove(func);} : callback;
+				_self.remove(callback);
+				_listeners[prioritize ? "unshift" : "push"](func);
+				_wake();
+				return func;
+			},
+			remove(callback, i) {
+				~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;
+			},
+			_listeners:_listeners
+		};
+		return _self;
+	})(),
+	_wake = () => !_tickerActive && _ticker.wake(), //also ensures the core classes are initialized.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+* -------------------------------------------------
+* EASING
+* -------------------------------------------------
+*/
+	_easeMap = {},
+	_customEaseExp = /^[\d.\-M][\d.\-,\s]/,
+	_quotesExp = /["']/g,
+	_parseObjectInString = value => { //takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.
+		let obj = {},
+			split = value.substr(1, value.length-3).split(":"),
+			key = split[0],
+			i = 1,
+			l = split.length,
+			index, val, parsedVal;
+		for (; i < l; i++) {
+			val = split[i];
+			index = i !== l-1 ? val.lastIndexOf(",") : val.length;
+			parsedVal = val.substr(0, index);
+			obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
+			key = val.substr(index+1).trim();
+		}
+		return obj;
+	},
+	_valueInParentheses = value => {
+		let open = value.indexOf("(") + 1,
+			close = value.indexOf(")"),
+			nested = value.indexOf("(", open);
+		return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
+	},
+	_configEaseFromString = name => { //name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).
+		let split = (name + "").split("("),
+			ease = _easeMap[split[0]];
+		return (ease && split.length > 1 && ease.config) ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : (_easeMap._CE && _customEaseExp.test(name)) ? _easeMap._CE("", name) : ease;
+	},
+	_invertEase = ease => p => 1 - ease(1 - p),
+	// allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.
+	_propagateYoyoEase = (timeline, isYoyo) => {
+		let child = timeline._first, ease;
+		while (child) {
+			if (child instanceof Timeline) {
+				_propagateYoyoEase(child, isYoyo);
+			} else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
+				if (child.timeline) {
+					_propagateYoyoEase(child.timeline, isYoyo);
+				} else {
+					ease = child._ease;
+					child._ease = child._yEase;
+					child._yEase = ease;
+					child._yoyo = isYoyo;
+				}
+			}
+			child = child._next;
+		}
+	},
+	_parseEase = (ease, defaultEase) => !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase,
+	_insertEase = (names, easeIn, easeOut = p => 1 - easeIn(1 - p), easeInOut = (p => p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2)) => {
+		let ease = {easeIn, easeOut, easeInOut},
+			lowercaseName;
+		_forEachName(names, name => {
+			_easeMap[name] = _globals[name] = ease;
+			_easeMap[(lowercaseName = name.toLowerCase())] = easeOut;
+			for (let p in ease) {
+				_easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
+			}
+		});
+		return ease;
+	},
+	_easeInOutFromOut = easeOut => (p => p < .5 ? (1 - easeOut(1 - (p * 2))) / 2 : .5 + easeOut((p - .5) * 2) / 2),
+	_configElastic = (type, amplitude, period) => {
+		let p1 = (amplitude >= 1) ? amplitude : 1, //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
+			p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
+			p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
+			easeOut = p => p === 1 ? 1 : p1 * (2 ** (-10 * p)) * _sin((p - p3) * p2) + 1,
+			ease = (type === "out") ? easeOut : (type === "in") ? p => 1 - easeOut(1 - p) : _easeInOutFromOut(easeOut);
+		p2 = _2PI / p2; //precalculate to optimize
+		ease.config = (amplitude, period) => _configElastic(type, amplitude, period);
+		return ease;
+	},
+	_configBack = (type, overshoot = 1.70158) => {
+		let easeOut = p => p ? ((--p) * p * ((overshoot + 1) * p + overshoot) + 1) : 0,
+			ease = type === "out" ? easeOut : type === "in" ? p => 1 - easeOut(1 - p) : _easeInOutFromOut(easeOut);
+		ease.config = overshoot => _configBack(type, overshoot);
+		return ease;
+	};
+	// a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
+	// _weightedEase = ratio => {
+	// 	let y = 0.5 + ratio / 2;
+	// 	return p => (2 * (1 - p) * p * y + p * p);
+	// },
+	// a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
+	// _weightedEaseStrong = ratio => {
+	// 	ratio = .5 + ratio / 2;
+	// 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),
+	// 		b = ratio - o,
+	// 		c = ratio + o;
+	// 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;
+	// };
+
+_forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", (name, i) => {
+	let power = i < 5 ? i + 1 : i;
+	_insertEase(name + ",Power" + (power - 1), i ? p => p ** power : p => p, p => 1 - (1 - p) ** power, p => p < .5 ? (p * 2) ** power / 2 : 1 - ((1 - p) * 2) ** power / 2);
+});
+_easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;
+_insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());
+((n, c) => {
+	let n1 = 1 / c,
+		n2 = 2 * n1,
+		n3 = 2.5 * n1,
+		easeOut = p => (p < n1) ? n * p * p : (p < n2) ? n * (p - 1.5 / c) ** 2 + .75 : (p < n3) ? n * (p -= 2.25 / c) * p + .9375 : n * (p - 2.625 / c) ** 2 + .984375;
+	_insertEase("Bounce", p => 1 - easeOut(1 - p), easeOut);
+})(7.5625, 2.75);
+_insertEase("Expo", p => p ? 2 ** (10 * (p - 1)) : 0);
+_insertEase("Circ", p => -(_sqrt(1 - (p * p)) - 1));
+_insertEase("Sine", p => p === 1 ? 1 : -_cos(p * _HALF_PI) + 1);
+_insertEase("Back", _configBack("in"), _configBack("out"), _configBack());
+_easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
+	config(steps = 1, immediateStart) {
+		let p1 = 1 / steps,
+			p2 = steps + (immediateStart ? 0 : 1),
+			p3 = immediateStart ? 1 : 0,
+			max = 1 - _tinyNum;
+		return p => (((p2 * _clamp(0, max, p)) | 0) + p3) * p1;
+	}
+};
+_defaults.ease = _easeMap["quad.out"];
+
+
+_forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", name => _callbackNames += name + "," + name + "Params,");
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * CACHE
+ * --------------------------------------------------------------------------------------
+ */
+class GSCache {
+
+	constructor(target, harness) {
+		this.id = _gsID++;
+		target._gsap = this;
+		this.target = target;
+		this.harness = harness;
+		this.get = harness ? harness.get : _getProperty;
+		this.set = harness ? harness.getSetter : _getSetter;
+	}
+
+}
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * ANIMATION
+ * --------------------------------------------------------------------------------------
+ */
+
+class Animation {
+
+	constructor(vars) {
+		this.vars = vars;
+		this._delay = +vars.delay || 0;
+		if ((this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0)) { // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.
+			this._rDelay = vars.repeatDelay || 0;
+			this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
+		}
+		this._ts = 1;
+		_setDuration(this, +vars.duration, 1, 1);
+		this.data = vars.data;
+		if (_context) {
+			this._ctx = _context;
+			_context.data.push(this);
+		}
+		_tickerActive || _ticker.wake();
+	}
+
+	delay(value) {
+		if (value || value === 0) {
+			this.parent && this.parent.smoothChildTiming && (this.startTime(this._start + value - this._delay));
+			this._delay = value;
+			return this;
+		}
+		return this._delay;
+	}
+
+	duration(value) {
+		return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
+	}
+
+	totalDuration(value) {
+		if (!arguments.length) {
+			return this._tDur;
+		}
+		this._dirty = 0;
+		return _setDuration(this, this._repeat < 0 ? value : (value - (this._repeat * this._rDelay)) / (this._repeat + 1));
+	}
+
+	totalTime(totalTime, suppressEvents) {
+		_wake();
+		if (!arguments.length) {
+			return this._tTime;
+		}
+		let parent = this._dp;
+		if (parent && parent.smoothChildTiming && this._ts) {
+			_alignPlayhead(this, totalTime);
+			!parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.
+			//in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.
+			while (parent && parent.parent) {
+				if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
+					parent.totalTime(parent._tTime, true);
+				}
+				parent = parent.parent;
+			}
+			if (!this.parent && this._dp.autoRemoveChildren && ((this._ts > 0 && totalTime < this._tDur) || (this._ts < 0 && totalTime > 0) || (!this._tDur && !totalTime) )) { //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.
+				_addToTimeline(this._dp, this, this._start - this._delay);
+			}
+		}
+        if (this._tTime !== totalTime || (!this._dur && !suppressEvents) || (this._initted && Math.abs(this._zTime) === _tinyNum) || (!totalTime && !this._initted && (this.add || this._ptLookup))) { // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)
+        	this._ts || (this._pTime = totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause
+	        //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)
+		    //   this._lock = 1;
+		        _lazySafeRender(this, totalTime, suppressEvents);
+		    //   this._lock = 0;
+	        //}
+		}
+		return this;
+	}
+
+	time(value, suppressEvents) {
+		return arguments.length ? this.totalTime((Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay)) || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!
+	}
+
+	totalProgress(value, suppressEvents) {
+		return arguments.length ? this.totalTime( this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.rawTime() > 0 ? 1 : 0;
+	}
+
+	progress(value, suppressEvents) {
+		return arguments.length ? this.totalTime( this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : (this.duration() ? Math.min(1, this._time / this._dur) : this.rawTime() > 0 ? 1 : 0);
+	}
+
+	iteration(value, suppressEvents) {
+		let cycleDuration = this.duration() + this._rDelay;
+		return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
+	}
+
+	// potential future addition:
+	// isPlayingBackwards() {
+	// 	let animation = this,
+	// 		orientation = 1; // 1 = forward, -1 = backward
+	// 	while (animation) {
+	// 		orientation *= animation.reversed() || (animation.repeat() && !(animation.iteration() & 1)) ? -1 : 1;
+	// 		animation = animation.parent;
+	// 	}
+	// 	return orientation < 0;
+	// }
+
+	timeScale(value, suppressEvents) {
+		if (!arguments.length) {
+			return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.
+		}
+		if (this._rts === value) {
+			return this;
+		}
+		let tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.
+
+		// future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.
+		//(+value < 0 && this._rts >= 0) && _callback(this, "onReverse", true);
+
+		// prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.
+		this._rts = +value || 0;
+		this._ts = (this._ps || value === -_tinyNum) ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.
+		this.totalTime(_clamp(-Math.abs(this._delay), this._tDur, tTime), suppressEvents !== false);
+		_setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.
+		return _recacheAncestors(this);
+	}
+
+	paused(value) {
+		if (!arguments.length) {
+			return this._ps;
+		}
+		if (this._ps !== value) {
+			this._ps = value;
+			if (value) {
+				this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.
+				this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the "real" timeScale as _rts (recorded time scale)
+			} else {
+				_wake();
+				this._ts = this._rts;
+				//only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.
+				this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, (this.progress() === 1) && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum)); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.
+			}
+		}
+		return this;
+	}
+
+	startTime(value) {
+		if (arguments.length) {
+			this._start = value;
+			let parent = this.parent || this._dp;
+			parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
+			return this;
+		}
+		return this._start;
+	}
+
+	endTime(includeRepeats) {
+		return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
+	}
+
+	rawTime(wrapRepeats) {
+		let parent = this.parent || this._dp; // _dp = detached parent
+		return !parent ? this._tTime : (wrapRepeats && (!this._ts || (this._repeat && this._time && this.totalProgress() < 1))) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
+	}
+
+	revert(config= _revertConfig) {
+		let prevIsReverting = _reverting;
+		_reverting = config;
+		if (this._initted || this._startAt) {
+			this.timeline && this.timeline.revert(config);
+			this.totalTime(-0.01, config.suppressEvents);
+		}
+		this.data !== "nested" && config.kill !== false && this.kill();
+		_reverting = prevIsReverting;
+		return this;
+	}
+
+	globalTime(rawTime) {
+		let animation = this,
+			time = arguments.length ? rawTime : animation.rawTime();
+		while (animation) {
+			time = animation._start + time / (Math.abs(animation._ts) || 1);
+			animation = animation._dp;
+		}
+		return !this.parent && this._sat ? this._sat.globalTime(rawTime) : time; // the _startAt tweens for .fromTo() and .from() that have immediateRender should always be FIRST in the timeline (important for context.revert()). "_sat" stands for _startAtTween, referring to the parent tween that created the _startAt. We must discern if that tween had immediateRender so that we can know whether or not to prioritize it in revert().
+	}
+
+	repeat(value) {
+		if (arguments.length) {
+			this._repeat = value === Infinity ? -2 : value;
+			return _onUpdateTotalDuration(this);
+		}
+		return this._repeat === -2 ? Infinity : this._repeat;
+	}
+
+	repeatDelay(value) {
+		if (arguments.length) {
+			let time = this._time;
+			this._rDelay = value;
+			_onUpdateTotalDuration(this);
+			return time ? this.time(time) : this;
+		}
+		return this._rDelay;
+	}
+
+	yoyo(value) {
+		if (arguments.length) {
+			this._yoyo = value;
+			return this;
+		}
+		return this._yoyo;
+	}
+
+	seek(position, suppressEvents) {
+		return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
+	}
+
+	restart(includeDelay, suppressEvents) {
+		return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
+	}
+
+	play(from, suppressEvents) {
+		from != null && this.seek(from, suppressEvents);
+		return this.reversed(false).paused(false);
+	}
+
+	reverse(from, suppressEvents) {
+		from != null && this.seek(from || this.totalDuration(), suppressEvents);
+		return this.reversed(true).paused(false);
+	}
+
+	pause(atTime, suppressEvents) {
+		atTime != null && this.seek(atTime, suppressEvents);
+		return this.paused(true);
+	}
+
+	resume() {
+		return this.paused(false);
+	}
+
+	reversed(value) {
+		if (arguments.length) {
+			!!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.
+			return this;
+		}
+		return this._rts < 0;
+	}
+
+	invalidate() {
+		this._initted = this._act = 0;
+		this._zTime = -_tinyNum;
+		return this;
+	}
+
+	isActive() {
+		let parent = this.parent || this._dp,
+			start = this._start,
+			rawTime;
+		return !!(!parent || (this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum));
+	}
+
+	eventCallback(type, callback, params) {
+		let vars = this.vars;
+		if (arguments.length > 1) {
+			if (!callback) {
+				delete vars[type];
+			} else {
+				vars[type] = callback;
+				params && (vars[type + "Params"] = params);
+				type === "onUpdate" && (this._onUpdate = callback);
+			}
+			return this;
+		}
+		return vars[type];
+	}
+
+	then(onFulfilled) {
+		let self = this;
+		return new Promise(resolve => {
+			let f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
+				_resolve = () => {
+					let _then = self.then;
+					self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)
+					_isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
+					resolve(f);
+					self.then = _then;
+				};
+			if (self._initted && (self.totalProgress() === 1 && self._ts >= 0) || (!self._tTime && self._ts < 0)) {
+				_resolve();
+			} else {
+				self._prom = _resolve;
+			}
+		});
+	}
+
+	kill() {
+		_interrupt(this);
+	}
+
+}
+
+_setDefaults(Animation.prototype, {_time:0, _start:0, _end:0, _tTime:0, _tDur:0, _dirty:0, _repeat:0, _yoyo:false, parent:null, _initted:false, _rDelay:0, _ts:1, _dp:0, ratio:0, _zTime:-_tinyNum, _prom:0, _ps:false, _rts:1});
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * -------------------------------------------------
+ * TIMELINE
+ * -------------------------------------------------
+ */
+
+class Timeline extends Animation {
+
+	constructor(vars = {}, position) {
+		super(vars);
+		this.labels = {};
+		this.smoothChildTiming = !!vars.smoothChildTiming;
+		this.autoRemoveChildren = !!vars.autoRemoveChildren;
+		this._sort = _isNotFalse(vars.sortChildren);
+		_globalTimeline && _addToTimeline(vars.parent || _globalTimeline, this, position);
+		vars.reversed && this.reverse();
+		vars.paused && this.paused(true);
+		vars.scrollTrigger && _scrollTrigger(this, vars.scrollTrigger);
+	}
+
+	to(targets, vars, position) {
+		_createTweenType(0, arguments, this);
+		return this;
+	}
+
+	from(targets, vars, position) {
+		_createTweenType(1, arguments, this);
+		return this;
+	}
+
+	fromTo(targets, fromVars, toVars, position) {
+		_createTweenType(2, arguments, this);
+		return this;
+	}
+
+	set(targets, vars, position) {
+		vars.duration = 0;
+		vars.parent = this;
+		_inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
+		vars.immediateRender = !!vars.immediateRender;
+		new Tween(targets, vars, _parsePosition(this, position), 1);
+		return this;
+	}
+
+	call(callback, params, position) {
+		return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);
+	}
+
+	//ONLY for backward compatibility! Maybe delete?
+	staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
+		vars.duration = duration;
+		vars.stagger = vars.stagger || stagger;
+		vars.onComplete = onCompleteAll;
+		vars.onCompleteParams = onCompleteAllParams;
+		vars.parent = this;
+		new Tween(targets, vars, _parsePosition(this, position));
+		return this;
+	}
+
+	staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
+		vars.runBackwards = 1;
+		_inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
+		return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
+	}
+
+	staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
+		toVars.startAt = fromVars;
+		_inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
+		return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
+	}
+
+	render(totalTime, suppressEvents, force) {
+		let prevTime = this._time,
+			tDur = this._dirty ? this.totalDuration() : this._tDur,
+			dur = this._dur,
+			tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime), // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.
+			crossingStart = (this._zTime < 0) !== (totalTime < 0) && (this._initted || !dur),
+			time, child, next, iteration, cycleDuration, prevPaused, pauseTween, timeScale, prevStart, prevIteration, yoyo, isYoyo;
+		this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);
+		if (tTime !== this._tTime || force || crossingStart) {
+			if (prevTime !== this._time && dur) { //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
+				tTime += this._time - prevTime;
+				totalTime += this._time - prevTime;
+			}
+			time = tTime;
+			prevStart = this._start;
+			timeScale = this._ts;
+			prevPaused = !timeScale;
+			if (crossingStart) {
+				dur || (prevTime = this._zTime);
+				 //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.
+				(totalTime || !suppressEvents) && (this._zTime = totalTime);
+			}
+			if (this._repeat) { //adjust the time for repeats and yoyos
+				yoyo = this._yoyo;
+				cycleDuration = dur + this._rDelay;
+				if (this._repeat < -1 && totalTime < 0) {
+					return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
+				}
+				time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)
+				if (tTime === tDur) { // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
+					iteration = this._repeat;
+					time = dur;
+				} else {
+					iteration = ~~(tTime / cycleDuration);
+					if (iteration && iteration === tTime / cycleDuration) {
+						time = dur;
+						iteration--;
+					}
+					time > dur && (time = dur);
+				}
+				prevIteration = _animationCycle(this._tTime, cycleDuration);
+				!prevTime && this._tTime && prevIteration !== iteration && this._tTime - prevIteration * cycleDuration - this._dur <= 0 && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://gsap.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005 also, this._tTime - prevIteration * cycleDuration - this._dur <= 0 just checks to make sure it wasn't previously in the "repeatDelay" portion
+				if (yoyo && (iteration & 1)) {
+					time = dur - time;
+					isYoyo = 1;
+				}
+				/*
+				make sure children at the end/beginning of the timeline are rendered properly. If, for example,
+				a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
+				would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
+				could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
+				we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
+				ensure that zero-duration tweens at the very beginning or end of the Timeline work.
+				*/
+				if (iteration !== prevIteration && !this._lock) {
+					let rewinding = (yoyo && (prevIteration & 1)),
+						doesWrap = (rewinding === (yoyo && (iteration & 1)));
+					iteration < prevIteration && (rewinding = !rewinding);
+					prevTime = rewinding ? 0 : tTime % dur ? dur : tTime; // if the playhead is landing exactly at the end of an iteration, use that totalTime rather than only the duration, otherwise it'll skip the 2nd render since it's effectively at the same time.
+					this._lock = 1;
+					this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
+					this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.
+					!suppressEvents && this.parent && _callback(this, "onRepeat");
+					this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);
+					if ((prevTime && prevTime !== this._time) || prevPaused !== !this._ts || (this.vars.onRepeat && !this.parent && !this._act)) { // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.
+						return this;
+					}
+					dur = this._dur; // in case the duration changed in the onRepeat
+					tDur = this._tDur;
+					if (doesWrap) {
+						this._lock = 2;
+						prevTime = rewinding ? dur : -0.0001;
+						this.render(prevTime, true);
+						this.vars.repeatRefresh && !isYoyo && this.invalidate();
+					}
+					this._lock = 0;
+					if (!this._ts && !prevPaused) {
+						return this;
+					}
+					//in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.
+					_propagateYoyoEase(this, isYoyo);
+				}
+			}
+			if (this._hasPause && !this._forcing && this._lock < 2) {
+				pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));
+				if (pauseTween) {
+					tTime -= time - (time = pauseTween._start);
+				}
+			}
+
+			this._tTime = tTime;
+			this._time = time;
+			this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.
+
+			if (!this._initted) {
+				this._onUpdate = this.vars.onUpdate;
+				this._initted = 1;
+				this._zTime = totalTime;
+				prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).
+			}
+			if (!prevTime && time && !suppressEvents && !iteration) {
+				_callback(this, "onStart");
+				if (this._tTime !== tTime) { // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
+					return this;
+				}
+			}
+			if (time >= prevTime && totalTime >= 0) {
+				child = this._first;
+				while (child) {
+					next = child._next;
+					if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
+						if (child.parent !== this) { // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
+							return this.render(totalTime, suppressEvents, force);
+						}
+						child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);
+						if (time !== this._time || (!this._ts && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
+							pauseTween = 0;
+							next && (tTime += (this._zTime = -_tinyNum));  // it didn't finish rendering, so flag zTime as negative so that so that the next time render() is called it'll be forced (to render any remaining children)
+							break;
+						}
+					}
+					child = next;
+				}
+			} else {
+				child = this._last;
+				let adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.
+				while (child) {
+					next = child._prev;
+					if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
+						if (child.parent !== this) { // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
+							return this.render(totalTime, suppressEvents, force);
+						}
+						child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || (_reverting && (child._initted || child._startAt)));  // if reverting, we should always force renders of initted tweens (but remember that .fromTo() or .from() may have a _startAt but not _initted yet). If, for example, a .fromTo() tween with a stagger (which creates an internal timeline) gets reverted BEFORE some of its child tweens render for the first time, it may not properly trigger them to revert.
+						if (time !== this._time || (!this._ts && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
+							pauseTween = 0;
+							next && (tTime += (this._zTime = adjustedTime ? -_tinyNum : _tinyNum)); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)
+							break;
+						}
+					}
+					child = next;
+				}
+			}
+			if (pauseTween && !suppressEvents) {
+				this.pause();
+				pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;
+				if (this._ts) { //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).
+					this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.
+					_setEnd(this);
+					return this.render(totalTime, suppressEvents, force);
+				}
+			}
+			this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
+			if ((tTime === tDur && this._tTime >= this.totalDuration()) || (!tTime && prevTime)) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) { // remember, a child's callback may alter this timeline's playhead or timeScale which is why we need to add some of these checks.
+				(totalTime || !dur) && ((tTime === tDur && this._ts > 0) || (!tTime && this._ts < 0)) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.
+				if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {
+					_callback(this, (tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete"), true);
+					this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
+				}
+			}
+		}
+		return this;
+	}
+
+	add(child, position) {
+		_isNumber(position) || (position = _parsePosition(this, position, child));
+		if (!(child instanceof Animation)) {
+			if (_isArray(child)) {
+				child.forEach(obj => this.add(obj, position));
+				return this;
+			}
+			if (_isString(child)) {
+				return this.addLabel(child, position);
+			}
+			if (_isFunction(child)) {
+				child = Tween.delayedCall(0, child);
+			} else {
+				return this;
+			}
+		}
+		return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!
+	}
+
+	getChildren(nested = true, tweens = true, timelines = true, ignoreBeforeTime = -_bigNum) {
+		let a = [],
+			child = this._first;
+		while (child) {
+			if (child._start >= ignoreBeforeTime) {
+				if (child instanceof Tween) {
+					tweens && a.push(child);
+				} else {
+					timelines && a.push(child);
+					nested && a.push(...child.getChildren(true, tweens, timelines));
+				}
+			}
+			child = child._next;
+		}
+		return a;
+	}
+
+	getById(id) {
+		let animations = this.getChildren(1, 1, 1),
+			i = animations.length;
+		while(i--) {
+			if (animations[i].vars.id === id) {
+				return animations[i];
+			}
+		}
+	}
+
+	remove(child) {
+		if (_isString(child)) {
+			return this.removeLabel(child);
+		}
+		if (_isFunction(child)) {
+			return this.killTweensOf(child);
+		}
+		_removeLinkedListItem(this, child);
+		if (child === this._recent) {
+			this._recent = this._last;
+		}
+		return _uncache(this);
+	}
+
+	totalTime(totalTime, suppressEvents) {
+		if (!arguments.length) {
+			return this._tTime;
+		}
+		this._forcing = 1;
+		if (!this._dp && this._ts) { //special case for the global timeline (or any other that has no parent or detached parent).
+			this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? totalTime / this._ts : (this.totalDuration() - totalTime) / -this._ts));
+		}
+		super.totalTime(totalTime, suppressEvents);
+		this._forcing = 0;
+		return this;
+	}
+
+	addLabel(label, position) {
+		this.labels[label] = _parsePosition(this, position);
+		return this;
+	}
+
+	removeLabel(label) {
+		delete this.labels[label];
+		return this;
+	}
+
+	addPause(position, callback, params) {
+		let t = Tween.delayedCall(0, callback || _emptyFunc, params);
+		t.data = "isPause";
+		this._hasPause = 1;
+		return _addToTimeline(this, t, _parsePosition(this, position));
+	}
+
+	removePause(position) {
+		let child = this._first;
+		position = _parsePosition(this, position);
+		while (child) {
+			if (child._start === position && child.data === "isPause") {
+				_removeFromParent(child);
+			}
+			child = child._next;
+		}
+	}
+
+	killTweensOf(targets, props, onlyActive) {
+		let tweens = this.getTweensOf(targets, onlyActive),
+			i = tweens.length;
+		while (i--) {
+			(_overwritingTween !== tweens[i]) && tweens[i].kill(targets, props);
+		}
+		return this;
+	}
+
+	getTweensOf(targets, onlyActive) {
+		let a = [],
+			parsedTargets = toArray(targets),
+			child = this._first,
+			isGlobalTime = _isNumber(onlyActive), // a number is interpreted as a global time. If the animation spans
+			children;
+		while (child) {
+			if (child instanceof Tween) {
+				if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || (child._initted && child._ts)) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) { // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.
+					a.push(child);
+				}
+			} else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
+				a.push(...children);
+			}
+			child = child._next;
+		}
+		return a;
+	}
+
+	// potential future feature - targets() on timelines
+	// targets() {
+	// 	let result = [];
+	// 	this.getChildren(true, true, false).forEach(t => result.push(...t.targets()));
+	// 	return result.filter((v, i) => result.indexOf(v) === i);
+	// }
+
+	tweenTo(position, vars) {
+		vars = vars || {};
+		let tl = this,
+			endTime = _parsePosition(tl, position),
+			{ startAt, onStart, onStartParams, immediateRender } = vars,
+			initted,
+			tween = Tween.to(tl, _setDefaults({
+				ease: vars.ease || "none",
+				lazy: false,
+				immediateRender: false,
+				time: endTime,
+				overwrite: "auto",
+				duration: vars.duration || (Math.abs((endTime - ((startAt && "time" in startAt) ? startAt.time : tl._time)) / tl.timeScale())) || _tinyNum,
+				onStart: () => {
+					tl.pause();
+					if (!initted) {
+						let duration = vars.duration || Math.abs((endTime - ((startAt && "time" in startAt) ? startAt.time : tl._time)) / tl.timeScale());
+						(tween._dur !== duration) && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);
+						initted = 1;
+					}
+					onStart && onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.
+				}
+			}, vars));
+		return immediateRender ? tween.render(0) : tween;
+	}
+
+	tweenFromTo(fromPosition, toPosition, vars) {
+		return this.tweenTo(toPosition, _setDefaults({startAt:{time:_parsePosition(this, fromPosition)}}, vars));
+	}
+
+	recent() {
+		return this._recent;
+	}
+
+	nextLabel(afterTime = this._time) {
+		return _getLabelInDirection(this, _parsePosition(this, afterTime));
+	}
+
+	previousLabel(beforeTime = this._time) {
+		return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
+	}
+
+	currentLabel(value) {
+		return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
+	}
+
+	shiftChildren(amount, adjustLabels, ignoreBeforeTime = 0) {
+		let child = this._first,
+			labels = this.labels,
+			p;
+		while (child) {
+			if (child._start >= ignoreBeforeTime) {
+				child._start += amount;
+				child._end += amount;
+			}
+			child = child._next;
+		}
+		if (adjustLabels) {
+			for (p in labels) {
+				if (labels[p] >= ignoreBeforeTime) {
+					labels[p] += amount;
+				}
+			}
+		}
+		return _uncache(this);
+	}
+
+	invalidate(soft) {
+		let child = this._first;
+		this._lock = 0;
+		while (child) {
+			child.invalidate(soft);
+			child = child._next;
+		}
+		return super.invalidate(soft);
+	}
+
+	clear(includeLabels = true) {
+		let child = this._first,
+			next;
+		while (child) {
+			next = child._next;
+			this.remove(child);
+			child = next;
+		}
+		this._dp && (this._time = this._tTime = this._pTime = 0);
+		includeLabels && (this.labels = {});
+		return _uncache(this);
+	}
+
+	totalDuration(value) {
+		let max = 0,
+			self = this,
+			child = self._last,
+			prevStart = _bigNum,
+			prev, start, parent;
+		if (arguments.length) {
+			return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
+		}
+		if (self._dirty) {
+			parent = self.parent;
+			while (child) {
+				prev = child._prev; //record it here in case the tween changes position in the sequence...
+				child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.
+				start = child._start;
+				if (start > prevStart && self._sort && child._ts && !self._lock) { //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
+					self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().
+					_addToTimeline(self, child, start - child._delay, 1)._lock = 0;
+				} else {
+					prevStart = start;
+				}
+				if (start < 0 && child._ts) { //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
+					max -= start;
+					if ((!parent && !self._dp) || (parent && parent.smoothChildTiming)) {
+						self._start += start / self._ts;
+						self._time -= start;
+						self._tTime -= start;
+					}
+					self.shiftChildren(-start, false, -1e999);
+					prevStart = 0;
+				}
+				child._end > max && child._ts && (max = child._end);
+				child = prev;
+			}
+			_setDuration(self, (self === _globalTimeline && self._time > max) ? self._time : max, 1, 1);
+			self._dirty = 0;
+		}
+		return self._tDur;
+	}
+
+	static updateRoot(time) {
+		if (_globalTimeline._ts) {
+			_lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));
+			_lastRenderedFrame = _ticker.frame;
+		}
+		if (_ticker.frame >= _nextGCFrame) {
+			_nextGCFrame += _config.autoSleep || 120;
+			let child = _globalTimeline._first;
+			if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
+				while (child && !child._ts) {
+					child = child._next;
+				}
+				child || _ticker.sleep();
+			}
+		}
+	}
+
+}
+
+_setDefaults(Timeline.prototype, {_lock:0, _hasPause:0, _forcing:0});
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+let _addComplexStringPropTween = function(target, prop, start, end, setter, stringFilter, funcParam) { //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
+		let pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
+			index = 0,
+			matchIndex = 0,
+			result,	startNums, color, endNum, chunk, startNum, hasRandom, a;
+		pt.b = start;
+		pt.e = end;
+		start += ""; //ensure values are strings
+		end += "";
+		if ((hasRandom = ~end.indexOf("random("))) {
+			end = _replaceRandom(end);
+		}
+		if (stringFilter) {
+			a = [start, end];
+			stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.
+			start = a[0];
+			end = a[1];
+		}
+		startNums = start.match(_complexStringNumExp) || [];
+		while ((result = _complexStringNumExp.exec(end))) {
+			endNum = result[0];
+			chunk = end.substring(index, result.index);
+			if (color) {
+				color = (color + 1) % 5;
+			} else if (chunk.substr(-5) === "rgba(") {
+				color = 1;
+			}
+			if (endNum !== startNums[matchIndex++]) {
+				startNum = parseFloat(startNums[matchIndex-1]) || 0;
+				//these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.
+				pt._pt = {
+					_next: pt._pt,
+					p: (chunk || matchIndex === 1) ? chunk : ",", //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
+					s: startNum,
+					c: endNum.charAt(1) === "=" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,
+					m: (color && color < 4) ? Math.round : 0
+				};
+				index = _complexStringNumExp.lastIndex;
+			}
+		}
+		pt.c = (index < end.length) ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
+		pt.fp = funcParam;
+		if (_relExp.test(end) || hasRandom) {
+			pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
+		}
+		this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
+		return pt;
+	},
+	_addPropTween = function(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {
+		_isFunction(end) && (end = end(index || 0, target, targets));
+		let currentValue = target[prop],
+			parsedStart = (start !== "get") ? start : !_isFunction(currentValue) ? currentValue : (funcParam ? target[(prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)])) ? prop : "get" + prop.substr(3)](funcParam) : target[prop]()),
+			setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
+			pt;
+		if (_isString(end)) {
+			if (~end.indexOf("random(")) {
+				end = _replaceRandom(end);
+			}
+			if (end.charAt(1) === "=") {
+				pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);
+				if (pt || pt === 0) { // to avoid isNaN, like if someone passes in a value like "!= whatever"
+					end = pt;
+				}
+			}
+		}
+		if (!optional || parsedStart !== end || _forceAllPropTweens) {
+			if (!isNaN(parsedStart * end) && end !== "") { // fun fact: any number multiplied by "" is evaluated as the number 0!
+				pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof(currentValue) === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
+				funcParam && (pt.fp = funcParam);
+				modifier && pt.modifier(modifier, this, target);
+				return (this._pt = pt);
+			}
+			!currentValue && !(prop in target) && _missingPlugin(prop, end);
+			return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
+		}
+	},
+	//creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with "random()" in them. It does NOT process relative values.
+	_processVars = (vars, index, target, targets, tween) => {
+		_isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));
+		if (!_isObject(vars) || (vars.style && vars.nodeType) || _isArray(vars) || _isTypedArray(vars)) {
+			return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
+		}
+		let copy = {},
+			p;
+		for (p in vars) {
+			copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
+		}
+		return copy;
+	},
+	_checkPlugin = (property, vars, tween, index, target, targets) => {
+		let plugin, pt, ptLookup, i;
+		if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
+			tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);
+			if (tween !== _quickTween) {
+				ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.
+				i = plugin._props.length;
+				while (i--) {
+					ptLookup[plugin._props[i]] = pt;
+				}
+			}
+		}
+		return plugin;
+	},
+	_overwritingTween, //store a reference temporarily so we can avoid overwriting itself.
+	_forceAllPropTweens,
+	_initTween = (tween, time, tTime) => {
+		let vars = tween.vars,
+			{ ease, startAt, immediateRender, lazy, onUpdate, runBackwards, yoyoEase, keyframes, autoRevert } = vars,
+			dur = tween._dur,
+			prevStartAt = tween._startAt,
+			targets = tween._targets,
+			parent = tween.parent,
+			//when a stagger (or function-based duration/delay) is on a Tween instance, we create a nested timeline which means that the "targets" of that tween don't reflect the parent. This function allows us to discern when it's a nested tween and in that case, return the full targets array so that function-based values get calculated properly. Also remember that if the tween has a stagger AND keyframes, it could be multiple levels deep which is why we store the targets Array in the vars of the timeline.
+			fullTargets = (parent && parent.data === "nested") ? parent.vars.targets : targets,
+			autoOverwrite = (tween._overwrite === "auto") && !_suppressOverwrites,
+			tl = tween.timeline,
+			cleanVars, i, p, pt, target, hasPriority, gsData, harness, plugin, ptLookup, index, harnessVars, overwritten;
+		tl && (!keyframes || !ease) && (ease = "none");
+		tween._ease = _parseEase(ease, _defaults.ease);
+		tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;
+		if (yoyoEase && tween._yoyo && !tween._repeat) { //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.
+			yoyoEase = tween._yEase;
+			tween._yEase = tween._ease;
+			tween._ease = yoyoEase;
+		}
+		tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.
+		if (!tl || (keyframes && !vars.stagger)) { //if there's an internal timeline, skip all the parsing because we passed that task down the chain.
+			harness = targets[0] ? _getCache(targets[0]).harness : 0;
+			harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.
+			cleanVars = _copyExcluding(vars, _reservedProps);
+			if (prevStartAt) {
+				prevStartAt._zTime < 0 && prevStartAt.progress(1); // in case it's a lazy startAt that hasn't rendered yet.
+				(time < 0 && runBackwards && immediateRender && !autoRevert) ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig); // if it's a "startAt" (not "from()" or runBackwards: true), we only need to do a shallow revert (keep transforms cached in CSSPlugin)
+				// don't just _removeFromParent(prevStartAt.render(-1, true)) because that'll leave inline styles. We're creating a new _startAt for "startAt" tweens that re-capture things to ensure that if the pre-tween values changed since the tween was created, they're recorded.
+				prevStartAt._lazy = 0;
+			}
+			if (startAt) {
+				_removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({data: "isStart", overwrite: false, parent: parent, immediateRender: true, lazy: !prevStartAt && _isNotFalse(lazy), startAt: null, delay: 0, onUpdate: onUpdate && (() => _callback(tween, "onUpdate")), stagger: 0}, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);
+				tween._startAt._dp = 0; // don't allow it to get put back into root timeline! Like when revert() is called and totalTime() gets set.
+				tween._startAt._sat = tween; // used in globalTime(). _sat stands for _startAtTween
+				(time < 0 && (_reverting || (!immediateRender && !autoRevert))) && tween._startAt.revert(_revertConfigNoKill); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.
+				if (immediateRender) {
+					if (dur && time <= 0 && tTime <= 0) { // check tTime here because in the case of a yoyo tween whose playhead gets pushed to the end like tween.progress(1), we should allow it through so that the onComplete gets fired properly.
+						time && (tween._zTime = time);
+						return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
+					}
+				}
+			} else if (runBackwards && dur) {
+				//from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
+				if (!prevStartAt) {
+					time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0
+					p = _setDefaults({
+						overwrite: false,
+						data: "isFromStart", //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
+						lazy: immediateRender && !prevStartAt && _isNotFalse(lazy),
+						immediateRender: immediateRender, //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
+						stagger: 0,
+						parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y: gsap.utils.wrap([-100,100]), stagger: 0.5})
+					}, cleanVars);
+					harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})
+					_removeFromParent(tween._startAt = Tween.set(targets, p));
+					tween._startAt._dp = 0; // don't allow it to get put back into root timeline!
+					tween._startAt._sat = tween; // used in globalTime()
+					(time < 0) && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));
+					tween._zTime = time;
+					if (!immediateRender) {
+						_initTween(tween._startAt, _tinyNum, _tinyNum); //ensures that the initial values are recorded
+					} else if (!time) {
+						return;
+					}
+				}
+			}
+			tween._pt = tween._ptCache = 0;
+			lazy = (dur && _isNotFalse(lazy)) || (lazy && !dur);
+			for (i = 0; i < targets.length; i++) {
+				target = targets[i];
+				gsData = target._gsap || _harness(targets)[i]._gsap;
+				tween._ptLookup[i] = ptLookup = {};
+				_lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)
+				index = fullTargets === targets ? i : fullTargets.indexOf(target);
+				if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
+					tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);
+					plugin._props.forEach(name => {ptLookup[name] = pt;});
+					plugin.priority && (hasPriority = 1);
+				}
+				if (!harness || harnessVars) {
+					for (p in cleanVars) {
+						if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
+							plugin.priority && (hasPriority = 1);
+						} else {
+							ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
+						}
+					}
+				}
+				tween._op && tween._op[i] && tween.kill(target, tween._op[i]);
+				if (autoOverwrite && tween._pt) {
+					_overwritingTween = tween;
+					_globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time)); // make sure the overwriting doesn't overwrite THIS tween!!!
+					overwritten = !tween.parent;
+					_overwritingTween = 0;
+				}
+				tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
+			}
+			hasPriority && _sortPropTweensByPriority(tween);
+			tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.
+		}
+		tween._onUpdate = onUpdate;
+		tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.
+		(keyframes && time <= 0) && tl.render(_bigNum, true, true); // if there's a 0% keyframe, it'll render in the "before" state for any staggered/delayed animations thus when the following tween initializes, it'll use the "before" state instead of the "after" state as the initial values.
+	},
+	_updatePropTweens = (tween, property, value, start, startIsRelative, ratio, time, skipRecursion) => {
+		let ptCache = ((tween._pt && tween._ptCache) || (tween._ptCache = {}))[property],
+			pt, rootPT, lookup, i;
+		if (!ptCache) {
+			ptCache = tween._ptCache[property] = [];
+			lookup = tween._ptLookup;
+			i = tween._targets.length;
+			while (i--) {
+				pt = lookup[i][property];
+				if (pt && pt.d && pt.d._pt) { // it's a plugin, so find the nested PropTween
+					pt = pt.d._pt;
+					while (pt && pt.p !== property && pt.fp !== property) { // "fp" is functionParam for things like setting CSS variables which require .setProperty("--var-name", value)
+						pt = pt._next;
+					}
+				}
+				if (!pt) { // there is no PropTween associated with that property, so we must FORCE one to be created and ditch out of this
+					// if the tween has other properties that already rendered at new positions, we'd normally have to rewind to put them back like tween.render(0, true) before forcing an _initTween(), but that can create another edge case like tweening a timeline's progress would trigger onUpdates to fire which could move other things around. It's better to just inform users that .resetTo() should ONLY be used for tweens that already have that property. For example, you can't gsap.to(...{ y: 0 }) and then tween.restTo("x", 200) for example.
+					_forceAllPropTweens = 1; // otherwise, when we _addPropTween() and it finds no change between the start and end values, it skips creating a PropTween (for efficiency...why tween when there's no difference?) but in this case we NEED that PropTween created so we can edit it.
+					tween.vars[property] = "+=0";
+					_initTween(tween, time);
+					_forceAllPropTweens = 0;
+					return skipRecursion ? _warn(property + " not eligible for reset") : 1; // if someone tries to do a quickTo() on a special property like borderRadius which must get split into 4 different properties, that's not eligible for .resetTo().
+				}
+				ptCache.push(pt);
+			}
+		}
+		i = ptCache.length;
+		while (i--) {
+			rootPT = ptCache[i];
+			pt = rootPT._pt || rootPT; // complex values may have nested PropTweens. We only accommodate the FIRST value.
+			pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;
+			pt.c = value - pt.s;
+			rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e)); // mainly for CSSPlugin (end value)
+			rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b));          // (beginning value)
+		}
+	},
+	_addAliasesToVars = (targets, vars) => {
+		let harness = targets[0] ? _getCache(targets[0]).harness : 0,
+			propertyAliases = (harness && harness.aliases),
+			copy, p, i, aliases;
+		if (!propertyAliases) {
+			return vars;
+		}
+		copy = _merge({}, vars);
+		for (p in propertyAliases) {
+			if (p in copy) {
+				aliases = propertyAliases[p].split(",");
+				i = aliases.length;
+				while(i--) {
+					copy[aliases[i]] = copy[p];
+				}
+			}
+
+		}
+		return copy;
+	},
+	// parses multiple formats, like {"0%": {x: 100}, {"50%": {x: -20}} and { x: {"0%": 100, "50%": -20} }, and an "ease" can be set on any object. We populate an "allProps" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a "t" (time), "v", (value), and "e" (ease) property. This allows us to piece together a timeline later.
+	_parseKeyframe = (prop, obj, allProps, easeEach) => {
+		let ease = obj.ease || easeEach || "power1.inOut",
+			p, a;
+		if (_isArray(obj)) {
+			a = allProps[prop] || (allProps[prop] = []);
+			// t = time (out of 100), v = value, e = ease
+			obj.forEach((value, i) => a.push({t: i / (obj.length - 1) * 100, v: value, e: ease}));
+		} else {
+			for (p in obj) {
+				a = allProps[p] || (allProps[p] = []);
+				p === "ease" || a.push({t: parseFloat(prop), v: obj[p], e: ease});
+			}
+		}
+	},
+	_parseFuncOrString = (value, tween, i, target, targets) => (_isFunction(value) ? value.call(tween, i, target, targets) : (_isString(value) && ~value.indexOf("random(")) ? _replaceRandom(value) : value),
+	_staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",
+	_staggerPropsToSkip = {};
+_forEachName(_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger", name => _staggerPropsToSkip[name] = 1);
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * TWEEN
+ * --------------------------------------------------------------------------------------
+ */
+
+class Tween extends Animation {
+
+	constructor(targets, vars, position, skipInherit) {
+		if (typeof(vars) === "number") {
+			position.duration = vars;
+			vars = position;
+			position = null;
+		}
+		super(skipInherit ? vars : _inheritDefaults(vars));
+		let { duration, delay, immediateRender, stagger, overwrite, keyframes, defaults, scrollTrigger, yoyoEase } = this.vars,
+			parent = vars.parent || _globalTimeline,
+			parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : ("length" in vars)) ? [targets] : toArray(targets), // edge case: someone might try animating the "length" of an object with a "length" property that's initially set to 0 so don't interpret that as an empty Array-like object.
+			tl, i, copy, l, p, curTarget, staggerFunc, staggerVarsToMerge;
+		this._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://gsap.com", !_config.nullTargetWarn) || [];
+		this._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property
+		this._overwrite = overwrite;
+		if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
+			vars = this.vars;
+			tl = this.timeline = new Timeline({data: "nested", defaults: defaults || {}, targets: parent && parent.data === "nested" ? parent.vars.targets : parsedTargets}); // we need to store the targets because for staggers and keyframes, we end up creating an individual tween for each but function-based values need to know the index and the whole Array of targets.
+			tl.kill();
+			tl.parent = tl._dp = this;
+			tl._start = 0;
+			if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
+				l = parsedTargets.length;
+				staggerFunc = stagger && distribute(stagger);
+				if (_isObject(stagger)) { //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.
+					for (p in stagger) {
+						if (~_staggerTweenProps.indexOf(p)) {
+							staggerVarsToMerge || (staggerVarsToMerge = {});
+							staggerVarsToMerge[p] = stagger[p];
+						}
+					}
+				}
+				for (i = 0; i < l; i++) {
+					copy = _copyExcluding(vars, _staggerPropsToSkip);
+					copy.stagger = 0;
+					yoyoEase && (copy.yoyoEase = yoyoEase);
+					staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
+					curTarget = parsedTargets[i];
+					//don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.
+					copy.duration = +_parseFuncOrString(duration, this, i, curTarget, parsedTargets);
+					copy.delay = (+_parseFuncOrString(delay, this, i, curTarget, parsedTargets) || 0) - this._delay;
+					if (!stagger && l === 1 && copy.delay) { // if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.
+						this._delay = delay = copy.delay;
+						this._start += delay;
+						copy.delay = 0;
+					}
+					tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);
+					tl._ease = _easeMap.none;
+				}
+				tl.duration() ? (duration = delay = 0) : (this.timeline = 0); // if the timeline's duration is 0, we don't need a timeline internally!
+			} else if (keyframes) {
+				_inheritDefaults(_setDefaults(tl.vars.defaults, {ease:"none"}));
+				tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
+				let time = 0,
+					a, kf, v;
+				if (_isArray(keyframes)) {
+					keyframes.forEach(frame => tl.to(parsedTargets, frame, ">"));
+					tl.duration(); // to ensure tl._dur is cached because we tap into it for performance purposes in the render() method.
+				} else {
+					copy = {};
+					for (p in keyframes) {
+						p === "ease" || p === "easeEach" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
+					}
+					for (p in copy) {
+						a = copy[p].sort((a, b) => a.t - b.t);
+						time = 0;
+						for (i = 0; i < a.length; i++) {
+							kf = a[i];
+							v = {ease: kf.e, duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration};
+							v[p] = kf.v;
+							tl.to(parsedTargets, v, time);
+							time += v.duration;
+						}
+					}
+					tl.duration() < duration && tl.to({}, {duration: duration - tl.duration()}); // in case keyframes didn't go to 100%
+				}
+			}
+			duration || this.duration((duration = tl.duration()));
+
+		} else {
+			this.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)
+		}
+
+		if (overwrite === true && !_suppressOverwrites) {
+			_overwritingTween = this;
+			_globalTimeline.killTweensOf(parsedTargets);
+			_overwritingTween = 0;
+		}
+		_addToTimeline(parent, this, position);
+		vars.reversed && this.reverse();
+		vars.paused && this.paused(true);
+		if (immediateRender || (!duration && !keyframes && this._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(this) && parent.data !== "nested")) {
+			this._tTime = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
+			this.render(Math.max(0, -delay) || 0); //in case delay is negative
+		}
+		scrollTrigger && _scrollTrigger(this, scrollTrigger);
+	}
+
+	render(totalTime, suppressEvents, force) {
+		let prevTime = this._time,
+			tDur = this._tDur,
+			dur = this._dur,
+			isNegative = totalTime < 0,
+			tTime = (totalTime > tDur - _tinyNum && !isNegative) ? tDur : (totalTime < _tinyNum) ? 0 : totalTime,
+			time, pt, iteration, cycleDuration, prevIteration, isYoyo, ratio, timeline, yoyoEase;
+		if (!dur) {
+			_renderZeroDurationTween(this, totalTime, suppressEvents, force);
+		} else if (tTime !== this._tTime || !totalTime || force || (!this._initted && this._tTime) || (this._startAt && (this._zTime < 0) !== isNegative)) { //this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)
+			time = tTime;
+			timeline = this.timeline;
+			if (this._repeat) { //adjust the time for repeats and yoyos
+				cycleDuration = dur + this._rDelay;
+				if (this._repeat < -1 && isNegative) {
+					return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
+				}
+				time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)
+				if (tTime === tDur) { // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
+					iteration = this._repeat;
+					time = dur;
+				} else {
+					iteration = ~~(tTime / cycleDuration);
+					if (iteration && iteration === _roundPrecise(tTime / cycleDuration)) {
+						time = dur;
+						iteration--;
+					}
+					time > dur && (time = dur);
+				}
+				isYoyo = this._yoyo && (iteration & 1);
+				if (isYoyo) {
+					yoyoEase = this._yEase;
+					time = dur - time;
+				}
+				prevIteration = _animationCycle(this._tTime, cycleDuration);
+				if (time === prevTime && !force && this._initted && iteration === prevIteration) {
+					//could be during the repeatDelay part. No need to render and fire callbacks.
+					this._tTime = tTime;
+					return this;
+				}
+				if (iteration !== prevIteration) {
+					timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo);
+					//repeatRefresh functionality
+					if (this.vars.repeatRefresh && !isYoyo && !this._lock && this._time !== cycleDuration && this._initted) { // this._time will === cycleDuration when we render at EXACTLY the end of an iteration. Without this condition, it'd often do the repeatRefresh render TWICE (again on the very next tick).
+						this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.
+						this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;
+					}
+				}
+			}
+
+			if (!this._initted) {
+				if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {
+					this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.
+					return this;
+				}
+				if (prevTime !== this._time && !(force && this.vars.repeatRefresh && iteration !== prevIteration)) { // rare edge case - during initialization, an onUpdate in the _startAt (.fromTo()) might force this tween to render at a different spot in which case we should ditch this render() call so that it doesn't revert the values. But we also don't want to dump if we're doing a repeatRefresh render!
+					return this;
+				}
+				if (dur !== this._dur) { // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.
+					return this.render(totalTime, suppressEvents, force);
+				}
+			}
+
+			this._tTime = tTime;
+			this._time = time;
+
+			if (!this._act && this._ts) {
+				this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.
+				this._lazy = 0;
+			}
+
+			this.ratio = ratio = (yoyoEase || this._ease)(time / dur);
+			if (this._from) {
+				this.ratio = ratio = 1 - ratio;
+			}
+
+			if (time && !prevTime && !suppressEvents && !iteration) {
+				_callback(this, "onStart");
+				if (this._tTime !== tTime) { // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
+					return this;
+				}
+			}
+			pt = this._pt;
+			while (pt) {
+				pt.r(ratio, pt.d);
+				pt = pt._next;
+			}
+			(timeline && timeline.render(totalTime < 0 ? totalTime : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force)) || (this._startAt && (this._zTime = totalTime));
+
+			if (this._onUpdate && !suppressEvents) {
+				isNegative && _rewindStartAt(this, totalTime, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
+				_callback(this, "onUpdate");
+			}
+
+			this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");
+
+			if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
+				isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);
+				(totalTime || !dur) && ((tTime === this._tDur && this._ts > 0) || (!tTime && this._ts < 0)) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.
+			    if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) { // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();
+					_callback(this, (tTime === tDur ? "onComplete" : "onReverseComplete"), true);
+					this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
+				}
+			}
+
+		}
+		return this;
+	}
+
+	targets() {
+		return this._targets;
+	}
+
+	invalidate(soft) { // "soft" gives us a way to clear out everything EXCEPT the recorded pre-"from" portion of from() tweens. Otherwise, for example, if you tween.progress(1).render(0, true true).invalidate(), the "from" values would persist and then on the next render, the from() tweens would initialize and the current value would match the "from" values, thus animate from the same value to the same value (no animation). We tap into this in ScrollTrigger's refresh() where we must push a tween to completion and then back again but honor its init state in case the tween is dependent on another tween further up on the page.
+		(!soft || !this.vars.runBackwards) && (this._startAt = 0);
+		this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;
+		this._ptLookup = [];
+		this.timeline && this.timeline.invalidate(soft);
+		return super.invalidate(soft);
+	}
+
+	resetTo(property, value, start, startIsRelative, skipRecursion) {
+		_tickerActive || _ticker.wake();
+		this._ts || this.play();
+		let time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),
+			ratio;
+		this._initted || _initTween(this, time);
+		ratio = this._ease(time / this._dur); // don't just get tween.ratio because it may not have rendered yet.
+		// possible future addition to allow an object with multiple values to update, like tween.resetTo({x: 100, y: 200}); At this point, it doesn't seem worth the added kb given the fact that most users will likely opt for the convenient gsap.quickTo() way of interacting with this method.
+		// if (_isObject(property)) { // performance optimization
+		// 	for (p in property) {
+		// 		if (_updatePropTweens(this, p, property[p], value ? value[p] : null, start, ratio, time)) {
+		// 			return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
+		// 		}
+		// 	}
+		// } else {
+			if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time, skipRecursion)) {
+				return this.resetTo(property, value, start, startIsRelative, 1); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
+			}
+		//}
+		_alignPlayhead(this, 0);
+		this.parent || _addLinkedListItem(this._dp, this, "_first", "_last", this._dp._sort ? "_start" : 0);
+		return this.render(0);
+	}
+
+	kill(targets, vars = "all") {
+		if (!targets && (!vars || vars === "all")) {
+			this._lazy = this._pt = 0;
+			return this.parent ? _interrupt(this) : this;
+		}
+		if (this.timeline) {
+			let tDur = this.timeline.totalDuration();
+			this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweening, interrupt.
+			this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.
+			return this;
+		}
+		let parsedTargets = this._targets,
+			killingTargets = targets ? toArray(targets) : parsedTargets,
+			propTweenLookup = this._ptLookup,
+			firstPT = this._pt,
+			overwrittenProps, curLookup, curOverwriteProps, props, p, pt, i;
+		if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
+			vars === "all" && (this._pt = 0);
+			return _interrupt(this);
+		}
+		overwrittenProps = this._op = this._op || [];
+		if (vars !== "all") { //so people can pass in a comma-delimited list of property names
+			if (_isString(vars)) {
+				p = {};
+				_forEachName(vars, name => p[name] = 1);
+				vars = p;
+			}
+			vars = _addAliasesToVars(parsedTargets, vars);
+		}
+		i = parsedTargets.length;
+		while (i--) {
+			if (~killingTargets.indexOf(parsedTargets[i])) {
+				curLookup = propTweenLookup[i];
+				if (vars === "all") {
+					overwrittenProps[i] = vars;
+					props = curLookup;
+					curOverwriteProps = {};
+				} else {
+					curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
+					props = vars;
+				}
+				for (p in props) {
+					pt = curLookup && curLookup[p];
+					if (pt) {
+						if (!("kill" in pt.d) || pt.d.kill(p) === true) {
+							_removeLinkedListItem(this, pt, "_pt");
+						}
+						delete curLookup[p];
+					}
+					if (curOverwriteProps !== "all") {
+						curOverwriteProps[p] = 1;
+					}
+				}
+			}
+		}
+		this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.
+		return this;
+	}
+
+
+	static to(targets, vars) {
+		return new Tween(targets, vars, arguments[2]);
+	}
+
+	static from(targets, vars) {
+		return _createTweenType(1, arguments);
+	}
+
+	static delayedCall(delay, callback, params, scope) {
+		return new Tween(callback, 0, {immediateRender:false, lazy:false, overwrite:false, delay:delay, onComplete:callback, onReverseComplete:callback, onCompleteParams:params, onReverseCompleteParams:params, callbackScope:scope}); // we must use onReverseComplete too for things like timeline.add(() => {...}) which should be triggered in BOTH directions (forward and reverse)
+	}
+
+	static fromTo(targets, fromVars, toVars) {
+		return _createTweenType(2, arguments);
+	}
+
+	static set(targets, vars) {
+		vars.duration = 0;
+		vars.repeatDelay || (vars.repeat = 0);
+		return new Tween(targets, vars);
+	}
+
+	static killTweensOf(targets, props, onlyActive) {
+		return _globalTimeline.killTweensOf(targets, props, onlyActive);
+	}
+}
+
+_setDefaults(Tween.prototype, {_targets:[], _lazy:0, _startAt:0, _op:0, _onInit:0});
+
+//add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)
+// _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {
+// 	Tween.prototype[name] = function() {
+// 		let tl = new Timeline();
+// 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));
+// 	}
+// });
+
+//for backward compatibility. Leverage the timeline calls.
+_forEachName("staggerTo,staggerFrom,staggerFromTo", name => {
+	Tween[name] = function() {
+		let tl = new Timeline(),
+			params = _slice.call(arguments, 0);
+		params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
+		return tl[name].apply(tl, params);
+	};
+});
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * PROPTWEEN
+ * --------------------------------------------------------------------------------------
+ */
+let _setterPlain = (target, property, value) => target[property] = value,
+	_setterFunc = (target, property, value) => target[property](value),
+	_setterFuncWithParam = (target, property, value, data) => target[property](data.fp, value),
+	_setterAttribute = (target, property, value) => target.setAttribute(property, value),
+	_getSetter = (target, property) => _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain,
+	_renderPlain = (ratio, data) => data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data),
+	_renderBoolean = (ratio, data) => data.set(data.t, data.p, !!(data.s + data.c * ratio), data),
+	_renderComplexString = function(ratio, data) {
+		let pt = data._pt,
+			s = "";
+		if (!ratio && data.b) { //b = beginning string
+			s = data.b;
+		} else if (ratio === 1 && data.e) { //e = ending string
+			s = data.e;
+		} else {
+			while (pt) {
+				s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : (Math.round((pt.s + pt.c * ratio) * 10000) / 10000)) + s; //we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.
+				pt = pt._next;
+			}
+			s += data.c; //we use the "c" of the PropTween to store the final chunk of non-numeric text.
+		}
+		data.set(data.t, data.p, s, data);
+	},
+	_renderPropTweens = function(ratio, data) {
+		let pt = data._pt;
+		while (pt) {
+			pt.r(ratio, pt.d);
+			pt = pt._next;
+		}
+	},
+	_addPluginModifier = function(modifier, tween, target, property) {
+		let pt = this._pt,
+			next;
+		while (pt) {
+			next = pt._next;
+			pt.p === property && pt.modifier(modifier, tween, target);
+			pt = next;
+		}
+	},
+	_killPropTweensOf = function(property) {
+		let pt = this._pt,
+			hasNonDependentRemaining, next;
+		while (pt) {
+			next = pt._next;
+			if ((pt.p === property && !pt.op) || pt.op === property) {
+				_removeLinkedListItem(this, pt, "_pt");
+			} else if (!pt.dep) {
+				hasNonDependentRemaining = 1;
+			}
+			pt = next;
+		}
+		return !hasNonDependentRemaining;
+	},
+	_setterWithModifier = (target, property, value, data) => {
+		data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
+	},
+	_sortPropTweensByPriority = parent => {
+		let pt = parent._pt,
+			next, pt2, first, last;
+		//sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)
+		while (pt) {
+			next = pt._next;
+			pt2 = first;
+			while (pt2 && pt2.pr > pt.pr) {
+				pt2 = pt2._next;
+			}
+			if ((pt._prev = pt2 ? pt2._prev : last)) {
+				pt._prev._next = pt;
+			} else {
+				first = pt;
+			}
+			if ((pt._next = pt2)) {
+				pt2._prev = pt;
+			} else {
+				last = pt;
+			}
+			pt = next;
+		}
+		parent._pt = first;
+	};
+
+//PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)
+class PropTween {
+
+	constructor(next, target, prop, start, change, renderer, data, setter, priority) {
+		this.t = target;
+		this.s = start;
+		this.c = change;
+		this.p = prop;
+		this.r = renderer || _renderPlain;
+		this.d = data || this;
+		this.set = setter || _setterPlain;
+		this.pr = priority || 0;
+		this._next = next;
+		if (next) {
+			next._prev = this;
+		}
+	}
+
+	modifier(func, tween, target) {
+		this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)
+		this.set = _setterWithModifier;
+		this.m = func;
+		this.mt = target; //modifier target
+		this.tween = tween;
+	}
+}
+
+
+
+//Initialization tasks
+_forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", name => _reservedProps[name] = 1);
+_globals.TweenMax = _globals.TweenLite = Tween;
+_globals.TimelineLite = _globals.TimelineMax = Timeline;
+_globalTimeline = new Timeline({sortChildren: false, defaults: _defaults, autoRemoveChildren: true, id:"root", smoothChildTiming: true});
+_config.stringFilter = _colorStringFilter;
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+let _media = [],
+	_listeners = {},
+	_emptyArray = [],
+	_lastMediaTime = 0,
+	_contextID = 0,
+	_dispatch = type => (_listeners[type] || _emptyArray).map(f => f()),
+	_onMediaChange = () => {
+		let time = Date.now(),
+			matches = [];
+		if (time - _lastMediaTime > 2) {
+			_dispatch("matchMediaInit");
+			_media.forEach(c => {
+				let queries = c.queries,
+					conditions = c.conditions,
+					match, p, anyMatch, toggled;
+				for (p in queries) {
+					match = _win.matchMedia(queries[p]).matches; // Firefox doesn't update the "matches" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.
+					match && (anyMatch = 1);
+					if (match !== conditions[p]) {
+						conditions[p] = match;
+						toggled = 1;
+					}
+				}
+				if (toggled) {
+					c.revert();
+					anyMatch && matches.push(c);
+				}
+			});
+			_dispatch("matchMediaRevert");
+			matches.forEach(c => c.onMatch(c, func => c.add(null, func)));
+			_lastMediaTime = time;
+			_dispatch("matchMedia");
+		}
+	};
+
+class Context {
+	constructor(func, scope) {
+		this.selector = scope && selector(scope);
+		this.data = [];
+		this._r = []; // returned/cleanup functions
+		this.isReverted = false;
+		this.id = _contextID++; // to work around issues that frameworks like Vue cause by making things into Proxies which make it impossible to do something like _media.indexOf(this) because "this" would no longer refer to the Context instance itself - it'd refer to a Proxy! We needed a way to identify the context uniquely
+		func && this.add(func);
+	}
+	add(name, func, scope) {
+		// possible future addition if we need the ability to add() an animation to a context and for whatever reason cannot create that animation inside of a context.add(() => {...}) function.
+		// if (name && _isFunction(name.revert)) {
+		// 	this.data.push(name);
+		// 	return (name._ctx = this);
+		// }
+		if (_isFunction(name)) {
+			scope = func;
+			func = name;
+			name = _isFunction;
+		}
+		let self = this,
+			f = function() {
+				let prev = _context,
+					prevSelector = self.selector,
+					result;
+				prev && prev !== self && prev.data.push(self);
+				scope && (self.selector = selector(scope));
+				_context = self;
+				result = func.apply(self, arguments);
+				_isFunction(result) && self._r.push(result);
+				_context = prev;
+				self.selector = prevSelector;
+				self.isReverted = false;
+				return result;
+			};
+		self.last = f;
+		return name === _isFunction ? f(self, func => self.add(null, func)) : name ? (self[name] = f) : f;
+	}
+	ignore(func) {
+		let prev = _context;
+		_context = null;
+		func(this);
+		_context = prev;
+	}
+	getTweens() {
+		let a = [];
+		this.data.forEach(e => (e instanceof Context) ? a.push(...e.getTweens()) : (e instanceof Tween) && !(e.parent && e.parent.data === "nested") && a.push(e));
+		return a;
+	}
+	clear() {
+		this._r.length = this.data.length = 0;
+	}
+	kill(revert, matchMedia) {
+		if (revert) {
+			let tweens = this.getTweens(),
+				i = this.data.length,
+				t;
+			while (i--) { // Flip plugin tweens are very different in that they should actually be pushed to their end. The plugin replaces the timeline's .revert() method to do exactly that. But we also need to remove any of those nested tweens inside the flip timeline so that they don't get individually reverted.
+				t = this.data[i];
+				if (t.data === "isFlip") {
+					t.revert();
+					t.getChildren(true, true, false).forEach(tween => tweens.splice(tweens.indexOf(tween), 1));
+				}
+			}
+			// save as an object so that we can cache the globalTime for each tween to optimize performance during the sort
+			tweens.map(t => { return {g: t._dur || t._delay || (t._sat && !t._sat.vars.immediateRender) ? t.globalTime(0) : -Infinity, t}}).sort((a, b) => b.g - a.g || -Infinity).forEach(o => o.t.revert(revert)); // note: all of the _startAt tweens should be reverted in reverse order that they were created, and they'll all have the same globalTime (-1) so the " || -1" in the sort keeps the order properly.
+			i = this.data.length;
+			while (i--) { // make sure we loop backwards so that, for example, SplitTexts that were created later on the same element get reverted first
+				t = this.data[i];
+				if (t instanceof Timeline) {
+					if (t.data !== "nested") {
+						t.scrollTrigger && t.scrollTrigger.revert();
+						t.kill(); // don't revert() the timeline because that's duplicating efforts since we already reverted all the tweens
+					}
+				} else {
+					!(t instanceof Tween) && t.revert && t.revert(revert);
+				}
+			}
+			this._r.forEach(f => f(revert, this));
+			this.isReverted = true;
+		} else {
+			this.data.forEach(e => e.kill && e.kill());
+		}
+		this.clear();
+		if (matchMedia) {
+			let i = _media.length;
+			while (i--) { // previously, we checked _media.indexOf(this), but some frameworks like Vue enforce Proxy objects that make it impossible to get the proper result that way, so we must use a unique ID number instead.
+				_media[i].id === this.id && _media.splice(i, 1);
+			}
+		}
+	}
+	revert(config) {
+		this.kill(config || {});
+	}
+}
+
+
+
+
+class MatchMedia {
+	constructor(scope) {
+		this.contexts = [];
+		this.scope = scope;
+		_context && _context.data.push(this);
+	}
+	add(conditions, func, scope) {
+		_isObject(conditions) || (conditions = {matches: conditions});
+		let context = new Context(0, scope || this.scope),
+			cond = context.conditions = {},
+			mq, p, active;
+		_context && !context.selector && (context.selector = _context.selector); // in case a context is created inside a context. Like a gsap.matchMedia() that's inside a scoped gsap.context()
+		this.contexts.push(context);
+		func = context.add("onMatch", func);
+		context.queries = conditions;
+		for (p in conditions) {
+			if (p === "all") {
+				active = 1;
+			} else {
+				mq = _win.matchMedia(conditions[p]);
+				if (mq) {
+					_media.indexOf(context) < 0 && _media.push(context);
+					(cond[p] = mq.matches) && (active = 1);
+					mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener("change", _onMediaChange);
+				}
+			}
+		}
+		active && func(context, f => context.add(null, f));
+		return this;
+	}
+	// refresh() {
+	// 	let time = _lastMediaTime,
+	// 		media = _media;
+	// 	_lastMediaTime = -1;
+	// 	_media = this.contexts;
+	// 	_onMediaChange();
+	// 	_lastMediaTime = time;
+	// 	_media = media;
+	// }
+	revert(config) {
+		this.kill(config || {});
+	}
+	kill(revert) {
+		this.contexts.forEach(c => c.kill(revert, true));
+	}
+}
+
+
+
+/*
+ * --------------------------------------------------------------------------------------
+ * GSAP
+ * --------------------------------------------------------------------------------------
+ */
+const _gsap = {
+	registerPlugin(...args) {
+		args.forEach(config => _createPlugin(config));
+	},
+	timeline(vars) {
+		return new Timeline(vars);
+	},
+	getTweensOf(targets, onlyActive) {
+		return _globalTimeline.getTweensOf(targets, onlyActive);
+	},
+	getProperty(target, property, unit, uncache) {
+		_isString(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in
+		let getter = _getCache(target || {}).get,
+			format = unit ? _passThrough : _numericIfPossible;
+		unit === "native" && (unit = "");
+		return !target ? target : !property ? (property, unit, uncache) => format(((_plugins[property] && _plugins[property].get) || getter)(target, property, unit, uncache)) : format(((_plugins[property] && _plugins[property].get) || getter)(target, property, unit, uncache));
+	},
+	quickSetter(target, property, unit) {
+		target = toArray(target);
+		if (target.length > 1) {
+			let setters = target.map(t => gsap.quickSetter(t, property, unit)),
+				l = setters.length;
+			return value => {
+				let i = l;
+				while(i--) {
+					setters[i](value);
+				}
+			}
+		}
+		target = target[0] || {};
+		let Plugin = _plugins[property],
+			cache = _getCache(target),
+			p = (cache.harness && (cache.harness.aliases || {})[property]) || property, // in case it's an alias, like "rotate" for "rotation".
+			setter = Plugin ? value => {
+				let p = new Plugin();
+				_quickTween._pt = 0;
+				p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
+				p.render(1, p);
+				_quickTween._pt && _renderPropTweens(1, _quickTween);
+			} : cache.set(target, p);
+		return Plugin ? setter : value => setter(target, p, unit ? value + unit : value, cache, 1);
+	},
+	quickTo(target, property, vars) {
+		let tween = gsap.to(target, _merge({[property]: "+=0.1", paused: true}, vars || {})),
+			func = (value, start, startIsRelative) => tween.resetTo(property, value, start, startIsRelative);
+		func.tween = tween;
+		return func;
+	},
+	isTweening(targets) {
+		return _globalTimeline.getTweensOf(targets, true).length > 0;
+	},
+	defaults(value) {
+		value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));
+		return _mergeDeep(_defaults, value || {});
+	},
+	config(value) {
+		return _mergeDeep(_config, value || {});
+	},
+	registerEffect({name, effect, plugins, defaults, extendTimeline}) {
+		(plugins || "").split(",").forEach(pluginName => pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin."));
+		_effects[name] = (targets, vars, tl) => effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);
+		if (extendTimeline) {
+			Timeline.prototype[name] = function(targets, vars, position) {
+				return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
+			};
+		}
+	},
+	registerEase(name, ease) {
+		_easeMap[name] = _parseEase(ease);
+	},
+	parseEase(ease, defaultEase) {
+		return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
+	},
+	getById(id) {
+		return _globalTimeline.getById(id);
+	},
+	exportRoot(vars = {}, includeDelayedCalls) {
+		let tl = new Timeline(vars),
+			child, next;
+		tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);
+		_globalTimeline.remove(tl);
+		tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).
+		tl._time = tl._tTime = _globalTimeline._time;
+		child = _globalTimeline._first;
+		while (child) {
+			next = child._next;
+			if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
+				_addToTimeline(tl, child, child._start - child._delay);
+			}
+			child = next;
+		}
+		_addToTimeline(_globalTimeline, tl, 0);
+		return tl;
+	},
+	context: (func, scope) => func ? new Context(func, scope) : _context,
+	matchMedia: scope => new MatchMedia(scope),
+	matchMediaRefresh: () => _media.forEach(c => {
+		let cond = c.conditions,
+			found, p;
+		for (p in cond) {
+			if (cond[p]) {
+				cond[p] = false;
+				found = 1;
+			}
+		}
+		found && c.revert();
+	}) || _onMediaChange(),
+	addEventListener(type, callback) {
+		let a = _listeners[type] || (_listeners[type] = []);
+		~a.indexOf(callback) || a.push(callback);
+	},
+	removeEventListener(type, callback) {
+		let a = _listeners[type],
+			i = a && a.indexOf(callback);
+		i >= 0 && a.splice(i, 1);
+	},
+	utils: { wrap, wrapYoyo, distribute, random, snap, normalize, getUnit, clamp, splitColor, toArray, selector, mapRange, pipe, unitize, interpolate, shuffle },
+	install: _install,
+	effects: _effects,
+	ticker: _ticker,
+	updateRoot: Timeline.updateRoot,
+	plugins: _plugins,
+	globalTimeline: _globalTimeline,
+	core: {PropTween, globals: _addGlobal, Tween, Timeline, Animation, getCache: _getCache, _removeLinkedListItem, reverting: () => _reverting, context: toAdd => {if (toAdd && _context) { _context.data.push(toAdd); toAdd._ctx = _context;} return _context; }, suppressOverwrites: value => _suppressOverwrites = value}
+};
+
+_forEachName("to,from,fromTo,delayedCall,set,killTweensOf", name => _gsap[name] = Tween[name]);
+_ticker.add(Timeline.updateRoot);
+_quickTween = _gsap.to({}, {duration:0});
+
+
+
+
+// ---- EXTRA PLUGINS --------------------------------------------------------
+
+
+let _getPluginPropTween = (plugin, prop) => {
+		let pt = plugin._pt;
+		while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
+			pt = pt._next;
+		}
+		return pt;
+	},
+	_addModifiers = (tween, modifiers) => {
+			let	targets = tween._targets,
+				p, i, pt;
+			for (p in modifiers) {
+				i = targets.length;
+				while (i--) {
+					pt = tween._ptLookup[i][p];
+					if (pt && (pt = pt.d)) {
+						if (pt._pt) { // is a plugin
+							pt = _getPluginPropTween(pt, p);
+						}
+						pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
+					}
+				}
+			}
+	},
+	_buildModifierPlugin = (name, modifier) => {
+		return {
+			name: name,
+			rawVars: 1, //don't pre-process function-based values or "random()" strings.
+			init(target, vars, tween) {
+				tween._onInit = tween => {
+					let temp, p;
+					if (_isString(vars)) {
+						temp = {};
+						_forEachName(vars, name => temp[name] = 1); //if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.
+						vars = temp;
+					}
+					if (modifier) {
+						temp = {};
+						for (p in vars) {
+							temp[p] = modifier(vars[p]);
+						}
+						vars = temp;
+					}
+					_addModifiers(tween, vars);
+				};
+			}
+		};
+	};
+
+//register core plugins
+const gsap = _gsap.registerPlugin({
+		name:"attr",
+		init(target, vars, tween, index, targets) {
+			let p, pt, v;
+			this.tween = tween;
+			for (p in vars) {
+				v = target.getAttribute(p) || "";
+				pt = this.add(target, "setAttribute", (v || 0) + "", vars[p], index, targets, 0, 0, p);
+				pt.op = p;
+				pt.b = v; // record the beginning value so we can revert()
+				this._props.push(p);
+			}
+		},
+		render(ratio, data) {
+			let pt = data._pt;
+			while (pt) {
+				_reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d); // if reverting, go back to the original (pt.b)
+				pt = pt._next;
+			}
+		}
+	}, {
+		name:"endArray",
+		init(target, value) {
+			let i = value.length;
+			while (i--) {
+				this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);
+			}
+		}
+	},
+	_buildModifierPlugin("roundProps", _roundModifier),
+	_buildModifierPlugin("modifiers"),
+	_buildModifierPlugin("snap", snap)
+) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.
+
+Tween.version = Timeline.version = gsap.version = "3.12.5";
+_coreReady = 1;
+_windowExists() && _wake();
+
+const { Power0, Power1, Power2, Power3, Power4, Linear, Quad, Cubic, Quart, Quint, Strong, Elastic, Back, SteppedEase, Bounce, Sine, Expo, Circ } = _easeMap;
+
+export { Animation, Back, Bounce, Circ, Cubic, Elastic, Expo, GSCache, Linear, Power0, Power1, Power2, Power3, Power4, PropTween, Quad, Quart, Quint, Sine, SteppedEase, Strong, Timeline, Timeline as TimelineLite, Timeline as TimelineMax, Tween, Tween as TweenLite, Tween as TweenMax, _checkPlugin, _colorExp, _colorStringFilter, _config, _forEachName, _getCache, _getProperty, _getSetter, _isString, _isUndefined, _missingPlugin, _numExp, _numWithUnitExp, _parseRelative, _plugins, _relExp, _removeLinkedListItem, _renderComplexString, _replaceRandom, _round, _roundModifier, _setDefaults, _sortPropTweensByPriority, _ticker, clamp, gsap as default, distribute, getUnit, gsap, interpolate, mapRange, normalize, pipe, random, selector, shuffle, snap, splitColor, toArray, unitize, wrap, wrapYoyo };
diff --git a/dist/gsap.js b/dist/gsap.js
deleted file mode 100644
index 55781077a74ab2ecabdab7f6b07e78d1c6769f72..0000000000000000000000000000000000000000
diff --git a/dist/gsap.min.js b/dist/gsap.min.js
deleted file mode 100644
index 14dd0a4853b3801f10d6bfb19798bd431b5e5841..0000000000000000000000000000000000000000
diff --git a/dist/gsap.min.js.map b/dist/gsap.min.js.map
deleted file mode 100644
index dcf252e1005c3878442188c33162894c911a9bd2..0000000000000000000000000000000000000000
diff --git a/dist/index.cjs b/dist/index.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..35ebe9cdf806cbcb2ee3bf4297edac1cfbf329c8
--- /dev/null
+++ b/dist/index.cjs
@@ -0,0 +1,35 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+const gsapCore = require('./gsap-core.cjs');
+const CSSPlugin = require('./CSSPlugin.cjs');
+
+const gsapWithCSS = gsapCore.gsap.registerPlugin(CSSPlugin.CSSPlugin) || gsapCore.gsap, // to protect from tree shaking
+	TweenMaxWithCSS = gsapWithCSS.core.Tween;
+
+exports.Back = gsapCore.Back;
+exports.Bounce = gsapCore.Bounce;
+exports.Circ = gsapCore.Circ;
+exports.Cubic = gsapCore.Cubic;
+exports.Elastic = gsapCore.Elastic;
+exports.Expo = gsapCore.Expo;
+exports.Linear = gsapCore.Linear;
+exports.Power0 = gsapCore.Power0;
+exports.Power1 = gsapCore.Power1;
+exports.Power2 = gsapCore.Power2;
+exports.Power3 = gsapCore.Power3;
+exports.Power4 = gsapCore.Power4;
+exports.Quad = gsapCore.Quad;
+exports.Quart = gsapCore.Quart;
+exports.Quint = gsapCore.Quint;
+exports.Sine = gsapCore.Sine;
+exports.SteppedEase = gsapCore.SteppedEase;
+exports.Strong = gsapCore.Strong;
+exports.TimelineLite = gsapCore.Timeline;
+exports.TimelineMax = gsapCore.Timeline;
+exports.TweenLite = gsapCore.Tween;
+exports.CSSPlugin = CSSPlugin.CSSPlugin;
+exports.TweenMax = TweenMaxWithCSS;
+exports.default = gsapWithCSS;
+exports.gsap = gsapWithCSS;
diff --git a/dist/index.d.cts b/dist/index.d.cts
new file mode 100644
index 0000000000000000000000000000000000000000..3f6e7792e57105071a1fa4c981c5a7d50fd74798
--- /dev/null
+++ b/dist/index.d.cts
@@ -0,0 +1,8 @@
+import { gsap } from './gsap-core.cjs';
+export { Back, Bounce, Circ, Cubic, Elastic, Expo, Linear, Power0, Power1, Power2, Power3, Power4, Quad, Quart, Quint, Sine, SteppedEase, Strong, Timeline as TimelineLite, Timeline as TimelineMax, Tween as TweenLite } from './gsap-core.cjs';
+import { CSSPlugin } from './CSSPlugin.cjs';
+
+const gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap, // to protect from tree shaking
+	TweenMaxWithCSS = gsapWithCSS.core.Tween;
+
+export { CSSPlugin, TweenMaxWithCSS as TweenMax, gsapWithCSS as default, gsapWithCSS as gsap };
diff --git a/dist/index.d.mts b/dist/index.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..2f8e6ac4c02924f78e34b18c5b294a84b5b9a00b
--- /dev/null
+++ b/dist/index.d.mts
@@ -0,0 +1,8 @@
+import { gsap } from './gsap-core.mjs';
+export { Back, Bounce, Circ, Cubic, Elastic, Expo, Linear, Power0, Power1, Power2, Power3, Power4, Quad, Quart, Quint, Sine, SteppedEase, Strong, Timeline as TimelineLite, Timeline as TimelineMax, Tween as TweenLite } from './gsap-core.mjs';
+import { CSSPlugin } from './CSSPlugin.mjs';
+
+const gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap, // to protect from tree shaking
+	TweenMaxWithCSS = gsapWithCSS.core.Tween;
+
+export { CSSPlugin, TweenMaxWithCSS as TweenMax, gsapWithCSS as default, gsapWithCSS as gsap };
diff --git a/dist/index.d.ts b/dist/index.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..bbf292c634a9290db4191c15ec9ea6a09ef31214
--- /dev/null
+++ b/dist/index.d.ts
@@ -0,0 +1,8 @@
+import { gsap } from './gsap-core.js';
+export { Back, Bounce, Circ, Cubic, Elastic, Expo, Linear, Power0, Power1, Power2, Power3, Power4, Quad, Quart, Quint, Sine, SteppedEase, Strong, Timeline as TimelineLite, Timeline as TimelineMax, Tween as TweenLite } from './gsap-core.js';
+import { CSSPlugin } from './CSSPlugin.js';
+
+const gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap, // to protect from tree shaking
+	TweenMaxWithCSS = gsapWithCSS.core.Tween;
+
+export { CSSPlugin, TweenMaxWithCSS as TweenMax, gsapWithCSS as default, gsapWithCSS as gsap };
diff --git a/dist/index.mjs b/dist/index.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..2f8e6ac4c02924f78e34b18c5b294a84b5b9a00b
--- /dev/null
+++ b/dist/index.mjs
@@ -0,0 +1,8 @@
+import { gsap } from './gsap-core.mjs';
+export { Back, Bounce, Circ, Cubic, Elastic, Expo, Linear, Power0, Power1, Power2, Power3, Power4, Quad, Quart, Quint, Sine, SteppedEase, Strong, Timeline as TimelineLite, Timeline as TimelineMax, Tween as TweenLite } from './gsap-core.mjs';
+import { CSSPlugin } from './CSSPlugin.mjs';
+
+const gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap, // to protect from tree shaking
+	TweenMaxWithCSS = gsapWithCSS.core.Tween;
+
+export { CSSPlugin, TweenMaxWithCSS as TweenMax, gsapWithCSS as default, gsapWithCSS as gsap };
diff --git a/dist/shared/gsap.41b79ecf.d.cts b/dist/shared/gsap.41b79ecf.d.cts
new file mode 100644
index 0000000000000000000000000000000000000000..f82063372b3ddd6356cb7c74143c549d560c42dd
--- /dev/null
+++ b/dist/shared/gsap.41b79ecf.d.cts
@@ -0,0 +1,1054 @@
+/*!
+ * paths 3.12.5
+ * https://gsap.com
+ *
+ * Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let _svgPathExp = /[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
+	_numbersExp = /(?:(-)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
+	_scientific = /[\+\-]?\d*\.?\d+e[\+\-]?\d+/ig,
+	_selectorExp = /(^[#\.][a-z]|[a-y][a-z])/i,
+	_DEG2RAD = Math.PI / 180,
+	_RAD2DEG = 180 / Math.PI,
+	_sin = Math.sin,
+	_cos = Math.cos,
+	_abs = Math.abs,
+	_sqrt = Math.sqrt,
+	_atan2 = Math.atan2,
+	_largeNum = 1e8,
+	_isString = value => typeof(value) === "string",
+	_isNumber = value => typeof(value) === "number",
+	_isUndefined = value => typeof(value) === "undefined",
+	_temp = {},
+	_temp2 = {},
+	_roundingNum = 1e5,
+	_wrapProgress = progress => (Math.round((progress + _largeNum) % 1 * _roundingNum) / _roundingNum) || ((progress < 0) ? 0 : 1), //if progress lands on 1, the % will make it 0 which is why we || 1, but not if it's negative because it makes more sense for motion to end at 0 in that case.
+	_round = value => (Math.round(value * _roundingNum) / _roundingNum) || 0,
+	_roundPrecise = value => (Math.round(value * 1e10) / 1e10) || 0,
+	_splitSegment = (rawPath, segIndex, i, t) => {
+		let segment = rawPath[segIndex],
+			shift = t === 1 ? 6 : subdivideSegment(segment, i, t);
+		if ((shift || !t) && shift + i + 2 < segment.length) {
+			rawPath.splice(segIndex, 0, segment.slice(0, i + shift + 2));
+			segment.splice(0, i + shift);
+			return 1;
+		}
+	},
+	_getSampleIndex = (samples, length, progress) => {
+		// slightly slower way than doing this (when there's no lookup): segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0;
+		let l = samples.length,
+			i = ~~(progress * l);
+		if (samples[i] > length) {
+			while (--i && samples[i] > length) {}
+			i < 0 && (i = 0);
+		} else {
+			while (samples[++i] < length && i < l) {}
+		}
+		return i < l ? i : l - 1;
+	},
+	_reverseRawPath = (rawPath, skipOuter) => {
+		let i = rawPath.length;
+		skipOuter || rawPath.reverse();
+		while (i--) {
+			rawPath[i].reversed || reverseSegment(rawPath[i]);
+		}
+	},
+	_copyMetaData = (source, copy) => {
+		copy.totalLength = source.totalLength;
+		if (source.samples) { //segment
+			copy.samples = source.samples.slice(0);
+			copy.lookup = source.lookup.slice(0);
+			copy.minLength = source.minLength;
+			copy.resolution = source.resolution;
+		} else if (source.totalPoints) { //rawPath
+			copy.totalPoints = source.totalPoints;
+		}
+		return copy;
+	},
+	//pushes a new segment into a rawPath, but if its starting values match the ending values of the last segment, it'll merge it into that same segment (to reduce the number of segments)
+	_appendOrMerge = (rawPath, segment) => {
+		let index = rawPath.length,
+			prevSeg = rawPath[index - 1] || [],
+			l = prevSeg.length;
+		if (index && segment[0] === prevSeg[l-2] && segment[1] === prevSeg[l-1]) {
+			segment = prevSeg.concat(segment.slice(2));
+			index--;
+		}
+		rawPath[index] = segment;
+	};
+
+/* TERMINOLOGY
+ - RawPath - an array of arrays, one for each Segment. A single RawPath could have multiple "M" commands, defining Segments (paths aren't always connected).
+ - Segment - an array containing a sequence of Cubic Bezier coordinates in alternating x, y, x, y format. Starting anchor, then control point 1, control point 2, and ending anchor, then the next control point 1, control point 2, anchor, etc. Uses less memory than an array with a bunch of {x, y} points.
+ - Bezier - a single cubic Bezier with a starting anchor, two control points, and an ending anchor.
+ - the variable "t" is typically the position along an individual Bezier path (time) and it's NOT linear, meaning it could accelerate/decelerate based on the control points whereas the "p" or "progress" value is linearly mapped to the whole path, so it shouldn't really accelerate/decelerate based on control points. So a progress of 0.2 would be almost exactly 20% along the path. "t" is ONLY in an individual Bezier piece.
+ */
+
+//accepts basic selector text, a path instance, a RawPath instance, or a Segment and returns a RawPath (makes it easy to homogenize things). If an element or selector text is passed in, it'll also cache the value so that if it's queried again, it'll just take the path data from there instead of parsing it all over again (as long as the path data itself hasn't changed - it'll check).
+function getRawPath(value) {
+	value = (_isString(value) && _selectorExp.test(value)) ? document.querySelector(value) || value : value;
+	let e = value.getAttribute ? value : 0,
+		rawPath;
+	if (e && (value = value.getAttribute("d"))) {
+		//implements caching
+		if (!e._gsPath) {
+			e._gsPath = {};
+		}
+		rawPath = e._gsPath[value];
+		return (rawPath && !rawPath._dirty) ? rawPath : (e._gsPath[value] = stringToRawPath(value));
+	}
+	return !value ? console.warn("Expecting a <path> element or an SVG path data string") : _isString(value) ? stringToRawPath(value) : (_isNumber(value[0])) ? [value] : value;
+}
+
+//copies a RawPath WITHOUT the length meta data (for speed)
+function copyRawPath(rawPath) {
+	let a = [],
+		i = 0;
+	for (; i < rawPath.length; i++) {
+		a[i] = _copyMetaData(rawPath[i], rawPath[i].slice(0));
+	}
+	return _copyMetaData(rawPath, a);
+}
+
+function reverseSegment(segment) {
+	let i = 0,
+		y;
+	segment.reverse(); //this will invert the order y, x, y, x so we must flip it back.
+	for (; i < segment.length; i += 2) {
+		y = segment[i];
+		segment[i] = segment[i+1];
+		segment[i+1] = y;
+	}
+	segment.reversed = !segment.reversed;
+}
+
+
+
+let _createPath = (e, ignore) => {
+		let path = document.createElementNS("http://www.w3.org/2000/svg", "path"),
+			attr = [].slice.call(e.attributes),
+			i = attr.length,
+			name;
+		ignore = "," + ignore + ",";
+		while (--i > -1) {
+			name = attr[i].nodeName.toLowerCase(); //in Microsoft Edge, if you don't set the attribute with a lowercase name, it doesn't render correctly! Super weird.
+			if (ignore.indexOf("," + name + ",") < 0) {
+				path.setAttributeNS(null, name, attr[i].nodeValue);
+			}
+		}
+		return path;
+	},
+	_typeAttrs = {
+		rect:"rx,ry,x,y,width,height",
+		circle:"r,cx,cy",
+		ellipse:"rx,ry,cx,cy",
+		line:"x1,x2,y1,y2"
+	},
+	_attrToObj = (e, attrs) => {
+		let props = attrs ? attrs.split(",") : [],
+			obj = {},
+			i = props.length;
+		while (--i > -1) {
+			obj[props[i]] = +e.getAttribute(props[i]) || 0;
+		}
+		return obj;
+	};
+
+//converts an SVG shape like <circle>, <rect>, <polygon>, <polyline>, <ellipse>, etc. to a <path>, swapping it in and copying the attributes to match.
+function convertToPath(element, swap) {
+	let type = element.tagName.toLowerCase(),
+		circ = 0.552284749831,
+		data, x, y, r, ry, path, rcirc, rycirc, points, w, h, x2, x3, x4, x5, x6, y2, y3, y4, y5, y6, attr;
+	if (type === "path" || !element.getBBox) {
+		return element;
+	}
+	path = _createPath(element, "x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points");
+	attr = _attrToObj(element, _typeAttrs[type]);
+	if (type === "rect") {
+		r = attr.rx;
+		ry = attr.ry || r;
+		x = attr.x;
+		y = attr.y;
+		w = attr.width - r * 2;
+		h = attr.height - ry * 2;
+		if (r || ry) { //if there are rounded corners, render cubic beziers
+			x2 = x + r * (1 - circ);
+			x3 = x + r;
+			x4 = x3 + w;
+			x5 = x4 + r * circ;
+			x6 = x4 + r;
+			y2 = y + ry * (1 - circ);
+			y3 = y + ry;
+			y4 = y3 + h;
+			y5 = y4 + ry * circ;
+			y6 = y4 + ry;
+			data = "M" + x6 + "," + y3 + " V" + y4 + " C" + [x6, y5, x5, y6, x4, y6, x4 - (x4 - x3) / 3, y6, x3 + (x4 - x3) / 3, y6, x3, y6, x2, y6, x, y5, x, y4, x, y4 - (y4 - y3) / 3, x, y3 + (y4 - y3) / 3, x, y3, x, y2, x2, y, x3, y, x3 + (x4 - x3) / 3, y, x4 - (x4 - x3) / 3, y, x4, y, x5, y, x6, y2, x6, y3].join(",") + "z";
+		} else {
+			data = "M" + (x + w) + "," + y + " v" + h + " h" + (-w) + " v" + (-h) + " h" + w + "z";
+		}
+
+	} else if (type === "circle" || type === "ellipse") {
+		if (type === "circle") {
+			r = ry = attr.r;
+			rycirc = r * circ;
+		} else {
+			r = attr.rx;
+			ry = attr.ry;
+			rycirc = ry * circ;
+		}
+		x = attr.cx;
+		y = attr.cy;
+		rcirc = r * circ;
+		data = "M" + (x+r) + "," + y + " C" + [x+r, y + rycirc, x + rcirc, y + ry, x, y + ry, x - rcirc, y + ry, x - r, y + rycirc, x - r, y, x - r, y - rycirc, x - rcirc, y - ry, x, y - ry, x + rcirc, y - ry, x + r, y - rycirc, x + r, y].join(",") + "z";
+	} else if (type === "line") {
+		data = "M" + attr.x1 + "," + attr.y1 + " L" + attr.x2 + "," + attr.y2; //previously, we just converted to "Mx,y Lx,y" but Safari has bugs that cause that not to render properly when using a stroke-dasharray that's not fully visible! Using a cubic bezier fixes that issue.
+	} else if (type === "polyline" || type === "polygon") {
+		points = (element.getAttribute("points") + "").match(_numbersExp) || [];
+		x = points.shift();
+		y = points.shift();
+		data = "M" + x + "," + y + " L" + points.join(",");
+		if (type === "polygon") {
+			data += "," + x + "," + y + "z";
+		}
+	}
+	path.setAttribute("d", rawPathToString(path._gsRawPath = stringToRawPath(data)));
+	if (swap && element.parentNode) {
+		element.parentNode.insertBefore(path, element);
+		element.parentNode.removeChild(element);
+	}
+	return path;
+}
+
+function getRotationAtBezierT(segment, i, t) {
+	let a = segment[i],
+		b = segment[i+2],
+		c = segment[i+4],
+		x;
+	a += (b - a) * t;
+	b += (c - b) * t;
+	a += (b - a) * t;
+	x = b + ((c + (segment[i+6] - c) * t) - b) * t - a;
+	a = segment[i+1];
+	b = segment[i+3];
+	c = segment[i+5];
+	a += (b - a) * t;
+	b += (c - b) * t;
+	a += (b - a) * t;
+	return _round(_atan2(b + ((c + (segment[i+7] - c) * t) - b) * t - a, x) * _RAD2DEG);
+}
+
+function sliceRawPath(rawPath, start, end) {
+	end = _isUndefined(end) ? 1 : _roundPrecise(end) || 0; // we must round to avoid issues like 4.15 / 8 = 0.8300000000000001 instead of 0.83 or 2.8 / 5 = 0.5599999999999999 instead of 0.56 and if someone is doing a loop like start: 2.8 / 0.5, end: 2.8 / 0.5 + 1.
+	start = _roundPrecise(start) || 0;
+	let loops = Math.max(0, ~~(_abs(end - start) - 1e-8)),
+		path = copyRawPath(rawPath);
+	if (start > end) {
+		start = 1 - start;
+		end = 1 - end;
+		_reverseRawPath(path);
+		path.totalLength = 0;
+	}
+	if (start < 0 || end < 0) {
+		let offset = Math.abs(~~Math.min(start, end)) + 1;
+		start += offset;
+		end += offset;
+	}
+	path.totalLength || cacheRawPathMeasurements(path);
+	let wrap = (end > 1),
+		s = getProgressData(path, start, _temp, true),
+		e = getProgressData(path, end, _temp2),
+		eSeg = e.segment,
+		sSeg = s.segment,
+		eSegIndex = e.segIndex,
+		sSegIndex = s.segIndex,
+		ei = e.i,
+		si = s.i,
+		sameSegment = (sSegIndex === eSegIndex),
+		sameBezier = (ei === si && sameSegment),
+		wrapsBehind, sShift, eShift, i, copy, totalSegments, l, j;
+	if (wrap || loops) {
+		wrapsBehind = eSegIndex < sSegIndex || (sameSegment && ei < si) || (sameBezier && e.t < s.t);
+		if (_splitSegment(path, sSegIndex, si, s.t)) {
+			sSegIndex++;
+			if (!wrapsBehind) {
+				eSegIndex++;
+				if (sameBezier) {
+					e.t = (e.t - s.t) / (1 - s.t);
+					ei = 0;
+				} else if (sameSegment) {
+					ei -= si;
+				}
+			}
+		}
+		if (Math.abs(1 - (end - start)) < 1e-5) {
+			eSegIndex = sSegIndex - 1;
+		} else if (!e.t && eSegIndex) {
+			eSegIndex--;
+		} else if (_splitSegment(path, eSegIndex, ei, e.t) && wrapsBehind) {
+			sSegIndex++;
+		}
+		if (s.t === 1) {
+			sSegIndex = (sSegIndex + 1) % path.length;
+		}
+		copy = [];
+		totalSegments = path.length;
+		l = 1 + totalSegments * loops;
+		j = sSegIndex;
+		l += ((totalSegments - sSegIndex) + eSegIndex) % totalSegments;
+		for (i = 0; i < l; i++) {
+			_appendOrMerge(copy, path[j++ % totalSegments]);
+		}
+		path = copy;
+	} else {
+		eShift = e.t === 1 ? 6 : subdivideSegment(eSeg, ei, e.t);
+		if (start !== end) {
+			sShift = subdivideSegment(sSeg, si, sameBezier ? s.t / e.t : s.t);
+			sameSegment && (eShift += sShift);
+			eSeg.splice(ei + eShift + 2);
+			(sShift || si) && sSeg.splice(0, si + sShift);
+			i = path.length;
+			while (i--) {
+				//chop off any extra segments
+				(i < sSegIndex || i > eSegIndex) &&	path.splice(i, 1);
+			}
+		} else {
+			eSeg.angle = getRotationAtBezierT(eSeg, ei + eShift, 0); //record the value before we chop because it'll be impossible to determine the angle after its length is 0!
+			ei += eShift;
+			s = eSeg[ei];
+			e = eSeg[ei+1];
+			eSeg.length = eSeg.totalLength = 0;
+			eSeg.totalPoints = path.totalPoints = 8;
+			eSeg.push(s, e, s, e, s, e, s, e);
+		}
+	}
+	path.totalLength = 0;
+	return path;
+}
+
+//measures a Segment according to its resolution (so if segment.resolution is 6, for example, it'll take 6 samples equally across each Bezier) and create/populate a "samples" Array that has the length up to each of those sample points (always increasing from the start) as well as a "lookup" array that's broken up according to the smallest distance between 2 samples. This gives us a very fast way of looking up a progress position rather than looping through all the points/Beziers. You can optionally have it only measure a subset, starting at startIndex and going for a specific number of beziers (remember, there are 3 x/y pairs each, for a total of 6 elements for each Bezier). It will also populate a "totalLength" property, but that's not generally super accurate because by default it'll only take 6 samples per Bezier. But for performance reasons, it's perfectly adequate for measuring progress values along the path. If you need a more accurate totalLength, either increase the resolution or use the more advanced bezierToPoints() method which keeps adding points until they don't deviate by more than a certain precision value.
+function measureSegment(segment, startIndex, bezierQty) {
+	startIndex = startIndex || 0;
+	if (!segment.samples) {
+		segment.samples = [];
+		segment.lookup = [];
+	}
+	let resolution = ~~segment.resolution || 12,
+		inc = 1 / resolution,
+		endIndex = bezierQty ? startIndex + bezierQty * 6 + 1 : segment.length,
+		x1 = segment[startIndex],
+		y1 = segment[startIndex + 1],
+		samplesIndex = startIndex ? (startIndex / 6) * resolution : 0,
+		samples = segment.samples,
+		lookup = segment.lookup,
+		min = (startIndex ? segment.minLength : _largeNum) || _largeNum,
+		prevLength = samples[samplesIndex + bezierQty * resolution - 1],
+		length = startIndex ? samples[samplesIndex-1] : 0,
+		i, j, x4, x3, x2, xd, xd1, y4, y3, y2, yd, yd1, inv, t, lengthIndex, l, segLength;
+	samples.length = lookup.length = 0;
+	for (j = startIndex + 2; j < endIndex; j += 6) {
+		x4 = segment[j + 4] - x1;
+		x3 = segment[j + 2] - x1;
+		x2 = segment[j] - x1;
+		y4 = segment[j + 5] - y1;
+		y3 = segment[j + 3] - y1;
+		y2 = segment[j + 1] - y1;
+		xd = xd1 = yd = yd1 = 0;
+		if (_abs(x4) < .01 && _abs(y4) < .01 && _abs(x2) + _abs(y2) < .01) { //dump points that are sufficiently close (basically right on top of each other, making a bezier super tiny or 0 length)
+			if (segment.length > 8) {
+				segment.splice(j, 6);
+				j -= 6;
+				endIndex -= 6;
+			}
+		} else {
+			for (i = 1; i <= resolution; i++) {
+				t = inc * i;
+				inv = 1 - t;
+				xd = xd1 - (xd1 = (t * t * x4 + 3 * inv * (t * x3 + inv * x2)) * t);
+				yd = yd1 - (yd1 = (t * t * y4 + 3 * inv * (t * y3 + inv * y2)) * t);
+				l = _sqrt(yd * yd + xd * xd);
+				if (l < min) {
+					min = l;
+				}
+				length += l;
+				samples[samplesIndex++] = length;
+			}
+		}
+		x1 += x4;
+		y1 += y4;
+	}
+	if (prevLength) {
+		prevLength -= length;
+		for (; samplesIndex < samples.length; samplesIndex++) {
+			samples[samplesIndex] += prevLength;
+		}
+	}
+	if (samples.length && min) {
+		segment.totalLength = segLength = samples[samples.length-1] || 0;
+		segment.minLength = min;
+		if (segLength / min < 9999) { // if the lookup would require too many values (memory problem), we skip this and instead we use a loop to lookup values directly in the samples Array
+			l = lengthIndex = 0;
+			for (i = 0; i < segLength; i += min) {
+				lookup[l++] = (samples[lengthIndex] < i) ? ++lengthIndex : lengthIndex;
+			}
+		}
+	} else {
+		segment.totalLength = samples[0] = 0;
+	}
+	return startIndex ? length - samples[startIndex / 2 - 1] : length;
+}
+
+function cacheRawPathMeasurements(rawPath, resolution) {
+	let pathLength, points, i;
+	for (i = pathLength = points = 0; i < rawPath.length; i++) {
+		rawPath[i].resolution = ~~resolution || 12; //steps per Bezier curve (anchor, 2 control points, to anchor)
+		points += rawPath[i].length;
+		pathLength += measureSegment(rawPath[i]);
+	}
+	rawPath.totalPoints = points;
+	rawPath.totalLength = pathLength;
+	return rawPath;
+}
+
+//divide segment[i] at position t (value between 0 and 1, progress along that particular cubic bezier segment that starts at segment[i]). Returns how many elements were spliced into the segment array (either 0 or 6)
+function subdivideSegment(segment, i, t) {
+	if (t <= 0 || t >= 1) {
+		return 0;
+	}
+	let ax = segment[i],
+		ay = segment[i+1],
+		cp1x = segment[i+2],
+		cp1y = segment[i+3],
+		cp2x = segment[i+4],
+		cp2y = segment[i+5],
+		bx = segment[i+6],
+		by = segment[i+7],
+		x1a = ax + (cp1x - ax) * t,
+		x2 = cp1x + (cp2x - cp1x) * t,
+		y1a = ay + (cp1y - ay) * t,
+		y2 = cp1y + (cp2y - cp1y) * t,
+		x1 = x1a + (x2 - x1a) * t,
+		y1 = y1a + (y2 - y1a) * t,
+		x2a = cp2x + (bx - cp2x) * t,
+		y2a = cp2y + (by - cp2y) * t;
+	x2 += (x2a - x2) * t;
+	y2 += (y2a - y2) * t;
+	segment.splice(i + 2, 4,
+		_round(x1a),                  //first control point
+		_round(y1a),
+		_round(x1),                   //second control point
+		_round(y1),
+		_round(x1 + (x2 - x1) * t),   //new fabricated anchor on line
+		_round(y1 + (y2 - y1) * t),
+		_round(x2),                   //third control point
+		_round(y2),
+		_round(x2a),                  //fourth control point
+		_round(y2a)
+	);
+	segment.samples && segment.samples.splice(((i / 6) * segment.resolution) | 0, 0, 0, 0, 0, 0, 0, 0);
+	return 6;
+}
+
+// returns an object {path, segment, segIndex, i, t}
+function getProgressData(rawPath, progress, decoratee, pushToNextIfAtEnd) {
+	decoratee = decoratee || {};
+	rawPath.totalLength || cacheRawPathMeasurements(rawPath);
+	if (progress < 0 || progress > 1) {
+		progress = _wrapProgress(progress);
+	}
+	let segIndex = 0,
+		segment = rawPath[0],
+		samples, resolution, length, min, max, i, t;
+	if (!progress) {
+		t = i = segIndex = 0;
+		segment = rawPath[0];
+	} else if (progress === 1) {
+		t = 1;
+		segIndex = rawPath.length - 1;
+		segment = rawPath[segIndex];
+		i = segment.length - 8;
+	} else {
+		if (rawPath.length > 1) { //speed optimization: most of the time, there's only one segment so skip the recursion.
+			length = rawPath.totalLength * progress;
+			max = i = 0;
+			while ((max += rawPath[i++].totalLength) < length) {
+				segIndex = i;
+			}
+			segment = rawPath[segIndex];
+			min = max - segment.totalLength;
+			progress = ((length - min) / (max - min)) || 0;
+		}
+		samples = segment.samples;
+		resolution = segment.resolution; //how many samples per cubic bezier chunk
+		length = segment.totalLength * progress;
+		i = segment.lookup.length ? segment.lookup[~~(length / segment.minLength)] || 0 : _getSampleIndex(samples, length, progress);
+		min = i ? samples[i-1] : 0;
+		max = samples[i];
+		if (max < length) {
+			min = max;
+			max = samples[++i];
+		}
+		t = (1 / resolution) * (((length - min) / (max - min)) + ((i % resolution)));
+		i = ~~(i / resolution) * 6;
+		if (pushToNextIfAtEnd && t === 1) {
+			if (i + 6 < segment.length) {
+				i += 6;
+				t = 0;
+			} else if (segIndex + 1 < rawPath.length) {
+				i = t = 0;
+				segment = rawPath[++segIndex];
+			}
+		}
+	}
+	decoratee.t = t;
+	decoratee.i = i;
+	decoratee.path = rawPath;
+	decoratee.segment = segment;
+	decoratee.segIndex = segIndex;
+	return decoratee;
+}
+
+function getPositionOnPath(rawPath, progress, includeAngle, point) {
+	let segment = rawPath[0],
+		result = point || {},
+		samples, resolution, length, min, max, i, t, a, inv;
+	if (progress < 0 || progress > 1) {
+		progress = _wrapProgress(progress);
+	}
+	segment.lookup || cacheRawPathMeasurements(rawPath);
+	if (rawPath.length > 1) { //speed optimization: most of the time, there's only one segment so skip the recursion.
+		length = rawPath.totalLength * progress;
+		max = i = 0;
+		while ((max += rawPath[i++].totalLength) < length) {
+			segment = rawPath[i];
+		}
+		min = max - segment.totalLength;
+		progress = ((length - min) / (max - min)) || 0;
+	}
+	samples = segment.samples;
+	resolution = segment.resolution;
+	length = segment.totalLength * progress;
+	i = segment.lookup.length ? segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0 : _getSampleIndex(samples, length, progress);
+	min = i ? samples[i-1] : 0;
+	max = samples[i];
+	if (max < length) {
+		min = max;
+		max = samples[++i];
+	}
+	t = ((1 / resolution) * (((length - min) / (max - min)) + ((i % resolution)))) || 0;
+	inv = 1 - t;
+	i = ~~(i / resolution) * 6;
+	a = segment[i];
+	result.x = _round((t * t * (segment[i + 6] - a) + 3 * inv * (t * (segment[i + 4] - a) + inv * (segment[i + 2] - a))) * t + a);
+	result.y = _round((t * t * (segment[i + 7] - (a = segment[i+1])) + 3 * inv * (t * (segment[i + 5] - a) + inv * (segment[i + 3] - a))) * t + a);
+	if (includeAngle) {
+		result.angle = segment.totalLength ? getRotationAtBezierT(segment, i, t >= 1 ? 1 - 1e-9 : t ? t : 1e-9) : segment.angle || 0;
+	}
+	return result;
+}
+
+
+
+//applies a matrix transform to RawPath (or a segment in a RawPath) and returns whatever was passed in (it transforms the values in the array(s), not a copy).
+function transformRawPath(rawPath, a, b, c, d, tx, ty) {
+	let j = rawPath.length,
+		segment, l, i, x, y;
+	while (--j > -1) {
+		segment = rawPath[j];
+		l = segment.length;
+		for (i = 0; i < l; i += 2) {
+			x = segment[i];
+			y = segment[i+1];
+			segment[i] = x * a + y * c + tx;
+			segment[i+1] = x * b + y * d + ty;
+		}
+	}
+	rawPath._dirty = 1;
+	return rawPath;
+}
+
+
+
+// translates SVG arc data into a segment (cubic beziers). Angle is in degrees.
+function arcToSegment(lastX, lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y) {
+	if (lastX === x && lastY === y) {
+		return;
+	}
+	rx = _abs(rx);
+	ry = _abs(ry);
+	let angleRad = (angle % 360) * _DEG2RAD,
+		cosAngle = _cos(angleRad),
+		sinAngle = _sin(angleRad),
+		PI = Math.PI,
+		TWOPI = PI * 2,
+		dx2 = (lastX - x) / 2,
+		dy2 = (lastY - y) / 2,
+		x1 = (cosAngle * dx2 + sinAngle * dy2),
+		y1 = (-sinAngle * dx2 + cosAngle * dy2),
+		x1_sq = x1 * x1,
+		y1_sq = y1 * y1,
+		radiiCheck = x1_sq / (rx * rx) + y1_sq / (ry * ry);
+	if (radiiCheck > 1) {
+		rx = _sqrt(radiiCheck) * rx;
+		ry = _sqrt(radiiCheck) * ry;
+	}
+	let rx_sq = rx * rx,
+		ry_sq = ry * ry,
+		sq = ((rx_sq * ry_sq) - (rx_sq * y1_sq) - (ry_sq * x1_sq)) / ((rx_sq * y1_sq) + (ry_sq * x1_sq));
+	if (sq < 0) {
+		sq = 0;
+	}
+	let coef = ((largeArcFlag === sweepFlag) ? -1 : 1) * _sqrt(sq),
+		cx1 = coef * ((rx * y1) / ry),
+		cy1 = coef * -((ry * x1) / rx),
+		sx2 = (lastX + x) / 2,
+		sy2 = (lastY + y) / 2,
+		cx = sx2 + (cosAngle * cx1 - sinAngle * cy1),
+		cy = sy2 + (sinAngle * cx1 + cosAngle * cy1),
+		ux = (x1 - cx1) / rx,
+		uy = (y1 - cy1) / ry,
+		vx = (-x1 - cx1) / rx,
+		vy = (-y1 - cy1) / ry,
+		temp = ux * ux + uy * uy,
+		angleStart = ((uy < 0) ? -1 : 1) * Math.acos(ux / _sqrt(temp)),
+		angleExtent = ((ux * vy - uy * vx < 0) ? -1 : 1) * Math.acos((ux * vx + uy * vy) / _sqrt(temp * (vx * vx + vy * vy)));
+	isNaN(angleExtent) && (angleExtent = PI); //rare edge case. Math.cos(-1) is NaN.
+	if (!sweepFlag && angleExtent > 0) {
+		angleExtent -= TWOPI;
+	} else if (sweepFlag && angleExtent < 0) {
+		angleExtent += TWOPI;
+	}
+	angleStart %= TWOPI;
+	angleExtent %= TWOPI;
+	let segments = Math.ceil(_abs(angleExtent) / (TWOPI / 4)),
+		rawPath = [],
+		angleIncrement = angleExtent / segments,
+		controlLength = 4 / 3 * _sin(angleIncrement / 2) / (1 + _cos(angleIncrement / 2)),
+		ma = cosAngle * rx,
+		mb = sinAngle * rx,
+		mc = sinAngle * -ry,
+		md = cosAngle * ry,
+		i;
+	for (i = 0; i < segments; i++) {
+		angle = angleStart + i * angleIncrement;
+		x1 = _cos(angle);
+		y1 = _sin(angle);
+		ux = _cos(angle += angleIncrement);
+		uy = _sin(angle);
+		rawPath.push(x1 - controlLength * y1, y1 + controlLength * x1, ux + controlLength * uy, uy - controlLength * ux, ux, uy);
+	}
+	//now transform according to the actual size of the ellipse/arc (the beziers were noramlized, between 0 and 1 on a circle).
+	for (i = 0; i < rawPath.length; i+=2) {
+		x1 = rawPath[i];
+		y1 = rawPath[i+1];
+		rawPath[i] = x1 * ma + y1 * mc + cx;
+		rawPath[i+1] = x1 * mb + y1 * md + cy;
+	}
+	rawPath[i-2] = x; //always set the end to exactly where it's supposed to be
+	rawPath[i-1] = y;
+	return rawPath;
+}
+
+//Spits back a RawPath with absolute coordinates. Each segment starts with a "moveTo" command (x coordinate, then y) and then 2 control points (x, y, x, y), then anchor. The goal is to minimize memory and maximize speed.
+function stringToRawPath(d) {
+	let a = (d + "").replace(_scientific, m => { let n = +m; return (n < 0.0001 && n > -0.0001) ? 0 : n; }).match(_svgPathExp) || [], //some authoring programs spit out very small numbers in scientific notation like "1e-5", so make sure we round that down to 0 first.
+		path = [],
+		relativeX = 0,
+		relativeY = 0,
+		twoThirds = 2 / 3,
+		elements = a.length,
+		points = 0,
+		errorMessage = "ERROR: malformed path: " + d,
+		i, j, x, y, command, isRelative, segment, startX, startY, difX, difY, beziers, prevCommand, flag1, flag2,
+		line = function(sx, sy, ex, ey) {
+			difX = (ex - sx) / 3;
+			difY = (ey - sy) / 3;
+			segment.push(sx + difX, sy + difY, ex - difX, ey - difY, ex, ey);
+		};
+	if (!d || !isNaN(a[0]) || isNaN(a[1])) {
+		console.log(errorMessage);
+		return path;
+	}
+	for (i = 0; i < elements; i++) {
+		prevCommand = command;
+		if (isNaN(a[i])) {
+			command = a[i].toUpperCase();
+			isRelative = (command !== a[i]); //lower case means relative
+		} else { //commands like "C" can be strung together without any new command characters between.
+			i--;
+		}
+		x = +a[i + 1];
+		y = +a[i + 2];
+		if (isRelative) {
+			x += relativeX;
+			y += relativeY;
+		}
+		if (!i) {
+			startX = x;
+			startY = y;
+		}
+
+		// "M" (move)
+		if (command === "M") {
+			if (segment) {
+				if (segment.length < 8) { //if the path data was funky and just had a M with no actual drawing anywhere, skip it.
+					path.length -= 1;
+				} else {
+					points += segment.length;
+				}
+			}
+			relativeX = startX = x;
+			relativeY = startY = y;
+			segment = [x, y];
+			path.push(segment);
+			i += 2;
+			command = "L"; //an "M" with more than 2 values gets interpreted as "lineTo" commands ("L").
+
+		// "C" (cubic bezier)
+		} else if (command === "C") {
+			if (!segment) {
+				segment = [0, 0];
+			}
+			if (!isRelative) {
+				relativeX = relativeY = 0;
+			}
+			//note: "*1" is just a fast/short way to cast the value as a Number. WAAAY faster in Chrome, slightly slower in Firefox.
+			segment.push(x,	y, relativeX + a[i + 3] * 1, relativeY + a[i + 4] * 1, (relativeX += a[i + 5] * 1),	(relativeY += a[i + 6] * 1));
+			i += 6;
+
+		// "S" (continuation of cubic bezier)
+		} else if (command === "S") {
+			difX = relativeX;
+			difY = relativeY;
+			if (prevCommand === "C" || prevCommand === "S") {
+				difX += relativeX - segment[segment.length - 4];
+				difY += relativeY - segment[segment.length - 3];
+			}
+			if (!isRelative) {
+				relativeX = relativeY = 0;
+			}
+			segment.push(difX, difY, x,	y, (relativeX += a[i + 3] * 1), (relativeY += a[i + 4] * 1));
+			i += 4;
+
+		// "Q" (quadratic bezier)
+		} else if (command === "Q") {
+			difX = relativeX + (x - relativeX) * twoThirds;
+			difY = relativeY + (y - relativeY) * twoThirds;
+			if (!isRelative) {
+				relativeX = relativeY = 0;
+			}
+			relativeX += a[i + 3] * 1;
+			relativeY += a[i + 4] * 1;
+			segment.push(difX, difY, relativeX + (x - relativeX) * twoThirds, relativeY + (y - relativeY) * twoThirds, relativeX, relativeY);
+			i += 4;
+
+		// "T" (continuation of quadratic bezier)
+		} else if (command === "T") {
+			difX = relativeX - segment[segment.length - 4];
+			difY = relativeY - segment[segment.length - 3];
+			segment.push(relativeX + difX, relativeY + difY, x + ((relativeX + difX * 1.5) - x) * twoThirds, y + ((relativeY + difY * 1.5) - y) * twoThirds, (relativeX = x), (relativeY = y));
+			i += 2;
+
+		// "H" (horizontal line)
+		} else if (command === "H") {
+			line(relativeX, relativeY, (relativeX = x), relativeY);
+			i += 1;
+
+		// "V" (vertical line)
+		} else if (command === "V") {
+			//adjust values because the first (and only one) isn't x in this case, it's y.
+			line(relativeX, relativeY, relativeX, (relativeY = x + (isRelative ? relativeY - relativeX : 0)));
+			i += 1;
+
+		// "L" (line) or "Z" (close)
+		} else if (command === "L" || command === "Z") {
+			if (command === "Z") {
+				x = startX;
+				y = startY;
+				segment.closed = true;
+			}
+			if (command === "L" || _abs(relativeX - x) > 0.5 || _abs(relativeY - y) > 0.5) {
+				line(relativeX, relativeY, x, y);
+				if (command === "L") {
+					i += 2;
+				}
+			}
+			relativeX = x;
+			relativeY = y;
+
+		// "A" (arc)
+		} else if (command === "A") {
+			flag1 = a[i+4];
+			flag2 = a[i+5];
+			difX = a[i+6];
+			difY = a[i+7];
+			j = 7;
+			if (flag1.length > 1) { // for cases when the flags are merged, like "a8 8 0 018 8" (the 0 and 1 flags are WITH the x value of 8, but it could also be "a8 8 0 01-8 8" so it may include x or not)
+				if (flag1.length < 3) {
+					difY = difX;
+					difX = flag2;
+					j--;
+				} else {
+					difY = flag2;
+					difX = flag1.substr(2);
+					j-=2;
+				}
+				flag2 = flag1.charAt(1);
+				flag1 = flag1.charAt(0);
+			}
+			beziers = arcToSegment(relativeX, relativeY, +a[i+1], +a[i+2], +a[i+3], +flag1, +flag2, (isRelative ? relativeX : 0) + difX*1, (isRelative ? relativeY : 0) + difY*1);
+			i += j;
+			if (beziers) {
+				for (j = 0; j < beziers.length; j++) {
+					segment.push(beziers[j]);
+				}
+			}
+			relativeX = segment[segment.length-2];
+			relativeY = segment[segment.length-1];
+
+		} else {
+			console.log(errorMessage);
+		}
+	}
+	i = segment.length;
+	if (i < 6) { //in case there's odd SVG like a M0,0 command at the very end.
+		path.pop();
+		i = 0;
+	} else if (segment[0] === segment[i-2] && segment[1] === segment[i-1]) {
+		segment.closed = true;
+	}
+	path.totalPoints = points + i;
+	return path;
+}
+
+/*
+function getAngleBetweenPoints(x0, y0, x1, y1, x2, y2) { //angle between 3 points in radians
+	var dx1 = x1 - x0,
+		dy1 = y1 - y0,
+		dx2 = x2 - x1,
+		dy2 = y2 - y1,
+		dx3 = x2 - x0,
+		dy3 = y2 - y0,
+		a = dx1 * dx1 + dy1 * dy1,
+		b = dx2 * dx2 + dy2 * dy2,
+		c = dx3 * dx3 + dy3 * dy3;
+	return Math.acos( (a + b - c) / _sqrt(4 * a * b) );
+},
+*/
+
+//pointsToSegment() doesn't handle flat coordinates (where y is always 0) the way we need (the resulting control points are always right on top of the anchors), so this function basically makes the control points go directly up and down, varying in length based on the curviness (more curvy, further control points)
+function flatPointsToSegment(points, curviness=1) {
+	let x = points[0],
+		y = 0,
+		segment = [x, y],
+		i = 2;
+	for (; i < points.length; i+=2) {
+		segment.push(
+			x,
+			y,
+			points[i],
+			(y = (points[i] - x) * curviness / 2),
+			(x = points[i]),
+			-y
+		);
+	}
+	return segment;
+}
+
+//points is an array of x/y points, like [x, y, x, y, x, y]
+function pointsToSegment(points, curviness) {
+	//points = simplifyPoints(points, tolerance);
+	_abs(points[0] - points[2]) < 1e-4 && _abs(points[1] - points[3]) < 1e-4 && (points = points.slice(2)); // if the first two points are super close, dump the first one.
+	let l = points.length-2,
+		x = +points[0],
+		y = +points[1],
+		nextX = +points[2],
+		nextY = +points[3],
+		segment = [x, y, x, y],
+		dx2 = nextX - x,
+		dy2 = nextY - y,
+		closed = Math.abs(points[l] - x) < 0.001 && Math.abs(points[l+1] - y) < 0.001,
+		prevX, prevY, i, dx1, dy1, r1, r2, r3, tl, mx1, mx2, mxm, my1, my2, mym;
+	if (closed) { // if the start and end points are basically on top of each other, close the segment by adding the 2nd point to the end, and the 2nd-to-last point to the beginning (we'll remove them at the end, but this allows the curvature to look perfect)
+		points.push(nextX, nextY);
+		nextX = x;
+		nextY = y;
+		x = points[l-2];
+		y = points[l-1];
+		points.unshift(x, y);
+		l+=4;
+	}
+	curviness = (curviness || curviness === 0) ? +curviness : 1;
+	for (i = 2; i < l; i+=2) {
+		prevX = x;
+		prevY = y;
+		x = nextX;
+		y = nextY;
+		nextX = +points[i+2];
+		nextY = +points[i+3];
+		if (x === nextX && y === nextY) {
+			continue;
+		}
+		dx1 = dx2;
+		dy1 = dy2;
+		dx2 = nextX - x;
+		dy2 = nextY - y;
+		r1 = _sqrt(dx1 * dx1 + dy1 * dy1); // r1, r2, and r3 correlate x and y (and z in the future). Basically 2D or 3D hypotenuse
+		r2 = _sqrt(dx2 * dx2 + dy2 * dy2);
+		r3 =  _sqrt((dx2 / r2 + dx1 / r1) ** 2 + (dy2 / r2 + dy1 / r1) ** 2);
+		tl = ((r1 + r2) * curviness * 0.25) / r3;
+		mx1 = x - (x - prevX) * (r1 ? tl / r1 : 0);
+		mx2 = x + (nextX - x) * (r2 ? tl / r2 : 0);
+		mxm = x - (mx1 + (((mx2 - mx1) * ((r1 * 3 / (r1 + r2)) + 0.5) / 4) || 0));
+		my1 = y - (y - prevY) * (r1 ? tl / r1 : 0);
+		my2 = y + (nextY - y) * (r2 ? tl / r2 : 0);
+		mym = y - (my1 + (((my2 - my1) * ((r1 * 3 / (r1 + r2)) + 0.5) / 4) || 0));
+		if (x !== prevX || y !== prevY) {
+			segment.push(
+				_round(mx1 + mxm),  // first control point
+				_round(my1 + mym),
+				_round(x),          // anchor
+				_round(y),
+				_round(mx2 + mxm),  // second control point
+				_round(my2 + mym)
+			);
+		}
+	}
+	x !== nextX || y !== nextY || segment.length < 4 ? segment.push(_round(nextX), _round(nextY), _round(nextX), _round(nextY)) : (segment.length -= 2);
+	if (segment.length === 2) { // only one point!
+		segment.push(x, y, x, y, x, y);
+	} else if (closed) {
+		segment.splice(0, 6);
+		segment.length = segment.length - 6;
+	}
+	return segment;
+}
+
+/*
+Takes any of the following and converts it to an all Cubic Bezier SVG data string:
+- A <path> data string like "M0,0 L2,4 v20,15 H100"
+- A RawPath, like [[x, y, x, y, x, y, x, y][[x, y, x, y, x, y, x, y]]
+- A Segment, like [x, y, x, y, x, y, x, y]
+
+Note: all numbers are rounded down to the closest 0.001 to minimize memory, maximize speed, and avoid odd numbers like 1e-13
+*/
+function rawPathToString(rawPath) {
+	if (_isNumber(rawPath[0])) { //in case a segment is passed in instead
+		rawPath = [rawPath];
+	}
+	let result = "",
+		l = rawPath.length,
+		sl, s, i, segment;
+	for (s = 0; s < l; s++) {
+		segment = rawPath[s];
+		result += "M" + _round(segment[0]) + "," + _round(segment[1]) + " C";
+		sl = segment.length;
+		for (i = 2; i < sl; i++) {
+			result += _round(segment[i++]) + "," + _round(segment[i++]) + " " + _round(segment[i++]) + "," + _round(segment[i++]) + " " + _round(segment[i++]) + "," + _round(segment[i]) + " ";
+		}
+		if (segment.closed) {
+			result += "z";
+		}
+	}
+	return result;
+}
+
+/*
+// takes a segment with coordinates [x, y, x, y, ...] and converts the control points into angles and lengths [x, y, angle, length, angle, length, x, y, angle, length, ...] so that it animates more cleanly and avoids odd breaks/kinks. For example, if you animate from 1 o'clock to 6 o'clock, it'd just go directly/linearly rather than around. So the length would be very short in the middle of the tween.
+export function cpCoordsToAngles(segment, copy) {
+	var result = copy ? segment.slice(0) : segment,
+		x, y, i;
+	for (i = 0; i < segment.length; i+=6) {
+		x = segment[i+2] - segment[i];
+		y = segment[i+3] - segment[i+1];
+		result[i+2] = Math.atan2(y, x);
+		result[i+3] = Math.sqrt(x * x + y * y);
+		x = segment[i+6] - segment[i+4];
+		y = segment[i+7] - segment[i+5];
+		result[i+4] = Math.atan2(y, x);
+		result[i+5] = Math.sqrt(x * x + y * y);
+	}
+	return result;
+}
+
+// takes a segment that was converted with cpCoordsToAngles() to have angles and lengths instead of coordinates for the control points, and converts it BACK into coordinates.
+export function cpAnglesToCoords(segment, copy) {
+	var result = copy ? segment.slice(0) : segment,
+		length = segment.length,
+		rnd = 1000,
+		angle, l, i, j;
+	for (i = 0; i < length; i+=6) {
+		angle = segment[i+2];
+		l = segment[i+3]; //length
+		result[i+2] = (((segment[i] + Math.cos(angle) * l) * rnd) | 0) / rnd;
+		result[i+3] = (((segment[i+1] + Math.sin(angle) * l) * rnd) | 0) / rnd;
+		angle = segment[i+4];
+		l = segment[i+5]; //length
+		result[i+4] = (((segment[i+6] - Math.cos(angle) * l) * rnd) | 0) / rnd;
+		result[i+5] = (((segment[i+7] - Math.sin(angle) * l) * rnd) | 0) / rnd;
+	}
+	return result;
+}
+
+//adds an "isSmooth" array to each segment and populates it with a boolean value indicating whether or not it's smooth (the control points have basically the same slope). For any smooth control points, it converts the coordinates into angle (x, in radians) and length (y) and puts them into the same index value in a smoothData array.
+export function populateSmoothData(rawPath) {
+	let j = rawPath.length,
+		smooth, segment, x, y, x2, y2, i, l, a, a2, isSmooth, smoothData;
+	while (--j > -1) {
+		segment = rawPath[j];
+		isSmooth = segment.isSmooth = segment.isSmooth || [0, 0, 0, 0];
+		smoothData = segment.smoothData = segment.smoothData || [0, 0, 0, 0];
+		isSmooth.length = 4;
+		l = segment.length - 2;
+		for (i = 6; i < l; i += 6) {
+			x = segment[i] - segment[i - 2];
+			y = segment[i + 1] - segment[i - 1];
+			x2 = segment[i + 2] - segment[i];
+			y2 = segment[i + 3] - segment[i + 1];
+			a = _atan2(y, x);
+			a2 = _atan2(y2, x2);
+			smooth = (Math.abs(a - a2) < 0.09);
+			if (smooth) {
+				smoothData[i - 2] = a;
+				smoothData[i + 2] = a2;
+				smoothData[i - 1] = _sqrt(x * x + y * y);
+				smoothData[i + 3] = _sqrt(x2 * x2 + y2 * y2);
+			}
+			isSmooth.push(smooth, smooth, 0, 0, smooth, smooth);
+		}
+		//if the first and last points are identical, check to see if there's a smooth transition. We must handle this a bit differently due to their positions in the array.
+		if (segment[l] === segment[0] && segment[l+1] === segment[1]) {
+			x = segment[0] - segment[l-2];
+			y = segment[1] - segment[l-1];
+			x2 = segment[2] - segment[0];
+			y2 = segment[3] - segment[1];
+			a = _atan2(y, x);
+			a2 = _atan2(y2, x2);
+			if (Math.abs(a - a2) < 0.09) {
+				smoothData[l-2] = a;
+				smoothData[2] = a2;
+				smoothData[l-1] = _sqrt(x * x + y * y);
+				smoothData[3] = _sqrt(x2 * x2 + y2 * y2);
+				isSmooth[l-2] = isSmooth[l-1] = true; //don't change indexes 2 and 3 because we'll trigger everything from the END, and this will optimize file size a bit.
+			}
+		}
+	}
+	return rawPath;
+}
+export function pointToScreen(svgElement, point) {
+	if (arguments.length < 2) { //by default, take the first set of coordinates in the path as the point
+		let rawPath = getRawPath(svgElement);
+		point = svgElement.ownerSVGElement.createSVGPoint();
+		point.x = rawPath[0][0];
+		point.y = rawPath[0][1];
+	}
+	return point.matrixTransform(svgElement.getScreenCTM());
+}
+
+*/
+
+export { getPositionOnPath as a, sliceRawPath as b, cacheRawPathMeasurements as c, convertToPath as d, flatPointsToSegment as f, getRawPath as g, pointsToSegment as p, rawPathToString as r, stringToRawPath as s, transformRawPath as t };
diff --git a/dist/shared/gsap.41b79ecf.d.mts b/dist/shared/gsap.41b79ecf.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..f82063372b3ddd6356cb7c74143c549d560c42dd
--- /dev/null
+++ b/dist/shared/gsap.41b79ecf.d.mts
@@ -0,0 +1,1054 @@
+/*!
+ * paths 3.12.5
+ * https://gsap.com
+ *
+ * Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let _svgPathExp = /[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
+	_numbersExp = /(?:(-)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
+	_scientific = /[\+\-]?\d*\.?\d+e[\+\-]?\d+/ig,
+	_selectorExp = /(^[#\.][a-z]|[a-y][a-z])/i,
+	_DEG2RAD = Math.PI / 180,
+	_RAD2DEG = 180 / Math.PI,
+	_sin = Math.sin,
+	_cos = Math.cos,
+	_abs = Math.abs,
+	_sqrt = Math.sqrt,
+	_atan2 = Math.atan2,
+	_largeNum = 1e8,
+	_isString = value => typeof(value) === "string",
+	_isNumber = value => typeof(value) === "number",
+	_isUndefined = value => typeof(value) === "undefined",
+	_temp = {},
+	_temp2 = {},
+	_roundingNum = 1e5,
+	_wrapProgress = progress => (Math.round((progress + _largeNum) % 1 * _roundingNum) / _roundingNum) || ((progress < 0) ? 0 : 1), //if progress lands on 1, the % will make it 0 which is why we || 1, but not if it's negative because it makes more sense for motion to end at 0 in that case.
+	_round = value => (Math.round(value * _roundingNum) / _roundingNum) || 0,
+	_roundPrecise = value => (Math.round(value * 1e10) / 1e10) || 0,
+	_splitSegment = (rawPath, segIndex, i, t) => {
+		let segment = rawPath[segIndex],
+			shift = t === 1 ? 6 : subdivideSegment(segment, i, t);
+		if ((shift || !t) && shift + i + 2 < segment.length) {
+			rawPath.splice(segIndex, 0, segment.slice(0, i + shift + 2));
+			segment.splice(0, i + shift);
+			return 1;
+		}
+	},
+	_getSampleIndex = (samples, length, progress) => {
+		// slightly slower way than doing this (when there's no lookup): segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0;
+		let l = samples.length,
+			i = ~~(progress * l);
+		if (samples[i] > length) {
+			while (--i && samples[i] > length) {}
+			i < 0 && (i = 0);
+		} else {
+			while (samples[++i] < length && i < l) {}
+		}
+		return i < l ? i : l - 1;
+	},
+	_reverseRawPath = (rawPath, skipOuter) => {
+		let i = rawPath.length;
+		skipOuter || rawPath.reverse();
+		while (i--) {
+			rawPath[i].reversed || reverseSegment(rawPath[i]);
+		}
+	},
+	_copyMetaData = (source, copy) => {
+		copy.totalLength = source.totalLength;
+		if (source.samples) { //segment
+			copy.samples = source.samples.slice(0);
+			copy.lookup = source.lookup.slice(0);
+			copy.minLength = source.minLength;
+			copy.resolution = source.resolution;
+		} else if (source.totalPoints) { //rawPath
+			copy.totalPoints = source.totalPoints;
+		}
+		return copy;
+	},
+	//pushes a new segment into a rawPath, but if its starting values match the ending values of the last segment, it'll merge it into that same segment (to reduce the number of segments)
+	_appendOrMerge = (rawPath, segment) => {
+		let index = rawPath.length,
+			prevSeg = rawPath[index - 1] || [],
+			l = prevSeg.length;
+		if (index && segment[0] === prevSeg[l-2] && segment[1] === prevSeg[l-1]) {
+			segment = prevSeg.concat(segment.slice(2));
+			index--;
+		}
+		rawPath[index] = segment;
+	};
+
+/* TERMINOLOGY
+ - RawPath - an array of arrays, one for each Segment. A single RawPath could have multiple "M" commands, defining Segments (paths aren't always connected).
+ - Segment - an array containing a sequence of Cubic Bezier coordinates in alternating x, y, x, y format. Starting anchor, then control point 1, control point 2, and ending anchor, then the next control point 1, control point 2, anchor, etc. Uses less memory than an array with a bunch of {x, y} points.
+ - Bezier - a single cubic Bezier with a starting anchor, two control points, and an ending anchor.
+ - the variable "t" is typically the position along an individual Bezier path (time) and it's NOT linear, meaning it could accelerate/decelerate based on the control points whereas the "p" or "progress" value is linearly mapped to the whole path, so it shouldn't really accelerate/decelerate based on control points. So a progress of 0.2 would be almost exactly 20% along the path. "t" is ONLY in an individual Bezier piece.
+ */
+
+//accepts basic selector text, a path instance, a RawPath instance, or a Segment and returns a RawPath (makes it easy to homogenize things). If an element or selector text is passed in, it'll also cache the value so that if it's queried again, it'll just take the path data from there instead of parsing it all over again (as long as the path data itself hasn't changed - it'll check).
+function getRawPath(value) {
+	value = (_isString(value) && _selectorExp.test(value)) ? document.querySelector(value) || value : value;
+	let e = value.getAttribute ? value : 0,
+		rawPath;
+	if (e && (value = value.getAttribute("d"))) {
+		//implements caching
+		if (!e._gsPath) {
+			e._gsPath = {};
+		}
+		rawPath = e._gsPath[value];
+		return (rawPath && !rawPath._dirty) ? rawPath : (e._gsPath[value] = stringToRawPath(value));
+	}
+	return !value ? console.warn("Expecting a <path> element or an SVG path data string") : _isString(value) ? stringToRawPath(value) : (_isNumber(value[0])) ? [value] : value;
+}
+
+//copies a RawPath WITHOUT the length meta data (for speed)
+function copyRawPath(rawPath) {
+	let a = [],
+		i = 0;
+	for (; i < rawPath.length; i++) {
+		a[i] = _copyMetaData(rawPath[i], rawPath[i].slice(0));
+	}
+	return _copyMetaData(rawPath, a);
+}
+
+function reverseSegment(segment) {
+	let i = 0,
+		y;
+	segment.reverse(); //this will invert the order y, x, y, x so we must flip it back.
+	for (; i < segment.length; i += 2) {
+		y = segment[i];
+		segment[i] = segment[i+1];
+		segment[i+1] = y;
+	}
+	segment.reversed = !segment.reversed;
+}
+
+
+
+let _createPath = (e, ignore) => {
+		let path = document.createElementNS("http://www.w3.org/2000/svg", "path"),
+			attr = [].slice.call(e.attributes),
+			i = attr.length,
+			name;
+		ignore = "," + ignore + ",";
+		while (--i > -1) {
+			name = attr[i].nodeName.toLowerCase(); //in Microsoft Edge, if you don't set the attribute with a lowercase name, it doesn't render correctly! Super weird.
+			if (ignore.indexOf("," + name + ",") < 0) {
+				path.setAttributeNS(null, name, attr[i].nodeValue);
+			}
+		}
+		return path;
+	},
+	_typeAttrs = {
+		rect:"rx,ry,x,y,width,height",
+		circle:"r,cx,cy",
+		ellipse:"rx,ry,cx,cy",
+		line:"x1,x2,y1,y2"
+	},
+	_attrToObj = (e, attrs) => {
+		let props = attrs ? attrs.split(",") : [],
+			obj = {},
+			i = props.length;
+		while (--i > -1) {
+			obj[props[i]] = +e.getAttribute(props[i]) || 0;
+		}
+		return obj;
+	};
+
+//converts an SVG shape like <circle>, <rect>, <polygon>, <polyline>, <ellipse>, etc. to a <path>, swapping it in and copying the attributes to match.
+function convertToPath(element, swap) {
+	let type = element.tagName.toLowerCase(),
+		circ = 0.552284749831,
+		data, x, y, r, ry, path, rcirc, rycirc, points, w, h, x2, x3, x4, x5, x6, y2, y3, y4, y5, y6, attr;
+	if (type === "path" || !element.getBBox) {
+		return element;
+	}
+	path = _createPath(element, "x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points");
+	attr = _attrToObj(element, _typeAttrs[type]);
+	if (type === "rect") {
+		r = attr.rx;
+		ry = attr.ry || r;
+		x = attr.x;
+		y = attr.y;
+		w = attr.width - r * 2;
+		h = attr.height - ry * 2;
+		if (r || ry) { //if there are rounded corners, render cubic beziers
+			x2 = x + r * (1 - circ);
+			x3 = x + r;
+			x4 = x3 + w;
+			x5 = x4 + r * circ;
+			x6 = x4 + r;
+			y2 = y + ry * (1 - circ);
+			y3 = y + ry;
+			y4 = y3 + h;
+			y5 = y4 + ry * circ;
+			y6 = y4 + ry;
+			data = "M" + x6 + "," + y3 + " V" + y4 + " C" + [x6, y5, x5, y6, x4, y6, x4 - (x4 - x3) / 3, y6, x3 + (x4 - x3) / 3, y6, x3, y6, x2, y6, x, y5, x, y4, x, y4 - (y4 - y3) / 3, x, y3 + (y4 - y3) / 3, x, y3, x, y2, x2, y, x3, y, x3 + (x4 - x3) / 3, y, x4 - (x4 - x3) / 3, y, x4, y, x5, y, x6, y2, x6, y3].join(",") + "z";
+		} else {
+			data = "M" + (x + w) + "," + y + " v" + h + " h" + (-w) + " v" + (-h) + " h" + w + "z";
+		}
+
+	} else if (type === "circle" || type === "ellipse") {
+		if (type === "circle") {
+			r = ry = attr.r;
+			rycirc = r * circ;
+		} else {
+			r = attr.rx;
+			ry = attr.ry;
+			rycirc = ry * circ;
+		}
+		x = attr.cx;
+		y = attr.cy;
+		rcirc = r * circ;
+		data = "M" + (x+r) + "," + y + " C" + [x+r, y + rycirc, x + rcirc, y + ry, x, y + ry, x - rcirc, y + ry, x - r, y + rycirc, x - r, y, x - r, y - rycirc, x - rcirc, y - ry, x, y - ry, x + rcirc, y - ry, x + r, y - rycirc, x + r, y].join(",") + "z";
+	} else if (type === "line") {
+		data = "M" + attr.x1 + "," + attr.y1 + " L" + attr.x2 + "," + attr.y2; //previously, we just converted to "Mx,y Lx,y" but Safari has bugs that cause that not to render properly when using a stroke-dasharray that's not fully visible! Using a cubic bezier fixes that issue.
+	} else if (type === "polyline" || type === "polygon") {
+		points = (element.getAttribute("points") + "").match(_numbersExp) || [];
+		x = points.shift();
+		y = points.shift();
+		data = "M" + x + "," + y + " L" + points.join(",");
+		if (type === "polygon") {
+			data += "," + x + "," + y + "z";
+		}
+	}
+	path.setAttribute("d", rawPathToString(path._gsRawPath = stringToRawPath(data)));
+	if (swap && element.parentNode) {
+		element.parentNode.insertBefore(path, element);
+		element.parentNode.removeChild(element);
+	}
+	return path;
+}
+
+function getRotationAtBezierT(segment, i, t) {
+	let a = segment[i],
+		b = segment[i+2],
+		c = segment[i+4],
+		x;
+	a += (b - a) * t;
+	b += (c - b) * t;
+	a += (b - a) * t;
+	x = b + ((c + (segment[i+6] - c) * t) - b) * t - a;
+	a = segment[i+1];
+	b = segment[i+3];
+	c = segment[i+5];
+	a += (b - a) * t;
+	b += (c - b) * t;
+	a += (b - a) * t;
+	return _round(_atan2(b + ((c + (segment[i+7] - c) * t) - b) * t - a, x) * _RAD2DEG);
+}
+
+function sliceRawPath(rawPath, start, end) {
+	end = _isUndefined(end) ? 1 : _roundPrecise(end) || 0; // we must round to avoid issues like 4.15 / 8 = 0.8300000000000001 instead of 0.83 or 2.8 / 5 = 0.5599999999999999 instead of 0.56 and if someone is doing a loop like start: 2.8 / 0.5, end: 2.8 / 0.5 + 1.
+	start = _roundPrecise(start) || 0;
+	let loops = Math.max(0, ~~(_abs(end - start) - 1e-8)),
+		path = copyRawPath(rawPath);
+	if (start > end) {
+		start = 1 - start;
+		end = 1 - end;
+		_reverseRawPath(path);
+		path.totalLength = 0;
+	}
+	if (start < 0 || end < 0) {
+		let offset = Math.abs(~~Math.min(start, end)) + 1;
+		start += offset;
+		end += offset;
+	}
+	path.totalLength || cacheRawPathMeasurements(path);
+	let wrap = (end > 1),
+		s = getProgressData(path, start, _temp, true),
+		e = getProgressData(path, end, _temp2),
+		eSeg = e.segment,
+		sSeg = s.segment,
+		eSegIndex = e.segIndex,
+		sSegIndex = s.segIndex,
+		ei = e.i,
+		si = s.i,
+		sameSegment = (sSegIndex === eSegIndex),
+		sameBezier = (ei === si && sameSegment),
+		wrapsBehind, sShift, eShift, i, copy, totalSegments, l, j;
+	if (wrap || loops) {
+		wrapsBehind = eSegIndex < sSegIndex || (sameSegment && ei < si) || (sameBezier && e.t < s.t);
+		if (_splitSegment(path, sSegIndex, si, s.t)) {
+			sSegIndex++;
+			if (!wrapsBehind) {
+				eSegIndex++;
+				if (sameBezier) {
+					e.t = (e.t - s.t) / (1 - s.t);
+					ei = 0;
+				} else if (sameSegment) {
+					ei -= si;
+				}
+			}
+		}
+		if (Math.abs(1 - (end - start)) < 1e-5) {
+			eSegIndex = sSegIndex - 1;
+		} else if (!e.t && eSegIndex) {
+			eSegIndex--;
+		} else if (_splitSegment(path, eSegIndex, ei, e.t) && wrapsBehind) {
+			sSegIndex++;
+		}
+		if (s.t === 1) {
+			sSegIndex = (sSegIndex + 1) % path.length;
+		}
+		copy = [];
+		totalSegments = path.length;
+		l = 1 + totalSegments * loops;
+		j = sSegIndex;
+		l += ((totalSegments - sSegIndex) + eSegIndex) % totalSegments;
+		for (i = 0; i < l; i++) {
+			_appendOrMerge(copy, path[j++ % totalSegments]);
+		}
+		path = copy;
+	} else {
+		eShift = e.t === 1 ? 6 : subdivideSegment(eSeg, ei, e.t);
+		if (start !== end) {
+			sShift = subdivideSegment(sSeg, si, sameBezier ? s.t / e.t : s.t);
+			sameSegment && (eShift += sShift);
+			eSeg.splice(ei + eShift + 2);
+			(sShift || si) && sSeg.splice(0, si + sShift);
+			i = path.length;
+			while (i--) {
+				//chop off any extra segments
+				(i < sSegIndex || i > eSegIndex) &&	path.splice(i, 1);
+			}
+		} else {
+			eSeg.angle = getRotationAtBezierT(eSeg, ei + eShift, 0); //record the value before we chop because it'll be impossible to determine the angle after its length is 0!
+			ei += eShift;
+			s = eSeg[ei];
+			e = eSeg[ei+1];
+			eSeg.length = eSeg.totalLength = 0;
+			eSeg.totalPoints = path.totalPoints = 8;
+			eSeg.push(s, e, s, e, s, e, s, e);
+		}
+	}
+	path.totalLength = 0;
+	return path;
+}
+
+//measures a Segment according to its resolution (so if segment.resolution is 6, for example, it'll take 6 samples equally across each Bezier) and create/populate a "samples" Array that has the length up to each of those sample points (always increasing from the start) as well as a "lookup" array that's broken up according to the smallest distance between 2 samples. This gives us a very fast way of looking up a progress position rather than looping through all the points/Beziers. You can optionally have it only measure a subset, starting at startIndex and going for a specific number of beziers (remember, there are 3 x/y pairs each, for a total of 6 elements for each Bezier). It will also populate a "totalLength" property, but that's not generally super accurate because by default it'll only take 6 samples per Bezier. But for performance reasons, it's perfectly adequate for measuring progress values along the path. If you need a more accurate totalLength, either increase the resolution or use the more advanced bezierToPoints() method which keeps adding points until they don't deviate by more than a certain precision value.
+function measureSegment(segment, startIndex, bezierQty) {
+	startIndex = startIndex || 0;
+	if (!segment.samples) {
+		segment.samples = [];
+		segment.lookup = [];
+	}
+	let resolution = ~~segment.resolution || 12,
+		inc = 1 / resolution,
+		endIndex = bezierQty ? startIndex + bezierQty * 6 + 1 : segment.length,
+		x1 = segment[startIndex],
+		y1 = segment[startIndex + 1],
+		samplesIndex = startIndex ? (startIndex / 6) * resolution : 0,
+		samples = segment.samples,
+		lookup = segment.lookup,
+		min = (startIndex ? segment.minLength : _largeNum) || _largeNum,
+		prevLength = samples[samplesIndex + bezierQty * resolution - 1],
+		length = startIndex ? samples[samplesIndex-1] : 0,
+		i, j, x4, x3, x2, xd, xd1, y4, y3, y2, yd, yd1, inv, t, lengthIndex, l, segLength;
+	samples.length = lookup.length = 0;
+	for (j = startIndex + 2; j < endIndex; j += 6) {
+		x4 = segment[j + 4] - x1;
+		x3 = segment[j + 2] - x1;
+		x2 = segment[j] - x1;
+		y4 = segment[j + 5] - y1;
+		y3 = segment[j + 3] - y1;
+		y2 = segment[j + 1] - y1;
+		xd = xd1 = yd = yd1 = 0;
+		if (_abs(x4) < .01 && _abs(y4) < .01 && _abs(x2) + _abs(y2) < .01) { //dump points that are sufficiently close (basically right on top of each other, making a bezier super tiny or 0 length)
+			if (segment.length > 8) {
+				segment.splice(j, 6);
+				j -= 6;
+				endIndex -= 6;
+			}
+		} else {
+			for (i = 1; i <= resolution; i++) {
+				t = inc * i;
+				inv = 1 - t;
+				xd = xd1 - (xd1 = (t * t * x4 + 3 * inv * (t * x3 + inv * x2)) * t);
+				yd = yd1 - (yd1 = (t * t * y4 + 3 * inv * (t * y3 + inv * y2)) * t);
+				l = _sqrt(yd * yd + xd * xd);
+				if (l < min) {
+					min = l;
+				}
+				length += l;
+				samples[samplesIndex++] = length;
+			}
+		}
+		x1 += x4;
+		y1 += y4;
+	}
+	if (prevLength) {
+		prevLength -= length;
+		for (; samplesIndex < samples.length; samplesIndex++) {
+			samples[samplesIndex] += prevLength;
+		}
+	}
+	if (samples.length && min) {
+		segment.totalLength = segLength = samples[samples.length-1] || 0;
+		segment.minLength = min;
+		if (segLength / min < 9999) { // if the lookup would require too many values (memory problem), we skip this and instead we use a loop to lookup values directly in the samples Array
+			l = lengthIndex = 0;
+			for (i = 0; i < segLength; i += min) {
+				lookup[l++] = (samples[lengthIndex] < i) ? ++lengthIndex : lengthIndex;
+			}
+		}
+	} else {
+		segment.totalLength = samples[0] = 0;
+	}
+	return startIndex ? length - samples[startIndex / 2 - 1] : length;
+}
+
+function cacheRawPathMeasurements(rawPath, resolution) {
+	let pathLength, points, i;
+	for (i = pathLength = points = 0; i < rawPath.length; i++) {
+		rawPath[i].resolution = ~~resolution || 12; //steps per Bezier curve (anchor, 2 control points, to anchor)
+		points += rawPath[i].length;
+		pathLength += measureSegment(rawPath[i]);
+	}
+	rawPath.totalPoints = points;
+	rawPath.totalLength = pathLength;
+	return rawPath;
+}
+
+//divide segment[i] at position t (value between 0 and 1, progress along that particular cubic bezier segment that starts at segment[i]). Returns how many elements were spliced into the segment array (either 0 or 6)
+function subdivideSegment(segment, i, t) {
+	if (t <= 0 || t >= 1) {
+		return 0;
+	}
+	let ax = segment[i],
+		ay = segment[i+1],
+		cp1x = segment[i+2],
+		cp1y = segment[i+3],
+		cp2x = segment[i+4],
+		cp2y = segment[i+5],
+		bx = segment[i+6],
+		by = segment[i+7],
+		x1a = ax + (cp1x - ax) * t,
+		x2 = cp1x + (cp2x - cp1x) * t,
+		y1a = ay + (cp1y - ay) * t,
+		y2 = cp1y + (cp2y - cp1y) * t,
+		x1 = x1a + (x2 - x1a) * t,
+		y1 = y1a + (y2 - y1a) * t,
+		x2a = cp2x + (bx - cp2x) * t,
+		y2a = cp2y + (by - cp2y) * t;
+	x2 += (x2a - x2) * t;
+	y2 += (y2a - y2) * t;
+	segment.splice(i + 2, 4,
+		_round(x1a),                  //first control point
+		_round(y1a),
+		_round(x1),                   //second control point
+		_round(y1),
+		_round(x1 + (x2 - x1) * t),   //new fabricated anchor on line
+		_round(y1 + (y2 - y1) * t),
+		_round(x2),                   //third control point
+		_round(y2),
+		_round(x2a),                  //fourth control point
+		_round(y2a)
+	);
+	segment.samples && segment.samples.splice(((i / 6) * segment.resolution) | 0, 0, 0, 0, 0, 0, 0, 0);
+	return 6;
+}
+
+// returns an object {path, segment, segIndex, i, t}
+function getProgressData(rawPath, progress, decoratee, pushToNextIfAtEnd) {
+	decoratee = decoratee || {};
+	rawPath.totalLength || cacheRawPathMeasurements(rawPath);
+	if (progress < 0 || progress > 1) {
+		progress = _wrapProgress(progress);
+	}
+	let segIndex = 0,
+		segment = rawPath[0],
+		samples, resolution, length, min, max, i, t;
+	if (!progress) {
+		t = i = segIndex = 0;
+		segment = rawPath[0];
+	} else if (progress === 1) {
+		t = 1;
+		segIndex = rawPath.length - 1;
+		segment = rawPath[segIndex];
+		i = segment.length - 8;
+	} else {
+		if (rawPath.length > 1) { //speed optimization: most of the time, there's only one segment so skip the recursion.
+			length = rawPath.totalLength * progress;
+			max = i = 0;
+			while ((max += rawPath[i++].totalLength) < length) {
+				segIndex = i;
+			}
+			segment = rawPath[segIndex];
+			min = max - segment.totalLength;
+			progress = ((length - min) / (max - min)) || 0;
+		}
+		samples = segment.samples;
+		resolution = segment.resolution; //how many samples per cubic bezier chunk
+		length = segment.totalLength * progress;
+		i = segment.lookup.length ? segment.lookup[~~(length / segment.minLength)] || 0 : _getSampleIndex(samples, length, progress);
+		min = i ? samples[i-1] : 0;
+		max = samples[i];
+		if (max < length) {
+			min = max;
+			max = samples[++i];
+		}
+		t = (1 / resolution) * (((length - min) / (max - min)) + ((i % resolution)));
+		i = ~~(i / resolution) * 6;
+		if (pushToNextIfAtEnd && t === 1) {
+			if (i + 6 < segment.length) {
+				i += 6;
+				t = 0;
+			} else if (segIndex + 1 < rawPath.length) {
+				i = t = 0;
+				segment = rawPath[++segIndex];
+			}
+		}
+	}
+	decoratee.t = t;
+	decoratee.i = i;
+	decoratee.path = rawPath;
+	decoratee.segment = segment;
+	decoratee.segIndex = segIndex;
+	return decoratee;
+}
+
+function getPositionOnPath(rawPath, progress, includeAngle, point) {
+	let segment = rawPath[0],
+		result = point || {},
+		samples, resolution, length, min, max, i, t, a, inv;
+	if (progress < 0 || progress > 1) {
+		progress = _wrapProgress(progress);
+	}
+	segment.lookup || cacheRawPathMeasurements(rawPath);
+	if (rawPath.length > 1) { //speed optimization: most of the time, there's only one segment so skip the recursion.
+		length = rawPath.totalLength * progress;
+		max = i = 0;
+		while ((max += rawPath[i++].totalLength) < length) {
+			segment = rawPath[i];
+		}
+		min = max - segment.totalLength;
+		progress = ((length - min) / (max - min)) || 0;
+	}
+	samples = segment.samples;
+	resolution = segment.resolution;
+	length = segment.totalLength * progress;
+	i = segment.lookup.length ? segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0 : _getSampleIndex(samples, length, progress);
+	min = i ? samples[i-1] : 0;
+	max = samples[i];
+	if (max < length) {
+		min = max;
+		max = samples[++i];
+	}
+	t = ((1 / resolution) * (((length - min) / (max - min)) + ((i % resolution)))) || 0;
+	inv = 1 - t;
+	i = ~~(i / resolution) * 6;
+	a = segment[i];
+	result.x = _round((t * t * (segment[i + 6] - a) + 3 * inv * (t * (segment[i + 4] - a) + inv * (segment[i + 2] - a))) * t + a);
+	result.y = _round((t * t * (segment[i + 7] - (a = segment[i+1])) + 3 * inv * (t * (segment[i + 5] - a) + inv * (segment[i + 3] - a))) * t + a);
+	if (includeAngle) {
+		result.angle = segment.totalLength ? getRotationAtBezierT(segment, i, t >= 1 ? 1 - 1e-9 : t ? t : 1e-9) : segment.angle || 0;
+	}
+	return result;
+}
+
+
+
+//applies a matrix transform to RawPath (or a segment in a RawPath) and returns whatever was passed in (it transforms the values in the array(s), not a copy).
+function transformRawPath(rawPath, a, b, c, d, tx, ty) {
+	let j = rawPath.length,
+		segment, l, i, x, y;
+	while (--j > -1) {
+		segment = rawPath[j];
+		l = segment.length;
+		for (i = 0; i < l; i += 2) {
+			x = segment[i];
+			y = segment[i+1];
+			segment[i] = x * a + y * c + tx;
+			segment[i+1] = x * b + y * d + ty;
+		}
+	}
+	rawPath._dirty = 1;
+	return rawPath;
+}
+
+
+
+// translates SVG arc data into a segment (cubic beziers). Angle is in degrees.
+function arcToSegment(lastX, lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y) {
+	if (lastX === x && lastY === y) {
+		return;
+	}
+	rx = _abs(rx);
+	ry = _abs(ry);
+	let angleRad = (angle % 360) * _DEG2RAD,
+		cosAngle = _cos(angleRad),
+		sinAngle = _sin(angleRad),
+		PI = Math.PI,
+		TWOPI = PI * 2,
+		dx2 = (lastX - x) / 2,
+		dy2 = (lastY - y) / 2,
+		x1 = (cosAngle * dx2 + sinAngle * dy2),
+		y1 = (-sinAngle * dx2 + cosAngle * dy2),
+		x1_sq = x1 * x1,
+		y1_sq = y1 * y1,
+		radiiCheck = x1_sq / (rx * rx) + y1_sq / (ry * ry);
+	if (radiiCheck > 1) {
+		rx = _sqrt(radiiCheck) * rx;
+		ry = _sqrt(radiiCheck) * ry;
+	}
+	let rx_sq = rx * rx,
+		ry_sq = ry * ry,
+		sq = ((rx_sq * ry_sq) - (rx_sq * y1_sq) - (ry_sq * x1_sq)) / ((rx_sq * y1_sq) + (ry_sq * x1_sq));
+	if (sq < 0) {
+		sq = 0;
+	}
+	let coef = ((largeArcFlag === sweepFlag) ? -1 : 1) * _sqrt(sq),
+		cx1 = coef * ((rx * y1) / ry),
+		cy1 = coef * -((ry * x1) / rx),
+		sx2 = (lastX + x) / 2,
+		sy2 = (lastY + y) / 2,
+		cx = sx2 + (cosAngle * cx1 - sinAngle * cy1),
+		cy = sy2 + (sinAngle * cx1 + cosAngle * cy1),
+		ux = (x1 - cx1) / rx,
+		uy = (y1 - cy1) / ry,
+		vx = (-x1 - cx1) / rx,
+		vy = (-y1 - cy1) / ry,
+		temp = ux * ux + uy * uy,
+		angleStart = ((uy < 0) ? -1 : 1) * Math.acos(ux / _sqrt(temp)),
+		angleExtent = ((ux * vy - uy * vx < 0) ? -1 : 1) * Math.acos((ux * vx + uy * vy) / _sqrt(temp * (vx * vx + vy * vy)));
+	isNaN(angleExtent) && (angleExtent = PI); //rare edge case. Math.cos(-1) is NaN.
+	if (!sweepFlag && angleExtent > 0) {
+		angleExtent -= TWOPI;
+	} else if (sweepFlag && angleExtent < 0) {
+		angleExtent += TWOPI;
+	}
+	angleStart %= TWOPI;
+	angleExtent %= TWOPI;
+	let segments = Math.ceil(_abs(angleExtent) / (TWOPI / 4)),
+		rawPath = [],
+		angleIncrement = angleExtent / segments,
+		controlLength = 4 / 3 * _sin(angleIncrement / 2) / (1 + _cos(angleIncrement / 2)),
+		ma = cosAngle * rx,
+		mb = sinAngle * rx,
+		mc = sinAngle * -ry,
+		md = cosAngle * ry,
+		i;
+	for (i = 0; i < segments; i++) {
+		angle = angleStart + i * angleIncrement;
+		x1 = _cos(angle);
+		y1 = _sin(angle);
+		ux = _cos(angle += angleIncrement);
+		uy = _sin(angle);
+		rawPath.push(x1 - controlLength * y1, y1 + controlLength * x1, ux + controlLength * uy, uy - controlLength * ux, ux, uy);
+	}
+	//now transform according to the actual size of the ellipse/arc (the beziers were noramlized, between 0 and 1 on a circle).
+	for (i = 0; i < rawPath.length; i+=2) {
+		x1 = rawPath[i];
+		y1 = rawPath[i+1];
+		rawPath[i] = x1 * ma + y1 * mc + cx;
+		rawPath[i+1] = x1 * mb + y1 * md + cy;
+	}
+	rawPath[i-2] = x; //always set the end to exactly where it's supposed to be
+	rawPath[i-1] = y;
+	return rawPath;
+}
+
+//Spits back a RawPath with absolute coordinates. Each segment starts with a "moveTo" command (x coordinate, then y) and then 2 control points (x, y, x, y), then anchor. The goal is to minimize memory and maximize speed.
+function stringToRawPath(d) {
+	let a = (d + "").replace(_scientific, m => { let n = +m; return (n < 0.0001 && n > -0.0001) ? 0 : n; }).match(_svgPathExp) || [], //some authoring programs spit out very small numbers in scientific notation like "1e-5", so make sure we round that down to 0 first.
+		path = [],
+		relativeX = 0,
+		relativeY = 0,
+		twoThirds = 2 / 3,
+		elements = a.length,
+		points = 0,
+		errorMessage = "ERROR: malformed path: " + d,
+		i, j, x, y, command, isRelative, segment, startX, startY, difX, difY, beziers, prevCommand, flag1, flag2,
+		line = function(sx, sy, ex, ey) {
+			difX = (ex - sx) / 3;
+			difY = (ey - sy) / 3;
+			segment.push(sx + difX, sy + difY, ex - difX, ey - difY, ex, ey);
+		};
+	if (!d || !isNaN(a[0]) || isNaN(a[1])) {
+		console.log(errorMessage);
+		return path;
+	}
+	for (i = 0; i < elements; i++) {
+		prevCommand = command;
+		if (isNaN(a[i])) {
+			command = a[i].toUpperCase();
+			isRelative = (command !== a[i]); //lower case means relative
+		} else { //commands like "C" can be strung together without any new command characters between.
+			i--;
+		}
+		x = +a[i + 1];
+		y = +a[i + 2];
+		if (isRelative) {
+			x += relativeX;
+			y += relativeY;
+		}
+		if (!i) {
+			startX = x;
+			startY = y;
+		}
+
+		// "M" (move)
+		if (command === "M") {
+			if (segment) {
+				if (segment.length < 8) { //if the path data was funky and just had a M with no actual drawing anywhere, skip it.
+					path.length -= 1;
+				} else {
+					points += segment.length;
+				}
+			}
+			relativeX = startX = x;
+			relativeY = startY = y;
+			segment = [x, y];
+			path.push(segment);
+			i += 2;
+			command = "L"; //an "M" with more than 2 values gets interpreted as "lineTo" commands ("L").
+
+		// "C" (cubic bezier)
+		} else if (command === "C") {
+			if (!segment) {
+				segment = [0, 0];
+			}
+			if (!isRelative) {
+				relativeX = relativeY = 0;
+			}
+			//note: "*1" is just a fast/short way to cast the value as a Number. WAAAY faster in Chrome, slightly slower in Firefox.
+			segment.push(x,	y, relativeX + a[i + 3] * 1, relativeY + a[i + 4] * 1, (relativeX += a[i + 5] * 1),	(relativeY += a[i + 6] * 1));
+			i += 6;
+
+		// "S" (continuation of cubic bezier)
+		} else if (command === "S") {
+			difX = relativeX;
+			difY = relativeY;
+			if (prevCommand === "C" || prevCommand === "S") {
+				difX += relativeX - segment[segment.length - 4];
+				difY += relativeY - segment[segment.length - 3];
+			}
+			if (!isRelative) {
+				relativeX = relativeY = 0;
+			}
+			segment.push(difX, difY, x,	y, (relativeX += a[i + 3] * 1), (relativeY += a[i + 4] * 1));
+			i += 4;
+
+		// "Q" (quadratic bezier)
+		} else if (command === "Q") {
+			difX = relativeX + (x - relativeX) * twoThirds;
+			difY = relativeY + (y - relativeY) * twoThirds;
+			if (!isRelative) {
+				relativeX = relativeY = 0;
+			}
+			relativeX += a[i + 3] * 1;
+			relativeY += a[i + 4] * 1;
+			segment.push(difX, difY, relativeX + (x - relativeX) * twoThirds, relativeY + (y - relativeY) * twoThirds, relativeX, relativeY);
+			i += 4;
+
+		// "T" (continuation of quadratic bezier)
+		} else if (command === "T") {
+			difX = relativeX - segment[segment.length - 4];
+			difY = relativeY - segment[segment.length - 3];
+			segment.push(relativeX + difX, relativeY + difY, x + ((relativeX + difX * 1.5) - x) * twoThirds, y + ((relativeY + difY * 1.5) - y) * twoThirds, (relativeX = x), (relativeY = y));
+			i += 2;
+
+		// "H" (horizontal line)
+		} else if (command === "H") {
+			line(relativeX, relativeY, (relativeX = x), relativeY);
+			i += 1;
+
+		// "V" (vertical line)
+		} else if (command === "V") {
+			//adjust values because the first (and only one) isn't x in this case, it's y.
+			line(relativeX, relativeY, relativeX, (relativeY = x + (isRelative ? relativeY - relativeX : 0)));
+			i += 1;
+
+		// "L" (line) or "Z" (close)
+		} else if (command === "L" || command === "Z") {
+			if (command === "Z") {
+				x = startX;
+				y = startY;
+				segment.closed = true;
+			}
+			if (command === "L" || _abs(relativeX - x) > 0.5 || _abs(relativeY - y) > 0.5) {
+				line(relativeX, relativeY, x, y);
+				if (command === "L") {
+					i += 2;
+				}
+			}
+			relativeX = x;
+			relativeY = y;
+
+		// "A" (arc)
+		} else if (command === "A") {
+			flag1 = a[i+4];
+			flag2 = a[i+5];
+			difX = a[i+6];
+			difY = a[i+7];
+			j = 7;
+			if (flag1.length > 1) { // for cases when the flags are merged, like "a8 8 0 018 8" (the 0 and 1 flags are WITH the x value of 8, but it could also be "a8 8 0 01-8 8" so it may include x or not)
+				if (flag1.length < 3) {
+					difY = difX;
+					difX = flag2;
+					j--;
+				} else {
+					difY = flag2;
+					difX = flag1.substr(2);
+					j-=2;
+				}
+				flag2 = flag1.charAt(1);
+				flag1 = flag1.charAt(0);
+			}
+			beziers = arcToSegment(relativeX, relativeY, +a[i+1], +a[i+2], +a[i+3], +flag1, +flag2, (isRelative ? relativeX : 0) + difX*1, (isRelative ? relativeY : 0) + difY*1);
+			i += j;
+			if (beziers) {
+				for (j = 0; j < beziers.length; j++) {
+					segment.push(beziers[j]);
+				}
+			}
+			relativeX = segment[segment.length-2];
+			relativeY = segment[segment.length-1];
+
+		} else {
+			console.log(errorMessage);
+		}
+	}
+	i = segment.length;
+	if (i < 6) { //in case there's odd SVG like a M0,0 command at the very end.
+		path.pop();
+		i = 0;
+	} else if (segment[0] === segment[i-2] && segment[1] === segment[i-1]) {
+		segment.closed = true;
+	}
+	path.totalPoints = points + i;
+	return path;
+}
+
+/*
+function getAngleBetweenPoints(x0, y0, x1, y1, x2, y2) { //angle between 3 points in radians
+	var dx1 = x1 - x0,
+		dy1 = y1 - y0,
+		dx2 = x2 - x1,
+		dy2 = y2 - y1,
+		dx3 = x2 - x0,
+		dy3 = y2 - y0,
+		a = dx1 * dx1 + dy1 * dy1,
+		b = dx2 * dx2 + dy2 * dy2,
+		c = dx3 * dx3 + dy3 * dy3;
+	return Math.acos( (a + b - c) / _sqrt(4 * a * b) );
+},
+*/
+
+//pointsToSegment() doesn't handle flat coordinates (where y is always 0) the way we need (the resulting control points are always right on top of the anchors), so this function basically makes the control points go directly up and down, varying in length based on the curviness (more curvy, further control points)
+function flatPointsToSegment(points, curviness=1) {
+	let x = points[0],
+		y = 0,
+		segment = [x, y],
+		i = 2;
+	for (; i < points.length; i+=2) {
+		segment.push(
+			x,
+			y,
+			points[i],
+			(y = (points[i] - x) * curviness / 2),
+			(x = points[i]),
+			-y
+		);
+	}
+	return segment;
+}
+
+//points is an array of x/y points, like [x, y, x, y, x, y]
+function pointsToSegment(points, curviness) {
+	//points = simplifyPoints(points, tolerance);
+	_abs(points[0] - points[2]) < 1e-4 && _abs(points[1] - points[3]) < 1e-4 && (points = points.slice(2)); // if the first two points are super close, dump the first one.
+	let l = points.length-2,
+		x = +points[0],
+		y = +points[1],
+		nextX = +points[2],
+		nextY = +points[3],
+		segment = [x, y, x, y],
+		dx2 = nextX - x,
+		dy2 = nextY - y,
+		closed = Math.abs(points[l] - x) < 0.001 && Math.abs(points[l+1] - y) < 0.001,
+		prevX, prevY, i, dx1, dy1, r1, r2, r3, tl, mx1, mx2, mxm, my1, my2, mym;
+	if (closed) { // if the start and end points are basically on top of each other, close the segment by adding the 2nd point to the end, and the 2nd-to-last point to the beginning (we'll remove them at the end, but this allows the curvature to look perfect)
+		points.push(nextX, nextY);
+		nextX = x;
+		nextY = y;
+		x = points[l-2];
+		y = points[l-1];
+		points.unshift(x, y);
+		l+=4;
+	}
+	curviness = (curviness || curviness === 0) ? +curviness : 1;
+	for (i = 2; i < l; i+=2) {
+		prevX = x;
+		prevY = y;
+		x = nextX;
+		y = nextY;
+		nextX = +points[i+2];
+		nextY = +points[i+3];
+		if (x === nextX && y === nextY) {
+			continue;
+		}
+		dx1 = dx2;
+		dy1 = dy2;
+		dx2 = nextX - x;
+		dy2 = nextY - y;
+		r1 = _sqrt(dx1 * dx1 + dy1 * dy1); // r1, r2, and r3 correlate x and y (and z in the future). Basically 2D or 3D hypotenuse
+		r2 = _sqrt(dx2 * dx2 + dy2 * dy2);
+		r3 =  _sqrt((dx2 / r2 + dx1 / r1) ** 2 + (dy2 / r2 + dy1 / r1) ** 2);
+		tl = ((r1 + r2) * curviness * 0.25) / r3;
+		mx1 = x - (x - prevX) * (r1 ? tl / r1 : 0);
+		mx2 = x + (nextX - x) * (r2 ? tl / r2 : 0);
+		mxm = x - (mx1 + (((mx2 - mx1) * ((r1 * 3 / (r1 + r2)) + 0.5) / 4) || 0));
+		my1 = y - (y - prevY) * (r1 ? tl / r1 : 0);
+		my2 = y + (nextY - y) * (r2 ? tl / r2 : 0);
+		mym = y - (my1 + (((my2 - my1) * ((r1 * 3 / (r1 + r2)) + 0.5) / 4) || 0));
+		if (x !== prevX || y !== prevY) {
+			segment.push(
+				_round(mx1 + mxm),  // first control point
+				_round(my1 + mym),
+				_round(x),          // anchor
+				_round(y),
+				_round(mx2 + mxm),  // second control point
+				_round(my2 + mym)
+			);
+		}
+	}
+	x !== nextX || y !== nextY || segment.length < 4 ? segment.push(_round(nextX), _round(nextY), _round(nextX), _round(nextY)) : (segment.length -= 2);
+	if (segment.length === 2) { // only one point!
+		segment.push(x, y, x, y, x, y);
+	} else if (closed) {
+		segment.splice(0, 6);
+		segment.length = segment.length - 6;
+	}
+	return segment;
+}
+
+/*
+Takes any of the following and converts it to an all Cubic Bezier SVG data string:
+- A <path> data string like "M0,0 L2,4 v20,15 H100"
+- A RawPath, like [[x, y, x, y, x, y, x, y][[x, y, x, y, x, y, x, y]]
+- A Segment, like [x, y, x, y, x, y, x, y]
+
+Note: all numbers are rounded down to the closest 0.001 to minimize memory, maximize speed, and avoid odd numbers like 1e-13
+*/
+function rawPathToString(rawPath) {
+	if (_isNumber(rawPath[0])) { //in case a segment is passed in instead
+		rawPath = [rawPath];
+	}
+	let result = "",
+		l = rawPath.length,
+		sl, s, i, segment;
+	for (s = 0; s < l; s++) {
+		segment = rawPath[s];
+		result += "M" + _round(segment[0]) + "," + _round(segment[1]) + " C";
+		sl = segment.length;
+		for (i = 2; i < sl; i++) {
+			result += _round(segment[i++]) + "," + _round(segment[i++]) + " " + _round(segment[i++]) + "," + _round(segment[i++]) + " " + _round(segment[i++]) + "," + _round(segment[i]) + " ";
+		}
+		if (segment.closed) {
+			result += "z";
+		}
+	}
+	return result;
+}
+
+/*
+// takes a segment with coordinates [x, y, x, y, ...] and converts the control points into angles and lengths [x, y, angle, length, angle, length, x, y, angle, length, ...] so that it animates more cleanly and avoids odd breaks/kinks. For example, if you animate from 1 o'clock to 6 o'clock, it'd just go directly/linearly rather than around. So the length would be very short in the middle of the tween.
+export function cpCoordsToAngles(segment, copy) {
+	var result = copy ? segment.slice(0) : segment,
+		x, y, i;
+	for (i = 0; i < segment.length; i+=6) {
+		x = segment[i+2] - segment[i];
+		y = segment[i+3] - segment[i+1];
+		result[i+2] = Math.atan2(y, x);
+		result[i+3] = Math.sqrt(x * x + y * y);
+		x = segment[i+6] - segment[i+4];
+		y = segment[i+7] - segment[i+5];
+		result[i+4] = Math.atan2(y, x);
+		result[i+5] = Math.sqrt(x * x + y * y);
+	}
+	return result;
+}
+
+// takes a segment that was converted with cpCoordsToAngles() to have angles and lengths instead of coordinates for the control points, and converts it BACK into coordinates.
+export function cpAnglesToCoords(segment, copy) {
+	var result = copy ? segment.slice(0) : segment,
+		length = segment.length,
+		rnd = 1000,
+		angle, l, i, j;
+	for (i = 0; i < length; i+=6) {
+		angle = segment[i+2];
+		l = segment[i+3]; //length
+		result[i+2] = (((segment[i] + Math.cos(angle) * l) * rnd) | 0) / rnd;
+		result[i+3] = (((segment[i+1] + Math.sin(angle) * l) * rnd) | 0) / rnd;
+		angle = segment[i+4];
+		l = segment[i+5]; //length
+		result[i+4] = (((segment[i+6] - Math.cos(angle) * l) * rnd) | 0) / rnd;
+		result[i+5] = (((segment[i+7] - Math.sin(angle) * l) * rnd) | 0) / rnd;
+	}
+	return result;
+}
+
+//adds an "isSmooth" array to each segment and populates it with a boolean value indicating whether or not it's smooth (the control points have basically the same slope). For any smooth control points, it converts the coordinates into angle (x, in radians) and length (y) and puts them into the same index value in a smoothData array.
+export function populateSmoothData(rawPath) {
+	let j = rawPath.length,
+		smooth, segment, x, y, x2, y2, i, l, a, a2, isSmooth, smoothData;
+	while (--j > -1) {
+		segment = rawPath[j];
+		isSmooth = segment.isSmooth = segment.isSmooth || [0, 0, 0, 0];
+		smoothData = segment.smoothData = segment.smoothData || [0, 0, 0, 0];
+		isSmooth.length = 4;
+		l = segment.length - 2;
+		for (i = 6; i < l; i += 6) {
+			x = segment[i] - segment[i - 2];
+			y = segment[i + 1] - segment[i - 1];
+			x2 = segment[i + 2] - segment[i];
+			y2 = segment[i + 3] - segment[i + 1];
+			a = _atan2(y, x);
+			a2 = _atan2(y2, x2);
+			smooth = (Math.abs(a - a2) < 0.09);
+			if (smooth) {
+				smoothData[i - 2] = a;
+				smoothData[i + 2] = a2;
+				smoothData[i - 1] = _sqrt(x * x + y * y);
+				smoothData[i + 3] = _sqrt(x2 * x2 + y2 * y2);
+			}
+			isSmooth.push(smooth, smooth, 0, 0, smooth, smooth);
+		}
+		//if the first and last points are identical, check to see if there's a smooth transition. We must handle this a bit differently due to their positions in the array.
+		if (segment[l] === segment[0] && segment[l+1] === segment[1]) {
+			x = segment[0] - segment[l-2];
+			y = segment[1] - segment[l-1];
+			x2 = segment[2] - segment[0];
+			y2 = segment[3] - segment[1];
+			a = _atan2(y, x);
+			a2 = _atan2(y2, x2);
+			if (Math.abs(a - a2) < 0.09) {
+				smoothData[l-2] = a;
+				smoothData[2] = a2;
+				smoothData[l-1] = _sqrt(x * x + y * y);
+				smoothData[3] = _sqrt(x2 * x2 + y2 * y2);
+				isSmooth[l-2] = isSmooth[l-1] = true; //don't change indexes 2 and 3 because we'll trigger everything from the END, and this will optimize file size a bit.
+			}
+		}
+	}
+	return rawPath;
+}
+export function pointToScreen(svgElement, point) {
+	if (arguments.length < 2) { //by default, take the first set of coordinates in the path as the point
+		let rawPath = getRawPath(svgElement);
+		point = svgElement.ownerSVGElement.createSVGPoint();
+		point.x = rawPath[0][0];
+		point.y = rawPath[0][1];
+	}
+	return point.matrixTransform(svgElement.getScreenCTM());
+}
+
+*/
+
+export { getPositionOnPath as a, sliceRawPath as b, cacheRawPathMeasurements as c, convertToPath as d, flatPointsToSegment as f, getRawPath as g, pointsToSegment as p, rawPathToString as r, stringToRawPath as s, transformRawPath as t };
diff --git a/dist/shared/gsap.41b79ecf.d.ts b/dist/shared/gsap.41b79ecf.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..f82063372b3ddd6356cb7c74143c549d560c42dd
--- /dev/null
+++ b/dist/shared/gsap.41b79ecf.d.ts
@@ -0,0 +1,1054 @@
+/*!
+ * paths 3.12.5
+ * https://gsap.com
+ *
+ * Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let _svgPathExp = /[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
+	_numbersExp = /(?:(-)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
+	_scientific = /[\+\-]?\d*\.?\d+e[\+\-]?\d+/ig,
+	_selectorExp = /(^[#\.][a-z]|[a-y][a-z])/i,
+	_DEG2RAD = Math.PI / 180,
+	_RAD2DEG = 180 / Math.PI,
+	_sin = Math.sin,
+	_cos = Math.cos,
+	_abs = Math.abs,
+	_sqrt = Math.sqrt,
+	_atan2 = Math.atan2,
+	_largeNum = 1e8,
+	_isString = value => typeof(value) === "string",
+	_isNumber = value => typeof(value) === "number",
+	_isUndefined = value => typeof(value) === "undefined",
+	_temp = {},
+	_temp2 = {},
+	_roundingNum = 1e5,
+	_wrapProgress = progress => (Math.round((progress + _largeNum) % 1 * _roundingNum) / _roundingNum) || ((progress < 0) ? 0 : 1), //if progress lands on 1, the % will make it 0 which is why we || 1, but not if it's negative because it makes more sense for motion to end at 0 in that case.
+	_round = value => (Math.round(value * _roundingNum) / _roundingNum) || 0,
+	_roundPrecise = value => (Math.round(value * 1e10) / 1e10) || 0,
+	_splitSegment = (rawPath, segIndex, i, t) => {
+		let segment = rawPath[segIndex],
+			shift = t === 1 ? 6 : subdivideSegment(segment, i, t);
+		if ((shift || !t) && shift + i + 2 < segment.length) {
+			rawPath.splice(segIndex, 0, segment.slice(0, i + shift + 2));
+			segment.splice(0, i + shift);
+			return 1;
+		}
+	},
+	_getSampleIndex = (samples, length, progress) => {
+		// slightly slower way than doing this (when there's no lookup): segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0;
+		let l = samples.length,
+			i = ~~(progress * l);
+		if (samples[i] > length) {
+			while (--i && samples[i] > length) {}
+			i < 0 && (i = 0);
+		} else {
+			while (samples[++i] < length && i < l) {}
+		}
+		return i < l ? i : l - 1;
+	},
+	_reverseRawPath = (rawPath, skipOuter) => {
+		let i = rawPath.length;
+		skipOuter || rawPath.reverse();
+		while (i--) {
+			rawPath[i].reversed || reverseSegment(rawPath[i]);
+		}
+	},
+	_copyMetaData = (source, copy) => {
+		copy.totalLength = source.totalLength;
+		if (source.samples) { //segment
+			copy.samples = source.samples.slice(0);
+			copy.lookup = source.lookup.slice(0);
+			copy.minLength = source.minLength;
+			copy.resolution = source.resolution;
+		} else if (source.totalPoints) { //rawPath
+			copy.totalPoints = source.totalPoints;
+		}
+		return copy;
+	},
+	//pushes a new segment into a rawPath, but if its starting values match the ending values of the last segment, it'll merge it into that same segment (to reduce the number of segments)
+	_appendOrMerge = (rawPath, segment) => {
+		let index = rawPath.length,
+			prevSeg = rawPath[index - 1] || [],
+			l = prevSeg.length;
+		if (index && segment[0] === prevSeg[l-2] && segment[1] === prevSeg[l-1]) {
+			segment = prevSeg.concat(segment.slice(2));
+			index--;
+		}
+		rawPath[index] = segment;
+	};
+
+/* TERMINOLOGY
+ - RawPath - an array of arrays, one for each Segment. A single RawPath could have multiple "M" commands, defining Segments (paths aren't always connected).
+ - Segment - an array containing a sequence of Cubic Bezier coordinates in alternating x, y, x, y format. Starting anchor, then control point 1, control point 2, and ending anchor, then the next control point 1, control point 2, anchor, etc. Uses less memory than an array with a bunch of {x, y} points.
+ - Bezier - a single cubic Bezier with a starting anchor, two control points, and an ending anchor.
+ - the variable "t" is typically the position along an individual Bezier path (time) and it's NOT linear, meaning it could accelerate/decelerate based on the control points whereas the "p" or "progress" value is linearly mapped to the whole path, so it shouldn't really accelerate/decelerate based on control points. So a progress of 0.2 would be almost exactly 20% along the path. "t" is ONLY in an individual Bezier piece.
+ */
+
+//accepts basic selector text, a path instance, a RawPath instance, or a Segment and returns a RawPath (makes it easy to homogenize things). If an element or selector text is passed in, it'll also cache the value so that if it's queried again, it'll just take the path data from there instead of parsing it all over again (as long as the path data itself hasn't changed - it'll check).
+function getRawPath(value) {
+	value = (_isString(value) && _selectorExp.test(value)) ? document.querySelector(value) || value : value;
+	let e = value.getAttribute ? value : 0,
+		rawPath;
+	if (e && (value = value.getAttribute("d"))) {
+		//implements caching
+		if (!e._gsPath) {
+			e._gsPath = {};
+		}
+		rawPath = e._gsPath[value];
+		return (rawPath && !rawPath._dirty) ? rawPath : (e._gsPath[value] = stringToRawPath(value));
+	}
+	return !value ? console.warn("Expecting a <path> element or an SVG path data string") : _isString(value) ? stringToRawPath(value) : (_isNumber(value[0])) ? [value] : value;
+}
+
+//copies a RawPath WITHOUT the length meta data (for speed)
+function copyRawPath(rawPath) {
+	let a = [],
+		i = 0;
+	for (; i < rawPath.length; i++) {
+		a[i] = _copyMetaData(rawPath[i], rawPath[i].slice(0));
+	}
+	return _copyMetaData(rawPath, a);
+}
+
+function reverseSegment(segment) {
+	let i = 0,
+		y;
+	segment.reverse(); //this will invert the order y, x, y, x so we must flip it back.
+	for (; i < segment.length; i += 2) {
+		y = segment[i];
+		segment[i] = segment[i+1];
+		segment[i+1] = y;
+	}
+	segment.reversed = !segment.reversed;
+}
+
+
+
+let _createPath = (e, ignore) => {
+		let path = document.createElementNS("http://www.w3.org/2000/svg", "path"),
+			attr = [].slice.call(e.attributes),
+			i = attr.length,
+			name;
+		ignore = "," + ignore + ",";
+		while (--i > -1) {
+			name = attr[i].nodeName.toLowerCase(); //in Microsoft Edge, if you don't set the attribute with a lowercase name, it doesn't render correctly! Super weird.
+			if (ignore.indexOf("," + name + ",") < 0) {
+				path.setAttributeNS(null, name, attr[i].nodeValue);
+			}
+		}
+		return path;
+	},
+	_typeAttrs = {
+		rect:"rx,ry,x,y,width,height",
+		circle:"r,cx,cy",
+		ellipse:"rx,ry,cx,cy",
+		line:"x1,x2,y1,y2"
+	},
+	_attrToObj = (e, attrs) => {
+		let props = attrs ? attrs.split(",") : [],
+			obj = {},
+			i = props.length;
+		while (--i > -1) {
+			obj[props[i]] = +e.getAttribute(props[i]) || 0;
+		}
+		return obj;
+	};
+
+//converts an SVG shape like <circle>, <rect>, <polygon>, <polyline>, <ellipse>, etc. to a <path>, swapping it in and copying the attributes to match.
+function convertToPath(element, swap) {
+	let type = element.tagName.toLowerCase(),
+		circ = 0.552284749831,
+		data, x, y, r, ry, path, rcirc, rycirc, points, w, h, x2, x3, x4, x5, x6, y2, y3, y4, y5, y6, attr;
+	if (type === "path" || !element.getBBox) {
+		return element;
+	}
+	path = _createPath(element, "x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points");
+	attr = _attrToObj(element, _typeAttrs[type]);
+	if (type === "rect") {
+		r = attr.rx;
+		ry = attr.ry || r;
+		x = attr.x;
+		y = attr.y;
+		w = attr.width - r * 2;
+		h = attr.height - ry * 2;
+		if (r || ry) { //if there are rounded corners, render cubic beziers
+			x2 = x + r * (1 - circ);
+			x3 = x + r;
+			x4 = x3 + w;
+			x5 = x4 + r * circ;
+			x6 = x4 + r;
+			y2 = y + ry * (1 - circ);
+			y3 = y + ry;
+			y4 = y3 + h;
+			y5 = y4 + ry * circ;
+			y6 = y4 + ry;
+			data = "M" + x6 + "," + y3 + " V" + y4 + " C" + [x6, y5, x5, y6, x4, y6, x4 - (x4 - x3) / 3, y6, x3 + (x4 - x3) / 3, y6, x3, y6, x2, y6, x, y5, x, y4, x, y4 - (y4 - y3) / 3, x, y3 + (y4 - y3) / 3, x, y3, x, y2, x2, y, x3, y, x3 + (x4 - x3) / 3, y, x4 - (x4 - x3) / 3, y, x4, y, x5, y, x6, y2, x6, y3].join(",") + "z";
+		} else {
+			data = "M" + (x + w) + "," + y + " v" + h + " h" + (-w) + " v" + (-h) + " h" + w + "z";
+		}
+
+	} else if (type === "circle" || type === "ellipse") {
+		if (type === "circle") {
+			r = ry = attr.r;
+			rycirc = r * circ;
+		} else {
+			r = attr.rx;
+			ry = attr.ry;
+			rycirc = ry * circ;
+		}
+		x = attr.cx;
+		y = attr.cy;
+		rcirc = r * circ;
+		data = "M" + (x+r) + "," + y + " C" + [x+r, y + rycirc, x + rcirc, y + ry, x, y + ry, x - rcirc, y + ry, x - r, y + rycirc, x - r, y, x - r, y - rycirc, x - rcirc, y - ry, x, y - ry, x + rcirc, y - ry, x + r, y - rycirc, x + r, y].join(",") + "z";
+	} else if (type === "line") {
+		data = "M" + attr.x1 + "," + attr.y1 + " L" + attr.x2 + "," + attr.y2; //previously, we just converted to "Mx,y Lx,y" but Safari has bugs that cause that not to render properly when using a stroke-dasharray that's not fully visible! Using a cubic bezier fixes that issue.
+	} else if (type === "polyline" || type === "polygon") {
+		points = (element.getAttribute("points") + "").match(_numbersExp) || [];
+		x = points.shift();
+		y = points.shift();
+		data = "M" + x + "," + y + " L" + points.join(",");
+		if (type === "polygon") {
+			data += "," + x + "," + y + "z";
+		}
+	}
+	path.setAttribute("d", rawPathToString(path._gsRawPath = stringToRawPath(data)));
+	if (swap && element.parentNode) {
+		element.parentNode.insertBefore(path, element);
+		element.parentNode.removeChild(element);
+	}
+	return path;
+}
+
+function getRotationAtBezierT(segment, i, t) {
+	let a = segment[i],
+		b = segment[i+2],
+		c = segment[i+4],
+		x;
+	a += (b - a) * t;
+	b += (c - b) * t;
+	a += (b - a) * t;
+	x = b + ((c + (segment[i+6] - c) * t) - b) * t - a;
+	a = segment[i+1];
+	b = segment[i+3];
+	c = segment[i+5];
+	a += (b - a) * t;
+	b += (c - b) * t;
+	a += (b - a) * t;
+	return _round(_atan2(b + ((c + (segment[i+7] - c) * t) - b) * t - a, x) * _RAD2DEG);
+}
+
+function sliceRawPath(rawPath, start, end) {
+	end = _isUndefined(end) ? 1 : _roundPrecise(end) || 0; // we must round to avoid issues like 4.15 / 8 = 0.8300000000000001 instead of 0.83 or 2.8 / 5 = 0.5599999999999999 instead of 0.56 and if someone is doing a loop like start: 2.8 / 0.5, end: 2.8 / 0.5 + 1.
+	start = _roundPrecise(start) || 0;
+	let loops = Math.max(0, ~~(_abs(end - start) - 1e-8)),
+		path = copyRawPath(rawPath);
+	if (start > end) {
+		start = 1 - start;
+		end = 1 - end;
+		_reverseRawPath(path);
+		path.totalLength = 0;
+	}
+	if (start < 0 || end < 0) {
+		let offset = Math.abs(~~Math.min(start, end)) + 1;
+		start += offset;
+		end += offset;
+	}
+	path.totalLength || cacheRawPathMeasurements(path);
+	let wrap = (end > 1),
+		s = getProgressData(path, start, _temp, true),
+		e = getProgressData(path, end, _temp2),
+		eSeg = e.segment,
+		sSeg = s.segment,
+		eSegIndex = e.segIndex,
+		sSegIndex = s.segIndex,
+		ei = e.i,
+		si = s.i,
+		sameSegment = (sSegIndex === eSegIndex),
+		sameBezier = (ei === si && sameSegment),
+		wrapsBehind, sShift, eShift, i, copy, totalSegments, l, j;
+	if (wrap || loops) {
+		wrapsBehind = eSegIndex < sSegIndex || (sameSegment && ei < si) || (sameBezier && e.t < s.t);
+		if (_splitSegment(path, sSegIndex, si, s.t)) {
+			sSegIndex++;
+			if (!wrapsBehind) {
+				eSegIndex++;
+				if (sameBezier) {
+					e.t = (e.t - s.t) / (1 - s.t);
+					ei = 0;
+				} else if (sameSegment) {
+					ei -= si;
+				}
+			}
+		}
+		if (Math.abs(1 - (end - start)) < 1e-5) {
+			eSegIndex = sSegIndex - 1;
+		} else if (!e.t && eSegIndex) {
+			eSegIndex--;
+		} else if (_splitSegment(path, eSegIndex, ei, e.t) && wrapsBehind) {
+			sSegIndex++;
+		}
+		if (s.t === 1) {
+			sSegIndex = (sSegIndex + 1) % path.length;
+		}
+		copy = [];
+		totalSegments = path.length;
+		l = 1 + totalSegments * loops;
+		j = sSegIndex;
+		l += ((totalSegments - sSegIndex) + eSegIndex) % totalSegments;
+		for (i = 0; i < l; i++) {
+			_appendOrMerge(copy, path[j++ % totalSegments]);
+		}
+		path = copy;
+	} else {
+		eShift = e.t === 1 ? 6 : subdivideSegment(eSeg, ei, e.t);
+		if (start !== end) {
+			sShift = subdivideSegment(sSeg, si, sameBezier ? s.t / e.t : s.t);
+			sameSegment && (eShift += sShift);
+			eSeg.splice(ei + eShift + 2);
+			(sShift || si) && sSeg.splice(0, si + sShift);
+			i = path.length;
+			while (i--) {
+				//chop off any extra segments
+				(i < sSegIndex || i > eSegIndex) &&	path.splice(i, 1);
+			}
+		} else {
+			eSeg.angle = getRotationAtBezierT(eSeg, ei + eShift, 0); //record the value before we chop because it'll be impossible to determine the angle after its length is 0!
+			ei += eShift;
+			s = eSeg[ei];
+			e = eSeg[ei+1];
+			eSeg.length = eSeg.totalLength = 0;
+			eSeg.totalPoints = path.totalPoints = 8;
+			eSeg.push(s, e, s, e, s, e, s, e);
+		}
+	}
+	path.totalLength = 0;
+	return path;
+}
+
+//measures a Segment according to its resolution (so if segment.resolution is 6, for example, it'll take 6 samples equally across each Bezier) and create/populate a "samples" Array that has the length up to each of those sample points (always increasing from the start) as well as a "lookup" array that's broken up according to the smallest distance between 2 samples. This gives us a very fast way of looking up a progress position rather than looping through all the points/Beziers. You can optionally have it only measure a subset, starting at startIndex and going for a specific number of beziers (remember, there are 3 x/y pairs each, for a total of 6 elements for each Bezier). It will also populate a "totalLength" property, but that's not generally super accurate because by default it'll only take 6 samples per Bezier. But for performance reasons, it's perfectly adequate for measuring progress values along the path. If you need a more accurate totalLength, either increase the resolution or use the more advanced bezierToPoints() method which keeps adding points until they don't deviate by more than a certain precision value.
+function measureSegment(segment, startIndex, bezierQty) {
+	startIndex = startIndex || 0;
+	if (!segment.samples) {
+		segment.samples = [];
+		segment.lookup = [];
+	}
+	let resolution = ~~segment.resolution || 12,
+		inc = 1 / resolution,
+		endIndex = bezierQty ? startIndex + bezierQty * 6 + 1 : segment.length,
+		x1 = segment[startIndex],
+		y1 = segment[startIndex + 1],
+		samplesIndex = startIndex ? (startIndex / 6) * resolution : 0,
+		samples = segment.samples,
+		lookup = segment.lookup,
+		min = (startIndex ? segment.minLength : _largeNum) || _largeNum,
+		prevLength = samples[samplesIndex + bezierQty * resolution - 1],
+		length = startIndex ? samples[samplesIndex-1] : 0,
+		i, j, x4, x3, x2, xd, xd1, y4, y3, y2, yd, yd1, inv, t, lengthIndex, l, segLength;
+	samples.length = lookup.length = 0;
+	for (j = startIndex + 2; j < endIndex; j += 6) {
+		x4 = segment[j + 4] - x1;
+		x3 = segment[j + 2] - x1;
+		x2 = segment[j] - x1;
+		y4 = segment[j + 5] - y1;
+		y3 = segment[j + 3] - y1;
+		y2 = segment[j + 1] - y1;
+		xd = xd1 = yd = yd1 = 0;
+		if (_abs(x4) < .01 && _abs(y4) < .01 && _abs(x2) + _abs(y2) < .01) { //dump points that are sufficiently close (basically right on top of each other, making a bezier super tiny or 0 length)
+			if (segment.length > 8) {
+				segment.splice(j, 6);
+				j -= 6;
+				endIndex -= 6;
+			}
+		} else {
+			for (i = 1; i <= resolution; i++) {
+				t = inc * i;
+				inv = 1 - t;
+				xd = xd1 - (xd1 = (t * t * x4 + 3 * inv * (t * x3 + inv * x2)) * t);
+				yd = yd1 - (yd1 = (t * t * y4 + 3 * inv * (t * y3 + inv * y2)) * t);
+				l = _sqrt(yd * yd + xd * xd);
+				if (l < min) {
+					min = l;
+				}
+				length += l;
+				samples[samplesIndex++] = length;
+			}
+		}
+		x1 += x4;
+		y1 += y4;
+	}
+	if (prevLength) {
+		prevLength -= length;
+		for (; samplesIndex < samples.length; samplesIndex++) {
+			samples[samplesIndex] += prevLength;
+		}
+	}
+	if (samples.length && min) {
+		segment.totalLength = segLength = samples[samples.length-1] || 0;
+		segment.minLength = min;
+		if (segLength / min < 9999) { // if the lookup would require too many values (memory problem), we skip this and instead we use a loop to lookup values directly in the samples Array
+			l = lengthIndex = 0;
+			for (i = 0; i < segLength; i += min) {
+				lookup[l++] = (samples[lengthIndex] < i) ? ++lengthIndex : lengthIndex;
+			}
+		}
+	} else {
+		segment.totalLength = samples[0] = 0;
+	}
+	return startIndex ? length - samples[startIndex / 2 - 1] : length;
+}
+
+function cacheRawPathMeasurements(rawPath, resolution) {
+	let pathLength, points, i;
+	for (i = pathLength = points = 0; i < rawPath.length; i++) {
+		rawPath[i].resolution = ~~resolution || 12; //steps per Bezier curve (anchor, 2 control points, to anchor)
+		points += rawPath[i].length;
+		pathLength += measureSegment(rawPath[i]);
+	}
+	rawPath.totalPoints = points;
+	rawPath.totalLength = pathLength;
+	return rawPath;
+}
+
+//divide segment[i] at position t (value between 0 and 1, progress along that particular cubic bezier segment that starts at segment[i]). Returns how many elements were spliced into the segment array (either 0 or 6)
+function subdivideSegment(segment, i, t) {
+	if (t <= 0 || t >= 1) {
+		return 0;
+	}
+	let ax = segment[i],
+		ay = segment[i+1],
+		cp1x = segment[i+2],
+		cp1y = segment[i+3],
+		cp2x = segment[i+4],
+		cp2y = segment[i+5],
+		bx = segment[i+6],
+		by = segment[i+7],
+		x1a = ax + (cp1x - ax) * t,
+		x2 = cp1x + (cp2x - cp1x) * t,
+		y1a = ay + (cp1y - ay) * t,
+		y2 = cp1y + (cp2y - cp1y) * t,
+		x1 = x1a + (x2 - x1a) * t,
+		y1 = y1a + (y2 - y1a) * t,
+		x2a = cp2x + (bx - cp2x) * t,
+		y2a = cp2y + (by - cp2y) * t;
+	x2 += (x2a - x2) * t;
+	y2 += (y2a - y2) * t;
+	segment.splice(i + 2, 4,
+		_round(x1a),                  //first control point
+		_round(y1a),
+		_round(x1),                   //second control point
+		_round(y1),
+		_round(x1 + (x2 - x1) * t),   //new fabricated anchor on line
+		_round(y1 + (y2 - y1) * t),
+		_round(x2),                   //third control point
+		_round(y2),
+		_round(x2a),                  //fourth control point
+		_round(y2a)
+	);
+	segment.samples && segment.samples.splice(((i / 6) * segment.resolution) | 0, 0, 0, 0, 0, 0, 0, 0);
+	return 6;
+}
+
+// returns an object {path, segment, segIndex, i, t}
+function getProgressData(rawPath, progress, decoratee, pushToNextIfAtEnd) {
+	decoratee = decoratee || {};
+	rawPath.totalLength || cacheRawPathMeasurements(rawPath);
+	if (progress < 0 || progress > 1) {
+		progress = _wrapProgress(progress);
+	}
+	let segIndex = 0,
+		segment = rawPath[0],
+		samples, resolution, length, min, max, i, t;
+	if (!progress) {
+		t = i = segIndex = 0;
+		segment = rawPath[0];
+	} else if (progress === 1) {
+		t = 1;
+		segIndex = rawPath.length - 1;
+		segment = rawPath[segIndex];
+		i = segment.length - 8;
+	} else {
+		if (rawPath.length > 1) { //speed optimization: most of the time, there's only one segment so skip the recursion.
+			length = rawPath.totalLength * progress;
+			max = i = 0;
+			while ((max += rawPath[i++].totalLength) < length) {
+				segIndex = i;
+			}
+			segment = rawPath[segIndex];
+			min = max - segment.totalLength;
+			progress = ((length - min) / (max - min)) || 0;
+		}
+		samples = segment.samples;
+		resolution = segment.resolution; //how many samples per cubic bezier chunk
+		length = segment.totalLength * progress;
+		i = segment.lookup.length ? segment.lookup[~~(length / segment.minLength)] || 0 : _getSampleIndex(samples, length, progress);
+		min = i ? samples[i-1] : 0;
+		max = samples[i];
+		if (max < length) {
+			min = max;
+			max = samples[++i];
+		}
+		t = (1 / resolution) * (((length - min) / (max - min)) + ((i % resolution)));
+		i = ~~(i / resolution) * 6;
+		if (pushToNextIfAtEnd && t === 1) {
+			if (i + 6 < segment.length) {
+				i += 6;
+				t = 0;
+			} else if (segIndex + 1 < rawPath.length) {
+				i = t = 0;
+				segment = rawPath[++segIndex];
+			}
+		}
+	}
+	decoratee.t = t;
+	decoratee.i = i;
+	decoratee.path = rawPath;
+	decoratee.segment = segment;
+	decoratee.segIndex = segIndex;
+	return decoratee;
+}
+
+function getPositionOnPath(rawPath, progress, includeAngle, point) {
+	let segment = rawPath[0],
+		result = point || {},
+		samples, resolution, length, min, max, i, t, a, inv;
+	if (progress < 0 || progress > 1) {
+		progress = _wrapProgress(progress);
+	}
+	segment.lookup || cacheRawPathMeasurements(rawPath);
+	if (rawPath.length > 1) { //speed optimization: most of the time, there's only one segment so skip the recursion.
+		length = rawPath.totalLength * progress;
+		max = i = 0;
+		while ((max += rawPath[i++].totalLength) < length) {
+			segment = rawPath[i];
+		}
+		min = max - segment.totalLength;
+		progress = ((length - min) / (max - min)) || 0;
+	}
+	samples = segment.samples;
+	resolution = segment.resolution;
+	length = segment.totalLength * progress;
+	i = segment.lookup.length ? segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0 : _getSampleIndex(samples, length, progress);
+	min = i ? samples[i-1] : 0;
+	max = samples[i];
+	if (max < length) {
+		min = max;
+		max = samples[++i];
+	}
+	t = ((1 / resolution) * (((length - min) / (max - min)) + ((i % resolution)))) || 0;
+	inv = 1 - t;
+	i = ~~(i / resolution) * 6;
+	a = segment[i];
+	result.x = _round((t * t * (segment[i + 6] - a) + 3 * inv * (t * (segment[i + 4] - a) + inv * (segment[i + 2] - a))) * t + a);
+	result.y = _round((t * t * (segment[i + 7] - (a = segment[i+1])) + 3 * inv * (t * (segment[i + 5] - a) + inv * (segment[i + 3] - a))) * t + a);
+	if (includeAngle) {
+		result.angle = segment.totalLength ? getRotationAtBezierT(segment, i, t >= 1 ? 1 - 1e-9 : t ? t : 1e-9) : segment.angle || 0;
+	}
+	return result;
+}
+
+
+
+//applies a matrix transform to RawPath (or a segment in a RawPath) and returns whatever was passed in (it transforms the values in the array(s), not a copy).
+function transformRawPath(rawPath, a, b, c, d, tx, ty) {
+	let j = rawPath.length,
+		segment, l, i, x, y;
+	while (--j > -1) {
+		segment = rawPath[j];
+		l = segment.length;
+		for (i = 0; i < l; i += 2) {
+			x = segment[i];
+			y = segment[i+1];
+			segment[i] = x * a + y * c + tx;
+			segment[i+1] = x * b + y * d + ty;
+		}
+	}
+	rawPath._dirty = 1;
+	return rawPath;
+}
+
+
+
+// translates SVG arc data into a segment (cubic beziers). Angle is in degrees.
+function arcToSegment(lastX, lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y) {
+	if (lastX === x && lastY === y) {
+		return;
+	}
+	rx = _abs(rx);
+	ry = _abs(ry);
+	let angleRad = (angle % 360) * _DEG2RAD,
+		cosAngle = _cos(angleRad),
+		sinAngle = _sin(angleRad),
+		PI = Math.PI,
+		TWOPI = PI * 2,
+		dx2 = (lastX - x) / 2,
+		dy2 = (lastY - y) / 2,
+		x1 = (cosAngle * dx2 + sinAngle * dy2),
+		y1 = (-sinAngle * dx2 + cosAngle * dy2),
+		x1_sq = x1 * x1,
+		y1_sq = y1 * y1,
+		radiiCheck = x1_sq / (rx * rx) + y1_sq / (ry * ry);
+	if (radiiCheck > 1) {
+		rx = _sqrt(radiiCheck) * rx;
+		ry = _sqrt(radiiCheck) * ry;
+	}
+	let rx_sq = rx * rx,
+		ry_sq = ry * ry,
+		sq = ((rx_sq * ry_sq) - (rx_sq * y1_sq) - (ry_sq * x1_sq)) / ((rx_sq * y1_sq) + (ry_sq * x1_sq));
+	if (sq < 0) {
+		sq = 0;
+	}
+	let coef = ((largeArcFlag === sweepFlag) ? -1 : 1) * _sqrt(sq),
+		cx1 = coef * ((rx * y1) / ry),
+		cy1 = coef * -((ry * x1) / rx),
+		sx2 = (lastX + x) / 2,
+		sy2 = (lastY + y) / 2,
+		cx = sx2 + (cosAngle * cx1 - sinAngle * cy1),
+		cy = sy2 + (sinAngle * cx1 + cosAngle * cy1),
+		ux = (x1 - cx1) / rx,
+		uy = (y1 - cy1) / ry,
+		vx = (-x1 - cx1) / rx,
+		vy = (-y1 - cy1) / ry,
+		temp = ux * ux + uy * uy,
+		angleStart = ((uy < 0) ? -1 : 1) * Math.acos(ux / _sqrt(temp)),
+		angleExtent = ((ux * vy - uy * vx < 0) ? -1 : 1) * Math.acos((ux * vx + uy * vy) / _sqrt(temp * (vx * vx + vy * vy)));
+	isNaN(angleExtent) && (angleExtent = PI); //rare edge case. Math.cos(-1) is NaN.
+	if (!sweepFlag && angleExtent > 0) {
+		angleExtent -= TWOPI;
+	} else if (sweepFlag && angleExtent < 0) {
+		angleExtent += TWOPI;
+	}
+	angleStart %= TWOPI;
+	angleExtent %= TWOPI;
+	let segments = Math.ceil(_abs(angleExtent) / (TWOPI / 4)),
+		rawPath = [],
+		angleIncrement = angleExtent / segments,
+		controlLength = 4 / 3 * _sin(angleIncrement / 2) / (1 + _cos(angleIncrement / 2)),
+		ma = cosAngle * rx,
+		mb = sinAngle * rx,
+		mc = sinAngle * -ry,
+		md = cosAngle * ry,
+		i;
+	for (i = 0; i < segments; i++) {
+		angle = angleStart + i * angleIncrement;
+		x1 = _cos(angle);
+		y1 = _sin(angle);
+		ux = _cos(angle += angleIncrement);
+		uy = _sin(angle);
+		rawPath.push(x1 - controlLength * y1, y1 + controlLength * x1, ux + controlLength * uy, uy - controlLength * ux, ux, uy);
+	}
+	//now transform according to the actual size of the ellipse/arc (the beziers were noramlized, between 0 and 1 on a circle).
+	for (i = 0; i < rawPath.length; i+=2) {
+		x1 = rawPath[i];
+		y1 = rawPath[i+1];
+		rawPath[i] = x1 * ma + y1 * mc + cx;
+		rawPath[i+1] = x1 * mb + y1 * md + cy;
+	}
+	rawPath[i-2] = x; //always set the end to exactly where it's supposed to be
+	rawPath[i-1] = y;
+	return rawPath;
+}
+
+//Spits back a RawPath with absolute coordinates. Each segment starts with a "moveTo" command (x coordinate, then y) and then 2 control points (x, y, x, y), then anchor. The goal is to minimize memory and maximize speed.
+function stringToRawPath(d) {
+	let a = (d + "").replace(_scientific, m => { let n = +m; return (n < 0.0001 && n > -0.0001) ? 0 : n; }).match(_svgPathExp) || [], //some authoring programs spit out very small numbers in scientific notation like "1e-5", so make sure we round that down to 0 first.
+		path = [],
+		relativeX = 0,
+		relativeY = 0,
+		twoThirds = 2 / 3,
+		elements = a.length,
+		points = 0,
+		errorMessage = "ERROR: malformed path: " + d,
+		i, j, x, y, command, isRelative, segment, startX, startY, difX, difY, beziers, prevCommand, flag1, flag2,
+		line = function(sx, sy, ex, ey) {
+			difX = (ex - sx) / 3;
+			difY = (ey - sy) / 3;
+			segment.push(sx + difX, sy + difY, ex - difX, ey - difY, ex, ey);
+		};
+	if (!d || !isNaN(a[0]) || isNaN(a[1])) {
+		console.log(errorMessage);
+		return path;
+	}
+	for (i = 0; i < elements; i++) {
+		prevCommand = command;
+		if (isNaN(a[i])) {
+			command = a[i].toUpperCase();
+			isRelative = (command !== a[i]); //lower case means relative
+		} else { //commands like "C" can be strung together without any new command characters between.
+			i--;
+		}
+		x = +a[i + 1];
+		y = +a[i + 2];
+		if (isRelative) {
+			x += relativeX;
+			y += relativeY;
+		}
+		if (!i) {
+			startX = x;
+			startY = y;
+		}
+
+		// "M" (move)
+		if (command === "M") {
+			if (segment) {
+				if (segment.length < 8) { //if the path data was funky and just had a M with no actual drawing anywhere, skip it.
+					path.length -= 1;
+				} else {
+					points += segment.length;
+				}
+			}
+			relativeX = startX = x;
+			relativeY = startY = y;
+			segment = [x, y];
+			path.push(segment);
+			i += 2;
+			command = "L"; //an "M" with more than 2 values gets interpreted as "lineTo" commands ("L").
+
+		// "C" (cubic bezier)
+		} else if (command === "C") {
+			if (!segment) {
+				segment = [0, 0];
+			}
+			if (!isRelative) {
+				relativeX = relativeY = 0;
+			}
+			//note: "*1" is just a fast/short way to cast the value as a Number. WAAAY faster in Chrome, slightly slower in Firefox.
+			segment.push(x,	y, relativeX + a[i + 3] * 1, relativeY + a[i + 4] * 1, (relativeX += a[i + 5] * 1),	(relativeY += a[i + 6] * 1));
+			i += 6;
+
+		// "S" (continuation of cubic bezier)
+		} else if (command === "S") {
+			difX = relativeX;
+			difY = relativeY;
+			if (prevCommand === "C" || prevCommand === "S") {
+				difX += relativeX - segment[segment.length - 4];
+				difY += relativeY - segment[segment.length - 3];
+			}
+			if (!isRelative) {
+				relativeX = relativeY = 0;
+			}
+			segment.push(difX, difY, x,	y, (relativeX += a[i + 3] * 1), (relativeY += a[i + 4] * 1));
+			i += 4;
+
+		// "Q" (quadratic bezier)
+		} else if (command === "Q") {
+			difX = relativeX + (x - relativeX) * twoThirds;
+			difY = relativeY + (y - relativeY) * twoThirds;
+			if (!isRelative) {
+				relativeX = relativeY = 0;
+			}
+			relativeX += a[i + 3] * 1;
+			relativeY += a[i + 4] * 1;
+			segment.push(difX, difY, relativeX + (x - relativeX) * twoThirds, relativeY + (y - relativeY) * twoThirds, relativeX, relativeY);
+			i += 4;
+
+		// "T" (continuation of quadratic bezier)
+		} else if (command === "T") {
+			difX = relativeX - segment[segment.length - 4];
+			difY = relativeY - segment[segment.length - 3];
+			segment.push(relativeX + difX, relativeY + difY, x + ((relativeX + difX * 1.5) - x) * twoThirds, y + ((relativeY + difY * 1.5) - y) * twoThirds, (relativeX = x), (relativeY = y));
+			i += 2;
+
+		// "H" (horizontal line)
+		} else if (command === "H") {
+			line(relativeX, relativeY, (relativeX = x), relativeY);
+			i += 1;
+
+		// "V" (vertical line)
+		} else if (command === "V") {
+			//adjust values because the first (and only one) isn't x in this case, it's y.
+			line(relativeX, relativeY, relativeX, (relativeY = x + (isRelative ? relativeY - relativeX : 0)));
+			i += 1;
+
+		// "L" (line) or "Z" (close)
+		} else if (command === "L" || command === "Z") {
+			if (command === "Z") {
+				x = startX;
+				y = startY;
+				segment.closed = true;
+			}
+			if (command === "L" || _abs(relativeX - x) > 0.5 || _abs(relativeY - y) > 0.5) {
+				line(relativeX, relativeY, x, y);
+				if (command === "L") {
+					i += 2;
+				}
+			}
+			relativeX = x;
+			relativeY = y;
+
+		// "A" (arc)
+		} else if (command === "A") {
+			flag1 = a[i+4];
+			flag2 = a[i+5];
+			difX = a[i+6];
+			difY = a[i+7];
+			j = 7;
+			if (flag1.length > 1) { // for cases when the flags are merged, like "a8 8 0 018 8" (the 0 and 1 flags are WITH the x value of 8, but it could also be "a8 8 0 01-8 8" so it may include x or not)
+				if (flag1.length < 3) {
+					difY = difX;
+					difX = flag2;
+					j--;
+				} else {
+					difY = flag2;
+					difX = flag1.substr(2);
+					j-=2;
+				}
+				flag2 = flag1.charAt(1);
+				flag1 = flag1.charAt(0);
+			}
+			beziers = arcToSegment(relativeX, relativeY, +a[i+1], +a[i+2], +a[i+3], +flag1, +flag2, (isRelative ? relativeX : 0) + difX*1, (isRelative ? relativeY : 0) + difY*1);
+			i += j;
+			if (beziers) {
+				for (j = 0; j < beziers.length; j++) {
+					segment.push(beziers[j]);
+				}
+			}
+			relativeX = segment[segment.length-2];
+			relativeY = segment[segment.length-1];
+
+		} else {
+			console.log(errorMessage);
+		}
+	}
+	i = segment.length;
+	if (i < 6) { //in case there's odd SVG like a M0,0 command at the very end.
+		path.pop();
+		i = 0;
+	} else if (segment[0] === segment[i-2] && segment[1] === segment[i-1]) {
+		segment.closed = true;
+	}
+	path.totalPoints = points + i;
+	return path;
+}
+
+/*
+function getAngleBetweenPoints(x0, y0, x1, y1, x2, y2) { //angle between 3 points in radians
+	var dx1 = x1 - x0,
+		dy1 = y1 - y0,
+		dx2 = x2 - x1,
+		dy2 = y2 - y1,
+		dx3 = x2 - x0,
+		dy3 = y2 - y0,
+		a = dx1 * dx1 + dy1 * dy1,
+		b = dx2 * dx2 + dy2 * dy2,
+		c = dx3 * dx3 + dy3 * dy3;
+	return Math.acos( (a + b - c) / _sqrt(4 * a * b) );
+},
+*/
+
+//pointsToSegment() doesn't handle flat coordinates (where y is always 0) the way we need (the resulting control points are always right on top of the anchors), so this function basically makes the control points go directly up and down, varying in length based on the curviness (more curvy, further control points)
+function flatPointsToSegment(points, curviness=1) {
+	let x = points[0],
+		y = 0,
+		segment = [x, y],
+		i = 2;
+	for (; i < points.length; i+=2) {
+		segment.push(
+			x,
+			y,
+			points[i],
+			(y = (points[i] - x) * curviness / 2),
+			(x = points[i]),
+			-y
+		);
+	}
+	return segment;
+}
+
+//points is an array of x/y points, like [x, y, x, y, x, y]
+function pointsToSegment(points, curviness) {
+	//points = simplifyPoints(points, tolerance);
+	_abs(points[0] - points[2]) < 1e-4 && _abs(points[1] - points[3]) < 1e-4 && (points = points.slice(2)); // if the first two points are super close, dump the first one.
+	let l = points.length-2,
+		x = +points[0],
+		y = +points[1],
+		nextX = +points[2],
+		nextY = +points[3],
+		segment = [x, y, x, y],
+		dx2 = nextX - x,
+		dy2 = nextY - y,
+		closed = Math.abs(points[l] - x) < 0.001 && Math.abs(points[l+1] - y) < 0.001,
+		prevX, prevY, i, dx1, dy1, r1, r2, r3, tl, mx1, mx2, mxm, my1, my2, mym;
+	if (closed) { // if the start and end points are basically on top of each other, close the segment by adding the 2nd point to the end, and the 2nd-to-last point to the beginning (we'll remove them at the end, but this allows the curvature to look perfect)
+		points.push(nextX, nextY);
+		nextX = x;
+		nextY = y;
+		x = points[l-2];
+		y = points[l-1];
+		points.unshift(x, y);
+		l+=4;
+	}
+	curviness = (curviness || curviness === 0) ? +curviness : 1;
+	for (i = 2; i < l; i+=2) {
+		prevX = x;
+		prevY = y;
+		x = nextX;
+		y = nextY;
+		nextX = +points[i+2];
+		nextY = +points[i+3];
+		if (x === nextX && y === nextY) {
+			continue;
+		}
+		dx1 = dx2;
+		dy1 = dy2;
+		dx2 = nextX - x;
+		dy2 = nextY - y;
+		r1 = _sqrt(dx1 * dx1 + dy1 * dy1); // r1, r2, and r3 correlate x and y (and z in the future). Basically 2D or 3D hypotenuse
+		r2 = _sqrt(dx2 * dx2 + dy2 * dy2);
+		r3 =  _sqrt((dx2 / r2 + dx1 / r1) ** 2 + (dy2 / r2 + dy1 / r1) ** 2);
+		tl = ((r1 + r2) * curviness * 0.25) / r3;
+		mx1 = x - (x - prevX) * (r1 ? tl / r1 : 0);
+		mx2 = x + (nextX - x) * (r2 ? tl / r2 : 0);
+		mxm = x - (mx1 + (((mx2 - mx1) * ((r1 * 3 / (r1 + r2)) + 0.5) / 4) || 0));
+		my1 = y - (y - prevY) * (r1 ? tl / r1 : 0);
+		my2 = y + (nextY - y) * (r2 ? tl / r2 : 0);
+		mym = y - (my1 + (((my2 - my1) * ((r1 * 3 / (r1 + r2)) + 0.5) / 4) || 0));
+		if (x !== prevX || y !== prevY) {
+			segment.push(
+				_round(mx1 + mxm),  // first control point
+				_round(my1 + mym),
+				_round(x),          // anchor
+				_round(y),
+				_round(mx2 + mxm),  // second control point
+				_round(my2 + mym)
+			);
+		}
+	}
+	x !== nextX || y !== nextY || segment.length < 4 ? segment.push(_round(nextX), _round(nextY), _round(nextX), _round(nextY)) : (segment.length -= 2);
+	if (segment.length === 2) { // only one point!
+		segment.push(x, y, x, y, x, y);
+	} else if (closed) {
+		segment.splice(0, 6);
+		segment.length = segment.length - 6;
+	}
+	return segment;
+}
+
+/*
+Takes any of the following and converts it to an all Cubic Bezier SVG data string:
+- A <path> data string like "M0,0 L2,4 v20,15 H100"
+- A RawPath, like [[x, y, x, y, x, y, x, y][[x, y, x, y, x, y, x, y]]
+- A Segment, like [x, y, x, y, x, y, x, y]
+
+Note: all numbers are rounded down to the closest 0.001 to minimize memory, maximize speed, and avoid odd numbers like 1e-13
+*/
+function rawPathToString(rawPath) {
+	if (_isNumber(rawPath[0])) { //in case a segment is passed in instead
+		rawPath = [rawPath];
+	}
+	let result = "",
+		l = rawPath.length,
+		sl, s, i, segment;
+	for (s = 0; s < l; s++) {
+		segment = rawPath[s];
+		result += "M" + _round(segment[0]) + "," + _round(segment[1]) + " C";
+		sl = segment.length;
+		for (i = 2; i < sl; i++) {
+			result += _round(segment[i++]) + "," + _round(segment[i++]) + " " + _round(segment[i++]) + "," + _round(segment[i++]) + " " + _round(segment[i++]) + "," + _round(segment[i]) + " ";
+		}
+		if (segment.closed) {
+			result += "z";
+		}
+	}
+	return result;
+}
+
+/*
+// takes a segment with coordinates [x, y, x, y, ...] and converts the control points into angles and lengths [x, y, angle, length, angle, length, x, y, angle, length, ...] so that it animates more cleanly and avoids odd breaks/kinks. For example, if you animate from 1 o'clock to 6 o'clock, it'd just go directly/linearly rather than around. So the length would be very short in the middle of the tween.
+export function cpCoordsToAngles(segment, copy) {
+	var result = copy ? segment.slice(0) : segment,
+		x, y, i;
+	for (i = 0; i < segment.length; i+=6) {
+		x = segment[i+2] - segment[i];
+		y = segment[i+3] - segment[i+1];
+		result[i+2] = Math.atan2(y, x);
+		result[i+3] = Math.sqrt(x * x + y * y);
+		x = segment[i+6] - segment[i+4];
+		y = segment[i+7] - segment[i+5];
+		result[i+4] = Math.atan2(y, x);
+		result[i+5] = Math.sqrt(x * x + y * y);
+	}
+	return result;
+}
+
+// takes a segment that was converted with cpCoordsToAngles() to have angles and lengths instead of coordinates for the control points, and converts it BACK into coordinates.
+export function cpAnglesToCoords(segment, copy) {
+	var result = copy ? segment.slice(0) : segment,
+		length = segment.length,
+		rnd = 1000,
+		angle, l, i, j;
+	for (i = 0; i < length; i+=6) {
+		angle = segment[i+2];
+		l = segment[i+3]; //length
+		result[i+2] = (((segment[i] + Math.cos(angle) * l) * rnd) | 0) / rnd;
+		result[i+3] = (((segment[i+1] + Math.sin(angle) * l) * rnd) | 0) / rnd;
+		angle = segment[i+4];
+		l = segment[i+5]; //length
+		result[i+4] = (((segment[i+6] - Math.cos(angle) * l) * rnd) | 0) / rnd;
+		result[i+5] = (((segment[i+7] - Math.sin(angle) * l) * rnd) | 0) / rnd;
+	}
+	return result;
+}
+
+//adds an "isSmooth" array to each segment and populates it with a boolean value indicating whether or not it's smooth (the control points have basically the same slope). For any smooth control points, it converts the coordinates into angle (x, in radians) and length (y) and puts them into the same index value in a smoothData array.
+export function populateSmoothData(rawPath) {
+	let j = rawPath.length,
+		smooth, segment, x, y, x2, y2, i, l, a, a2, isSmooth, smoothData;
+	while (--j > -1) {
+		segment = rawPath[j];
+		isSmooth = segment.isSmooth = segment.isSmooth || [0, 0, 0, 0];
+		smoothData = segment.smoothData = segment.smoothData || [0, 0, 0, 0];
+		isSmooth.length = 4;
+		l = segment.length - 2;
+		for (i = 6; i < l; i += 6) {
+			x = segment[i] - segment[i - 2];
+			y = segment[i + 1] - segment[i - 1];
+			x2 = segment[i + 2] - segment[i];
+			y2 = segment[i + 3] - segment[i + 1];
+			a = _atan2(y, x);
+			a2 = _atan2(y2, x2);
+			smooth = (Math.abs(a - a2) < 0.09);
+			if (smooth) {
+				smoothData[i - 2] = a;
+				smoothData[i + 2] = a2;
+				smoothData[i - 1] = _sqrt(x * x + y * y);
+				smoothData[i + 3] = _sqrt(x2 * x2 + y2 * y2);
+			}
+			isSmooth.push(smooth, smooth, 0, 0, smooth, smooth);
+		}
+		//if the first and last points are identical, check to see if there's a smooth transition. We must handle this a bit differently due to their positions in the array.
+		if (segment[l] === segment[0] && segment[l+1] === segment[1]) {
+			x = segment[0] - segment[l-2];
+			y = segment[1] - segment[l-1];
+			x2 = segment[2] - segment[0];
+			y2 = segment[3] - segment[1];
+			a = _atan2(y, x);
+			a2 = _atan2(y2, x2);
+			if (Math.abs(a - a2) < 0.09) {
+				smoothData[l-2] = a;
+				smoothData[2] = a2;
+				smoothData[l-1] = _sqrt(x * x + y * y);
+				smoothData[3] = _sqrt(x2 * x2 + y2 * y2);
+				isSmooth[l-2] = isSmooth[l-1] = true; //don't change indexes 2 and 3 because we'll trigger everything from the END, and this will optimize file size a bit.
+			}
+		}
+	}
+	return rawPath;
+}
+export function pointToScreen(svgElement, point) {
+	if (arguments.length < 2) { //by default, take the first set of coordinates in the path as the point
+		let rawPath = getRawPath(svgElement);
+		point = svgElement.ownerSVGElement.createSVGPoint();
+		point.x = rawPath[0][0];
+		point.y = rawPath[0][1];
+	}
+	return point.matrixTransform(svgElement.getScreenCTM());
+}
+
+*/
+
+export { getPositionOnPath as a, sliceRawPath as b, cacheRawPathMeasurements as c, convertToPath as d, flatPointsToSegment as f, getRawPath as g, pointsToSegment as p, rawPathToString as r, stringToRawPath as s, transformRawPath as t };
diff --git a/dist/shared/gsap.41b79ecf.mjs b/dist/shared/gsap.41b79ecf.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..f82063372b3ddd6356cb7c74143c549d560c42dd
--- /dev/null
+++ b/dist/shared/gsap.41b79ecf.mjs
@@ -0,0 +1,1054 @@
+/*!
+ * paths 3.12.5
+ * https://gsap.com
+ *
+ * Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let _svgPathExp = /[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
+	_numbersExp = /(?:(-)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
+	_scientific = /[\+\-]?\d*\.?\d+e[\+\-]?\d+/ig,
+	_selectorExp = /(^[#\.][a-z]|[a-y][a-z])/i,
+	_DEG2RAD = Math.PI / 180,
+	_RAD2DEG = 180 / Math.PI,
+	_sin = Math.sin,
+	_cos = Math.cos,
+	_abs = Math.abs,
+	_sqrt = Math.sqrt,
+	_atan2 = Math.atan2,
+	_largeNum = 1e8,
+	_isString = value => typeof(value) === "string",
+	_isNumber = value => typeof(value) === "number",
+	_isUndefined = value => typeof(value) === "undefined",
+	_temp = {},
+	_temp2 = {},
+	_roundingNum = 1e5,
+	_wrapProgress = progress => (Math.round((progress + _largeNum) % 1 * _roundingNum) / _roundingNum) || ((progress < 0) ? 0 : 1), //if progress lands on 1, the % will make it 0 which is why we || 1, but not if it's negative because it makes more sense for motion to end at 0 in that case.
+	_round = value => (Math.round(value * _roundingNum) / _roundingNum) || 0,
+	_roundPrecise = value => (Math.round(value * 1e10) / 1e10) || 0,
+	_splitSegment = (rawPath, segIndex, i, t) => {
+		let segment = rawPath[segIndex],
+			shift = t === 1 ? 6 : subdivideSegment(segment, i, t);
+		if ((shift || !t) && shift + i + 2 < segment.length) {
+			rawPath.splice(segIndex, 0, segment.slice(0, i + shift + 2));
+			segment.splice(0, i + shift);
+			return 1;
+		}
+	},
+	_getSampleIndex = (samples, length, progress) => {
+		// slightly slower way than doing this (when there's no lookup): segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0;
+		let l = samples.length,
+			i = ~~(progress * l);
+		if (samples[i] > length) {
+			while (--i && samples[i] > length) {}
+			i < 0 && (i = 0);
+		} else {
+			while (samples[++i] < length && i < l) {}
+		}
+		return i < l ? i : l - 1;
+	},
+	_reverseRawPath = (rawPath, skipOuter) => {
+		let i = rawPath.length;
+		skipOuter || rawPath.reverse();
+		while (i--) {
+			rawPath[i].reversed || reverseSegment(rawPath[i]);
+		}
+	},
+	_copyMetaData = (source, copy) => {
+		copy.totalLength = source.totalLength;
+		if (source.samples) { //segment
+			copy.samples = source.samples.slice(0);
+			copy.lookup = source.lookup.slice(0);
+			copy.minLength = source.minLength;
+			copy.resolution = source.resolution;
+		} else if (source.totalPoints) { //rawPath
+			copy.totalPoints = source.totalPoints;
+		}
+		return copy;
+	},
+	//pushes a new segment into a rawPath, but if its starting values match the ending values of the last segment, it'll merge it into that same segment (to reduce the number of segments)
+	_appendOrMerge = (rawPath, segment) => {
+		let index = rawPath.length,
+			prevSeg = rawPath[index - 1] || [],
+			l = prevSeg.length;
+		if (index && segment[0] === prevSeg[l-2] && segment[1] === prevSeg[l-1]) {
+			segment = prevSeg.concat(segment.slice(2));
+			index--;
+		}
+		rawPath[index] = segment;
+	};
+
+/* TERMINOLOGY
+ - RawPath - an array of arrays, one for each Segment. A single RawPath could have multiple "M" commands, defining Segments (paths aren't always connected).
+ - Segment - an array containing a sequence of Cubic Bezier coordinates in alternating x, y, x, y format. Starting anchor, then control point 1, control point 2, and ending anchor, then the next control point 1, control point 2, anchor, etc. Uses less memory than an array with a bunch of {x, y} points.
+ - Bezier - a single cubic Bezier with a starting anchor, two control points, and an ending anchor.
+ - the variable "t" is typically the position along an individual Bezier path (time) and it's NOT linear, meaning it could accelerate/decelerate based on the control points whereas the "p" or "progress" value is linearly mapped to the whole path, so it shouldn't really accelerate/decelerate based on control points. So a progress of 0.2 would be almost exactly 20% along the path. "t" is ONLY in an individual Bezier piece.
+ */
+
+//accepts basic selector text, a path instance, a RawPath instance, or a Segment and returns a RawPath (makes it easy to homogenize things). If an element or selector text is passed in, it'll also cache the value so that if it's queried again, it'll just take the path data from there instead of parsing it all over again (as long as the path data itself hasn't changed - it'll check).
+function getRawPath(value) {
+	value = (_isString(value) && _selectorExp.test(value)) ? document.querySelector(value) || value : value;
+	let e = value.getAttribute ? value : 0,
+		rawPath;
+	if (e && (value = value.getAttribute("d"))) {
+		//implements caching
+		if (!e._gsPath) {
+			e._gsPath = {};
+		}
+		rawPath = e._gsPath[value];
+		return (rawPath && !rawPath._dirty) ? rawPath : (e._gsPath[value] = stringToRawPath(value));
+	}
+	return !value ? console.warn("Expecting a <path> element or an SVG path data string") : _isString(value) ? stringToRawPath(value) : (_isNumber(value[0])) ? [value] : value;
+}
+
+//copies a RawPath WITHOUT the length meta data (for speed)
+function copyRawPath(rawPath) {
+	let a = [],
+		i = 0;
+	for (; i < rawPath.length; i++) {
+		a[i] = _copyMetaData(rawPath[i], rawPath[i].slice(0));
+	}
+	return _copyMetaData(rawPath, a);
+}
+
+function reverseSegment(segment) {
+	let i = 0,
+		y;
+	segment.reverse(); //this will invert the order y, x, y, x so we must flip it back.
+	for (; i < segment.length; i += 2) {
+		y = segment[i];
+		segment[i] = segment[i+1];
+		segment[i+1] = y;
+	}
+	segment.reversed = !segment.reversed;
+}
+
+
+
+let _createPath = (e, ignore) => {
+		let path = document.createElementNS("http://www.w3.org/2000/svg", "path"),
+			attr = [].slice.call(e.attributes),
+			i = attr.length,
+			name;
+		ignore = "," + ignore + ",";
+		while (--i > -1) {
+			name = attr[i].nodeName.toLowerCase(); //in Microsoft Edge, if you don't set the attribute with a lowercase name, it doesn't render correctly! Super weird.
+			if (ignore.indexOf("," + name + ",") < 0) {
+				path.setAttributeNS(null, name, attr[i].nodeValue);
+			}
+		}
+		return path;
+	},
+	_typeAttrs = {
+		rect:"rx,ry,x,y,width,height",
+		circle:"r,cx,cy",
+		ellipse:"rx,ry,cx,cy",
+		line:"x1,x2,y1,y2"
+	},
+	_attrToObj = (e, attrs) => {
+		let props = attrs ? attrs.split(",") : [],
+			obj = {},
+			i = props.length;
+		while (--i > -1) {
+			obj[props[i]] = +e.getAttribute(props[i]) || 0;
+		}
+		return obj;
+	};
+
+//converts an SVG shape like <circle>, <rect>, <polygon>, <polyline>, <ellipse>, etc. to a <path>, swapping it in and copying the attributes to match.
+function convertToPath(element, swap) {
+	let type = element.tagName.toLowerCase(),
+		circ = 0.552284749831,
+		data, x, y, r, ry, path, rcirc, rycirc, points, w, h, x2, x3, x4, x5, x6, y2, y3, y4, y5, y6, attr;
+	if (type === "path" || !element.getBBox) {
+		return element;
+	}
+	path = _createPath(element, "x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points");
+	attr = _attrToObj(element, _typeAttrs[type]);
+	if (type === "rect") {
+		r = attr.rx;
+		ry = attr.ry || r;
+		x = attr.x;
+		y = attr.y;
+		w = attr.width - r * 2;
+		h = attr.height - ry * 2;
+		if (r || ry) { //if there are rounded corners, render cubic beziers
+			x2 = x + r * (1 - circ);
+			x3 = x + r;
+			x4 = x3 + w;
+			x5 = x4 + r * circ;
+			x6 = x4 + r;
+			y2 = y + ry * (1 - circ);
+			y3 = y + ry;
+			y4 = y3 + h;
+			y5 = y4 + ry * circ;
+			y6 = y4 + ry;
+			data = "M" + x6 + "," + y3 + " V" + y4 + " C" + [x6, y5, x5, y6, x4, y6, x4 - (x4 - x3) / 3, y6, x3 + (x4 - x3) / 3, y6, x3, y6, x2, y6, x, y5, x, y4, x, y4 - (y4 - y3) / 3, x, y3 + (y4 - y3) / 3, x, y3, x, y2, x2, y, x3, y, x3 + (x4 - x3) / 3, y, x4 - (x4 - x3) / 3, y, x4, y, x5, y, x6, y2, x6, y3].join(",") + "z";
+		} else {
+			data = "M" + (x + w) + "," + y + " v" + h + " h" + (-w) + " v" + (-h) + " h" + w + "z";
+		}
+
+	} else if (type === "circle" || type === "ellipse") {
+		if (type === "circle") {
+			r = ry = attr.r;
+			rycirc = r * circ;
+		} else {
+			r = attr.rx;
+			ry = attr.ry;
+			rycirc = ry * circ;
+		}
+		x = attr.cx;
+		y = attr.cy;
+		rcirc = r * circ;
+		data = "M" + (x+r) + "," + y + " C" + [x+r, y + rycirc, x + rcirc, y + ry, x, y + ry, x - rcirc, y + ry, x - r, y + rycirc, x - r, y, x - r, y - rycirc, x - rcirc, y - ry, x, y - ry, x + rcirc, y - ry, x + r, y - rycirc, x + r, y].join(",") + "z";
+	} else if (type === "line") {
+		data = "M" + attr.x1 + "," + attr.y1 + " L" + attr.x2 + "," + attr.y2; //previously, we just converted to "Mx,y Lx,y" but Safari has bugs that cause that not to render properly when using a stroke-dasharray that's not fully visible! Using a cubic bezier fixes that issue.
+	} else if (type === "polyline" || type === "polygon") {
+		points = (element.getAttribute("points") + "").match(_numbersExp) || [];
+		x = points.shift();
+		y = points.shift();
+		data = "M" + x + "," + y + " L" + points.join(",");
+		if (type === "polygon") {
+			data += "," + x + "," + y + "z";
+		}
+	}
+	path.setAttribute("d", rawPathToString(path._gsRawPath = stringToRawPath(data)));
+	if (swap && element.parentNode) {
+		element.parentNode.insertBefore(path, element);
+		element.parentNode.removeChild(element);
+	}
+	return path;
+}
+
+function getRotationAtBezierT(segment, i, t) {
+	let a = segment[i],
+		b = segment[i+2],
+		c = segment[i+4],
+		x;
+	a += (b - a) * t;
+	b += (c - b) * t;
+	a += (b - a) * t;
+	x = b + ((c + (segment[i+6] - c) * t) - b) * t - a;
+	a = segment[i+1];
+	b = segment[i+3];
+	c = segment[i+5];
+	a += (b - a) * t;
+	b += (c - b) * t;
+	a += (b - a) * t;
+	return _round(_atan2(b + ((c + (segment[i+7] - c) * t) - b) * t - a, x) * _RAD2DEG);
+}
+
+function sliceRawPath(rawPath, start, end) {
+	end = _isUndefined(end) ? 1 : _roundPrecise(end) || 0; // we must round to avoid issues like 4.15 / 8 = 0.8300000000000001 instead of 0.83 or 2.8 / 5 = 0.5599999999999999 instead of 0.56 and if someone is doing a loop like start: 2.8 / 0.5, end: 2.8 / 0.5 + 1.
+	start = _roundPrecise(start) || 0;
+	let loops = Math.max(0, ~~(_abs(end - start) - 1e-8)),
+		path = copyRawPath(rawPath);
+	if (start > end) {
+		start = 1 - start;
+		end = 1 - end;
+		_reverseRawPath(path);
+		path.totalLength = 0;
+	}
+	if (start < 0 || end < 0) {
+		let offset = Math.abs(~~Math.min(start, end)) + 1;
+		start += offset;
+		end += offset;
+	}
+	path.totalLength || cacheRawPathMeasurements(path);
+	let wrap = (end > 1),
+		s = getProgressData(path, start, _temp, true),
+		e = getProgressData(path, end, _temp2),
+		eSeg = e.segment,
+		sSeg = s.segment,
+		eSegIndex = e.segIndex,
+		sSegIndex = s.segIndex,
+		ei = e.i,
+		si = s.i,
+		sameSegment = (sSegIndex === eSegIndex),
+		sameBezier = (ei === si && sameSegment),
+		wrapsBehind, sShift, eShift, i, copy, totalSegments, l, j;
+	if (wrap || loops) {
+		wrapsBehind = eSegIndex < sSegIndex || (sameSegment && ei < si) || (sameBezier && e.t < s.t);
+		if (_splitSegment(path, sSegIndex, si, s.t)) {
+			sSegIndex++;
+			if (!wrapsBehind) {
+				eSegIndex++;
+				if (sameBezier) {
+					e.t = (e.t - s.t) / (1 - s.t);
+					ei = 0;
+				} else if (sameSegment) {
+					ei -= si;
+				}
+			}
+		}
+		if (Math.abs(1 - (end - start)) < 1e-5) {
+			eSegIndex = sSegIndex - 1;
+		} else if (!e.t && eSegIndex) {
+			eSegIndex--;
+		} else if (_splitSegment(path, eSegIndex, ei, e.t) && wrapsBehind) {
+			sSegIndex++;
+		}
+		if (s.t === 1) {
+			sSegIndex = (sSegIndex + 1) % path.length;
+		}
+		copy = [];
+		totalSegments = path.length;
+		l = 1 + totalSegments * loops;
+		j = sSegIndex;
+		l += ((totalSegments - sSegIndex) + eSegIndex) % totalSegments;
+		for (i = 0; i < l; i++) {
+			_appendOrMerge(copy, path[j++ % totalSegments]);
+		}
+		path = copy;
+	} else {
+		eShift = e.t === 1 ? 6 : subdivideSegment(eSeg, ei, e.t);
+		if (start !== end) {
+			sShift = subdivideSegment(sSeg, si, sameBezier ? s.t / e.t : s.t);
+			sameSegment && (eShift += sShift);
+			eSeg.splice(ei + eShift + 2);
+			(sShift || si) && sSeg.splice(0, si + sShift);
+			i = path.length;
+			while (i--) {
+				//chop off any extra segments
+				(i < sSegIndex || i > eSegIndex) &&	path.splice(i, 1);
+			}
+		} else {
+			eSeg.angle = getRotationAtBezierT(eSeg, ei + eShift, 0); //record the value before we chop because it'll be impossible to determine the angle after its length is 0!
+			ei += eShift;
+			s = eSeg[ei];
+			e = eSeg[ei+1];
+			eSeg.length = eSeg.totalLength = 0;
+			eSeg.totalPoints = path.totalPoints = 8;
+			eSeg.push(s, e, s, e, s, e, s, e);
+		}
+	}
+	path.totalLength = 0;
+	return path;
+}
+
+//measures a Segment according to its resolution (so if segment.resolution is 6, for example, it'll take 6 samples equally across each Bezier) and create/populate a "samples" Array that has the length up to each of those sample points (always increasing from the start) as well as a "lookup" array that's broken up according to the smallest distance between 2 samples. This gives us a very fast way of looking up a progress position rather than looping through all the points/Beziers. You can optionally have it only measure a subset, starting at startIndex and going for a specific number of beziers (remember, there are 3 x/y pairs each, for a total of 6 elements for each Bezier). It will also populate a "totalLength" property, but that's not generally super accurate because by default it'll only take 6 samples per Bezier. But for performance reasons, it's perfectly adequate for measuring progress values along the path. If you need a more accurate totalLength, either increase the resolution or use the more advanced bezierToPoints() method which keeps adding points until they don't deviate by more than a certain precision value.
+function measureSegment(segment, startIndex, bezierQty) {
+	startIndex = startIndex || 0;
+	if (!segment.samples) {
+		segment.samples = [];
+		segment.lookup = [];
+	}
+	let resolution = ~~segment.resolution || 12,
+		inc = 1 / resolution,
+		endIndex = bezierQty ? startIndex + bezierQty * 6 + 1 : segment.length,
+		x1 = segment[startIndex],
+		y1 = segment[startIndex + 1],
+		samplesIndex = startIndex ? (startIndex / 6) * resolution : 0,
+		samples = segment.samples,
+		lookup = segment.lookup,
+		min = (startIndex ? segment.minLength : _largeNum) || _largeNum,
+		prevLength = samples[samplesIndex + bezierQty * resolution - 1],
+		length = startIndex ? samples[samplesIndex-1] : 0,
+		i, j, x4, x3, x2, xd, xd1, y4, y3, y2, yd, yd1, inv, t, lengthIndex, l, segLength;
+	samples.length = lookup.length = 0;
+	for (j = startIndex + 2; j < endIndex; j += 6) {
+		x4 = segment[j + 4] - x1;
+		x3 = segment[j + 2] - x1;
+		x2 = segment[j] - x1;
+		y4 = segment[j + 5] - y1;
+		y3 = segment[j + 3] - y1;
+		y2 = segment[j + 1] - y1;
+		xd = xd1 = yd = yd1 = 0;
+		if (_abs(x4) < .01 && _abs(y4) < .01 && _abs(x2) + _abs(y2) < .01) { //dump points that are sufficiently close (basically right on top of each other, making a bezier super tiny or 0 length)
+			if (segment.length > 8) {
+				segment.splice(j, 6);
+				j -= 6;
+				endIndex -= 6;
+			}
+		} else {
+			for (i = 1; i <= resolution; i++) {
+				t = inc * i;
+				inv = 1 - t;
+				xd = xd1 - (xd1 = (t * t * x4 + 3 * inv * (t * x3 + inv * x2)) * t);
+				yd = yd1 - (yd1 = (t * t * y4 + 3 * inv * (t * y3 + inv * y2)) * t);
+				l = _sqrt(yd * yd + xd * xd);
+				if (l < min) {
+					min = l;
+				}
+				length += l;
+				samples[samplesIndex++] = length;
+			}
+		}
+		x1 += x4;
+		y1 += y4;
+	}
+	if (prevLength) {
+		prevLength -= length;
+		for (; samplesIndex < samples.length; samplesIndex++) {
+			samples[samplesIndex] += prevLength;
+		}
+	}
+	if (samples.length && min) {
+		segment.totalLength = segLength = samples[samples.length-1] || 0;
+		segment.minLength = min;
+		if (segLength / min < 9999) { // if the lookup would require too many values (memory problem), we skip this and instead we use a loop to lookup values directly in the samples Array
+			l = lengthIndex = 0;
+			for (i = 0; i < segLength; i += min) {
+				lookup[l++] = (samples[lengthIndex] < i) ? ++lengthIndex : lengthIndex;
+			}
+		}
+	} else {
+		segment.totalLength = samples[0] = 0;
+	}
+	return startIndex ? length - samples[startIndex / 2 - 1] : length;
+}
+
+function cacheRawPathMeasurements(rawPath, resolution) {
+	let pathLength, points, i;
+	for (i = pathLength = points = 0; i < rawPath.length; i++) {
+		rawPath[i].resolution = ~~resolution || 12; //steps per Bezier curve (anchor, 2 control points, to anchor)
+		points += rawPath[i].length;
+		pathLength += measureSegment(rawPath[i]);
+	}
+	rawPath.totalPoints = points;
+	rawPath.totalLength = pathLength;
+	return rawPath;
+}
+
+//divide segment[i] at position t (value between 0 and 1, progress along that particular cubic bezier segment that starts at segment[i]). Returns how many elements were spliced into the segment array (either 0 or 6)
+function subdivideSegment(segment, i, t) {
+	if (t <= 0 || t >= 1) {
+		return 0;
+	}
+	let ax = segment[i],
+		ay = segment[i+1],
+		cp1x = segment[i+2],
+		cp1y = segment[i+3],
+		cp2x = segment[i+4],
+		cp2y = segment[i+5],
+		bx = segment[i+6],
+		by = segment[i+7],
+		x1a = ax + (cp1x - ax) * t,
+		x2 = cp1x + (cp2x - cp1x) * t,
+		y1a = ay + (cp1y - ay) * t,
+		y2 = cp1y + (cp2y - cp1y) * t,
+		x1 = x1a + (x2 - x1a) * t,
+		y1 = y1a + (y2 - y1a) * t,
+		x2a = cp2x + (bx - cp2x) * t,
+		y2a = cp2y + (by - cp2y) * t;
+	x2 += (x2a - x2) * t;
+	y2 += (y2a - y2) * t;
+	segment.splice(i + 2, 4,
+		_round(x1a),                  //first control point
+		_round(y1a),
+		_round(x1),                   //second control point
+		_round(y1),
+		_round(x1 + (x2 - x1) * t),   //new fabricated anchor on line
+		_round(y1 + (y2 - y1) * t),
+		_round(x2),                   //third control point
+		_round(y2),
+		_round(x2a),                  //fourth control point
+		_round(y2a)
+	);
+	segment.samples && segment.samples.splice(((i / 6) * segment.resolution) | 0, 0, 0, 0, 0, 0, 0, 0);
+	return 6;
+}
+
+// returns an object {path, segment, segIndex, i, t}
+function getProgressData(rawPath, progress, decoratee, pushToNextIfAtEnd) {
+	decoratee = decoratee || {};
+	rawPath.totalLength || cacheRawPathMeasurements(rawPath);
+	if (progress < 0 || progress > 1) {
+		progress = _wrapProgress(progress);
+	}
+	let segIndex = 0,
+		segment = rawPath[0],
+		samples, resolution, length, min, max, i, t;
+	if (!progress) {
+		t = i = segIndex = 0;
+		segment = rawPath[0];
+	} else if (progress === 1) {
+		t = 1;
+		segIndex = rawPath.length - 1;
+		segment = rawPath[segIndex];
+		i = segment.length - 8;
+	} else {
+		if (rawPath.length > 1) { //speed optimization: most of the time, there's only one segment so skip the recursion.
+			length = rawPath.totalLength * progress;
+			max = i = 0;
+			while ((max += rawPath[i++].totalLength) < length) {
+				segIndex = i;
+			}
+			segment = rawPath[segIndex];
+			min = max - segment.totalLength;
+			progress = ((length - min) / (max - min)) || 0;
+		}
+		samples = segment.samples;
+		resolution = segment.resolution; //how many samples per cubic bezier chunk
+		length = segment.totalLength * progress;
+		i = segment.lookup.length ? segment.lookup[~~(length / segment.minLength)] || 0 : _getSampleIndex(samples, length, progress);
+		min = i ? samples[i-1] : 0;
+		max = samples[i];
+		if (max < length) {
+			min = max;
+			max = samples[++i];
+		}
+		t = (1 / resolution) * (((length - min) / (max - min)) + ((i % resolution)));
+		i = ~~(i / resolution) * 6;
+		if (pushToNextIfAtEnd && t === 1) {
+			if (i + 6 < segment.length) {
+				i += 6;
+				t = 0;
+			} else if (segIndex + 1 < rawPath.length) {
+				i = t = 0;
+				segment = rawPath[++segIndex];
+			}
+		}
+	}
+	decoratee.t = t;
+	decoratee.i = i;
+	decoratee.path = rawPath;
+	decoratee.segment = segment;
+	decoratee.segIndex = segIndex;
+	return decoratee;
+}
+
+function getPositionOnPath(rawPath, progress, includeAngle, point) {
+	let segment = rawPath[0],
+		result = point || {},
+		samples, resolution, length, min, max, i, t, a, inv;
+	if (progress < 0 || progress > 1) {
+		progress = _wrapProgress(progress);
+	}
+	segment.lookup || cacheRawPathMeasurements(rawPath);
+	if (rawPath.length > 1) { //speed optimization: most of the time, there's only one segment so skip the recursion.
+		length = rawPath.totalLength * progress;
+		max = i = 0;
+		while ((max += rawPath[i++].totalLength) < length) {
+			segment = rawPath[i];
+		}
+		min = max - segment.totalLength;
+		progress = ((length - min) / (max - min)) || 0;
+	}
+	samples = segment.samples;
+	resolution = segment.resolution;
+	length = segment.totalLength * progress;
+	i = segment.lookup.length ? segment.lookup[progress < 1 ? ~~(length / segment.minLength) : segment.lookup.length - 1] || 0 : _getSampleIndex(samples, length, progress);
+	min = i ? samples[i-1] : 0;
+	max = samples[i];
+	if (max < length) {
+		min = max;
+		max = samples[++i];
+	}
+	t = ((1 / resolution) * (((length - min) / (max - min)) + ((i % resolution)))) || 0;
+	inv = 1 - t;
+	i = ~~(i / resolution) * 6;
+	a = segment[i];
+	result.x = _round((t * t * (segment[i + 6] - a) + 3 * inv * (t * (segment[i + 4] - a) + inv * (segment[i + 2] - a))) * t + a);
+	result.y = _round((t * t * (segment[i + 7] - (a = segment[i+1])) + 3 * inv * (t * (segment[i + 5] - a) + inv * (segment[i + 3] - a))) * t + a);
+	if (includeAngle) {
+		result.angle = segment.totalLength ? getRotationAtBezierT(segment, i, t >= 1 ? 1 - 1e-9 : t ? t : 1e-9) : segment.angle || 0;
+	}
+	return result;
+}
+
+
+
+//applies a matrix transform to RawPath (or a segment in a RawPath) and returns whatever was passed in (it transforms the values in the array(s), not a copy).
+function transformRawPath(rawPath, a, b, c, d, tx, ty) {
+	let j = rawPath.length,
+		segment, l, i, x, y;
+	while (--j > -1) {
+		segment = rawPath[j];
+		l = segment.length;
+		for (i = 0; i < l; i += 2) {
+			x = segment[i];
+			y = segment[i+1];
+			segment[i] = x * a + y * c + tx;
+			segment[i+1] = x * b + y * d + ty;
+		}
+	}
+	rawPath._dirty = 1;
+	return rawPath;
+}
+
+
+
+// translates SVG arc data into a segment (cubic beziers). Angle is in degrees.
+function arcToSegment(lastX, lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y) {
+	if (lastX === x && lastY === y) {
+		return;
+	}
+	rx = _abs(rx);
+	ry = _abs(ry);
+	let angleRad = (angle % 360) * _DEG2RAD,
+		cosAngle = _cos(angleRad),
+		sinAngle = _sin(angleRad),
+		PI = Math.PI,
+		TWOPI = PI * 2,
+		dx2 = (lastX - x) / 2,
+		dy2 = (lastY - y) / 2,
+		x1 = (cosAngle * dx2 + sinAngle * dy2),
+		y1 = (-sinAngle * dx2 + cosAngle * dy2),
+		x1_sq = x1 * x1,
+		y1_sq = y1 * y1,
+		radiiCheck = x1_sq / (rx * rx) + y1_sq / (ry * ry);
+	if (radiiCheck > 1) {
+		rx = _sqrt(radiiCheck) * rx;
+		ry = _sqrt(radiiCheck) * ry;
+	}
+	let rx_sq = rx * rx,
+		ry_sq = ry * ry,
+		sq = ((rx_sq * ry_sq) - (rx_sq * y1_sq) - (ry_sq * x1_sq)) / ((rx_sq * y1_sq) + (ry_sq * x1_sq));
+	if (sq < 0) {
+		sq = 0;
+	}
+	let coef = ((largeArcFlag === sweepFlag) ? -1 : 1) * _sqrt(sq),
+		cx1 = coef * ((rx * y1) / ry),
+		cy1 = coef * -((ry * x1) / rx),
+		sx2 = (lastX + x) / 2,
+		sy2 = (lastY + y) / 2,
+		cx = sx2 + (cosAngle * cx1 - sinAngle * cy1),
+		cy = sy2 + (sinAngle * cx1 + cosAngle * cy1),
+		ux = (x1 - cx1) / rx,
+		uy = (y1 - cy1) / ry,
+		vx = (-x1 - cx1) / rx,
+		vy = (-y1 - cy1) / ry,
+		temp = ux * ux + uy * uy,
+		angleStart = ((uy < 0) ? -1 : 1) * Math.acos(ux / _sqrt(temp)),
+		angleExtent = ((ux * vy - uy * vx < 0) ? -1 : 1) * Math.acos((ux * vx + uy * vy) / _sqrt(temp * (vx * vx + vy * vy)));
+	isNaN(angleExtent) && (angleExtent = PI); //rare edge case. Math.cos(-1) is NaN.
+	if (!sweepFlag && angleExtent > 0) {
+		angleExtent -= TWOPI;
+	} else if (sweepFlag && angleExtent < 0) {
+		angleExtent += TWOPI;
+	}
+	angleStart %= TWOPI;
+	angleExtent %= TWOPI;
+	let segments = Math.ceil(_abs(angleExtent) / (TWOPI / 4)),
+		rawPath = [],
+		angleIncrement = angleExtent / segments,
+		controlLength = 4 / 3 * _sin(angleIncrement / 2) / (1 + _cos(angleIncrement / 2)),
+		ma = cosAngle * rx,
+		mb = sinAngle * rx,
+		mc = sinAngle * -ry,
+		md = cosAngle * ry,
+		i;
+	for (i = 0; i < segments; i++) {
+		angle = angleStart + i * angleIncrement;
+		x1 = _cos(angle);
+		y1 = _sin(angle);
+		ux = _cos(angle += angleIncrement);
+		uy = _sin(angle);
+		rawPath.push(x1 - controlLength * y1, y1 + controlLength * x1, ux + controlLength * uy, uy - controlLength * ux, ux, uy);
+	}
+	//now transform according to the actual size of the ellipse/arc (the beziers were noramlized, between 0 and 1 on a circle).
+	for (i = 0; i < rawPath.length; i+=2) {
+		x1 = rawPath[i];
+		y1 = rawPath[i+1];
+		rawPath[i] = x1 * ma + y1 * mc + cx;
+		rawPath[i+1] = x1 * mb + y1 * md + cy;
+	}
+	rawPath[i-2] = x; //always set the end to exactly where it's supposed to be
+	rawPath[i-1] = y;
+	return rawPath;
+}
+
+//Spits back a RawPath with absolute coordinates. Each segment starts with a "moveTo" command (x coordinate, then y) and then 2 control points (x, y, x, y), then anchor. The goal is to minimize memory and maximize speed.
+function stringToRawPath(d) {
+	let a = (d + "").replace(_scientific, m => { let n = +m; return (n < 0.0001 && n > -0.0001) ? 0 : n; }).match(_svgPathExp) || [], //some authoring programs spit out very small numbers in scientific notation like "1e-5", so make sure we round that down to 0 first.
+		path = [],
+		relativeX = 0,
+		relativeY = 0,
+		twoThirds = 2 / 3,
+		elements = a.length,
+		points = 0,
+		errorMessage = "ERROR: malformed path: " + d,
+		i, j, x, y, command, isRelative, segment, startX, startY, difX, difY, beziers, prevCommand, flag1, flag2,
+		line = function(sx, sy, ex, ey) {
+			difX = (ex - sx) / 3;
+			difY = (ey - sy) / 3;
+			segment.push(sx + difX, sy + difY, ex - difX, ey - difY, ex, ey);
+		};
+	if (!d || !isNaN(a[0]) || isNaN(a[1])) {
+		console.log(errorMessage);
+		return path;
+	}
+	for (i = 0; i < elements; i++) {
+		prevCommand = command;
+		if (isNaN(a[i])) {
+			command = a[i].toUpperCase();
+			isRelative = (command !== a[i]); //lower case means relative
+		} else { //commands like "C" can be strung together without any new command characters between.
+			i--;
+		}
+		x = +a[i + 1];
+		y = +a[i + 2];
+		if (isRelative) {
+			x += relativeX;
+			y += relativeY;
+		}
+		if (!i) {
+			startX = x;
+			startY = y;
+		}
+
+		// "M" (move)
+		if (command === "M") {
+			if (segment) {
+				if (segment.length < 8) { //if the path data was funky and just had a M with no actual drawing anywhere, skip it.
+					path.length -= 1;
+				} else {
+					points += segment.length;
+				}
+			}
+			relativeX = startX = x;
+			relativeY = startY = y;
+			segment = [x, y];
+			path.push(segment);
+			i += 2;
+			command = "L"; //an "M" with more than 2 values gets interpreted as "lineTo" commands ("L").
+
+		// "C" (cubic bezier)
+		} else if (command === "C") {
+			if (!segment) {
+				segment = [0, 0];
+			}
+			if (!isRelative) {
+				relativeX = relativeY = 0;
+			}
+			//note: "*1" is just a fast/short way to cast the value as a Number. WAAAY faster in Chrome, slightly slower in Firefox.
+			segment.push(x,	y, relativeX + a[i + 3] * 1, relativeY + a[i + 4] * 1, (relativeX += a[i + 5] * 1),	(relativeY += a[i + 6] * 1));
+			i += 6;
+
+		// "S" (continuation of cubic bezier)
+		} else if (command === "S") {
+			difX = relativeX;
+			difY = relativeY;
+			if (prevCommand === "C" || prevCommand === "S") {
+				difX += relativeX - segment[segment.length - 4];
+				difY += relativeY - segment[segment.length - 3];
+			}
+			if (!isRelative) {
+				relativeX = relativeY = 0;
+			}
+			segment.push(difX, difY, x,	y, (relativeX += a[i + 3] * 1), (relativeY += a[i + 4] * 1));
+			i += 4;
+
+		// "Q" (quadratic bezier)
+		} else if (command === "Q") {
+			difX = relativeX + (x - relativeX) * twoThirds;
+			difY = relativeY + (y - relativeY) * twoThirds;
+			if (!isRelative) {
+				relativeX = relativeY = 0;
+			}
+			relativeX += a[i + 3] * 1;
+			relativeY += a[i + 4] * 1;
+			segment.push(difX, difY, relativeX + (x - relativeX) * twoThirds, relativeY + (y - relativeY) * twoThirds, relativeX, relativeY);
+			i += 4;
+
+		// "T" (continuation of quadratic bezier)
+		} else if (command === "T") {
+			difX = relativeX - segment[segment.length - 4];
+			difY = relativeY - segment[segment.length - 3];
+			segment.push(relativeX + difX, relativeY + difY, x + ((relativeX + difX * 1.5) - x) * twoThirds, y + ((relativeY + difY * 1.5) - y) * twoThirds, (relativeX = x), (relativeY = y));
+			i += 2;
+
+		// "H" (horizontal line)
+		} else if (command === "H") {
+			line(relativeX, relativeY, (relativeX = x), relativeY);
+			i += 1;
+
+		// "V" (vertical line)
+		} else if (command === "V") {
+			//adjust values because the first (and only one) isn't x in this case, it's y.
+			line(relativeX, relativeY, relativeX, (relativeY = x + (isRelative ? relativeY - relativeX : 0)));
+			i += 1;
+
+		// "L" (line) or "Z" (close)
+		} else if (command === "L" || command === "Z") {
+			if (command === "Z") {
+				x = startX;
+				y = startY;
+				segment.closed = true;
+			}
+			if (command === "L" || _abs(relativeX - x) > 0.5 || _abs(relativeY - y) > 0.5) {
+				line(relativeX, relativeY, x, y);
+				if (command === "L") {
+					i += 2;
+				}
+			}
+			relativeX = x;
+			relativeY = y;
+
+		// "A" (arc)
+		} else if (command === "A") {
+			flag1 = a[i+4];
+			flag2 = a[i+5];
+			difX = a[i+6];
+			difY = a[i+7];
+			j = 7;
+			if (flag1.length > 1) { // for cases when the flags are merged, like "a8 8 0 018 8" (the 0 and 1 flags are WITH the x value of 8, but it could also be "a8 8 0 01-8 8" so it may include x or not)
+				if (flag1.length < 3) {
+					difY = difX;
+					difX = flag2;
+					j--;
+				} else {
+					difY = flag2;
+					difX = flag1.substr(2);
+					j-=2;
+				}
+				flag2 = flag1.charAt(1);
+				flag1 = flag1.charAt(0);
+			}
+			beziers = arcToSegment(relativeX, relativeY, +a[i+1], +a[i+2], +a[i+3], +flag1, +flag2, (isRelative ? relativeX : 0) + difX*1, (isRelative ? relativeY : 0) + difY*1);
+			i += j;
+			if (beziers) {
+				for (j = 0; j < beziers.length; j++) {
+					segment.push(beziers[j]);
+				}
+			}
+			relativeX = segment[segment.length-2];
+			relativeY = segment[segment.length-1];
+
+		} else {
+			console.log(errorMessage);
+		}
+	}
+	i = segment.length;
+	if (i < 6) { //in case there's odd SVG like a M0,0 command at the very end.
+		path.pop();
+		i = 0;
+	} else if (segment[0] === segment[i-2] && segment[1] === segment[i-1]) {
+		segment.closed = true;
+	}
+	path.totalPoints = points + i;
+	return path;
+}
+
+/*
+function getAngleBetweenPoints(x0, y0, x1, y1, x2, y2) { //angle between 3 points in radians
+	var dx1 = x1 - x0,
+		dy1 = y1 - y0,
+		dx2 = x2 - x1,
+		dy2 = y2 - y1,
+		dx3 = x2 - x0,
+		dy3 = y2 - y0,
+		a = dx1 * dx1 + dy1 * dy1,
+		b = dx2 * dx2 + dy2 * dy2,
+		c = dx3 * dx3 + dy3 * dy3;
+	return Math.acos( (a + b - c) / _sqrt(4 * a * b) );
+},
+*/
+
+//pointsToSegment() doesn't handle flat coordinates (where y is always 0) the way we need (the resulting control points are always right on top of the anchors), so this function basically makes the control points go directly up and down, varying in length based on the curviness (more curvy, further control points)
+function flatPointsToSegment(points, curviness=1) {
+	let x = points[0],
+		y = 0,
+		segment = [x, y],
+		i = 2;
+	for (; i < points.length; i+=2) {
+		segment.push(
+			x,
+			y,
+			points[i],
+			(y = (points[i] - x) * curviness / 2),
+			(x = points[i]),
+			-y
+		);
+	}
+	return segment;
+}
+
+//points is an array of x/y points, like [x, y, x, y, x, y]
+function pointsToSegment(points, curviness) {
+	//points = simplifyPoints(points, tolerance);
+	_abs(points[0] - points[2]) < 1e-4 && _abs(points[1] - points[3]) < 1e-4 && (points = points.slice(2)); // if the first two points are super close, dump the first one.
+	let l = points.length-2,
+		x = +points[0],
+		y = +points[1],
+		nextX = +points[2],
+		nextY = +points[3],
+		segment = [x, y, x, y],
+		dx2 = nextX - x,
+		dy2 = nextY - y,
+		closed = Math.abs(points[l] - x) < 0.001 && Math.abs(points[l+1] - y) < 0.001,
+		prevX, prevY, i, dx1, dy1, r1, r2, r3, tl, mx1, mx2, mxm, my1, my2, mym;
+	if (closed) { // if the start and end points are basically on top of each other, close the segment by adding the 2nd point to the end, and the 2nd-to-last point to the beginning (we'll remove them at the end, but this allows the curvature to look perfect)
+		points.push(nextX, nextY);
+		nextX = x;
+		nextY = y;
+		x = points[l-2];
+		y = points[l-1];
+		points.unshift(x, y);
+		l+=4;
+	}
+	curviness = (curviness || curviness === 0) ? +curviness : 1;
+	for (i = 2; i < l; i+=2) {
+		prevX = x;
+		prevY = y;
+		x = nextX;
+		y = nextY;
+		nextX = +points[i+2];
+		nextY = +points[i+3];
+		if (x === nextX && y === nextY) {
+			continue;
+		}
+		dx1 = dx2;
+		dy1 = dy2;
+		dx2 = nextX - x;
+		dy2 = nextY - y;
+		r1 = _sqrt(dx1 * dx1 + dy1 * dy1); // r1, r2, and r3 correlate x and y (and z in the future). Basically 2D or 3D hypotenuse
+		r2 = _sqrt(dx2 * dx2 + dy2 * dy2);
+		r3 =  _sqrt((dx2 / r2 + dx1 / r1) ** 2 + (dy2 / r2 + dy1 / r1) ** 2);
+		tl = ((r1 + r2) * curviness * 0.25) / r3;
+		mx1 = x - (x - prevX) * (r1 ? tl / r1 : 0);
+		mx2 = x + (nextX - x) * (r2 ? tl / r2 : 0);
+		mxm = x - (mx1 + (((mx2 - mx1) * ((r1 * 3 / (r1 + r2)) + 0.5) / 4) || 0));
+		my1 = y - (y - prevY) * (r1 ? tl / r1 : 0);
+		my2 = y + (nextY - y) * (r2 ? tl / r2 : 0);
+		mym = y - (my1 + (((my2 - my1) * ((r1 * 3 / (r1 + r2)) + 0.5) / 4) || 0));
+		if (x !== prevX || y !== prevY) {
+			segment.push(
+				_round(mx1 + mxm),  // first control point
+				_round(my1 + mym),
+				_round(x),          // anchor
+				_round(y),
+				_round(mx2 + mxm),  // second control point
+				_round(my2 + mym)
+			);
+		}
+	}
+	x !== nextX || y !== nextY || segment.length < 4 ? segment.push(_round(nextX), _round(nextY), _round(nextX), _round(nextY)) : (segment.length -= 2);
+	if (segment.length === 2) { // only one point!
+		segment.push(x, y, x, y, x, y);
+	} else if (closed) {
+		segment.splice(0, 6);
+		segment.length = segment.length - 6;
+	}
+	return segment;
+}
+
+/*
+Takes any of the following and converts it to an all Cubic Bezier SVG data string:
+- A <path> data string like "M0,0 L2,4 v20,15 H100"
+- A RawPath, like [[x, y, x, y, x, y, x, y][[x, y, x, y, x, y, x, y]]
+- A Segment, like [x, y, x, y, x, y, x, y]
+
+Note: all numbers are rounded down to the closest 0.001 to minimize memory, maximize speed, and avoid odd numbers like 1e-13
+*/
+function rawPathToString(rawPath) {
+	if (_isNumber(rawPath[0])) { //in case a segment is passed in instead
+		rawPath = [rawPath];
+	}
+	let result = "",
+		l = rawPath.length,
+		sl, s, i, segment;
+	for (s = 0; s < l; s++) {
+		segment = rawPath[s];
+		result += "M" + _round(segment[0]) + "," + _round(segment[1]) + " C";
+		sl = segment.length;
+		for (i = 2; i < sl; i++) {
+			result += _round(segment[i++]) + "," + _round(segment[i++]) + " " + _round(segment[i++]) + "," + _round(segment[i++]) + " " + _round(segment[i++]) + "," + _round(segment[i]) + " ";
+		}
+		if (segment.closed) {
+			result += "z";
+		}
+	}
+	return result;
+}
+
+/*
+// takes a segment with coordinates [x, y, x, y, ...] and converts the control points into angles and lengths [x, y, angle, length, angle, length, x, y, angle, length, ...] so that it animates more cleanly and avoids odd breaks/kinks. For example, if you animate from 1 o'clock to 6 o'clock, it'd just go directly/linearly rather than around. So the length would be very short in the middle of the tween.
+export function cpCoordsToAngles(segment, copy) {
+	var result = copy ? segment.slice(0) : segment,
+		x, y, i;
+	for (i = 0; i < segment.length; i+=6) {
+		x = segment[i+2] - segment[i];
+		y = segment[i+3] - segment[i+1];
+		result[i+2] = Math.atan2(y, x);
+		result[i+3] = Math.sqrt(x * x + y * y);
+		x = segment[i+6] - segment[i+4];
+		y = segment[i+7] - segment[i+5];
+		result[i+4] = Math.atan2(y, x);
+		result[i+5] = Math.sqrt(x * x + y * y);
+	}
+	return result;
+}
+
+// takes a segment that was converted with cpCoordsToAngles() to have angles and lengths instead of coordinates for the control points, and converts it BACK into coordinates.
+export function cpAnglesToCoords(segment, copy) {
+	var result = copy ? segment.slice(0) : segment,
+		length = segment.length,
+		rnd = 1000,
+		angle, l, i, j;
+	for (i = 0; i < length; i+=6) {
+		angle = segment[i+2];
+		l = segment[i+3]; //length
+		result[i+2] = (((segment[i] + Math.cos(angle) * l) * rnd) | 0) / rnd;
+		result[i+3] = (((segment[i+1] + Math.sin(angle) * l) * rnd) | 0) / rnd;
+		angle = segment[i+4];
+		l = segment[i+5]; //length
+		result[i+4] = (((segment[i+6] - Math.cos(angle) * l) * rnd) | 0) / rnd;
+		result[i+5] = (((segment[i+7] - Math.sin(angle) * l) * rnd) | 0) / rnd;
+	}
+	return result;
+}
+
+//adds an "isSmooth" array to each segment and populates it with a boolean value indicating whether or not it's smooth (the control points have basically the same slope). For any smooth control points, it converts the coordinates into angle (x, in radians) and length (y) and puts them into the same index value in a smoothData array.
+export function populateSmoothData(rawPath) {
+	let j = rawPath.length,
+		smooth, segment, x, y, x2, y2, i, l, a, a2, isSmooth, smoothData;
+	while (--j > -1) {
+		segment = rawPath[j];
+		isSmooth = segment.isSmooth = segment.isSmooth || [0, 0, 0, 0];
+		smoothData = segment.smoothData = segment.smoothData || [0, 0, 0, 0];
+		isSmooth.length = 4;
+		l = segment.length - 2;
+		for (i = 6; i < l; i += 6) {
+			x = segment[i] - segment[i - 2];
+			y = segment[i + 1] - segment[i - 1];
+			x2 = segment[i + 2] - segment[i];
+			y2 = segment[i + 3] - segment[i + 1];
+			a = _atan2(y, x);
+			a2 = _atan2(y2, x2);
+			smooth = (Math.abs(a - a2) < 0.09);
+			if (smooth) {
+				smoothData[i - 2] = a;
+				smoothData[i + 2] = a2;
+				smoothData[i - 1] = _sqrt(x * x + y * y);
+				smoothData[i + 3] = _sqrt(x2 * x2 + y2 * y2);
+			}
+			isSmooth.push(smooth, smooth, 0, 0, smooth, smooth);
+		}
+		//if the first and last points are identical, check to see if there's a smooth transition. We must handle this a bit differently due to their positions in the array.
+		if (segment[l] === segment[0] && segment[l+1] === segment[1]) {
+			x = segment[0] - segment[l-2];
+			y = segment[1] - segment[l-1];
+			x2 = segment[2] - segment[0];
+			y2 = segment[3] - segment[1];
+			a = _atan2(y, x);
+			a2 = _atan2(y2, x2);
+			if (Math.abs(a - a2) < 0.09) {
+				smoothData[l-2] = a;
+				smoothData[2] = a2;
+				smoothData[l-1] = _sqrt(x * x + y * y);
+				smoothData[3] = _sqrt(x2 * x2 + y2 * y2);
+				isSmooth[l-2] = isSmooth[l-1] = true; //don't change indexes 2 and 3 because we'll trigger everything from the END, and this will optimize file size a bit.
+			}
+		}
+	}
+	return rawPath;
+}
+export function pointToScreen(svgElement, point) {
+	if (arguments.length < 2) { //by default, take the first set of coordinates in the path as the point
+		let rawPath = getRawPath(svgElement);
+		point = svgElement.ownerSVGElement.createSVGPoint();
+		point.x = rawPath[0][0];
+		point.y = rawPath[0][1];
+	}
+	return point.matrixTransform(svgElement.getScreenCTM());
+}
+
+*/
+
+export { getPositionOnPath as a, sliceRawPath as b, cacheRawPathMeasurements as c, convertToPath as d, flatPointsToSegment as f, getRawPath as g, pointsToSegment as p, rawPathToString as r, stringToRawPath as s, transformRawPath as t };
diff --git a/src/utils/matrix.js b/dist/shared/gsap.7b0323e5.d.cts
similarity index 96%
rename from src/utils/matrix.js
rename to dist/shared/gsap.7b0323e5.d.cts
index c99a445c0bac838a200c62eb69a787cb62c45f9b..2cbdf0fdbdf57807f5720021650bd9025a160383 100644
--- a/src/utils/matrix.js
+++ b/dist/shared/gsap.7b0323e5.d.cts
@@ -219,7 +219,7 @@ let _doc, _win, _docElement, _body,	_divContainer, _svgContainer, _identityMatri
 		return m;
 	};
 
-export class Matrix2D {
+class Matrix2D {
 	constructor(a=1, b=0, c=0, d=1, e=0, f=0) {
 		_setMatrix(this, a, b, c, d, e, f);
 	}
@@ -281,7 +281,7 @@ export class Matrix2D {
 // The matrix math to convert any x/y coordinate is as follows, which is wrapped in a convenient apply() method of Matrix2D above:
 //     tx = m.a * x + m.c * y + m.e
 //     ty = m.b * x + m.d * y + m.f
-export function getGlobalMatrix(element, inverse, adjustGOffset, includeScrollInFixed) { // adjustGOffset is typically used only when grabbing an element's PARENT's global matrix, and it ignores the x/y offset of any SVG <g> elements because they behave in a special way.
+function getGlobalMatrix(element, inverse, adjustGOffset, includeScrollInFixed) { // adjustGOffset is typically used only when grabbing an element's PARENT's global matrix, and it ignores the x/y offset of any SVG <g> elements because they behave in a special way.
 	if (!element || !element.parentNode || (_doc || _setDoc(element)).documentElement === element) {
 		return new Matrix2D();
 	}
@@ -314,11 +314,11 @@ export function getGlobalMatrix(element, inverse, adjustGOffset, includeScrollIn
 	return inverse ? m.inverse() : m;
 }
 
-export { _getDocScrollTop, _getDocScrollLeft, _setDoc, _isFixed, _getCTM };
-
 // export function getMatrix(element) {
 // 	_doc || _setDoc(element);
 // 	let m = (_win.getComputedStyle(element)[_transformProp] + "").substr(7).match(/[-.]*\d+[.e\-+]*\d*[e\-\+]*\d*/g),
 // 		is2D = m && m.length === 6;
 // 	return !m || m.length < 6 ? new Matrix2D() : new Matrix2D(+m[0], +m[1], +m[is2D ? 2 : 4], +m[is2D ? 3 : 5], +m[is2D ? 4 : 12], +m[is2D ? 5 : 13]);
 // }
+
+export { Matrix2D as M, _setDoc as _, _getDocScrollLeft as a, _getDocScrollTop as b, _getCTM as c, getGlobalMatrix as g };
diff --git a/dist/shared/gsap.7b0323e5.d.mts b/dist/shared/gsap.7b0323e5.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..2cbdf0fdbdf57807f5720021650bd9025a160383
--- /dev/null
+++ b/dist/shared/gsap.7b0323e5.d.mts
@@ -0,0 +1,324 @@
+/*!
+ * matrix 3.12.5
+ * https://gsap.com
+ *
+ * Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let _doc, _win, _docElement, _body,	_divContainer, _svgContainer, _identityMatrix, _gEl,
+	_transformProp = "transform",
+	_transformOriginProp = _transformProp + "Origin",
+	_hasOffsetBug,
+	_setDoc = element => {
+		let doc = element.ownerDocument || element;
+		if (!(_transformProp in element.style) && "msTransform" in element.style) { //to improve compatibility with old Microsoft browsers
+			_transformProp = "msTransform";
+			_transformOriginProp = _transformProp + "Origin";
+		}
+		while (doc.parentNode && (doc = doc.parentNode)) {	}
+		_win = window;
+		_identityMatrix = new Matrix2D();
+		if (doc) {
+			_doc = doc;
+			_docElement = doc.documentElement;
+			_body = doc.body;
+			_gEl = _doc.createElementNS("http://www.w3.org/2000/svg", "g");
+			// prevent any existing CSS from transforming it
+			_gEl.style.transform = "none";
+			// now test for the offset reporting bug. Use feature detection instead of browser sniffing to make things more bulletproof and future-proof. Hopefully Safari will fix their bug soon.
+			let d1 = doc.createElement("div"),
+				d2 = doc.createElement("div"),
+				root = doc && (doc.body || doc.firstElementChild);
+			if (root && root.appendChild) {
+				root.appendChild(d1);
+				d1.appendChild(d2);
+				d1.setAttribute("style", "position:static;transform:translate3d(0,0,1px)");
+				_hasOffsetBug = (d2.offsetParent !== d1);
+				root.removeChild(d1);
+			}
+		}
+		return doc;
+	},
+	_forceNonZeroScale = e => { // walks up the element's ancestors and finds any that had their scale set to 0 via GSAP, and changes them to 0.0001 to ensure that measurements work. Firefox has a bug that causes it to incorrectly report getBoundingClientRect() when scale is 0.
+		let a, cache;
+		while (e && e !== _body) {
+			cache = e._gsap;
+			cache && cache.uncache && cache.get(e, "x"); // force re-parsing of transforms if necessary
+			if (cache && !cache.scaleX && !cache.scaleY && cache.renderTransform) {
+				cache.scaleX = cache.scaleY = 1e-4;
+				cache.renderTransform(1, cache);
+				a ? a.push(cache) : (a = [cache]);
+			}
+			e = e.parentNode;
+		}
+		return a;
+	},
+	// possible future addition: pass an element to _forceDisplay() and it'll walk up all its ancestors and make sure anything with display: none is set to display: block, and if there's no parentNode, it'll add it to the body. It returns an Array that you can then feed to _revertDisplay() to have it revert all the changes it made.
+	// _forceDisplay = e => {
+	// 	let a = [],
+	// 		parent;
+	// 	while (e && e !== _body) {
+	// 		parent = e.parentNode;
+	// 		(_win.getComputedStyle(e).display === "none" || !parent) && a.push(e, e.style.display, parent) && (e.style.display = "block");
+	// 		parent || _body.appendChild(e);
+	// 		e = parent;
+	// 	}
+	// 	return a;
+	// },
+	// _revertDisplay = a => {
+	// 	for (let i = 0; i < a.length; i+=3) {
+	// 		a[i+1] ? (a[i].style.display = a[i+1]) : a[i].style.removeProperty("display");
+	// 		a[i+2] || a[i].parentNode.removeChild(a[i]);
+	// 	}
+	// },
+	_svgTemps = [], //we create 3 elements for SVG, and 3 for other DOM elements and cache them for performance reasons. They get nested in _divContainer and _svgContainer so that just one element is added to the DOM on each successive attempt. Again, performance is key.
+	_divTemps = [],
+	_getDocScrollTop = () => _win.pageYOffset  || _doc.scrollTop || _docElement.scrollTop || _body.scrollTop || 0,
+	_getDocScrollLeft = () => _win.pageXOffset || _doc.scrollLeft || _docElement.scrollLeft || _body.scrollLeft || 0,
+	_svgOwner = element => element.ownerSVGElement || ((element.tagName + "").toLowerCase() === "svg" ? element : null),
+	_isFixed = element => {
+		if (_win.getComputedStyle(element).position === "fixed") {
+			return true;
+		}
+		element = element.parentNode;
+		if (element && element.nodeType === 1) { // avoid document fragments which will throw an error.
+			return _isFixed(element);
+		}
+	},
+	_createSibling = (element, i) => {
+		if (element.parentNode && (_doc || _setDoc(element))) {
+			let svg = _svgOwner(element),
+				ns = svg ? (svg.getAttribute("xmlns") || "http://www.w3.org/2000/svg") : "http://www.w3.org/1999/xhtml",
+				type = svg ? (i ? "rect" : "g") : "div",
+				x = i !== 2 ? 0 : 100,
+				y = i === 3 ? 100 : 0,
+				css = "position:absolute;display:block;pointer-events:none;margin:0;padding:0;",
+				e = _doc.createElementNS ? _doc.createElementNS(ns.replace(/^https/, "http"), type) : _doc.createElement(type);
+			if (i) {
+				if (!svg) {
+					if (!_divContainer) {
+						_divContainer = _createSibling(element);
+						_divContainer.style.cssText = css;
+					}
+					e.style.cssText = css + "width:0.1px;height:0.1px;top:" + y + "px;left:" + x + "px";
+					_divContainer.appendChild(e);
+
+				} else {
+					_svgContainer || (_svgContainer = _createSibling(element));
+					e.setAttribute("width", 0.01);
+					e.setAttribute("height", 0.01);
+					e.setAttribute("transform", "translate(" + x + "," + y + ")");
+					_svgContainer.appendChild(e);
+				}
+			}
+			return e;
+		}
+		throw "Need document and parent.";
+	},
+	_consolidate = m => { // replaces SVGTransformList.consolidate() because a bug in Firefox causes it to break pointer events. See https://gsap.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800
+		let c = new Matrix2D(),
+			i = 0;
+		for (; i < m.numberOfItems; i++) {
+			c.multiply(m.getItem(i).matrix);
+		}
+		return c;
+	},
+	_getCTM = svg => {
+		let m = svg.getCTM(),
+			transform;
+		if (!m) { // Firefox returns null for getCTM() on root <svg> elements, so this is a workaround using a <g> that we temporarily append.
+			transform = svg.style[_transformProp];
+			svg.style[_transformProp] = "none"; // a bug in Firefox causes css transforms to contaminate the getCTM()
+			svg.appendChild(_gEl);
+			m = _gEl.getCTM();
+			svg.removeChild(_gEl);
+			transform ? (svg.style[_transformProp] = transform) : svg.style.removeProperty(_transformProp.replace(/([A-Z])/g, "-$1").toLowerCase());
+		}
+		return m || _identityMatrix.clone(); // Firefox will still return null if the <svg> has a width/height of 0 in the browser.
+	},
+	_placeSiblings = (element, adjustGOffset) => {
+		let svg = _svgOwner(element),
+			isRootSVG = element === svg,
+			siblings = svg ? _svgTemps : _divTemps,
+			parent = element.parentNode,
+			container, m, b, x, y, cs;
+		if (element === _win) {
+			return element;
+		}
+		siblings.length || siblings.push(_createSibling(element, 1), _createSibling(element, 2), _createSibling(element, 3));
+		container = svg ? _svgContainer : _divContainer;
+		if (svg) {
+			if (isRootSVG) {
+				b = _getCTM(element);
+				x = -b.e / b.a;
+				y = -b.f / b.d;
+				m = _identityMatrix;
+			} else if (element.getBBox) {
+				b = element.getBBox();
+				m = element.transform ? element.transform.baseVal : {}; // IE11 doesn't follow the spec.
+				m = !m.numberOfItems ? _identityMatrix : m.numberOfItems > 1 ? _consolidate(m) : m.getItem(0).matrix; // don't call m.consolidate().matrix because a bug in Firefox makes pointer events not work when consolidate() is called on the same tick as getBoundingClientRect()! See https://gsap.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800
+				x = m.a * b.x + m.c * b.y;
+				y = m.b * b.x + m.d * b.y;
+			} else { // may be a <mask> which has no getBBox() so just use defaults instead of throwing errors.
+				m = new Matrix2D();
+				x = y = 0;
+			}
+			if (adjustGOffset && element.tagName.toLowerCase() === "g") {
+				x = y = 0;
+			}
+			(isRootSVG ? svg : parent).appendChild(container);
+			container.setAttribute("transform", "matrix(" + m.a + "," + m.b + "," + m.c + "," + m.d + "," + (m.e + x) + "," + (m.f + y) + ")");
+		} else {
+			x = y = 0;
+			if (_hasOffsetBug) { // some browsers (like Safari) have a bug that causes them to misreport offset values. When an ancestor element has a transform applied, it's supposed to treat it as if it's position: relative (new context). Safari botches this, so we need to find the closest ancestor (between the element and its offsetParent) that has a transform applied and if one is found, grab its offsetTop/Left and subtract them to compensate.
+				m = element.offsetParent;
+				b = element;
+				while (b && (b = b.parentNode) && b !== m && b.parentNode) {
+					if ((_win.getComputedStyle(b)[_transformProp] + "").length > 4) {
+						x = b.offsetLeft;
+						y = b.offsetTop;
+						b = 0;
+					}
+				}
+			}
+			cs = _win.getComputedStyle(element);
+			if (cs.position !== "absolute" && cs.position !== "fixed") {
+				m = element.offsetParent;
+				while (parent && parent !== m) { // if there's an ancestor element between the element and its offsetParent that's scrolled, we must factor that in.
+					x += parent.scrollLeft || 0;
+					y += parent.scrollTop || 0;
+					parent = parent.parentNode;
+				}
+			}
+			b = container.style;
+			b.top = (element.offsetTop - y) + "px";
+			b.left = (element.offsetLeft - x) + "px";
+			b[_transformProp] = cs[_transformProp];
+			b[_transformOriginProp] = cs[_transformOriginProp];
+			// b.border = m.border;
+			// b.borderLeftStyle = m.borderLeftStyle;
+			// b.borderTopStyle = m.borderTopStyle;
+			// b.borderLeftWidth = m.borderLeftWidth;
+			// b.borderTopWidth = m.borderTopWidth;
+			b.position = cs.position === "fixed" ? "fixed" : "absolute";
+			element.parentNode.appendChild(container);
+		}
+		return container;
+	},
+	_setMatrix = (m, a, b, c, d, e, f) => {
+		m.a = a;
+		m.b = b;
+		m.c = c;
+		m.d = d;
+		m.e = e;
+		m.f = f;
+		return m;
+	};
+
+class Matrix2D {
+	constructor(a=1, b=0, c=0, d=1, e=0, f=0) {
+		_setMatrix(this, a, b, c, d, e, f);
+	}
+
+	inverse() {
+		let {a, b, c, d, e, f} = this,
+			determinant = (a * d - b * c) || 1e-10;
+		return _setMatrix(
+			this,
+			d / determinant,
+			-b / determinant,
+			-c / determinant,
+			a / determinant,
+			(c * f - d * e) / determinant,
+			-(a * f - b * e) / determinant
+		);
+	}
+
+	multiply(matrix) {
+		let {a, b, c, d, e, f} = this,
+			a2 = matrix.a,
+			b2 = matrix.c,
+			c2 = matrix.b,
+			d2 = matrix.d,
+			e2 = matrix.e,
+			f2 = matrix.f;
+		return _setMatrix(this,
+			a2 * a + c2 * c,
+			a2 * b + c2 * d,
+			b2 * a + d2 * c,
+			b2 * b + d2 * d,
+			e + e2 * a + f2 * c,
+			f + e2 * b + f2 * d);
+	}
+
+	clone() {
+		return new Matrix2D(this.a, this.b, this.c, this.d, this.e, this.f);
+	}
+
+	equals(matrix) {
+		let {a, b, c, d, e, f} = this;
+		return (a === matrix.a && b === matrix.b && c === matrix.c && d === matrix.d && e === matrix.e && f === matrix.f);
+	}
+
+	apply(point, decoratee={}) {
+		let {x, y} = point,
+			{a, b, c, d, e, f} = this;
+		decoratee.x = (x * a + y * c + e) || 0;
+		decoratee.y = (x * b + y * d + f) || 0;
+		return decoratee;
+	}
+
+}
+
+// Feed in an element and it'll return a 2D matrix (optionally inverted) so that you can translate between coordinate spaces.
+// Inverting lets you translate a global point into a local coordinate space. No inverting lets you go the other way.
+// We needed this to work around various browser bugs, like Firefox doesn't accurately report getScreenCTM() when there
+// are transforms applied to ancestor elements.
+// The matrix math to convert any x/y coordinate is as follows, which is wrapped in a convenient apply() method of Matrix2D above:
+//     tx = m.a * x + m.c * y + m.e
+//     ty = m.b * x + m.d * y + m.f
+function getGlobalMatrix(element, inverse, adjustGOffset, includeScrollInFixed) { // adjustGOffset is typically used only when grabbing an element's PARENT's global matrix, and it ignores the x/y offset of any SVG <g> elements because they behave in a special way.
+	if (!element || !element.parentNode || (_doc || _setDoc(element)).documentElement === element) {
+		return new Matrix2D();
+	}
+	let zeroScales = _forceNonZeroScale(element),
+		svg = _svgOwner(element),
+		temps = svg ? _svgTemps : _divTemps,
+		container = _placeSiblings(element, adjustGOffset),
+		b1 = temps[0].getBoundingClientRect(),
+		b2 = temps[1].getBoundingClientRect(),
+		b3 = temps[2].getBoundingClientRect(),
+		parent = container.parentNode,
+		isFixed = !includeScrollInFixed && _isFixed(element),
+		m = new Matrix2D(
+			(b2.left - b1.left) / 100,
+			(b2.top - b1.top) / 100,
+			(b3.left - b1.left) / 100,
+			(b3.top - b1.top) / 100,
+			b1.left + (isFixed ? 0 : _getDocScrollLeft()),
+			b1.top + (isFixed ? 0 : _getDocScrollTop())
+		);
+	parent.removeChild(container);
+	if (zeroScales) {
+		b1 = zeroScales.length;
+		while (b1--) {
+			b2 = zeroScales[b1];
+			b2.scaleX = b2.scaleY = 0;
+			b2.renderTransform(1, b2);
+		}
+	}
+	return inverse ? m.inverse() : m;
+}
+
+// export function getMatrix(element) {
+// 	_doc || _setDoc(element);
+// 	let m = (_win.getComputedStyle(element)[_transformProp] + "").substr(7).match(/[-.]*\d+[.e\-+]*\d*[e\-\+]*\d*/g),
+// 		is2D = m && m.length === 6;
+// 	return !m || m.length < 6 ? new Matrix2D() : new Matrix2D(+m[0], +m[1], +m[is2D ? 2 : 4], +m[is2D ? 3 : 5], +m[is2D ? 4 : 12], +m[is2D ? 5 : 13]);
+// }
+
+export { Matrix2D as M, _setDoc as _, _getDocScrollLeft as a, _getDocScrollTop as b, _getCTM as c, getGlobalMatrix as g };
diff --git a/dist/shared/gsap.7b0323e5.d.ts b/dist/shared/gsap.7b0323e5.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..2cbdf0fdbdf57807f5720021650bd9025a160383
--- /dev/null
+++ b/dist/shared/gsap.7b0323e5.d.ts
@@ -0,0 +1,324 @@
+/*!
+ * matrix 3.12.5
+ * https://gsap.com
+ *
+ * Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let _doc, _win, _docElement, _body,	_divContainer, _svgContainer, _identityMatrix, _gEl,
+	_transformProp = "transform",
+	_transformOriginProp = _transformProp + "Origin",
+	_hasOffsetBug,
+	_setDoc = element => {
+		let doc = element.ownerDocument || element;
+		if (!(_transformProp in element.style) && "msTransform" in element.style) { //to improve compatibility with old Microsoft browsers
+			_transformProp = "msTransform";
+			_transformOriginProp = _transformProp + "Origin";
+		}
+		while (doc.parentNode && (doc = doc.parentNode)) {	}
+		_win = window;
+		_identityMatrix = new Matrix2D();
+		if (doc) {
+			_doc = doc;
+			_docElement = doc.documentElement;
+			_body = doc.body;
+			_gEl = _doc.createElementNS("http://www.w3.org/2000/svg", "g");
+			// prevent any existing CSS from transforming it
+			_gEl.style.transform = "none";
+			// now test for the offset reporting bug. Use feature detection instead of browser sniffing to make things more bulletproof and future-proof. Hopefully Safari will fix their bug soon.
+			let d1 = doc.createElement("div"),
+				d2 = doc.createElement("div"),
+				root = doc && (doc.body || doc.firstElementChild);
+			if (root && root.appendChild) {
+				root.appendChild(d1);
+				d1.appendChild(d2);
+				d1.setAttribute("style", "position:static;transform:translate3d(0,0,1px)");
+				_hasOffsetBug = (d2.offsetParent !== d1);
+				root.removeChild(d1);
+			}
+		}
+		return doc;
+	},
+	_forceNonZeroScale = e => { // walks up the element's ancestors and finds any that had their scale set to 0 via GSAP, and changes them to 0.0001 to ensure that measurements work. Firefox has a bug that causes it to incorrectly report getBoundingClientRect() when scale is 0.
+		let a, cache;
+		while (e && e !== _body) {
+			cache = e._gsap;
+			cache && cache.uncache && cache.get(e, "x"); // force re-parsing of transforms if necessary
+			if (cache && !cache.scaleX && !cache.scaleY && cache.renderTransform) {
+				cache.scaleX = cache.scaleY = 1e-4;
+				cache.renderTransform(1, cache);
+				a ? a.push(cache) : (a = [cache]);
+			}
+			e = e.parentNode;
+		}
+		return a;
+	},
+	// possible future addition: pass an element to _forceDisplay() and it'll walk up all its ancestors and make sure anything with display: none is set to display: block, and if there's no parentNode, it'll add it to the body. It returns an Array that you can then feed to _revertDisplay() to have it revert all the changes it made.
+	// _forceDisplay = e => {
+	// 	let a = [],
+	// 		parent;
+	// 	while (e && e !== _body) {
+	// 		parent = e.parentNode;
+	// 		(_win.getComputedStyle(e).display === "none" || !parent) && a.push(e, e.style.display, parent) && (e.style.display = "block");
+	// 		parent || _body.appendChild(e);
+	// 		e = parent;
+	// 	}
+	// 	return a;
+	// },
+	// _revertDisplay = a => {
+	// 	for (let i = 0; i < a.length; i+=3) {
+	// 		a[i+1] ? (a[i].style.display = a[i+1]) : a[i].style.removeProperty("display");
+	// 		a[i+2] || a[i].parentNode.removeChild(a[i]);
+	// 	}
+	// },
+	_svgTemps = [], //we create 3 elements for SVG, and 3 for other DOM elements and cache them for performance reasons. They get nested in _divContainer and _svgContainer so that just one element is added to the DOM on each successive attempt. Again, performance is key.
+	_divTemps = [],
+	_getDocScrollTop = () => _win.pageYOffset  || _doc.scrollTop || _docElement.scrollTop || _body.scrollTop || 0,
+	_getDocScrollLeft = () => _win.pageXOffset || _doc.scrollLeft || _docElement.scrollLeft || _body.scrollLeft || 0,
+	_svgOwner = element => element.ownerSVGElement || ((element.tagName + "").toLowerCase() === "svg" ? element : null),
+	_isFixed = element => {
+		if (_win.getComputedStyle(element).position === "fixed") {
+			return true;
+		}
+		element = element.parentNode;
+		if (element && element.nodeType === 1) { // avoid document fragments which will throw an error.
+			return _isFixed(element);
+		}
+	},
+	_createSibling = (element, i) => {
+		if (element.parentNode && (_doc || _setDoc(element))) {
+			let svg = _svgOwner(element),
+				ns = svg ? (svg.getAttribute("xmlns") || "http://www.w3.org/2000/svg") : "http://www.w3.org/1999/xhtml",
+				type = svg ? (i ? "rect" : "g") : "div",
+				x = i !== 2 ? 0 : 100,
+				y = i === 3 ? 100 : 0,
+				css = "position:absolute;display:block;pointer-events:none;margin:0;padding:0;",
+				e = _doc.createElementNS ? _doc.createElementNS(ns.replace(/^https/, "http"), type) : _doc.createElement(type);
+			if (i) {
+				if (!svg) {
+					if (!_divContainer) {
+						_divContainer = _createSibling(element);
+						_divContainer.style.cssText = css;
+					}
+					e.style.cssText = css + "width:0.1px;height:0.1px;top:" + y + "px;left:" + x + "px";
+					_divContainer.appendChild(e);
+
+				} else {
+					_svgContainer || (_svgContainer = _createSibling(element));
+					e.setAttribute("width", 0.01);
+					e.setAttribute("height", 0.01);
+					e.setAttribute("transform", "translate(" + x + "," + y + ")");
+					_svgContainer.appendChild(e);
+				}
+			}
+			return e;
+		}
+		throw "Need document and parent.";
+	},
+	_consolidate = m => { // replaces SVGTransformList.consolidate() because a bug in Firefox causes it to break pointer events. See https://gsap.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800
+		let c = new Matrix2D(),
+			i = 0;
+		for (; i < m.numberOfItems; i++) {
+			c.multiply(m.getItem(i).matrix);
+		}
+		return c;
+	},
+	_getCTM = svg => {
+		let m = svg.getCTM(),
+			transform;
+		if (!m) { // Firefox returns null for getCTM() on root <svg> elements, so this is a workaround using a <g> that we temporarily append.
+			transform = svg.style[_transformProp];
+			svg.style[_transformProp] = "none"; // a bug in Firefox causes css transforms to contaminate the getCTM()
+			svg.appendChild(_gEl);
+			m = _gEl.getCTM();
+			svg.removeChild(_gEl);
+			transform ? (svg.style[_transformProp] = transform) : svg.style.removeProperty(_transformProp.replace(/([A-Z])/g, "-$1").toLowerCase());
+		}
+		return m || _identityMatrix.clone(); // Firefox will still return null if the <svg> has a width/height of 0 in the browser.
+	},
+	_placeSiblings = (element, adjustGOffset) => {
+		let svg = _svgOwner(element),
+			isRootSVG = element === svg,
+			siblings = svg ? _svgTemps : _divTemps,
+			parent = element.parentNode,
+			container, m, b, x, y, cs;
+		if (element === _win) {
+			return element;
+		}
+		siblings.length || siblings.push(_createSibling(element, 1), _createSibling(element, 2), _createSibling(element, 3));
+		container = svg ? _svgContainer : _divContainer;
+		if (svg) {
+			if (isRootSVG) {
+				b = _getCTM(element);
+				x = -b.e / b.a;
+				y = -b.f / b.d;
+				m = _identityMatrix;
+			} else if (element.getBBox) {
+				b = element.getBBox();
+				m = element.transform ? element.transform.baseVal : {}; // IE11 doesn't follow the spec.
+				m = !m.numberOfItems ? _identityMatrix : m.numberOfItems > 1 ? _consolidate(m) : m.getItem(0).matrix; // don't call m.consolidate().matrix because a bug in Firefox makes pointer events not work when consolidate() is called on the same tick as getBoundingClientRect()! See https://gsap.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800
+				x = m.a * b.x + m.c * b.y;
+				y = m.b * b.x + m.d * b.y;
+			} else { // may be a <mask> which has no getBBox() so just use defaults instead of throwing errors.
+				m = new Matrix2D();
+				x = y = 0;
+			}
+			if (adjustGOffset && element.tagName.toLowerCase() === "g") {
+				x = y = 0;
+			}
+			(isRootSVG ? svg : parent).appendChild(container);
+			container.setAttribute("transform", "matrix(" + m.a + "," + m.b + "," + m.c + "," + m.d + "," + (m.e + x) + "," + (m.f + y) + ")");
+		} else {
+			x = y = 0;
+			if (_hasOffsetBug) { // some browsers (like Safari) have a bug that causes them to misreport offset values. When an ancestor element has a transform applied, it's supposed to treat it as if it's position: relative (new context). Safari botches this, so we need to find the closest ancestor (between the element and its offsetParent) that has a transform applied and if one is found, grab its offsetTop/Left and subtract them to compensate.
+				m = element.offsetParent;
+				b = element;
+				while (b && (b = b.parentNode) && b !== m && b.parentNode) {
+					if ((_win.getComputedStyle(b)[_transformProp] + "").length > 4) {
+						x = b.offsetLeft;
+						y = b.offsetTop;
+						b = 0;
+					}
+				}
+			}
+			cs = _win.getComputedStyle(element);
+			if (cs.position !== "absolute" && cs.position !== "fixed") {
+				m = element.offsetParent;
+				while (parent && parent !== m) { // if there's an ancestor element between the element and its offsetParent that's scrolled, we must factor that in.
+					x += parent.scrollLeft || 0;
+					y += parent.scrollTop || 0;
+					parent = parent.parentNode;
+				}
+			}
+			b = container.style;
+			b.top = (element.offsetTop - y) + "px";
+			b.left = (element.offsetLeft - x) + "px";
+			b[_transformProp] = cs[_transformProp];
+			b[_transformOriginProp] = cs[_transformOriginProp];
+			// b.border = m.border;
+			// b.borderLeftStyle = m.borderLeftStyle;
+			// b.borderTopStyle = m.borderTopStyle;
+			// b.borderLeftWidth = m.borderLeftWidth;
+			// b.borderTopWidth = m.borderTopWidth;
+			b.position = cs.position === "fixed" ? "fixed" : "absolute";
+			element.parentNode.appendChild(container);
+		}
+		return container;
+	},
+	_setMatrix = (m, a, b, c, d, e, f) => {
+		m.a = a;
+		m.b = b;
+		m.c = c;
+		m.d = d;
+		m.e = e;
+		m.f = f;
+		return m;
+	};
+
+class Matrix2D {
+	constructor(a=1, b=0, c=0, d=1, e=0, f=0) {
+		_setMatrix(this, a, b, c, d, e, f);
+	}
+
+	inverse() {
+		let {a, b, c, d, e, f} = this,
+			determinant = (a * d - b * c) || 1e-10;
+		return _setMatrix(
+			this,
+			d / determinant,
+			-b / determinant,
+			-c / determinant,
+			a / determinant,
+			(c * f - d * e) / determinant,
+			-(a * f - b * e) / determinant
+		);
+	}
+
+	multiply(matrix) {
+		let {a, b, c, d, e, f} = this,
+			a2 = matrix.a,
+			b2 = matrix.c,
+			c2 = matrix.b,
+			d2 = matrix.d,
+			e2 = matrix.e,
+			f2 = matrix.f;
+		return _setMatrix(this,
+			a2 * a + c2 * c,
+			a2 * b + c2 * d,
+			b2 * a + d2 * c,
+			b2 * b + d2 * d,
+			e + e2 * a + f2 * c,
+			f + e2 * b + f2 * d);
+	}
+
+	clone() {
+		return new Matrix2D(this.a, this.b, this.c, this.d, this.e, this.f);
+	}
+
+	equals(matrix) {
+		let {a, b, c, d, e, f} = this;
+		return (a === matrix.a && b === matrix.b && c === matrix.c && d === matrix.d && e === matrix.e && f === matrix.f);
+	}
+
+	apply(point, decoratee={}) {
+		let {x, y} = point,
+			{a, b, c, d, e, f} = this;
+		decoratee.x = (x * a + y * c + e) || 0;
+		decoratee.y = (x * b + y * d + f) || 0;
+		return decoratee;
+	}
+
+}
+
+// Feed in an element and it'll return a 2D matrix (optionally inverted) so that you can translate between coordinate spaces.
+// Inverting lets you translate a global point into a local coordinate space. No inverting lets you go the other way.
+// We needed this to work around various browser bugs, like Firefox doesn't accurately report getScreenCTM() when there
+// are transforms applied to ancestor elements.
+// The matrix math to convert any x/y coordinate is as follows, which is wrapped in a convenient apply() method of Matrix2D above:
+//     tx = m.a * x + m.c * y + m.e
+//     ty = m.b * x + m.d * y + m.f
+function getGlobalMatrix(element, inverse, adjustGOffset, includeScrollInFixed) { // adjustGOffset is typically used only when grabbing an element's PARENT's global matrix, and it ignores the x/y offset of any SVG <g> elements because they behave in a special way.
+	if (!element || !element.parentNode || (_doc || _setDoc(element)).documentElement === element) {
+		return new Matrix2D();
+	}
+	let zeroScales = _forceNonZeroScale(element),
+		svg = _svgOwner(element),
+		temps = svg ? _svgTemps : _divTemps,
+		container = _placeSiblings(element, adjustGOffset),
+		b1 = temps[0].getBoundingClientRect(),
+		b2 = temps[1].getBoundingClientRect(),
+		b3 = temps[2].getBoundingClientRect(),
+		parent = container.parentNode,
+		isFixed = !includeScrollInFixed && _isFixed(element),
+		m = new Matrix2D(
+			(b2.left - b1.left) / 100,
+			(b2.top - b1.top) / 100,
+			(b3.left - b1.left) / 100,
+			(b3.top - b1.top) / 100,
+			b1.left + (isFixed ? 0 : _getDocScrollLeft()),
+			b1.top + (isFixed ? 0 : _getDocScrollTop())
+		);
+	parent.removeChild(container);
+	if (zeroScales) {
+		b1 = zeroScales.length;
+		while (b1--) {
+			b2 = zeroScales[b1];
+			b2.scaleX = b2.scaleY = 0;
+			b2.renderTransform(1, b2);
+		}
+	}
+	return inverse ? m.inverse() : m;
+}
+
+// export function getMatrix(element) {
+// 	_doc || _setDoc(element);
+// 	let m = (_win.getComputedStyle(element)[_transformProp] + "").substr(7).match(/[-.]*\d+[.e\-+]*\d*[e\-\+]*\d*/g),
+// 		is2D = m && m.length === 6;
+// 	return !m || m.length < 6 ? new Matrix2D() : new Matrix2D(+m[0], +m[1], +m[is2D ? 2 : 4], +m[is2D ? 3 : 5], +m[is2D ? 4 : 12], +m[is2D ? 5 : 13]);
+// }
+
+export { Matrix2D as M, _setDoc as _, _getDocScrollLeft as a, _getDocScrollTop as b, _getCTM as c, getGlobalMatrix as g };
diff --git a/dist/shared/gsap.7b0323e5.mjs b/dist/shared/gsap.7b0323e5.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..2cbdf0fdbdf57807f5720021650bd9025a160383
--- /dev/null
+++ b/dist/shared/gsap.7b0323e5.mjs
@@ -0,0 +1,324 @@
+/*!
+ * matrix 3.12.5
+ * https://gsap.com
+ *
+ * Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let _doc, _win, _docElement, _body,	_divContainer, _svgContainer, _identityMatrix, _gEl,
+	_transformProp = "transform",
+	_transformOriginProp = _transformProp + "Origin",
+	_hasOffsetBug,
+	_setDoc = element => {
+		let doc = element.ownerDocument || element;
+		if (!(_transformProp in element.style) && "msTransform" in element.style) { //to improve compatibility with old Microsoft browsers
+			_transformProp = "msTransform";
+			_transformOriginProp = _transformProp + "Origin";
+		}
+		while (doc.parentNode && (doc = doc.parentNode)) {	}
+		_win = window;
+		_identityMatrix = new Matrix2D();
+		if (doc) {
+			_doc = doc;
+			_docElement = doc.documentElement;
+			_body = doc.body;
+			_gEl = _doc.createElementNS("http://www.w3.org/2000/svg", "g");
+			// prevent any existing CSS from transforming it
+			_gEl.style.transform = "none";
+			// now test for the offset reporting bug. Use feature detection instead of browser sniffing to make things more bulletproof and future-proof. Hopefully Safari will fix their bug soon.
+			let d1 = doc.createElement("div"),
+				d2 = doc.createElement("div"),
+				root = doc && (doc.body || doc.firstElementChild);
+			if (root && root.appendChild) {
+				root.appendChild(d1);
+				d1.appendChild(d2);
+				d1.setAttribute("style", "position:static;transform:translate3d(0,0,1px)");
+				_hasOffsetBug = (d2.offsetParent !== d1);
+				root.removeChild(d1);
+			}
+		}
+		return doc;
+	},
+	_forceNonZeroScale = e => { // walks up the element's ancestors and finds any that had their scale set to 0 via GSAP, and changes them to 0.0001 to ensure that measurements work. Firefox has a bug that causes it to incorrectly report getBoundingClientRect() when scale is 0.
+		let a, cache;
+		while (e && e !== _body) {
+			cache = e._gsap;
+			cache && cache.uncache && cache.get(e, "x"); // force re-parsing of transforms if necessary
+			if (cache && !cache.scaleX && !cache.scaleY && cache.renderTransform) {
+				cache.scaleX = cache.scaleY = 1e-4;
+				cache.renderTransform(1, cache);
+				a ? a.push(cache) : (a = [cache]);
+			}
+			e = e.parentNode;
+		}
+		return a;
+	},
+	// possible future addition: pass an element to _forceDisplay() and it'll walk up all its ancestors and make sure anything with display: none is set to display: block, and if there's no parentNode, it'll add it to the body. It returns an Array that you can then feed to _revertDisplay() to have it revert all the changes it made.
+	// _forceDisplay = e => {
+	// 	let a = [],
+	// 		parent;
+	// 	while (e && e !== _body) {
+	// 		parent = e.parentNode;
+	// 		(_win.getComputedStyle(e).display === "none" || !parent) && a.push(e, e.style.display, parent) && (e.style.display = "block");
+	// 		parent || _body.appendChild(e);
+	// 		e = parent;
+	// 	}
+	// 	return a;
+	// },
+	// _revertDisplay = a => {
+	// 	for (let i = 0; i < a.length; i+=3) {
+	// 		a[i+1] ? (a[i].style.display = a[i+1]) : a[i].style.removeProperty("display");
+	// 		a[i+2] || a[i].parentNode.removeChild(a[i]);
+	// 	}
+	// },
+	_svgTemps = [], //we create 3 elements for SVG, and 3 for other DOM elements and cache them for performance reasons. They get nested in _divContainer and _svgContainer so that just one element is added to the DOM on each successive attempt. Again, performance is key.
+	_divTemps = [],
+	_getDocScrollTop = () => _win.pageYOffset  || _doc.scrollTop || _docElement.scrollTop || _body.scrollTop || 0,
+	_getDocScrollLeft = () => _win.pageXOffset || _doc.scrollLeft || _docElement.scrollLeft || _body.scrollLeft || 0,
+	_svgOwner = element => element.ownerSVGElement || ((element.tagName + "").toLowerCase() === "svg" ? element : null),
+	_isFixed = element => {
+		if (_win.getComputedStyle(element).position === "fixed") {
+			return true;
+		}
+		element = element.parentNode;
+		if (element && element.nodeType === 1) { // avoid document fragments which will throw an error.
+			return _isFixed(element);
+		}
+	},
+	_createSibling = (element, i) => {
+		if (element.parentNode && (_doc || _setDoc(element))) {
+			let svg = _svgOwner(element),
+				ns = svg ? (svg.getAttribute("xmlns") || "http://www.w3.org/2000/svg") : "http://www.w3.org/1999/xhtml",
+				type = svg ? (i ? "rect" : "g") : "div",
+				x = i !== 2 ? 0 : 100,
+				y = i === 3 ? 100 : 0,
+				css = "position:absolute;display:block;pointer-events:none;margin:0;padding:0;",
+				e = _doc.createElementNS ? _doc.createElementNS(ns.replace(/^https/, "http"), type) : _doc.createElement(type);
+			if (i) {
+				if (!svg) {
+					if (!_divContainer) {
+						_divContainer = _createSibling(element);
+						_divContainer.style.cssText = css;
+					}
+					e.style.cssText = css + "width:0.1px;height:0.1px;top:" + y + "px;left:" + x + "px";
+					_divContainer.appendChild(e);
+
+				} else {
+					_svgContainer || (_svgContainer = _createSibling(element));
+					e.setAttribute("width", 0.01);
+					e.setAttribute("height", 0.01);
+					e.setAttribute("transform", "translate(" + x + "," + y + ")");
+					_svgContainer.appendChild(e);
+				}
+			}
+			return e;
+		}
+		throw "Need document and parent.";
+	},
+	_consolidate = m => { // replaces SVGTransformList.consolidate() because a bug in Firefox causes it to break pointer events. See https://gsap.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800
+		let c = new Matrix2D(),
+			i = 0;
+		for (; i < m.numberOfItems; i++) {
+			c.multiply(m.getItem(i).matrix);
+		}
+		return c;
+	},
+	_getCTM = svg => {
+		let m = svg.getCTM(),
+			transform;
+		if (!m) { // Firefox returns null for getCTM() on root <svg> elements, so this is a workaround using a <g> that we temporarily append.
+			transform = svg.style[_transformProp];
+			svg.style[_transformProp] = "none"; // a bug in Firefox causes css transforms to contaminate the getCTM()
+			svg.appendChild(_gEl);
+			m = _gEl.getCTM();
+			svg.removeChild(_gEl);
+			transform ? (svg.style[_transformProp] = transform) : svg.style.removeProperty(_transformProp.replace(/([A-Z])/g, "-$1").toLowerCase());
+		}
+		return m || _identityMatrix.clone(); // Firefox will still return null if the <svg> has a width/height of 0 in the browser.
+	},
+	_placeSiblings = (element, adjustGOffset) => {
+		let svg = _svgOwner(element),
+			isRootSVG = element === svg,
+			siblings = svg ? _svgTemps : _divTemps,
+			parent = element.parentNode,
+			container, m, b, x, y, cs;
+		if (element === _win) {
+			return element;
+		}
+		siblings.length || siblings.push(_createSibling(element, 1), _createSibling(element, 2), _createSibling(element, 3));
+		container = svg ? _svgContainer : _divContainer;
+		if (svg) {
+			if (isRootSVG) {
+				b = _getCTM(element);
+				x = -b.e / b.a;
+				y = -b.f / b.d;
+				m = _identityMatrix;
+			} else if (element.getBBox) {
+				b = element.getBBox();
+				m = element.transform ? element.transform.baseVal : {}; // IE11 doesn't follow the spec.
+				m = !m.numberOfItems ? _identityMatrix : m.numberOfItems > 1 ? _consolidate(m) : m.getItem(0).matrix; // don't call m.consolidate().matrix because a bug in Firefox makes pointer events not work when consolidate() is called on the same tick as getBoundingClientRect()! See https://gsap.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800
+				x = m.a * b.x + m.c * b.y;
+				y = m.b * b.x + m.d * b.y;
+			} else { // may be a <mask> which has no getBBox() so just use defaults instead of throwing errors.
+				m = new Matrix2D();
+				x = y = 0;
+			}
+			if (adjustGOffset && element.tagName.toLowerCase() === "g") {
+				x = y = 0;
+			}
+			(isRootSVG ? svg : parent).appendChild(container);
+			container.setAttribute("transform", "matrix(" + m.a + "," + m.b + "," + m.c + "," + m.d + "," + (m.e + x) + "," + (m.f + y) + ")");
+		} else {
+			x = y = 0;
+			if (_hasOffsetBug) { // some browsers (like Safari) have a bug that causes them to misreport offset values. When an ancestor element has a transform applied, it's supposed to treat it as if it's position: relative (new context). Safari botches this, so we need to find the closest ancestor (between the element and its offsetParent) that has a transform applied and if one is found, grab its offsetTop/Left and subtract them to compensate.
+				m = element.offsetParent;
+				b = element;
+				while (b && (b = b.parentNode) && b !== m && b.parentNode) {
+					if ((_win.getComputedStyle(b)[_transformProp] + "").length > 4) {
+						x = b.offsetLeft;
+						y = b.offsetTop;
+						b = 0;
+					}
+				}
+			}
+			cs = _win.getComputedStyle(element);
+			if (cs.position !== "absolute" && cs.position !== "fixed") {
+				m = element.offsetParent;
+				while (parent && parent !== m) { // if there's an ancestor element between the element and its offsetParent that's scrolled, we must factor that in.
+					x += parent.scrollLeft || 0;
+					y += parent.scrollTop || 0;
+					parent = parent.parentNode;
+				}
+			}
+			b = container.style;
+			b.top = (element.offsetTop - y) + "px";
+			b.left = (element.offsetLeft - x) + "px";
+			b[_transformProp] = cs[_transformProp];
+			b[_transformOriginProp] = cs[_transformOriginProp];
+			// b.border = m.border;
+			// b.borderLeftStyle = m.borderLeftStyle;
+			// b.borderTopStyle = m.borderTopStyle;
+			// b.borderLeftWidth = m.borderLeftWidth;
+			// b.borderTopWidth = m.borderTopWidth;
+			b.position = cs.position === "fixed" ? "fixed" : "absolute";
+			element.parentNode.appendChild(container);
+		}
+		return container;
+	},
+	_setMatrix = (m, a, b, c, d, e, f) => {
+		m.a = a;
+		m.b = b;
+		m.c = c;
+		m.d = d;
+		m.e = e;
+		m.f = f;
+		return m;
+	};
+
+class Matrix2D {
+	constructor(a=1, b=0, c=0, d=1, e=0, f=0) {
+		_setMatrix(this, a, b, c, d, e, f);
+	}
+
+	inverse() {
+		let {a, b, c, d, e, f} = this,
+			determinant = (a * d - b * c) || 1e-10;
+		return _setMatrix(
+			this,
+			d / determinant,
+			-b / determinant,
+			-c / determinant,
+			a / determinant,
+			(c * f - d * e) / determinant,
+			-(a * f - b * e) / determinant
+		);
+	}
+
+	multiply(matrix) {
+		let {a, b, c, d, e, f} = this,
+			a2 = matrix.a,
+			b2 = matrix.c,
+			c2 = matrix.b,
+			d2 = matrix.d,
+			e2 = matrix.e,
+			f2 = matrix.f;
+		return _setMatrix(this,
+			a2 * a + c2 * c,
+			a2 * b + c2 * d,
+			b2 * a + d2 * c,
+			b2 * b + d2 * d,
+			e + e2 * a + f2 * c,
+			f + e2 * b + f2 * d);
+	}
+
+	clone() {
+		return new Matrix2D(this.a, this.b, this.c, this.d, this.e, this.f);
+	}
+
+	equals(matrix) {
+		let {a, b, c, d, e, f} = this;
+		return (a === matrix.a && b === matrix.b && c === matrix.c && d === matrix.d && e === matrix.e && f === matrix.f);
+	}
+
+	apply(point, decoratee={}) {
+		let {x, y} = point,
+			{a, b, c, d, e, f} = this;
+		decoratee.x = (x * a + y * c + e) || 0;
+		decoratee.y = (x * b + y * d + f) || 0;
+		return decoratee;
+	}
+
+}
+
+// Feed in an element and it'll return a 2D matrix (optionally inverted) so that you can translate between coordinate spaces.
+// Inverting lets you translate a global point into a local coordinate space. No inverting lets you go the other way.
+// We needed this to work around various browser bugs, like Firefox doesn't accurately report getScreenCTM() when there
+// are transforms applied to ancestor elements.
+// The matrix math to convert any x/y coordinate is as follows, which is wrapped in a convenient apply() method of Matrix2D above:
+//     tx = m.a * x + m.c * y + m.e
+//     ty = m.b * x + m.d * y + m.f
+function getGlobalMatrix(element, inverse, adjustGOffset, includeScrollInFixed) { // adjustGOffset is typically used only when grabbing an element's PARENT's global matrix, and it ignores the x/y offset of any SVG <g> elements because they behave in a special way.
+	if (!element || !element.parentNode || (_doc || _setDoc(element)).documentElement === element) {
+		return new Matrix2D();
+	}
+	let zeroScales = _forceNonZeroScale(element),
+		svg = _svgOwner(element),
+		temps = svg ? _svgTemps : _divTemps,
+		container = _placeSiblings(element, adjustGOffset),
+		b1 = temps[0].getBoundingClientRect(),
+		b2 = temps[1].getBoundingClientRect(),
+		b3 = temps[2].getBoundingClientRect(),
+		parent = container.parentNode,
+		isFixed = !includeScrollInFixed && _isFixed(element),
+		m = new Matrix2D(
+			(b2.left - b1.left) / 100,
+			(b2.top - b1.top) / 100,
+			(b3.left - b1.left) / 100,
+			(b3.top - b1.top) / 100,
+			b1.left + (isFixed ? 0 : _getDocScrollLeft()),
+			b1.top + (isFixed ? 0 : _getDocScrollTop())
+		);
+	parent.removeChild(container);
+	if (zeroScales) {
+		b1 = zeroScales.length;
+		while (b1--) {
+			b2 = zeroScales[b1];
+			b2.scaleX = b2.scaleY = 0;
+			b2.renderTransform(1, b2);
+		}
+	}
+	return inverse ? m.inverse() : m;
+}
+
+// export function getMatrix(element) {
+// 	_doc || _setDoc(element);
+// 	let m = (_win.getComputedStyle(element)[_transformProp] + "").substr(7).match(/[-.]*\d+[.e\-+]*\d*[e\-\+]*\d*/g),
+// 		is2D = m && m.length === 6;
+// 	return !m || m.length < 6 ? new Matrix2D() : new Matrix2D(+m[0], +m[1], +m[is2D ? 2 : 4], +m[is2D ? 3 : 5], +m[is2D ? 4 : 12], +m[is2D ? 5 : 13]);
+// }
+
+export { Matrix2D as M, _setDoc as _, _getDocScrollLeft as a, _getDocScrollTop as b, _getCTM as c, getGlobalMatrix as g };
diff --git a/src/utils/paths.js b/dist/shared/gsap.82b47a43.cjs
similarity index 85%
rename from src/utils/paths.js
rename to dist/shared/gsap.82b47a43.cjs
index 26c2c03b27950273e6aa462340093d50fcdd19f5..fd03a1ffb3bd3fea5e8b8bb0660dc27392c4b11b 100644
--- a/src/utils/paths.js
+++ b/dist/shared/gsap.82b47a43.cjs
@@ -1,3 +1,5 @@
+'use strict';
+
 /*!
  * paths 3.12.5
  * https://gsap.com
@@ -80,8 +82,7 @@ let _svgPathExp = /[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
 			index--;
 		}
 		rawPath[index] = segment;
-	},
-	_bestDistance;
+	};
 
 /* TERMINOLOGY
  - RawPath - an array of arrays, one for each Segment. A single RawPath could have multiple "M" commands, defining Segments (paths aren't always connected).
@@ -91,7 +92,7 @@ let _svgPathExp = /[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
  */
 
 //accepts basic selector text, a path instance, a RawPath instance, or a Segment and returns a RawPath (makes it easy to homogenize things). If an element or selector text is passed in, it'll also cache the value so that if it's queried again, it'll just take the path data from there instead of parsing it all over again (as long as the path data itself hasn't changed - it'll check).
-export function getRawPath(value) {
+function getRawPath(value) {
 	value = (_isString(value) && _selectorExp.test(value)) ? document.querySelector(value) || value : value;
 	let e = value.getAttribute ? value : 0,
 		rawPath;
@@ -107,7 +108,7 @@ export function getRawPath(value) {
 }
 
 //copies a RawPath WITHOUT the length meta data (for speed)
-export function copyRawPath(rawPath) {
+function copyRawPath(rawPath) {
 	let a = [],
 		i = 0;
 	for (; i < rawPath.length; i++) {
@@ -116,7 +117,7 @@ export function copyRawPath(rawPath) {
 	return _copyMetaData(rawPath, a);
 }
 
-export function reverseSegment(segment) {
+function reverseSegment(segment) {
 	let i = 0,
 		y;
 	segment.reverse(); //this will invert the order y, x, y, x so we must flip it back.
@@ -161,7 +162,7 @@ let _createPath = (e, ignore) => {
 	};
 
 //converts an SVG shape like <circle>, <rect>, <polygon>, <polyline>, <ellipse>, etc. to a <path>, swapping it in and copying the attributes to match.
-export function convertToPath(element, swap) {
+function convertToPath(element, swap) {
 	let type = element.tagName.toLowerCase(),
 		circ = 0.552284749831,
 		data, x, y, r, ry, path, rcirc, rycirc, points, w, h, x2, x3, x4, x5, x6, y2, y3, y4, y5, y6, attr;
@@ -225,14 +226,6 @@ export function convertToPath(element, swap) {
 	return path;
 }
 
-
-
-//returns the rotation (in degrees) at a particular progress on a rawPath (the slope of the tangent)
-export function getRotationAtProgress(rawPath, progress) {
-	let d = getProgressData(rawPath, progress >= 1 ? 1 - 1e-9 : progress ? progress : 1e-9);
-	return getRotationAtBezierT(d.segment, d.i, d.t);
-}
-
 function getRotationAtBezierT(segment, i, t) {
 	let a = segment[i],
 		b = segment[i+2],
@@ -251,7 +244,7 @@ function getRotationAtBezierT(segment, i, t) {
 	return _round(_atan2(b + ((c + (segment[i+7] - c) * t) - b) * t - a, x) * _RAD2DEG);
 }
 
-export function sliceRawPath(rawPath, start, end) {
+function sliceRawPath(rawPath, start, end) {
 	end = _isUndefined(end) ? 1 : _roundPrecise(end) || 0; // we must round to avoid issues like 4.15 / 8 = 0.8300000000000001 instead of 0.83 or 2.8 / 5 = 0.5599999999999999 instead of 0.56 and if someone is doing a loop like start: 2.8 / 0.5, end: 2.8 / 0.5 + 1.
 	start = _roundPrecise(start) || 0;
 	let loops = Math.max(0, ~~(_abs(end - start) - 1e-8)),
@@ -411,7 +404,7 @@ function measureSegment(segment, startIndex, bezierQty) {
 	return startIndex ? length - samples[startIndex / 2 - 1] : length;
 }
 
-export function cacheRawPathMeasurements(rawPath, resolution) {
+function cacheRawPathMeasurements(rawPath, resolution) {
 	let pathLength, points, i;
 	for (i = pathLength = points = 0; i < rawPath.length; i++) {
 		rawPath[i].resolution = ~~resolution || 12; //steps per Bezier curve (anchor, 2 control points, to anchor)
@@ -424,7 +417,7 @@ export function cacheRawPathMeasurements(rawPath, resolution) {
 }
 
 //divide segment[i] at position t (value between 0 and 1, progress along that particular cubic bezier segment that starts at segment[i]). Returns how many elements were spliced into the segment array (either 0 or 6)
-export function subdivideSegment(segment, i, t) {
+function subdivideSegment(segment, i, t) {
 	if (t <= 0 || t >= 1) {
 		return 0;
 	}
@@ -521,7 +514,7 @@ function getProgressData(rawPath, progress, decoratee, pushToNextIfAtEnd) {
 	return decoratee;
 }
 
-export function getPositionOnPath(rawPath, progress, includeAngle, point) {
+function getPositionOnPath(rawPath, progress, includeAngle, point) {
 	let segment = rawPath[0],
 		result = point || {},
 		samples, resolution, length, min, max, i, t, a, inv;
@@ -563,7 +556,7 @@ export function getPositionOnPath(rawPath, progress, includeAngle, point) {
 
 
 //applies a matrix transform to RawPath (or a segment in a RawPath) and returns whatever was passed in (it transforms the values in the array(s), not a copy).
-export function transformRawPath(rawPath, a, b, c, d, tx, ty) {
+function transformRawPath(rawPath, a, b, c, d, tx, ty) {
 	let j = rawPath.length,
 		segment, l, i, x, y;
 	while (--j > -1) {
@@ -663,7 +656,7 @@ function arcToSegment(lastX, lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y
 }
 
 //Spits back a RawPath with absolute coordinates. Each segment starts with a "moveTo" command (x coordinate, then y) and then 2 control points (x, y, x, y), then anchor. The goal is to minimize memory and maximize speed.
-export function stringToRawPath(d) {
+function stringToRawPath(d) {
 	let a = (d + "").replace(_scientific, m => { let n = +m; return (n < 0.0001 && n > -0.0001) ? 0 : n; }).match(_svgPathExp) || [], //some authoring programs spit out very small numbers in scientific notation like "1e-5", so make sure we round that down to 0 first.
 		path = [],
 		relativeX = 0,
@@ -834,38 +827,6 @@ export function stringToRawPath(d) {
 	return path;
 }
 
-//populates the points array in alternating x/y values (like [x, y, x, y...] instead of individual point objects [{x, y}, {x, y}...] to conserve memory and stay in line with how we're handling segment arrays
-export function bezierToPoints(x1, y1, x2, y2, x3, y3, x4, y4, threshold, points, index) {
-	let x12 = (x1 + x2) / 2,
-		y12 = (y1 + y2) / 2,
-		x23 = (x2 + x3) / 2,
-		y23 = (y2 + y3) / 2,
-		x34 = (x3 + x4) / 2,
-		y34 = (y3 + y4) / 2,
-		x123 = (x12 + x23) / 2,
-		y123 = (y12 + y23) / 2,
-		x234 = (x23 + x34) / 2,
-		y234 = (y23 + y34) / 2,
-		x1234 = (x123 + x234) / 2,
-		y1234 = (y123 + y234) / 2,
-		dx = x4 - x1,
-		dy = y4 - y1,
-		d2 = _abs((x2 - x4) * dy - (y2 - y4) * dx),
-		d3 = _abs((x3 - x4) * dy - (y3 - y4) * dx),
-		length;
-	if (!points) {
-		points = [x1, y1, x4, y4];
-		index = 2;
-	}
-	points.splice(index || points.length - 2, 0, x1234, y1234);
-	if ((d2 + d3) * (d2 + d3) > threshold * (dx * dx + dy * dy)) {
-		length = points.length;
-		bezierToPoints(x1, y1, x12, y12, x123, y123, x1234, y1234, threshold, points, index);
-		bezierToPoints(x1234, y1234, x234, y234, x34, y34, x4, y4, threshold, points, index + 2 + (points.length - length));
-	}
-	return points;
-}
-
 /*
 function getAngleBetweenPoints(x0, y0, x1, y1, x2, y2) { //angle between 3 points in radians
 	var dx1 = x1 - x0,
@@ -882,7 +843,7 @@ function getAngleBetweenPoints(x0, y0, x1, y1, x2, y2) { //angle between 3 point
 */
 
 //pointsToSegment() doesn't handle flat coordinates (where y is always 0) the way we need (the resulting control points are always right on top of the anchors), so this function basically makes the control points go directly up and down, varying in length based on the curviness (more curvy, further control points)
-export function flatPointsToSegment(points, curviness=1) {
+function flatPointsToSegment(points, curviness=1) {
 	let x = points[0],
 		y = 0,
 		segment = [x, y],
@@ -901,7 +862,7 @@ export function flatPointsToSegment(points, curviness=1) {
 }
 
 //points is an array of x/y points, like [x, y, x, y, x, y]
-export function pointsToSegment(points, curviness) {
+function pointsToSegment(points, curviness) {
 	//points = simplifyPoints(points, tolerance);
 	_abs(points[0] - points[2]) < 1e-4 && _abs(points[1] - points[3]) < 1e-4 && (points = points.slice(2)); // if the first two points are super close, dump the first one.
 	let l = points.length-2,
@@ -969,135 +930,6 @@ export function pointsToSegment(points, curviness) {
 	return segment;
 }
 
-//returns the squared distance between an x/y coordinate and a segment between x1/y1 and x2/y2
-function pointToSegDist(x, y, x1, y1, x2, y2) {
-	let dx = x2 - x1,
-		dy = y2 - y1,
-		t;
-	if (dx || dy) {
-		t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
-		if (t > 1) {
-			x1 = x2;
-			y1 = y2;
-		} else if (t > 0) {
-			x1 += dx * t;
-			y1 += dy * t;
-		}
-	}
-	return (x - x1) ** 2 + (y - y1) ** 2;
-}
-
-function simplifyStep(points, first, last, tolerance, simplified) {
-	let maxSqDist = tolerance,
-		firstX = points[first],
-		firstY = points[first+1],
-		lastX = points[last],
-		lastY = points[last+1],
-		index, i, d;
-	for (i = first + 2; i < last; i += 2) {
-		d = pointToSegDist(points[i], points[i+1], firstX, firstY, lastX, lastY);
-		if (d > maxSqDist) {
-			index = i;
-			maxSqDist = d;
-		}
-	}
-	if (maxSqDist > tolerance) {
-		index - first > 2 && simplifyStep(points, first, index, tolerance, simplified);
-		simplified.push(points[index], points[index+1]);
-		last - index > 2 && simplifyStep(points, index, last, tolerance, simplified);
-	}
-}
-
-//points is an array of x/y values like [x, y, x, y, x, y]
-export function simplifyPoints(points, tolerance) {
-	let prevX = parseFloat(points[0]),
-		prevY = parseFloat(points[1]),
-		temp = [prevX, prevY],
-		l = points.length - 2,
-		i, x, y, dx, dy, result, last;
-	tolerance = (tolerance || 1) ** 2;
-	for (i = 2; i < l; i += 2) {
-		x = parseFloat(points[i]);
-		y = parseFloat(points[i+1]);
-		dx = prevX - x;
-		dy = prevY - y;
-		if (dx * dx + dy * dy > tolerance) {
-			temp.push(x, y);
-			prevX = x;
-			prevY = y;
-		}
-	}
-	temp.push(parseFloat(points[l]), parseFloat(points[l+1]));
-	last = temp.length - 2;
-	result = [temp[0], temp[1]];
-	simplifyStep(temp, 0, last, tolerance, result);
-	result.push(temp[last], temp[last+1]);
-	return result;
-}
-
-function getClosestProgressOnBezier(iterations, px, py, start, end, slices, x0, y0, x1, y1, x2, y2, x3, y3) {
-	let inc = (end - start) / slices,
-		best = 0,
-		t = start,
-		x, y, d, dx, dy, inv;
-	_bestDistance = _largeNum;
-	while (t <= end) {
-		inv = 1 - t;
-		x = inv * inv * inv * x0 + 3 * inv * inv * t * x1 + 3 * inv * t * t * x2 + t * t * t * x3;
-		y = inv * inv * inv * y0 + 3 * inv * inv * t * y1 + 3 * inv * t * t * y2 + t * t * t * y3;
-		dx = x - px;
-		dy = y - py;
-		d = dx * dx + dy * dy;
-		if (d < _bestDistance) {
-			_bestDistance = d;
-			best = t;
-		}
-		t += inc;
-	}
-	return (iterations > 1) ? getClosestProgressOnBezier(iterations - 1, px, py, Math.max(best - inc, 0), Math.min(best + inc, 1), slices, x0, y0, x1, y1, x2, y2, x3, y3) : best;
-}
-
-export function getClosestData(rawPath, x, y, slices) { //returns an object with the closest j, i, and t (j is the segment index, i is the index of the point in that segment, and t is the time/progress along that bezier)
-	let closest = {j:0, i:0, t:0},
-		bestDistance = _largeNum,
-		i, j, t, segment;
-	for (j = 0; j < rawPath.length; j++) {
-		segment = rawPath[j];
-		for (i = 0; i < segment.length; i+=6) {
-			t = getClosestProgressOnBezier(1, x, y, 0, 1, slices || 20, segment[i], segment[i+1], segment[i+2], segment[i+3], segment[i+4], segment[i+5], segment[i+6], segment[i+7]);
-			if (bestDistance > _bestDistance) {
-				bestDistance = _bestDistance;
-				closest.j = j;
-				closest.i = i;
-				closest.t = t;
-			}
-		}
-	}
-	return closest;
-}
-
-//subdivide a Segment closest to a specific x,y coordinate
-export function subdivideSegmentNear(x, y, segment, slices, iterations) {
-	let l = segment.length,
-		bestDistance = _largeNum,
-		bestT = 0,
-		bestSegmentIndex = 0,
-		t, i;
-	slices = slices || 20;
-	iterations = iterations || 3;
-	for (i = 0; i < l; i += 6) {
-		t = getClosestProgressOnBezier(1, x, y, 0, 1, slices, segment[i], segment[i+1], segment[i+2], segment[i+3], segment[i+4], segment[i+5], segment[i+6], segment[i+7]);
-		if (bestDistance > _bestDistance) {
-			bestDistance = _bestDistance;
-			bestT = t;
-			bestSegmentIndex = i;
-		}
-	}
-	t = getClosestProgressOnBezier(iterations, x, y, bestT - 0.05, bestT + 0.05, slices, segment[bestSegmentIndex], segment[bestSegmentIndex+1], segment[bestSegmentIndex+2], segment[bestSegmentIndex+3], segment[bestSegmentIndex+4], segment[bestSegmentIndex+5], segment[bestSegmentIndex+6], segment[bestSegmentIndex+7]);
-	subdivideSegment(segment, bestSegmentIndex, t);
-	return bestSegmentIndex + 6;
-}
-
 /*
 Takes any of the following and converts it to an all Cubic Bezier SVG data string:
 - A <path> data string like "M0,0 L2,4 v20,15 H100"
@@ -1106,7 +938,7 @@ Takes any of the following and converts it to an all Cubic Bezier SVG data strin
 
 Note: all numbers are rounded down to the closest 0.001 to minimize memory, maximize speed, and avoid odd numbers like 1e-13
 */
-export function rawPathToString(rawPath) {
+function rawPathToString(rawPath) {
 	if (_isNumber(rawPath[0])) { //in case a segment is passed in instead
 		rawPath = [rawPath];
 	}
@@ -1220,3 +1052,14 @@ export function pointToScreen(svgElement, point) {
 }
 
 */
+
+exports.cacheRawPathMeasurements = cacheRawPathMeasurements;
+exports.convertToPath = convertToPath;
+exports.flatPointsToSegment = flatPointsToSegment;
+exports.getPositionOnPath = getPositionOnPath;
+exports.getRawPath = getRawPath;
+exports.pointsToSegment = pointsToSegment;
+exports.rawPathToString = rawPathToString;
+exports.sliceRawPath = sliceRawPath;
+exports.stringToRawPath = stringToRawPath;
+exports.transformRawPath = transformRawPath;
diff --git a/dist/shared/gsap.b4b61722.cjs b/dist/shared/gsap.b4b61722.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..87dd971c97efac30bf90d87855888d742dc1ee3b
--- /dev/null
+++ b/dist/shared/gsap.b4b61722.cjs
@@ -0,0 +1,331 @@
+'use strict';
+
+/*!
+ * matrix 3.12.5
+ * https://gsap.com
+ *
+ * Copyright 2008-2024, GreenSock. All rights reserved.
+ * Subject to the terms at https://gsap.com/standard-license or for
+ * Club GSAP members, the agreement issued with that membership.
+ * @author: Jack Doyle, jack@greensock.com
+*/
+/* eslint-disable */
+
+let _doc, _win, _docElement, _body,	_divContainer, _svgContainer, _identityMatrix, _gEl,
+	_transformProp = "transform",
+	_transformOriginProp = _transformProp + "Origin",
+	_hasOffsetBug,
+	_setDoc = element => {
+		let doc = element.ownerDocument || element;
+		if (!(_transformProp in element.style) && "msTransform" in element.style) { //to improve compatibility with old Microsoft browsers
+			_transformProp = "msTransform";
+			_transformOriginProp = _transformProp + "Origin";
+		}
+		while (doc.parentNode && (doc = doc.parentNode)) {	}
+		_win = window;
+		_identityMatrix = new Matrix2D();
+		if (doc) {
+			_doc = doc;
+			_docElement = doc.documentElement;
+			_body = doc.body;
+			_gEl = _doc.createElementNS("http://www.w3.org/2000/svg", "g");
+			// prevent any existing CSS from transforming it
+			_gEl.style.transform = "none";
+			// now test for the offset reporting bug. Use feature detection instead of browser sniffing to make things more bulletproof and future-proof. Hopefully Safari will fix their bug soon.
+			let d1 = doc.createElement("div"),
+				d2 = doc.createElement("div"),
+				root = doc && (doc.body || doc.firstElementChild);
+			if (root && root.appendChild) {
+				root.appendChild(d1);
+				d1.appendChild(d2);
+				d1.setAttribute("style", "position:static;transform:translate3d(0,0,1px)");
+				_hasOffsetBug = (d2.offsetParent !== d1);
+				root.removeChild(d1);
+			}
+		}
+		return doc;
+	},
+	_forceNonZeroScale = e => { // walks up the element's ancestors and finds any that had their scale set to 0 via GSAP, and changes them to 0.0001 to ensure that measurements work. Firefox has a bug that causes it to incorrectly report getBoundingClientRect() when scale is 0.
+		let a, cache;
+		while (e && e !== _body) {
+			cache = e._gsap;
+			cache && cache.uncache && cache.get(e, "x"); // force re-parsing of transforms if necessary
+			if (cache && !cache.scaleX && !cache.scaleY && cache.renderTransform) {
+				cache.scaleX = cache.scaleY = 1e-4;
+				cache.renderTransform(1, cache);
+				a ? a.push(cache) : (a = [cache]);
+			}
+			e = e.parentNode;
+		}
+		return a;
+	},
+	// possible future addition: pass an element to _forceDisplay() and it'll walk up all its ancestors and make sure anything with display: none is set to display: block, and if there's no parentNode, it'll add it to the body. It returns an Array that you can then feed to _revertDisplay() to have it revert all the changes it made.
+	// _forceDisplay = e => {
+	// 	let a = [],
+	// 		parent;
+	// 	while (e && e !== _body) {
+	// 		parent = e.parentNode;
+	// 		(_win.getComputedStyle(e).display === "none" || !parent) && a.push(e, e.style.display, parent) && (e.style.display = "block");
+	// 		parent || _body.appendChild(e);
+	// 		e = parent;
+	// 	}
+	// 	return a;
+	// },
+	// _revertDisplay = a => {
+	// 	for (let i = 0; i < a.length; i+=3) {
+	// 		a[i+1] ? (a[i].style.display = a[i+1]) : a[i].style.removeProperty("display");
+	// 		a[i+2] || a[i].parentNode.removeChild(a[i]);
+	// 	}
+	// },
+	_svgTemps = [], //we create 3 elements for SVG, and 3 for other DOM elements and cache them for performance reasons. They get nested in _divContainer and _svgContainer so that just one element is added to the DOM on each successive attempt. Again, performance is key.
+	_divTemps = [],
+	_getDocScrollTop = () => _win.pageYOffset  || _doc.scrollTop || _docElement.scrollTop || _body.scrollTop || 0,
+	_getDocScrollLeft = () => _win.pageXOffset || _doc.scrollLeft || _docElement.scrollLeft || _body.scrollLeft || 0,
+	_svgOwner = element => element.ownerSVGElement || ((element.tagName + "").toLowerCase() === "svg" ? element : null),
+	_isFixed = element => {
+		if (_win.getComputedStyle(element).position === "fixed") {
+			return true;
+		}
+		element = element.parentNode;
+		if (element && element.nodeType === 1) { // avoid document fragments which will throw an error.
+			return _isFixed(element);
+		}
+	},
+	_createSibling = (element, i) => {
+		if (element.parentNode && (_doc || _setDoc(element))) {
+			let svg = _svgOwner(element),
+				ns = svg ? (svg.getAttribute("xmlns") || "http://www.w3.org/2000/svg") : "http://www.w3.org/1999/xhtml",
+				type = svg ? (i ? "rect" : "g") : "div",
+				x = i !== 2 ? 0 : 100,
+				y = i === 3 ? 100 : 0,
+				css = "position:absolute;display:block;pointer-events:none;margin:0;padding:0;",
+				e = _doc.createElementNS ? _doc.createElementNS(ns.replace(/^https/, "http"), type) : _doc.createElement(type);
+			if (i) {
+				if (!svg) {
+					if (!_divContainer) {
+						_divContainer = _createSibling(element);
+						_divContainer.style.cssText = css;
+					}
+					e.style.cssText = css + "width:0.1px;height:0.1px;top:" + y + "px;left:" + x + "px";
+					_divContainer.appendChild(e);
+
+				} else {
+					_svgContainer || (_svgContainer = _createSibling(element));
+					e.setAttribute("width", 0.01);
+					e.setAttribute("height", 0.01);
+					e.setAttribute("transform", "translate(" + x + "," + y + ")");
+					_svgContainer.appendChild(e);
+				}
+			}
+			return e;
+		}
+		throw "Need document and parent.";
+	},
+	_consolidate = m => { // replaces SVGTransformList.consolidate() because a bug in Firefox causes it to break pointer events. See https://gsap.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800
+		let c = new Matrix2D(),
+			i = 0;
+		for (; i < m.numberOfItems; i++) {
+			c.multiply(m.getItem(i).matrix);
+		}
+		return c;
+	},
+	_getCTM = svg => {
+		let m = svg.getCTM(),
+			transform;
+		if (!m) { // Firefox returns null for getCTM() on root <svg> elements, so this is a workaround using a <g> that we temporarily append.
+			transform = svg.style[_transformProp];
+			svg.style[_transformProp] = "none"; // a bug in Firefox causes css transforms to contaminate the getCTM()
+			svg.appendChild(_gEl);
+			m = _gEl.getCTM();
+			svg.removeChild(_gEl);
+			transform ? (svg.style[_transformProp] = transform) : svg.style.removeProperty(_transformProp.replace(/([A-Z])/g, "-$1").toLowerCase());
+		}
+		return m || _identityMatrix.clone(); // Firefox will still return null if the <svg> has a width/height of 0 in the browser.
+	},
+	_placeSiblings = (element, adjustGOffset) => {
+		let svg = _svgOwner(element),
+			isRootSVG = element === svg,
+			siblings = svg ? _svgTemps : _divTemps,
+			parent = element.parentNode,
+			container, m, b, x, y, cs;
+		if (element === _win) {
+			return element;
+		}
+		siblings.length || siblings.push(_createSibling(element, 1), _createSibling(element, 2), _createSibling(element, 3));
+		container = svg ? _svgContainer : _divContainer;
+		if (svg) {
+			if (isRootSVG) {
+				b = _getCTM(element);
+				x = -b.e / b.a;
+				y = -b.f / b.d;
+				m = _identityMatrix;
+			} else if (element.getBBox) {
+				b = element.getBBox();
+				m = element.transform ? element.transform.baseVal : {}; // IE11 doesn't follow the spec.
+				m = !m.numberOfItems ? _identityMatrix : m.numberOfItems > 1 ? _consolidate(m) : m.getItem(0).matrix; // don't call m.consolidate().matrix because a bug in Firefox makes pointer events not work when consolidate() is called on the same tick as getBoundingClientRect()! See https://gsap.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800
+				x = m.a * b.x + m.c * b.y;
+				y = m.b * b.x + m.d * b.y;
+			} else { // may be a <mask> which has no getBBox() so just use defaults instead of throwing errors.
+				m = new Matrix2D();
+				x = y = 0;
+			}
+			if (adjustGOffset && element.tagName.toLowerCase() === "g") {
+				x = y = 0;
+			}
+			(isRootSVG ? svg : parent).appendChild(container);
+			container.setAttribute("transform", "matrix(" + m.a + "," + m.b + "," + m.c + "," + m.d + "," + (m.e + x) + "," + (m.f + y) + ")");
+		} else {
+			x = y = 0;
+			if (_hasOffsetBug) { // some browsers (like Safari) have a bug that causes them to misreport offset values. When an ancestor element has a transform applied, it's supposed to treat it as if it's position: relative (new context). Safari botches this, so we need to find the closest ancestor (between the element and its offsetParent) that has a transform applied and if one is found, grab its offsetTop/Left and subtract them to compensate.
+				m = element.offsetParent;
+				b = element;
+				while (b && (b = b.parentNode) && b !== m && b.parentNode) {
+					if ((_win.getComputedStyle(b)[_transformProp] + "").length > 4) {
+						x = b.offsetLeft;
+						y = b.offsetTop;
+						b = 0;
+					}
+				}
+			}
+			cs = _win.getComputedStyle(element);
+			if (cs.position !== "absolute" && cs.position !== "fixed") {
+				m = element.offsetParent;
+				while (parent && parent !== m) { // if there's an ancestor element between the element and its offsetParent that's scrolled, we must factor that in.
+					x += parent.scrollLeft || 0;
+					y += parent.scrollTop || 0;
+					parent = parent.parentNode;
+				}
+			}
+			b = container.style;
+			b.top = (element.offsetTop - y) + "px";
+			b.left = (element.offsetLeft - x) + "px";
+			b[_transformProp] = cs[_transformProp];
+			b[_transformOriginProp] = cs[_transformOriginProp];
+			// b.border = m.border;
+			// b.borderLeftStyle = m.borderLeftStyle;
+			// b.borderTopStyle = m.borderTopStyle;
+			// b.borderLeftWidth = m.borderLeftWidth;
+			// b.borderTopWidth = m.borderTopWidth;
+			b.position = cs.position === "fixed" ? "fixed" : "absolute";
+			element.parentNode.appendChild(container);
+		}
+		return container;
+	},
+	_setMatrix = (m, a, b, c, d, e, f) => {
+		m.a = a;
+		m.b = b;
+		m.c = c;
+		m.d = d;
+		m.e = e;
+		m.f = f;
+		return m;
+	};
+
+class Matrix2D {
+	constructor(a=1, b=0, c=0, d=1, e=0, f=0) {
+		_setMatrix(this, a, b, c, d, e, f);
+	}
+
+	inverse() {
+		let {a, b, c, d, e, f} = this,
+			determinant = (a * d - b * c) || 1e-10;
+		return _setMatrix(
+			this,
+			d / determinant,
+			-b / determinant,
+			-c / determinant,
+			a / determinant,
+			(c * f - d * e) / determinant,
+			-(a * f - b * e) / determinant
+		);
+	}
+
+	multiply(matrix) {
+		let {a, b, c, d, e, f} = this,
+			a2 = matrix.a,
+			b2 = matrix.c,
+			c2 = matrix.b,
+			d2 = matrix.d,
+			e2 = matrix.e,
+			f2 = matrix.f;
+		return _setMatrix(this,
+			a2 * a + c2 * c,
+			a2 * b + c2 * d,
+			b2 * a + d2 * c,
+			b2 * b + d2 * d,
+			e + e2 * a + f2 * c,
+			f + e2 * b + f2 * d);
+	}
+
+	clone() {
+		return new Matrix2D(this.a, this.b, this.c, this.d, this.e, this.f);
+	}
+
+	equals(matrix) {
+		let {a, b, c, d, e, f} = this;
+		return (a === matrix.a && b === matrix.b && c === matrix.c && d === matrix.d && e === matrix.e && f === matrix.f);
+	}
+
+	apply(point, decoratee={}) {
+		let {x, y} = point,
+			{a, b, c, d, e, f} = this;
+		decoratee.x = (x * a + y * c + e) || 0;
+		decoratee.y = (x * b + y * d + f) || 0;
+		return decoratee;
+	}
+
+}
+
+// Feed in an element and it'll return a 2D matrix (optionally inverted) so that you can translate between coordinate spaces.
+// Inverting lets you translate a global point into a local coordinate space. No inverting lets you go the other way.
+// We needed this to work around various browser bugs, like Firefox doesn't accurately report getScreenCTM() when there
+// are transforms applied to ancestor elements.
+// The matrix math to convert any x/y coordinate is as follows, which is wrapped in a convenient apply() method of Matrix2D above:
+//     tx = m.a * x + m.c * y + m.e
+//     ty = m.b * x + m.d * y + m.f
+function getGlobalMatrix(element, inverse, adjustGOffset, includeScrollInFixed) { // adjustGOffset is typically used only when grabbing an element's PARENT's global matrix, and it ignores the x/y offset of any SVG <g> elements because they behave in a special way.
+	if (!element || !element.parentNode || (_doc || _setDoc(element)).documentElement === element) {
+		return new Matrix2D();
+	}
+	let zeroScales = _forceNonZeroScale(element),
+		svg = _svgOwner(element),
+		temps = svg ? _svgTemps : _divTemps,
+		container = _placeSiblings(element, adjustGOffset),
+		b1 = temps[0].getBoundingClientRect(),
+		b2 = temps[1].getBoundingClientRect(),
+		b3 = temps[2].getBoundingClientRect(),
+		parent = container.parentNode,
+		isFixed = !includeScrollInFixed && _isFixed(element),
+		m = new Matrix2D(
+			(b2.left - b1.left) / 100,
+			(b2.top - b1.top) / 100,
+			(b3.left - b1.left) / 100,
+			(b3.top - b1.top) / 100,
+			b1.left + (isFixed ? 0 : _getDocScrollLeft()),
+			b1.top + (isFixed ? 0 : _getDocScrollTop())
+		);
+	parent.removeChild(container);
+	if (zeroScales) {
+		b1 = zeroScales.length;
+		while (b1--) {
+			b2 = zeroScales[b1];
+			b2.scaleX = b2.scaleY = 0;
+			b2.renderTransform(1, b2);
+		}
+	}
+	return inverse ? m.inverse() : m;
+}
+
+// export function getMatrix(element) {
+// 	_doc || _setDoc(element);
+// 	let m = (_win.getComputedStyle(element)[_transformProp] + "").substr(7).match(/[-.]*\d+[.e\-+]*\d*[e\-\+]*\d*/g),
+// 		is2D = m && m.length === 6;
+// 	return !m || m.length < 6 ? new Matrix2D() : new Matrix2D(+m[0], +m[1], +m[is2D ? 2 : 4], +m[is2D ? 3 : 5], +m[is2D ? 4 : 12], +m[is2D ? 5 : 13]);
+// }
+
+exports.Matrix2D = Matrix2D;
+exports._getCTM = _getCTM;
+exports._getDocScrollLeft = _getDocScrollLeft;
+exports._getDocScrollTop = _getDocScrollTop;
+exports._setDoc = _setDoc;
+exports.getGlobalMatrix = getGlobalMatrix;
diff --git a/gsap-core.js b/gsap-core.js
deleted file mode 100644
index e9c348439b074e190199e29f6258cfd69b0c3b5f..0000000000000000000000000000000000000000
diff --git a/index.js b/index.js
deleted file mode 100644
index c94f3329f75ee88c9bab8ab93f1167199eac667a..0000000000000000000000000000000000000000
diff --git a/package.json b/package.json
index f300692d495a449bcf32b3d02dbe517fd30687ba..fae31ce2384563d95350d6fc6f59a0cbad027dd5 100644
--- a/package.json
+++ b/package.json
@@ -1,42 +1,104 @@
 {
-    "name": "gsap",
-    "version": "3.12.5",
-    "description": "GSAP is a framework-agnostic JavaScript animation library that turns developers into animation superheroes. Build high-performance animations that work in **every** major browser. Animate CSS, SVG, canvas, React, Vue, WebGL, colors, strings, motion paths, generic objects...anything JavaScript can touch! The ScrollTrigger plugin lets you create jaw-dropping scroll-based animations with minimal code. No other library delivers such advanced sequencing, reliability, and tight control while solving real-world problems on millions of sites. GSAP works around countless browser inconsistencies; your animations **just work**. At its core, GSAP is a high-speed property manipulator, updating values over time with extreme accuracy.",
-    "homepage": "https://gsap.com",
-	"module": "index.js",
-	"main": "dist/gsap.js",
-    "types": "types/index.d.ts",
-	"sideEffects": false,
-    "keywords": [
-		"GSAP",
-		"GreenSock",
-		"animation",
-		"MotionPathPlugin",
-		"motion",
-		"motionPath",
-		"matchMedia",
-		"easing",
-		"ScrollTrigger",
-		"ScrollSmoother",
-		"Observer",
-		"JavaScript",
-		"PixiPlugin",
-		"CustomEase",
-		"Flip",
-		"SVG",
-		"3D",
-		"2D",
-		"transform",
-		"morph",
-		"morphing",
-		"tweening"
-   ],
+  "name": "gsap",
+  "version": "3.12.5",
+  "description": "GSAP is a framework-agnostic JavaScript animation library that turns developers into animation superheroes. Build high-performance animations that work in **every** major browser. Animate CSS, SVG, canvas, React, Vue, WebGL, colors, strings, motion paths, generic objects...anything JavaScript can touch! The ScrollTrigger plugin lets you create jaw-dropping scroll-based animations with minimal code. No other library delivers such advanced sequencing, reliability, and tight control while solving real-world problems on millions of sites. GSAP works around countless browser inconsistencies; your animations **just work**. At its core, GSAP is a high-speed property manipulator, updating values over time with extreme accuracy.",
+  "homepage": "https://gsap.com",
+  "type": "module",
+  "module": "dist/index.mjs",
+	"main": "dist/index.cjs",
+  "types": "dist/index.d.ts",
+  "files": [
+    "dist", "types"
+  ],
+  "exports": {
+    ".": {
+      "types": "./dist/index.d.ts",
+      "import": "./dist/index.mjs",
+      "require": "./dist/index.cjs"
+    },
+    "./all.js": {
+      "types": "./dist/all.d.ts",
+      "import": "./dist/all.mjs",
+      "require": "./dist/all.cjs"
+    },
+    "./CSSPlugin.js": {
+      "types": "./dist/CSSPlugin.d.ts",
+      "import": "./dist/CSSPlugin.mjs",
+      "require": "./dist/CSSPlugin.cjs"
+    },
+    "./CustomRulePlugin.js": {
+      "types": "./dist/CustomRulePlugin.d.ts",
+      "import": "./dist/CustomRulePlugin.mjs",
+      "require": "./dist/CustomRulePlugin.cjs"
+    },
+    "./CustomEase.js": {
+      "types": "./dist/CustomEase.d.ts",
+      "import": "./dist/CustomEase.mjs",
+      "require": "./dist/CustomEase.cjs"
+    },
+    "./Draggable.js": {
+      "types": "./dist/Draggable.d.ts",
+      "import": "./dist/Draggable.mjs",
+      "require": "./dist/Draggable.cjs"
+    },
+    "./EaselPlugin.js": {
+      "types": "./dist/EaselPlugin.d.ts",
+      "import": "./dist/EaselPlugin.mjs",
+      "require": "./dist/EaselPlugin.cjs"
+    },
+    "./EasePack.js": {
+      "types": "./dist/EasePack.d.ts",
+      "import": "./dist/EasePack.mjs",
+      "require": "./dist/EasePack.cjs"
+    },
+    "./Flip.js": {
+      "types": "./dist/Flip.d.ts",
+      "import": "./dist/Flip.mjs",
+      "require": "./dist/Flip.cjs"
+    },
+    "./gsap-core.js": {
+      "types": "./dist/gsap-core.d.ts",
+      "import": "./dist/gsap-core.mjs",
+      "require": "./dist/gsap-core.cjs"
+    },
+    "./MotionPathPlugin.js": {
+      "types": "./dist/MotionPathPlugin.d.ts",
+      "import": "./dist/MotionPathPlugin.mjs",
+      "require": "./dist/MotionPathPlugin.cjs"
+    },
+    "./Observer.js": {
+      "types": "./dist/Observer.d.ts",
+      "import": "./dist/Observer.mjs",
+      "require": "./dist/Observer.cjs"
+    },
+    "./PixiPlugin.js": {
+      "types": "./dist/PixiPlugin.d.ts",
+      "import": "./dist/PixiPlugin.mjs",
+      "require": "./dist/PixiPlugin.cjs"
+    },
+    "./ScrollToPlugin.js": {
+      "types": "./dist/ScrollToPlugin.d.ts",
+      "import": "./dist/ScrollToPlugin.mjs",
+      "require": "./dist/ScrollToPlugin.cjs"
+    },
+    "./ScrollTriger.js": {
+      "types": "./dist/ScrollTrigger.d.ts",
+      "import": "./dist/ScrollTrigger.mjs",
+      "require": "./dist/ScrollTrigger.cjs"
+    },
+    "./TextPlugin.js": {
+      "types": "./dist/TextPlugin.d.ts",
+      "import": "./dist/TextPlugin.mjs",
+      "require": "./dist/TextPlugin.cjs"
+    }
+  },
+  "sideEffects": false,
    "maintainers": [
        {
            "name": "Jack Doyle",
 		   "email": "jack@greensock.com",
            "web": "https://gsap.com"
-       } 
+       }
    ],
   "license": "Standard 'no charge' license: https://gsap.com/standard-license. Club GSAP members get more: https://gsap.com/licensing/. Why GreenSock doesn't employ an MIT license: https://gsap.com/why-license/",
    "bugs": {
@@ -44,7 +106,6 @@
    },
    "repository": {
       "type": "git",
-      "url": "https://github.com/greensock/GSAP" 
-   } 
-
+      "url": "https://github.com/greensock/GSAP"
+   }
 }
diff --git a/src/TextPlugin.js b/src/TextPlugin.js
deleted file mode 100644
index 3f975ddcf793542dce7ab966834327e6c2bb2417..0000000000000000000000000000000000000000
diff --git a/src/all.js b/src/all.js
deleted file mode 100644
index fd745081a96e386fb6415a27d5fdb54565ec8880..0000000000000000000000000000000000000000
diff --git a/src/index.js b/src/index.js
deleted file mode 100644
index 8cc4f165fd3a7ff08cc1025437ea31975b1b43d5..0000000000000000000000000000000000000000
diff --git a/src/utils/strings.js b/src/utils/strings.js
deleted file mode 100644
index 43bd14c089f57cf573eb1589598893bff0afc7f8..0000000000000000000000000000000000000000
diff --git a/utils/matrix.js b/utils/matrix.js
deleted file mode 100644
index 5429516da44f165a6c40b544c1a2a0855b53840f..0000000000000000000000000000000000000000
diff --git a/utils/paths.js b/utils/paths.js
deleted file mode 100644
index acc0f8b393aaf5c6236881dbe703079f2c001605..0000000000000000000000000000000000000000
diff --git a/utils/strings.js b/utils/strings.js
deleted file mode 100644
index 6c1c53cf0f7befe97c320885fbd671318ba27c78..0000000000000000000000000000000000000000
