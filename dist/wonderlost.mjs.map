{"version":3,"file":"wonderlost.mjs","sources":["../node_modules/.pnpm/consola@3.2.3/node_modules/consola/dist/core.mjs","../node_modules/.pnpm/consola@3.2.3/node_modules/consola/dist/browser.mjs","../node_modules/.pnpm/@magik_io+mote@1.6.5/node_modules/@magik_io/mote/dist/El.mjs","../node_modules/.pnpm/@magik_io+mote@1.6.5/node_modules/@magik_io/mote/dist/Mote.mjs","../src/class/Tome.ts","../src/submodules/toasted/Toasted.ts","../src/wonderlost.ts"],"sourcesContent":["const LogLevels = {\n  silent: Number.NEGATIVE_INFINITY,\n  fatal: 0,\n  error: 0,\n  warn: 1,\n  log: 2,\n  info: 3,\n  success: 3,\n  fail: 3,\n  ready: 3,\n  start: 3,\n  box: 3,\n  debug: 4,\n  trace: 5,\n  verbose: Number.POSITIVE_INFINITY\n};\nconst LogTypes = {\n  // Silent\n  silent: {\n    level: -1\n  },\n  // Level 0\n  fatal: {\n    level: LogLevels.fatal\n  },\n  error: {\n    level: LogLevels.error\n  },\n  // Level 1\n  warn: {\n    level: LogLevels.warn\n  },\n  // Level 2\n  log: {\n    level: LogLevels.log\n  },\n  // Level 3\n  info: {\n    level: LogLevels.info\n  },\n  success: {\n    level: LogLevels.success\n  },\n  fail: {\n    level: LogLevels.fail\n  },\n  ready: {\n    level: LogLevels.info\n  },\n  start: {\n    level: LogLevels.info\n  },\n  box: {\n    level: LogLevels.info\n  },\n  // Level 4\n  debug: {\n    level: LogLevels.debug\n  },\n  // Level 5\n  trace: {\n    level: LogLevels.trace\n  },\n  // Verbose\n  verbose: {\n    level: LogLevels.verbose\n  }\n};\n\nfunction isObject(value) {\n  return value !== null && typeof value === \"object\";\n}\nfunction _defu(baseObject, defaults, namespace = \".\", merger) {\n  if (!isObject(defaults)) {\n    return _defu(baseObject, {}, namespace, merger);\n  }\n  const object = Object.assign({}, defaults);\n  for (const key in baseObject) {\n    if (key === \"__proto__\" || key === \"constructor\") {\n      continue;\n    }\n    const value = baseObject[key];\n    if (value === null || value === void 0) {\n      continue;\n    }\n    if (merger && merger(object, key, value, namespace)) {\n      continue;\n    }\n    if (Array.isArray(value) && Array.isArray(object[key])) {\n      object[key] = [...value, ...object[key]];\n    } else if (isObject(value) && isObject(object[key])) {\n      object[key] = _defu(\n        value,\n        object[key],\n        (namespace ? `${namespace}.` : \"\") + key.toString(),\n        merger\n      );\n    } else {\n      object[key] = value;\n    }\n  }\n  return object;\n}\nfunction createDefu(merger) {\n  return (...arguments_) => (\n    // eslint-disable-next-line unicorn/no-array-reduce\n    arguments_.reduce((p, c) => _defu(p, c, \"\", merger), {})\n  );\n}\nconst defu = createDefu();\n\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === \"[object Object]\";\n}\nfunction isLogObj(arg) {\n  if (!isPlainObject(arg)) {\n    return false;\n  }\n  if (!arg.message && !arg.args) {\n    return false;\n  }\n  if (arg.stack) {\n    return false;\n  }\n  return true;\n}\n\nlet paused = false;\nconst queue = [];\nclass Consola {\n  constructor(options = {}) {\n    const types = options.types || LogTypes;\n    this.options = defu(\n      {\n        ...options,\n        defaults: { ...options.defaults },\n        level: _normalizeLogLevel(options.level, types),\n        reporters: [...options.reporters || []]\n      },\n      {\n        types: LogTypes,\n        throttle: 1e3,\n        throttleMin: 5,\n        formatOptions: {\n          date: true,\n          colors: false,\n          compact: true\n        }\n      }\n    );\n    for (const type in types) {\n      const defaults = {\n        type,\n        ...this.options.defaults,\n        ...types[type]\n      };\n      this[type] = this._wrapLogFn(defaults);\n      this[type].raw = this._wrapLogFn(\n        defaults,\n        true\n      );\n    }\n    if (this.options.mockFn) {\n      this.mockTypes();\n    }\n    this._lastLog = {};\n  }\n  get level() {\n    return this.options.level;\n  }\n  set level(level) {\n    this.options.level = _normalizeLogLevel(\n      level,\n      this.options.types,\n      this.options.level\n    );\n  }\n  prompt(message, opts) {\n    if (!this.options.prompt) {\n      throw new Error(\"prompt is not supported!\");\n    }\n    return this.options.prompt(message, opts);\n  }\n  create(options) {\n    const instance = new Consola({\n      ...this.options,\n      ...options\n    });\n    if (this._mockFn) {\n      instance.mockTypes(this._mockFn);\n    }\n    return instance;\n  }\n  withDefaults(defaults) {\n    return this.create({\n      ...this.options,\n      defaults: {\n        ...this.options.defaults,\n        ...defaults\n      }\n    });\n  }\n  withTag(tag) {\n    return this.withDefaults({\n      tag: this.options.defaults.tag ? this.options.defaults.tag + \":\" + tag : tag\n    });\n  }\n  addReporter(reporter) {\n    this.options.reporters.push(reporter);\n    return this;\n  }\n  removeReporter(reporter) {\n    if (reporter) {\n      const i = this.options.reporters.indexOf(reporter);\n      if (i >= 0) {\n        return this.options.reporters.splice(i, 1);\n      }\n    } else {\n      this.options.reporters.splice(0);\n    }\n    return this;\n  }\n  setReporters(reporters) {\n    this.options.reporters = Array.isArray(reporters) ? reporters : [reporters];\n    return this;\n  }\n  wrapAll() {\n    this.wrapConsole();\n    this.wrapStd();\n  }\n  restoreAll() {\n    this.restoreConsole();\n    this.restoreStd();\n  }\n  wrapConsole() {\n    for (const type in this.options.types) {\n      if (!console[\"__\" + type]) {\n        console[\"__\" + type] = console[type];\n      }\n      console[type] = this[type].raw;\n    }\n  }\n  restoreConsole() {\n    for (const type in this.options.types) {\n      if (console[\"__\" + type]) {\n        console[type] = console[\"__\" + type];\n        delete console[\"__\" + type];\n      }\n    }\n  }\n  wrapStd() {\n    this._wrapStream(this.options.stdout, \"log\");\n    this._wrapStream(this.options.stderr, \"log\");\n  }\n  _wrapStream(stream, type) {\n    if (!stream) {\n      return;\n    }\n    if (!stream.__write) {\n      stream.__write = stream.write;\n    }\n    stream.write = (data) => {\n      this[type].raw(String(data).trim());\n    };\n  }\n  restoreStd() {\n    this._restoreStream(this.options.stdout);\n    this._restoreStream(this.options.stderr);\n  }\n  _restoreStream(stream) {\n    if (!stream) {\n      return;\n    }\n    if (stream.__write) {\n      stream.write = stream.__write;\n      delete stream.__write;\n    }\n  }\n  pauseLogs() {\n    paused = true;\n  }\n  resumeLogs() {\n    paused = false;\n    const _queue = queue.splice(0);\n    for (const item of _queue) {\n      item[0]._logFn(item[1], item[2]);\n    }\n  }\n  mockTypes(mockFn) {\n    const _mockFn = mockFn || this.options.mockFn;\n    this._mockFn = _mockFn;\n    if (typeof _mockFn !== \"function\") {\n      return;\n    }\n    for (const type in this.options.types) {\n      this[type] = _mockFn(type, this.options.types[type]) || this[type];\n      this[type].raw = this[type];\n    }\n  }\n  _wrapLogFn(defaults, isRaw) {\n    return (...args) => {\n      if (paused) {\n        queue.push([this, defaults, args, isRaw]);\n        return;\n      }\n      return this._logFn(defaults, args, isRaw);\n    };\n  }\n  _logFn(defaults, args, isRaw) {\n    if ((defaults.level || 0) > this.level) {\n      return false;\n    }\n    const logObj = {\n      date: /* @__PURE__ */ new Date(),\n      args: [],\n      ...defaults,\n      level: _normalizeLogLevel(defaults.level, this.options.types)\n    };\n    if (!isRaw && args.length === 1 && isLogObj(args[0])) {\n      Object.assign(logObj, args[0]);\n    } else {\n      logObj.args = [...args];\n    }\n    if (logObj.message) {\n      logObj.args.unshift(logObj.message);\n      delete logObj.message;\n    }\n    if (logObj.additional) {\n      if (!Array.isArray(logObj.additional)) {\n        logObj.additional = logObj.additional.split(\"\\n\");\n      }\n      logObj.args.push(\"\\n\" + logObj.additional.join(\"\\n\"));\n      delete logObj.additional;\n    }\n    logObj.type = typeof logObj.type === \"string\" ? logObj.type.toLowerCase() : \"log\";\n    logObj.tag = typeof logObj.tag === \"string\" ? logObj.tag : \"\";\n    const resolveLog = (newLog = false) => {\n      const repeated = (this._lastLog.count || 0) - this.options.throttleMin;\n      if (this._lastLog.object && repeated > 0) {\n        const args2 = [...this._lastLog.object.args];\n        if (repeated > 1) {\n          args2.push(`(repeated ${repeated} times)`);\n        }\n        this._log({ ...this._lastLog.object, args: args2 });\n        this._lastLog.count = 1;\n      }\n      if (newLog) {\n        this._lastLog.object = logObj;\n        this._log(logObj);\n      }\n    };\n    clearTimeout(this._lastLog.timeout);\n    const diffTime = this._lastLog.time && logObj.date ? logObj.date.getTime() - this._lastLog.time.getTime() : 0;\n    this._lastLog.time = logObj.date;\n    if (diffTime < this.options.throttle) {\n      try {\n        const serializedLog = JSON.stringify([\n          logObj.type,\n          logObj.tag,\n          logObj.args\n        ]);\n        const isSameLog = this._lastLog.serialized === serializedLog;\n        this._lastLog.serialized = serializedLog;\n        if (isSameLog) {\n          this._lastLog.count = (this._lastLog.count || 0) + 1;\n          if (this._lastLog.count > this.options.throttleMin) {\n            this._lastLog.timeout = setTimeout(\n              resolveLog,\n              this.options.throttle\n            );\n            return;\n          }\n        }\n      } catch {\n      }\n    }\n    resolveLog(true);\n  }\n  _log(logObj) {\n    for (const reporter of this.options.reporters) {\n      reporter.log(logObj, {\n        options: this.options\n      });\n    }\n  }\n}\nfunction _normalizeLogLevel(input, types = {}, defaultLevel = 3) {\n  if (input === void 0) {\n    return defaultLevel;\n  }\n  if (typeof input === \"number\") {\n    return input;\n  }\n  if (types[input] && types[input].level !== void 0) {\n    return types[input].level;\n  }\n  return defaultLevel;\n}\nConsola.prototype.add = Consola.prototype.addReporter;\nConsola.prototype.remove = Consola.prototype.removeReporter;\nConsola.prototype.clear = Consola.prototype.removeReporter;\nConsola.prototype.withScope = Consola.prototype.withTag;\nConsola.prototype.mock = Consola.prototype.mockTypes;\nConsola.prototype.pause = Consola.prototype.pauseLogs;\nConsola.prototype.resume = Consola.prototype.resumeLogs;\nfunction createConsola(options = {}) {\n  return new Consola(options);\n}\n\nexport { Consola, LogLevels, LogTypes, createConsola };\n","import { createConsola as createConsola$1 } from './core.mjs';\nexport { Consola, LogLevels, LogTypes } from './core.mjs';\n\nclass BrowserReporter {\n  constructor(options) {\n    this.options = { ...options };\n    this.defaultColor = \"#7f8c8d\";\n    this.levelColorMap = {\n      0: \"#c0392b\",\n      // Red\n      1: \"#f39c12\",\n      // Yellow\n      3: \"#00BCD4\"\n      // Cyan\n    };\n    this.typeColorMap = {\n      success: \"#2ecc71\"\n      // Green\n    };\n  }\n  _getLogFn(level) {\n    if (level < 1) {\n      return console.__error || console.error;\n    }\n    if (level === 1) {\n      return console.__warn || console.warn;\n    }\n    return console.__log || console.log;\n  }\n  log(logObj) {\n    const consoleLogFn = this._getLogFn(logObj.level);\n    const type = logObj.type === \"log\" ? \"\" : logObj.type;\n    const tag = logObj.tag || \"\";\n    const color = this.typeColorMap[logObj.type] || this.levelColorMap[logObj.level] || this.defaultColor;\n    const style = `\n      background: ${color};\n      border-radius: 0.5em;\n      color: white;\n      font-weight: bold;\n      padding: 2px 0.5em;\n    `;\n    const badge = `%c${[tag, type].filter(Boolean).join(\":\")}`;\n    if (typeof logObj.args[0] === \"string\") {\n      consoleLogFn(\n        `${badge}%c ${logObj.args[0]}`,\n        style,\n        // Empty string as style resets to default console style\n        \"\",\n        ...logObj.args.slice(1)\n      );\n    } else {\n      consoleLogFn(badge, style, ...logObj.args);\n    }\n  }\n}\n\nfunction createConsola(options = {}) {\n  const consola2 = createConsola$1({\n    reporters: options.reporters || [new BrowserReporter({})],\n    prompt(message, options2 = {}) {\n      if (options2.type === \"confirm\") {\n        return Promise.resolve(confirm(message));\n      }\n      return Promise.resolve(prompt(message));\n    },\n    ...options\n  });\n  return consola2;\n}\nconst consola = createConsola();\n\nexport { consola, createConsola, consola as default };\n","var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nclass El {\n  /**\n   * Create a new instance of El.\n   * @param {selectorString} selector - The CSS selector for the HTML element.\n   */\n  constructor(selector) {\n    __publicField(this, \"element\");\n    __publicField(this, \"debug\", false);\n    if (typeof selector === \"string\") {\n      const element = document.querySelector(selector);\n      if (!element)\n        throw new Error(`You tried to grab using '${selector}' but that doesn't exist!`);\n      this.element = element;\n      return;\n    }\n    if (typeof selector === \"function\") {\n      this.element = selector();\n      return;\n    }\n    this.element = selector;\n  }\n  /**\n  * Get the current HTML element.\n  * @returns {HTMLElementTagNameMap[ElementName]} The current HTML element.\n  */\n  self() {\n    return this.element;\n  }\n  /**\n   * Toggle a class or classes on the current HTML element.\n   * @param {string | Array<string>} className - The class or classes to toggle.\n   * @returns {this} The current instance for chaining.\n   */\n  toggleClass(className) {\n    if (typeof className === \"string\" && className.includes(\" \"))\n      className = className.split(\" \");\n    if (!Array.isArray(className))\n      className = [className];\n    className.forEach((c) => this.element.classList.toggle(c));\n    return this;\n  }\n  /**\n  * Add a class or classes to the current HTML element.\n  * @param {Array<string> | string | (() => string) | (() => Array<string>)} className - The class or classes to add.\n  * @returns {this} The current instance for chaining.\n  */\n  addClass(className) {\n    if (typeof className === \"function\")\n      className = className();\n    if (typeof className === \"string\" && className.includes(\" \"))\n      className = className.split(\" \");\n    if (!Array.isArray(className))\n      className = [className];\n    className.forEach((singleClass) => this.element.classList.add(singleClass));\n    return this;\n  }\n  /**\n   * Remove a class or classes from the current HTML element.\n   * @param {Array<string> | string | (() => string) | (() => Array<string>)} className - The class or classes to remove.\n   * @returns {this} The current instance for chaining.\n   */\n  removeClass(className) {\n    if (typeof className === \"function\")\n      className = className();\n    if (typeof className === \"string\" && className.includes(\" \"))\n      className = className.split(\" \");\n    if (!Array.isArray(className))\n      className = [className];\n    className.forEach((singleClass) => this.element.classList.remove(singleClass));\n    return this;\n  }\n  /**\n   * Check if the current HTML element has a class.\n   * @param {string} className - The class to check.\n   * @returns {boolean} True if the element has the class, false otherwise.\n   */\n  hasClass(className) {\n    return this.element.classList.contains(className);\n  }\n  /**\n  * Replace the current HTML element with a string.\n  * @param {string} string - The string to replace the element with.\n  * @returns {this} The current instance for chaining.\n  */\n  replaceWith(string) {\n    this.element.outerHTML = string;\n    return this;\n  }\n  /**\n   * Replace the current HTML element with a new element.\n   * @template NewElement - The name of the new HTML element tag.\n   * @param {NewElement} tagName - The tag name of the new element.\n   * @param {string | undefined} idForNewElement - The id for the new element.\n   * @returns {El<NewElement>} A new instance of El for the new element.\n   */\n  replaceWithElement(tagName, idForNewElement = void 0) {\n    const newEl = document.createElement(tagName);\n    newEl.id = idForNewElement ?? this.element.id;\n    if (!this.element?.parentNode)\n      throw new Error(\"Element has no parent node, can not replace\");\n    this.element.parentNode.replaceChild(newEl, this.element);\n    return new El(`#${newEl.id}`);\n  }\n  /**\n   * Set the inner HTML of the current HTML element.\n   * @param {string} string - The new inner HTML.\n   * @returns {this} The current instance for chaining.\n   */\n  html(string) {\n    this.element.innerHTML = string;\n    return this;\n  }\n  /**\n   * Empty the inner HTML of the current HTML element.\n   * @returns {this} The current instance for chaining.\n   */\n  empty() {\n    this.element.innerHTML = \"\";\n    return this;\n  }\n  /**\n  * Check or uncheck the current HTML element if it is an input element.\n  * @param {boolean} trueOrFalse - Whether to check or uncheck the element.\n  * @returns {this} The current instance for chaining.\n  * @throws {TypeError} If the current HTML element is not an input element.\n  */\n  check(trueOrFalse) {\n    if (this.element instanceof HTMLInputElement) {\n      this.element.checked = trueOrFalse;\n      return this;\n    }\n    throw new TypeError(`[El::${this.element.id}] You can only use check() on input elements'`);\n  }\n  /**\n  * Get whether the current HTML element is checked if it is an input element.\n  * @returns {boolean} Whether the element is checked.\n  * @throws {TypeError} If the current HTML element is not an input element.\n  */\n  checked() {\n    if (this.element instanceof HTMLInputElement)\n      return this.element.checked;\n    throw new TypeError(`[El::${this.element.id}] You can only use checked() on input elements'`);\n  }\n  /**\n   * Dispatch a click event on the current HTML element.\n   * @returns {this} The current instance for chaining.\n   */\n  click() {\n    this.element.dispatchEvent(\n      new MouseEvent(\"click\", { view: window, bubbles: true, cancelable: false })\n    );\n    return this;\n  }\n  /**\n  * Return the current instance if the expression is true, otherwise return undefined, useful for chaining\n  * @param {boolean} expression - The expression to evaluate.\n  * @returns {this | undefined} The current instance if the expression is true, otherwise null.\n  */\n  if(expression) {\n    return expression ? this : null;\n  }\n  /**\n   * Wrap the current HTML element with a div.\n   * @param {string} classForDiv - The class for the div.\n   * @returns {this} The current instance for chaining.\n   */\n  wrap(classForDiv) {\n    const wrapper = document.createElement(\"div\");\n    wrapper.className = classForDiv;\n    if (!this.element?.parentNode)\n      throw new Error(\"Element has no parent node, can not wrap\");\n    this.element.parentNode.insertBefore(wrapper, this.element);\n    this.element.parentNode.removeChild(this.element);\n    wrapper.appendChild(this.element);\n    return this;\n  }\n  /**\n   * Set the src attribute of the current HTML element if it is an image element.\n   * @param {string} srcString - The new src.\n   * @returns {this} The current instance for chaining.\n   * @throws {TypeError} If the current HTML element is not an image element.\n   */\n  src(srcString) {\n    if (this.element instanceof HTMLImageElement) {\n      this.element.src = srcString;\n    } else {\n      throw new TypeError(`[El::${this.element.id}] You can only use src() on image elements'`);\n    }\n    return this;\n  }\n  /**\n   * Set the alt attribute of the current HTML element if it is an image element.\n   * @param {string} altString - The new alt.\n   * @returns {this} The current instance for chaining.\n   * @throws {TypeError} If the current HTML element is not an image element.\n   */\n  alt(altString) {\n    if (this.element instanceof HTMLImageElement) {\n      this.element.alt = altString;\n    } else {\n      throw new TypeError(`[El::${this.element.id}] You can only use alt() on image elements'`);\n    }\n    return this;\n  }\n  /**\n   * Returns the parent element of the current HTML element.\n   * @returns El<ElementName, StrictTypes>\n   */\n  parent() {\n    const parentElement = this.element.parentElement;\n    if (!parentElement)\n      throw new Error(\"Element has no parent node, can not get parent\");\n    if (!parentElement.id)\n      parentElement.id = `parent-${this.element.id}`;\n    return new El(`#${parentElement?.id}`);\n  }\n  /**\n  * Remove the current HTML element from the DOM.\n  * @returns {this} The current instance for chaining.\n  */\n  remove() {\n    if (!this.element?.parentNode)\n      throw new Error(\"Element has no parent node, can not remove\");\n    this.element.parentNode.removeChild(this.element);\n    return this;\n  }\n  /**\n   * Clear the innerHTML of the current HTML element.\n   * @returns {this} The current instance for chaining.\n   */\n  clear() {\n    this.element.innerHTML = \"\";\n    return this;\n  }\n  /**\n   * Remove specified attributes from the current HTML element.\n   * @param {Array<string> | string} properties - The attributes to remove.\n   * @returns {this} The current instance for chaining.\n   */\n  unset(properties) {\n    if (typeof properties === \"string\")\n      properties = [properties];\n    properties.forEach((key) => {\n      this.element.removeAttribute(key);\n    });\n    return this;\n  }\n  /**\n   * Set specified attributes and their values for the current HTML element.\n   * @param {Record<string, any>} setObj - The attributes and their values to set.\n   * @returns {this} The current instance for chaining.\n   */\n  set(setObj) {\n    Object.entries(setObj).forEach(([key, value]) => {\n      if (!value)\n        return;\n      this.element.setAttribute(key, typeof value === \"string\" ? value : value.toString());\n    });\n    return this;\n  }\n  /**\n   * Get the first child element of the current HTML element.\n   * @returns {Element | undefined} The first child element, or undefined if there are no child elements.\n   */\n  firstChild() {\n    return this.element.firstElementChild;\n  }\n  /**\n   * Append or prepend a child element or HTML string to the current HTML element.\n   * @param {HTMLElement | string} child - The child element or HTML string to append or prepend.\n   * @param {'append' | 'prepend' | null} insertAt - Where to insert the child.\n   * @returns {this} The current instance for chaining.\n   */\n  child(child, insertAt = null) {\n    if (typeof child === \"string\") {\n      if (!insertAt || insertAt === \"append\") {\n        this.element.insertAdjacentHTML(\"beforeend\", child);\n      } else {\n        this.element.insertAdjacentHTML(\"afterbegin\", child);\n      }\n    } else {\n      if (insertAt === \"append\" || insertAt == null) {\n        this.element.append(child);\n      }\n      if (insertAt === \"prepend\") {\n        this.element.prepend(child);\n      }\n    }\n    return this;\n  }\n  /**\n   * Get all child nodes of the current HTML element.\n   * @returns {NodeListOf<ChildNode>} The child nodes.\n   */\n  children() {\n    return this.element.childNodes;\n  }\n  /**\n   * Set the text content of the current HTML element.\n   * @param {string | number | boolean} txt - The text content to set.\n   * @returns {this} The current instance for chaining.\n   */\n  text(txt) {\n    if (!txt)\n      return this;\n    this.element.textContent = txt.toString();\n    return this;\n  }\n  /**\n   * Set the text content of the current HTML element.\n   * @param {string} content - The text content to set.\n   * @returns {this|string|undefined} The current instance for chaining.\n   */\n  textContent(content) {\n    if (!content) {\n      return this.element.textContent;\n    }\n    this.element.textContent = content;\n    return this;\n  }\n  /**\n   * Append a text node as a child of the current HTML element.\n   * @param {string} s - The text to append.\n   * @returns {this} The current instance for chaining.\n   */\n  textChild(s) {\n    const textEl = document.createTextNode(s.toString());\n    this.element.appendChild(textEl);\n    return this;\n  }\n  /**\n   * Set the type attribute of the current HTML element.\n   * @param {string} T - The type attribute to set.\n   * @returns {this} The current instance for chaining.\n   */\n  type(_type) {\n    if (\"type\" in this.element)\n      this.element.setAttribute(\"type\", _type);\n    return this;\n  }\n  /**\n   * Set the name attribute of the current HTML element.\n   * @param {string} N - The name attribute to set.\n   * @returns {this} The current instance for chaining.\n   */\n  name(_name) {\n    if (\"name\" in this.element)\n      this.element.name = _name;\n    return this;\n  }\n  /**\n  * Set the type attribute of the current HTML element.\n  * @param {string} type - The type attribute to set.\n  * @returns {this} The current instance for chaining.\n  */\n  input(type) {\n    if (\"name\" in this.element)\n      this.element.name = this.element.id;\n    if (\"type\" in this.element)\n      this.element.setAttribute(\"type\", type);\n    return this;\n  }\n  /**\n   * Set the htmlFor attribute of the current HTML element.\n   * @param {string} elementTheLabelIsFor - The id of the element the label is for.\n   * @returns {this} The current instance for chaining.\n   */\n  htmlFor(elementTheLabelIsFor) {\n    if (\"htmlFor\" in this.element)\n      this.element.setAttribute(\"for\", elementTheLabelIsFor);\n    return this;\n  }\n  /**\n  * Set or retrieving the id attribute of the current HTML element.\n  * @param {string | undefined} idForEl - The id attribute to set.\n  * @returns {this | string} The current instance for chaining or the id value.\n  */\n  id(idForEl) {\n    if (!idForEl)\n      return this.element.id;\n    this.element.id = idForEl;\n    return this;\n  }\n  /**\n   * Get or set the value of the current HTML element.\n   * @param {string} newVal - The new value to set.\n   * @returns {this | string} The current instance for chaining or the value.\n   */\n  val(newVal) {\n    if (this.element instanceof HTMLInputElement || this.element instanceof HTMLSelectElement || this.element instanceof HTMLTextAreaElement || this.element instanceof HTMLOptionElement || this.element instanceof HTMLProgressElement) {\n      if (newVal === void 0 || newVal === null)\n        return this.element.value;\n      this.element.value = newVal instanceof Date ? `${newVal.getFullYear()}-${newVal.getMonth() + 1}-${newVal.getDate()}` : typeof newVal === \"string\" ? newVal : newVal.toString();\n      return this;\n    }\n    throw new TypeError(`[El::${this.element.id}] You can only use val() on input / select / text area / progress elements'`);\n  }\n  /**\n   * Get the value of a data attribute of the current HTML element.\n   * @param {string} dataSuffix - The suffix of the data attribute.\n   * @returns {string | null} The value of the data attribute.\n   */\n  data(dataSuffix) {\n    return this.element.getAttribute(`data-${dataSuffix}`);\n  }\n  /**\n   * Get the dataset of the current HTML element.\n   * @returns {DOMStringMap} The dataset.\n   */\n  dataset() {\n    return this.element.dataset;\n  }\n  /**\n   * Add an event listener to the current HTML element.\n   * @param {string} event - The event name to listen for.\n   * @param {EventListenerOrEventListenerObject} listener - The event listener function or object.\n   * @param {boolean | AddEventListenerOptions} options - The options for the event listener.\n   * @returns {this} The current instance for chaining.\n   */\n  on(event, listener, options) {\n    this.element.addEventListener(event, listener, options);\n    return this;\n  }\n  /**\n  * Add an event listener to the current HTML element that will be triggered only once.\n  * @param {string} eventName - The name of the event to listen for.\n  * @param {(event: Event) => void | Promise<void>} eventHandler - The event handler function.\n  * @returns {this} The current instance for chaining.\n  */\n  once(eventName, eventHandler) {\n    this.element.addEventListener(eventName, eventHandler, { once: true });\n    return this;\n  }\n  /**\n  * Dispatch a custom event on the current HTML element.\n  * @param {string} eventName - The name of the event to dispatch.\n  * @param {any} detail - The event detail.\n  * @returns {this} The current instance for chaining.\n  */\n  now(eventName, detail) {\n    this.element.dispatchEvent(new CustomEvent(eventName, {\n      detail\n    }));\n    return this;\n  }\n  /**\n   * Remove an event listener from the current HTML element.\n   * @param {string} event - The event name to remove the listener from.\n   * @param {EventListenerOrEventListenerObject} listener - The event listener function or object to remove.\n   * @param {boolean | EventListenerOptions} options - The options for the event listener.\n   * @returns {this} The current instance for chaining.\n   */\n  off(event, listener, options) {\n    this.element.removeEventListener(event, listener, options);\n    return this;\n  }\n  /**\n   * Trigger an event on the current HTML element.\n   * @param {string} event - The event name to trigger.\n   * @param {CustomEventInit} options - The options for the custom event.\n   * @returns {this} The current instance for chaining.\n   */\n  trigger(event, options) {\n    this.element.dispatchEvent(new CustomEvent(event, options));\n    return this;\n  }\n  /**\n  * Trigger a change event on the current HTML element.\n  * @returns {this} The current instance for chaining.\n  */\n  triggerChange() {\n    if (this.element instanceof HTMLSelectElement) {\n      const event = document.createEvent(\"HTMLEvents\");\n      event.initEvent(\"change\", true, true);\n      this.element.dispatchEvent(event);\n      return this;\n    }\n    throw new TypeError(`[El::${this.element.id}] You can only use triggerChange() on select elements'`);\n  }\n  /**\n  * Find all elements with the specified tag inside the current HTML element.\n  * @param {string} tag - The tag name to search for.\n  * @returns {NodeList} A NodeList containing all matching elements.\n  */\n  find(tag) {\n    return this.element.querySelectorAll(tag);\n  }\n  /**\n   * Dispatch a custom event on the current HTML element.\n   * @param {string} eventName - The name of the event to dispatch.\n   * @returns {this} The current instance for chaining.\n   */\n  dispatchEvent(eventName) {\n    this.element.dispatchEvent(new Event(eventName));\n    return this;\n  }\n  /**\n   * Execute a callback function with the current HTML element's id as the argument.\n   * @param {(id: idString) => any} cb - The callback function to execute.\n   * @returns {this} The current instance for chaining.\n   */\n  nestFrom(cb) {\n    cb(`#${this.element.id}`);\n    return this;\n  }\n}\nfunction el(selector) {\n  return new El(selector);\n}\n\nexport { El, el };\n","import { El } from './El.mjs';\n\nfunction isIDdElementName(selector) {\n  return selector.includes(\"#\") && selector.split(\"#\").length === 2;\n}\nconst mote = (tagName, appendTo, fromWithin) => {\n  const m = new Mote(tagName);\n  const e = m.appendTo(appendTo);\n  if (fromWithin)\n    m.appendWithin(fromWithin);\n  return e;\n};\nclass Mote extends El {\n  constructor(selector) {\n    if (typeof selector !== \"string\")\n      throw new Error(`[Mote] ~> |ERROR| Selector must be a string`, { cause: selector });\n    if (isIDdElementName(selector)) {\n      const { id, tagName } = {\n        id: selector.split(\"#\")[1],\n        tagName: selector.split(\"#\")[0]\n      };\n      super(() => document.createElement(tagName));\n      this.id(id);\n      return;\n    }\n    super(() => document.createElement(selector));\n  }\n  appendTo(selector) {\n    if (selector instanceof HTMLElement || selector instanceof HTMLTemplateElement || selector instanceof ShadowRoot || selector instanceof DocumentFragment || selector instanceof Document) {\n      selector.appendChild(this.element);\n      return this;\n    }\n    const target = document.querySelector(selector);\n    if (!target)\n      throw new Error(`[Mote] ~> ${this.element.tagName} |ERROR| Could not find element with selector ${selector}`);\n    target.appendChild(this.element);\n    return this;\n  }\n  appendToBody() {\n    document.body.appendChild(this.element);\n    return this;\n  }\n  appendToHead() {\n    document.head.appendChild(this.element);\n    return this;\n  }\n  appendToRoot() {\n    document.documentElement.appendChild(this.element);\n    return this;\n  }\n  appendWithin(cb) {\n    Promise.resolve(cb(`#${this.element.id}`)).then((e) => {\n      if (typeof e === \"undefined\")\n        return;\n      console.debug(`[Mote:within] -> Nest detected a async cb that returned a value to it! This can't be right!`, e);\n    }).catch((err) => {\n      console.error(`[Mote:within] -> Error in async cb`, err);\n    });\n  }\n}\n\nexport { Mote, mote };\n","import consola from \"consola\";\nimport type { DataModel } from \"src/types/foundry/common/abstract/module.mjs\";\n\ntype HookableEvents = \"renderChatLog\" | \"renderChatMessage\";\ntype HookEvent = (\n  app: Application,\n  html: JQuery,\n  data?: any,\n) => void | Promise<void>;\n\n// Define types for the rules\ntype RuleType = \"Number\" | \"Boolean\" | \"String\" | \"Object\" | \"Array\" | \"Color\";\ntype RuleValue =\n  | number\n  | boolean\n  | string\n  | Record<string, unknown>\n  | unknown[]\n  | string;\n\ninterface Rule {\n  name: string;\n  label?: string;\n  icon?: string;\n  restricted?: boolean;\n  onChange?: (value: unknown) => void | Promise<void>;\n  requiresReload?: boolean;\n}\n\n// Define rule-specific types\ntype NumberRule = Rule & {\n  type: typeof Number;\n  range?: { min?: number; max?: number; step?: number };\n  defaultValue?: number;\n};\ntype BooleanRule = Rule & { type: typeof Boolean; defaultValue?: boolean };\ntype StringRule = Rule & { type: typeof String; defaultValue?: string };\ntype ObjectRule = Rule & {\n  type: typeof Object;\n  defaultValue?: Record<string, unknown>;\n};\ntype ArrayRule = Rule & {\n  type: typeof Array;\n  defaultValue?: unknown[];\n};\ntype ColorRule = Rule & { type: typeof Color; defaultValue?: string };\n\n// Define the Rules union type\ntype Rules =\n  | NumberRule\n  | BooleanRule\n  | StringRule\n  | ObjectRule\n  | ArrayRule\n  | ColorRule;\n\ninterface TomeRuleConstructor {\n  globalSettings?: Array<Rules & { scope?: \"world\" | \"client\" }>;\n  clientSettings?: Array<Rules & { scope?: \"world\" | \"client\" }>;\n}\n\nexport abstract class Tome {\n  public moduleName: string;\n  public moduleDescription: string;\n  public settings: Array<Rules & { scope: \"world\" | \"client\" }> = [];\n  public hooks = new Map([] as Array<[HookableEvents, HookEvent]>);\n  public DEBUG?: boolean = false;\n\n  constructor(\n    pTome: Pick<Tome, \"moduleDescription\" | \"moduleName\"> & {\n      settings?: TomeRuleConstructor;\n      hooks?: Tome[\"hooks\"];\n      DEBUG?: boolean;\n    },\n  ) {\n    this.moduleName = pTome.moduleName;\n    this.moduleDescription = pTome.moduleDescription;\n    if (pTome?.settings) {\n      this.settings =\n        pTome.settings.globalSettings?.map((s) => {\n          s.scope = \"world\";\n          return s as Rules & { scope: \"world\" };\n        }) ?? [];\n\n      this.settings.push(\n        ...(pTome.settings.clientSettings?.map((s) => {\n          s.scope = \"client\";\n          return s as Rules & { scope: \"client\" };\n        }) ?? []),\n      );\n    }\n    this.DEBUG = pTome?.DEBUG ?? false;\n  }\n\n  public initializeSettings() {\n    this.settings.forEach((setting) => {\n      if (this.DEBUG) {\n        consola.info(\n          `[TOME::${this.moduleName}] => Registering ${setting.scope} setting: ${setting.name}`,\n        );\n      }\n\n      game.settings?.register(this.moduleName, setting.name, {\n        name: setting.name,\n        hint: setting.label,\n        scope: setting.scope,\n        config: true,\n        default: setting?.defaultValue,\n        type: setting.type as unknown as DataModel<any, any>,\n        // @ts-ignore\n        choices: setting?.choices,\n        // @ts-ignore\n        range: setting?.range,\n        onChange: setting.onChange,\n        requiresReload: setting.requiresReload,\n      });\n    });\n\n    return this;\n  }\n\n  public addHook(\n    event: HookableEvents,\n    callback: HookEvent,\n    overwrite: boolean = false,\n  ) {\n    if (!this.hooks.has(event) || overwrite) {\n      this.hooks.set(event, callback);\n    } else {\n      consola.warn(`Hook for event \"${event}\" already exists.`);\n    }\n  }\n\n  public registerHooks() {\n    this.hooks.forEach((callback, event) => {\n      Hooks.on(event, callback);\n      if (this.DEBUG) consola.info(`Registered hook for event: ${event}`);\n    });\n\n    return this;\n  }\n\n  // Method to register global settings\n  public registerSetting(rule: Rules & { scope: \"world\" | \"client\" }): Tome {\n    switch (rule.type) {\n      case Number:\n        this.settings.push({ ...rule } as NumberRule & {\n          scope: \"world\" | \"client\";\n        });\n        break;\n      case Boolean:\n        this.settings.push({ ...rule } as BooleanRule & {\n          scope: \"world\" | \"client\";\n        });\n        break;\n      case String:\n        this.settings.push({ ...rule } as StringRule & {\n          scope: \"world\" | \"client\";\n        });\n        break;\n      case Object:\n        this.settings.push({ ...rule } as ObjectRule & {\n          scope: \"world\" | \"client\";\n        });\n        break;\n      case Array:\n        this.settings.push({ ...rule } as ArrayRule & {\n          scope: \"world\" | \"client\";\n        });\n        break;\n      case Color:\n        this.settings.push({ ...rule } as ColorRule & {\n          scope: \"world\" | \"client\";\n        });\n        break;\n      default:\n        throw new Error(`Unsupported rule type: ${rule.type}`);\n    }\n\n    return this;\n  }\n\n  public registerSettings(\n    rules: Array<Rules & { scope: \"world\" | \"client\" }>,\n  ): Tome {\n    rules.forEach((rule) => {\n      this.registerSetting(rule);\n    });\n    return this;\n  }\n\n  // Utility function to expand object rules\n  static expandObject(value: unknown): Record<string, unknown> {\n    if (typeof value === \"object\" && value !== null) {\n      return Object.entries(value).reduce(\n        (acc, [key, val]) => {\n          if (typeof val === \"string\") {\n            try {\n              acc[key] = JSON.parse(val);\n            } catch (e) {\n              acc[key] = val;\n            }\n          } else {\n            acc[key] = val;\n          }\n          return acc;\n        },\n        {} as Record<string, unknown>,\n      );\n    }\n    throw new Error(`Expected object but received ${typeof value}`);\n  }\n\n  // Method to update settings\n  public updateSettings(): void {\n    const globalData = game.settings?.get(this.moduleName, \"global\") as Record<\n      string,\n      unknown\n    >;\n    const clientData = game.settings?.get(\n      this.moduleName,\n      game!.user!.id,\n    ) as Record<string, unknown>;\n\n    // Update global settings\n    this.settings.forEach((rule) => {\n      if (rule.scope === \"world\") {\n        rule?.onChange?.(globalData[rule.name]);\n      } else if (rule.scope === \"client\") {\n        rule?.onChange?.(clientData[rule.name]);\n      }\n    });\n  }\n\n  // Method to save settings\n  public saveSettings(): void {\n    const rules = {\n      world: {},\n      client: {},\n    } as Record<\"world\" | \"client\", Record<string, RuleValue>>;\n\n    this.settings.forEach((rule) => {\n      switch (rule.type) {\n        case Number:\n          rules[rule.scope][rule.name] = Number(rule.defaultValue);\n          break;\n        case Boolean:\n          rules[rule.scope][rule.name] = Boolean(rule.defaultValue);\n          break;\n        case String:\n          rules[rule.scope][rule.name] = String(rule.defaultValue);\n          break;\n        case Object:\n          rules[rule.scope][rule.name] = JSON.stringify(\n            Tome.expandObject(rule.defaultValue),\n          );\n          break;\n        case Array:\n          rules[rule.scope][rule.name] = JSON.stringify(\n            JSON.parse(String(rule.defaultValue)),\n          );\n          break;\n        case Color:\n          rules[rule.scope][rule.name] = String(rule.defaultValue);\n          break;\n      }\n    });\n\n    game.settings?.register(this.moduleName, \"global\", rules.world);\n    game.settings?.register(this.moduleName, game!.user!.id, rules.client);\n  }\n}\n","import { El, Mote } from \"@magik_io/mote\";\nimport { Tome } from \"../../class/Tome\";\nimport gsap, { TweenMax } from \"/scripts/greensock/esm/all.js\";\n\nexport class Toasted extends Tome {\n  public toasts: string[] = [];\n  public maxMessagesOnScreen = 5;\n  public alwaysShowNotifications = false;\n  public fadeOutDelay = 3000;\n\n  constructor(DEBUG = false) {\n    super({\n      moduleName: \"Toasted\",\n      moduleDescription: \"A simple toast notification system\",\n      hooks: new Map([\n        [\n          \"renderChatLog\",\n          async (app, html) => {\n            if (document.body.classList.contains(\"stream\")) return;\n            const chatTab = html[0];\n\n            new Mote(\n              html[0]\n                .querySelector(\"#chat-log\")!\n                .cloneNode(false) as unknown as `div#${string}`,\n            )\n              .addClass(this.moduleName)\n              .on(\"click\", (ev) => this.handleMouseEvent(ev))\n              .on(\"contextmenu\" as \"click\", (ev) => this.handleMouseEvent(ev))\n              .appendToBody();\n\n            Hooks.on(\"renderChatMessage\", (app, html, options) => {\n              if (\n                chatTab.classList.contains(\"active\") &&\n                !chatTab.closest(\"#sidebar\")?.classList.contains(\"collapsed\")\n              ) {\n                return;\n              }\n\n              const newNode = html[0].cloneNode(true);\n              this.addMessage(newNode as ChildNode);\n            });\n          },\n        ],\n      ]),\n      DEBUG\n    });\n\n    this.registerSettings([\n      {\n        name: \"toastDuration\",\n        label: \"How long would you like a message to stay on screen?\",\n        type: Number,\n        defaultValue: this.fadeOutDelay,\n        range: { min: 1000, max: 10000, step: 250 },\n        icon: \"clock\",\n        scope: \"client\",\n        restricted: false,\n        onChange: (value) => {\n          this.fadeOutDelay = Number(value);\n        },\n      },\n      {\n        name: \"maxMessages\",\n        label: \"How many messages would you like to see on screen (at most)?\",\n        type: Number,\n        defaultValue: this.maxMessagesOnScreen,\n        range: { min: 1, max: 10, step: 1 },\n        icon: \"list\",\n        scope: \"client\",\n        restricted: false,\n        onChange: (value) => {\n          this.maxMessagesOnScreen = Number(value);\n        },\n      },\n      {\n        name: \"alwaysShowNotifications\",\n        label: \"Always show notifications\",\n        type: Boolean,\n        defaultValue: this.alwaysShowNotifications,\n        icon: \"eye\",\n        scope: \"client\",\n        restricted: false,\n        onChange: (value) => {\n          this.alwaysShowNotifications = Boolean(value);\n        },\n      },\n    ]);\n  }\n\n  protected removeMessage(\n    node: ChildNode,\n    { time = 0.3, delay = this.fadeOutDelay } = {},\n  ) {\n    if (this.fadeOutDelay < 0) return;\n\n    TweenMax.to(node, time, {\n      opacity: 0,\n      height: 0,\n      delay,\n      onComplete: () => {\n        node.remove();\n      },\n    });\n  }\n\n  static expandSidebarInstant(sidebar: HTMLDivElement) {\n    if (!sidebar)\n      throw new Error(\n        \"[Toasted:expandSidebarInstant] -> Error: Sidebar element was not passed\",\n      );\n\n    const sideB = new El<\"div\", true>(sidebar)\n      .removeClass(\"collapsed\")\n      .unset([\"width\", \"height\"]);\n    ui.sidebar._collapsed = false;\n\n    const icon = sideB.element.querySelector(\n      \"#sidebar-tabs a.collapse i\",\n    ) as HTMLDivElement;\n\n    if (!icon)\n      throw new Error(\n        \"[Toasted:expandSidebarInstant] -> Error: Icon element was not found\",\n      );\n\n    new El(icon).removeClass(\"fa-caret-left\").addClass(\"fa-caret-right\");\n\n    Hooks.callAll(\"sidebarCollapse\", ui.sidebar, ui.sidebar._collapsed);\n  }\n\n  static findTarget(\n    card: HTMLDivElement,\n    event: MouseEvent,\n    messageID: string,\n  ) {\n    const cardRect = card.getBoundingClientRect();\n    const popupRect = document\n      .querySelector(`.${this.name}`)!\n      .getBoundingClientRect();\n    let x = event.clientX - popupRect.left + cardRect.left,\n      y = event.clientY - popupRect.top + cardRect.top;\n\n    let target = document.elementFromPoint(x, y);\n    let closestMessage = target?.closest(\".message\");\n    let closestMessageID = new El(closestMessage as HTMLDivElement).data(\n      \"messageId\",\n    );\n\n    if (target && closestMessageID === messageID) {\n      return { target, x, y };\n    }\n    const targetRect = (event.target as HTMLElement).getBoundingClientRect();\n    // If click element is obscured, rasterize the target and test if some point is free\n    // doing 10 steps in each direction, with a minimum of 5 px is some arbitrary number chosen, but i think its quite okayish in regards of accuracy and performance\n    const dx = Math.min(targetRect.width / 10, 5);\n    const dy = Math.min(targetRect.height / 10, 5);\n    for (let vert = targetRect.top + 1; vert < targetRect.bottom; vert += dy) {\n      y = vert - popupRect.top + cardRect.top;\n      for (let hor = targetRect.left + 1; hor < targetRect.right; hor += dx) {\n        x = hor - popupRect.left + cardRect.left;\n        target = document.elementFromPoint(x, y);\n        closestMessage = target?.closest(\".message\");\n        closestMessageID = new El(closestMessage as HTMLDivElement).data(\n          \"messageId\",\n        );\n\n        if (target && closestMessageID === messageID) return { target, x, y };\n      }\n    }\n\n    return { target: null, x, y };\n  }\n\n  protected delegateEvent(n: Node, ev: MouseEvent) {\n    const node = new El(n as HTMLDivElement);\n    const card = new El(\"#chat-log\").element.querySelector(\n      `[data-message-id=\"${node.data(\"messageId\")}\"]`,\n    ) as HTMLDivElement;\n    // Card not found? strange.. just return\n    if (!card) return;\n    card.scrollIntoView();\n    // Get target element on \"real\" chat-card\n    const { target, x, y } = Toasted.findTarget(\n      card,\n      ev,\n      node.data(\"messageId\")!,\n    );\n    // If for some reason wrong one was found.. just do nothing\n    if (!target) return;\n\n    const event = new MouseEvent(ev.type, {\n      bubbles: true,\n      // @ts-ignore\n      canceable: true,\n      shiftKey: ev.shiftKey,\n      metaKey: ev.metaKey,\n      ctrlKey: ev.ctrlKey,\n      clientX: x,\n      clientY: y,\n    });\n    target.dispatchEvent(event);\n  }\n\n  protected handleMouseEvent(ev: MouseEvent) {\n    const targetElement = ev.target as HTMLElement;\n    const node = targetElement?.closest(\".message\");\n    if (!node) return;\n    // activate chat\n    const tabBtn = document.getElementById(\"sidebar-tabs\")?.children[0];\n    if (tabBtn && !tabBtn.classList.contains(\"active\")) {\n      tabBtn.dispatchEvent(\n        // @ts-ignore\n        new MouseEvent(\"click\", { bubbles: true, canceable: true }),\n      );\n    }\n\n    const sidebar = tabBtn?.closest(\"#sidebar\");\n    if (sidebar && sidebar?.classList.contains(\"collapsed\")) {\n      Toasted.expandSidebarInstant(sidebar as HTMLDivElement);\n    }\n    this.delegateEvent(node, ev);\n    node.remove();\n  }\n\n  protected addMessage(node: ChildNode) {\n    const div = new El(`.${this.moduleName}`);\n    const messageId = div.data(\"messageId\");\n    if (!messageId) throw new Error(\"Message ID not found\");\n\n    const oldNode = div.element.querySelector(\n      `[data-message-id=\"${messageId}\"]`,\n    );\n    if (oldNode) return this.updateMessage(node, oldNode);\n    if (div.children.length >= this.maxMessagesOnScreen)\n      div.element.firstElementChild?.remove();\n\n    div.child(node as HTMLDivElement, \"append\");\n    TweenMax.from(node, 0.3, {\n      height: 0,\n      onComplete: () => {\n        new El(node as HTMLDivElement).set({ height: \"\" });\n        this.removeMessage(node);\n      },\n    });\n  }\n\n  protected updateMessage(newNode: ChildNode, oldNode: Node) {\n    oldNode.parentNode?.replaceChild(newNode, oldNode);\n    this.removeMessage(newNode);\n  }\n}\n","import consola from 'consola';\nimport { Toasted } from \"./submodules/toasted/Toasted\";\n\n\nclass Wonderlost {\n  public tomes = new Map([\n    ['Toasted', Toasted],\n  ])\n\n  constructor(public DEBUG = false) {\n    consola.info(\"Wonderlost | Initializing\");\n    this.initializeTomes();\n\n  }\n\n  initializeTomes() {\n    this.tomes.forEach((tome, tomeName) => {\n      const t = new tome(this.DEBUG).initializeSettings().registerHooks();\n\n      if (this.DEBUG) {\n        consola.info(`Wonderlost | Initialized ${tome.name}`);\n      }\n    })\n  }\n}\n\nHooks.once(\"init\", async function () {\n  consola.start(\"Wonderlost | Initialized\");\n  new Wonderlost(true);\n  consola.success(\"Wonderlost | Ready\");\n});\n\nHooks.once(\"ready\", async function () { });\n\n"],"names":["LogLevels","silent","Number","NEGATIVE_INFINITY","fatal","error","warn","log","info","success","fail","ready","start","box","debug","trace","verbose","POSITIVE_INFINITY","LogTypes","level","isObject","value","_defu","baseObject","defaults","namespace","merger","object","Object","assign","key","Array","isArray","toString","defu","arguments_","reduce","p","c","isLogObj","arg","obj","prototype","call","message","args","stack","paused","queue","Consola","constructor","options","types","this","_normalizeLogLevel","reporters","throttle","throttleMin","formatOptions","date","colors","compact","type","_wrapLogFn","raw","mockFn","mockTypes","_lastLog","prompt","opts","Error","create","instance","_mockFn","withDefaults","withTag","tag","addReporter","reporter","push","removeReporter","i","indexOf","splice","setReporters","wrapAll","wrapConsole","wrapStd","restoreAll","restoreConsole","restoreStd","console","_wrapStream","stdout","stderr","stream","__write","write","data","String","trim","_restoreStream","pauseLogs","resumeLogs","_queue","item","_logFn","isRaw","logObj","Date","length","unshift","additional","split","join","toLowerCase","resolveLog","newLog","repeated","count","args2","_log","clearTimeout","timeout","diffTime","time","getTime","serializedLog","JSON","stringify","isSameLog","serialized","setTimeout","input","defaultLevel","add","remove","clear","withScope","mock","pause","resume","BrowserReporter","defaultColor","levelColorMap","typeColorMap","_getLogFn","__error","__warn","__log","consoleLogFn","style","badge","filter","Boolean","slice","consola","createConsola$1","options2","Promise","resolve","confirm","createConsola","__defProp","defineProperty","__publicField","enumerable","configurable","writable","__defNormalProp","El","selector","element","document","querySelector","self","toggleClass","className","includes","forEach","classList","toggle","addClass","singleClass","removeClass","hasClass","contains","replaceWith","string","outerHTML","replaceWithElement","tagName","idForNewElement","newEl","createElement","id","parentNode","replaceChild","html","innerHTML","empty","check","trueOrFalse","HTMLInputElement","checked","TypeError","click","dispatchEvent","MouseEvent","view","window","bubbles","cancelable","expression","wrap","classForDiv","wrapper","insertBefore","removeChild","appendChild","src","srcString","HTMLImageElement","alt","altString","parent","parentElement","unset","properties","removeAttribute","set","setObj","entries","setAttribute","firstChild","firstElementChild","child","insertAt","insertAdjacentHTML","append","prepend","children","childNodes","text","txt","textContent","content","textChild","s","textEl","createTextNode","_type","name","_name","htmlFor","elementTheLabelIsFor","idForEl","val","newVal","HTMLSelectElement","HTMLTextAreaElement","HTMLOptionElement","HTMLProgressElement","getFullYear","getMonth","getDate","dataSuffix","getAttribute","dataset","on","event","listener","addEventListener","once","eventName","eventHandler","now","detail","CustomEvent","off","removeEventListener","trigger","triggerChange","createEvent","initEvent","find","querySelectorAll","Event","nestFrom","cb","Mote","cause","isIDdElementName","super","appendTo","HTMLElement","HTMLTemplateElement","ShadowRoot","DocumentFragment","Document","target","appendToBody","body","appendToHead","head","appendToRoot","documentElement","appendWithin","then","e","catch","err","Tome","moduleName","moduleDescription","settings","hooks","Map","DEBUG","pTome","globalSettings","map","scope","clientSettings","initializeSettings","setting","game","register","hint","label","config","default","defaultValue","choices","range","onChange","requiresReload","addHook","callback","overwrite","has","registerHooks","Hooks","registerSetting","rule","Color","registerSettings","rules","expandObject","acc","parse","updateSettings","globalData","get","clientData","user","saveSettings","world","client","Toasted","toasts","maxMessagesOnScreen","alwaysShowNotifications","fadeOutDelay","async","app","chatTab","cloneNode","ev","handleMouseEvent","closest","newNode","addMessage","min","max","step","icon","restricted","removeMessage","node","delay","TweenMax","to","opacity","height","onComplete","expandSidebarInstant","sidebar","sideB","ui","_collapsed","callAll","findTarget","card","messageID","cardRect","getBoundingClientRect","popupRect","x","clientX","left","y","clientY","top","elementFromPoint","closestMessage","closestMessageID","targetRect","dx","Math","width","dy","vert","bottom","hor","right","delegateEvent","n","scrollIntoView","canceable","shiftKey","metaKey","ctrlKey","targetElement","tabBtn","getElementById","div","messageId","oldNode","updateMessage","from","Wonderlost","tomes","initializeTomes","tome","tomeName"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}